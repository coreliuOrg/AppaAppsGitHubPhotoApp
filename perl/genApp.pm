#!/usr/bin/perl
#-------------------------------------------------------------------------------
# Generate an an Appa Apps Educational Android App on GitHub
# Philip R Brenan at gmail dot com, Appa Apps Ltd Inc., 2020
#-------------------------------------------------------------------------------
use warnings FATAL => qw(all);
use strict;
use Carp;
use Data::Dump qw(dump);
use Data::Table::Text qw(:all);
use Android::Build;
use feature qw(say current_sub);

lll "GenApp 2";

sub home    {$ENV{HOME}}                                                        # Home folder
sub develop {home =~ m(\A/home/phil\Z) ? 1 : 0}                                 # Developing
sub homeDir {develop ? fpd(home, q(AppaAppsGitHubPhotoApp)) : &gitHubHome}      # Working folder
sub homeJava             {fpd(homeDir, q(java))}                                # Java files
sub appActivity          {qq(Activity)}                                         # Name of Activity = $activity.java file containing onCreate() for this app
sub appDebuggable        {0}                                                    # Add debugabble to app manifest if true
sub androidSdk           {fpd(develop ? home : homeDir, q(android), q(sdk))}    # Android sdk folder
sub buildVersion         {q(25.0.3)}                                            # Build tools version
sub buildTools           {fpd(androidSdk, q(build-tools), buildVersion)}        # Folder containing build tools - often found in the Android sdk
sub platform             {fpd(androidSdk, qw(platforms android-25))}            # Android platform - the folder that contains android.jar
sub platformTools        {fpd(androidSdk, qw(platform-tools))}                  # Android platform tools - the folder that contains 𝗮𝗱𝗯
sub sdkLevels            {[15,25]}                                              # minSdkLevel, targetSdkLevel
sub aapt                 {fpf(buildTools, q(aapt))}                             # Location of aapt so we can list an apk
sub keyAlias             {q(key)}                                               # Alias of key to be used to sign these apps
sub keyStorePwd          {q(121212)}                                            # Password for keystore
sub keyStoreFolder       {fpd(homeDir, q(keys))}                                # Key store folder
sub keyStoreFile         {fpf(keyStoreFolder, q(key.keystore))}                 # Key store file
sub domainReversed       {qq(com.appaapps)}                                     # Domain name prefix in reverse order for these apps
sub appPackage           {domainReversed.q(.photoapp)}                          # App package name
sub iconSize             {64}                                                   # Size of icon used on web page showing available Fjori generated apps
sub jpxTileSize          {256}                                                  # Size of jpx tiles
sub jpxTilesMax          {4}                                                    # Maximum number of jpx tiles in either direction. Larger images are scaled down first to meet this requirement.  This prevents the creation of huge apps that crash when played.
sub maxImageSize         {1024}                                                 # Maximum size of normal images - otherwise Android runs out of memory
sub maxImageSizeGH       {1024*1024}                                            # Maximum size of an image on GitHub via GitHub::Crud.pm
sub minimumImageFileSize {1e3}                                                  # Minimum size of an image file - suspect that something has gone wrong if it is smaller then this number of bytes
sub minimumSoundFileSize {1e3}                                                  # Minimum size of a sound file - suspect that something has gone wrong if it is smaller then this number of bytes
sub appBuildFolder       {fpd(homeDir, qw(build))}                              # This folder is where Android::Build builds the Android code.
sub appImages            {fpd(appBuildFolder, qw(assets images))}               # Images in build
sub sourceImages         {fpd(homeDir, qw(images))}                             # Images supplied by user
sub sourceJava           {fpd(homeDir, qw(java))}                               # Source java folder
sub sourceActivity       {fpe(sourceJava, qw(Activity java))}                   # Source java - Activity source file
sub sourceJavaFiles      {map{fpe(sourceJava, @$_, q(java))}                    # Source java files
  [qw(appDescription       AppDescription      )],
  [qw(appState             AppState            )],
  [qw(choices              Choices             )],
  [qw(coloursTransformed   ColoursTransformed  )],
  [qw(congratulations      Congratulations     )],
  [qw(email                Email               )],
  [qw(filter               Filter              )],
  [qw(fourier              Fourier             )],
  [qw(log                  Log                 )],
  [qw(maths                Maths               )],
  [qw(midi                 MidiTracks          )],
  [qw(orderedStack         OrderedStack        )],
  [qw(photoBytes           PhotoBytes          )],
  [qw(photoBytes           PhotoBytesJP        )],
  [qw(photoBytes           PhotoBytesJpx       )],
  [qw(prompts              Prompts             )],
  [qw(randomChoice         RandomChoice        )],
  [qw(rightWrongTracker    RightWrongTracker   )],
  [qw(save                 Save                )],
  [qw(say                  Say                 )],
  [qw(sha256               Sha256              )],
  [qw(sinkSort             SinkSort            )],
  [qw(sound                Midi                )],
  [qw(sound                Speech              )],
  [qw(svg                  Svg                 )],
  [qw(themes               Themes              )],
  [qw(time                 Time                )],
 }

sub appPermissions {qw(INTERNET ACCESS_NETWORK_STATE WRITE_EXTERNAL_STORAGE)}   # App permissions - WES only required for earlier androids

sub icon                                                                        # Icon
 {my $i = fpf(sourceImages, qw(icon));
  my $j = fpe($i, q(jpg)); return $j if -e $j;
  my $p = fpe($i, q(png)); return $p if -e $p;
  undef
 }

sub githubRepo                                                                  # Icon
 {return "AppaAppsGitHubPhotoApp" if develop;
  my $s = $ENV{GITHUB_REPOSITORY};
  (split m(/), $s)[-1];
 }

sub gitHubHome                                                                  # Github home
 {my $d = githubRepo;
  fpd(q(/home/runner/work), $d, $d)
  }

sub githubUserDotRepo                                                           # Icon
 {return "AppaAppsGitHub.PhotoApp" if develop;
  $ENV{GITHUB_REPOSITORY} =~ s(/) (.)gsr
 }

sub imageFiles(@) {grep {m(images/.*\.(jpg|png)\Z)} @_}                         # Image files

sub squeezeFileName($)                                                          # Remove weird characters from a file name
 {my ($file) = @_;                                                              # File name
  $file =~ s(\s) ()gsr =~ s([^a-zA-Z0-9/._-]) ()gsr;
 }

sub convertImages(@)                                                            # Convert images to jpx
 {for my $source(@_)
   {my $target = swapFilePrefix $source, sourceImages, appImages;
    my $t      = squeezeFileName setFileExtension $target;
    convertImageToJpx($source, $t, jpxTileSize, jpxTilesMax);                   # Convert image to jpx
   }
 }

sub createKey                                                                   # Create a key for the app
 {my $k = keyStoreFile;
  return if -e $k;
  makePath($k);
  my $c = qq(keytool -genkey -v -keystore $k -keyalg RSA -keysize 2048 -validity 10000 -storepass 121212 -alias key -dname 'CN=a, OU=a, O=a, L=a, ST=a, C=a');
  lll qx($c);
 }

sub compileApp                                                                  # Compile the app
 {my $a = &Android::Build::new();                                               # Android build details
  $a->activity       = appActivity;                                             # Name of Activity = $activity.java file containing onCreate() for this app
  $a->buildFolder    = appBuildFolder;                                          # This folder is removed after the Android build so we cannot use the same build area as AppaAppsPhotoApp
  $a->buildTools     = buildTools;                                              # Build tools folder
  $a->debug          = appDebuggable;                                           # Whether the app is debuggable or not
# $a->device         = device;                                                  # Device to install on
  $a->keyAlias       = keyAlias;                                                # Alias of key to be used to sign this app
  $a->keyStoreFile   = keyStoreFile;                                            # Keystore location
  $a->keyStorePwd    = keyStorePwd;                                             # Password for keystore
  $a->icon           = icon;                                                    # Image that will be scaled to make an icon using Imagemagick
# $a->libs           = $appLibs;                                                # Library files to be copied into app
  $a->package        = githubUserDotRepo;                                       # Package name for activity to be started
  $a->platform       = platform;                                                # Android platform - the folder that contains android.jar
  $a->platformTools  = platformTools;                                           # Android platform tools - the folder that contains adb
 #$a->parameters     = $params;                                                 # Parameters: user app name, download url for app content
  $a->sdkLevels      = sdkLevels;                                               # Min sdk, target sdk for manifest
  $a->src            = [sourceJavaFiles];                                       # Source files to be copied into app as additional classes
  $a->title          = githubRepo;                                              # Title of the app as seen under the icon
# $a->version        = (versionCode =~ s(-.+\Z) ()r);                           # Version of the app with possible adjustment
  $a->permissions    = [appPermissions];                                        # Add permissions and remove storage

# $a->assets = {q(guid.data)=>(q(1)x32)} if $develop;                           # Add a guid so we can test linkage

  if (1)                                                                        # Edit package name of activity
   {my $android = $a;                                                           # Builder
    my $a = $android->activity;                                                 # Activity class name
    my $s = readFile(sourceActivity);                                           # Java Activity source file as string
    my $p = $android->package;                                                  # Package name
    $s =~ s(package\s+(\w|\.)+\s*;) (package $p;)gs;                            # Update package name
    my $P = javaPackageAsFileName($s);                                          # Target file name for activity
    my $t = fpe($android->getGenFolder, $P, $a, qw(java));                      # Target file
    unlink $t;
    writeFile($t, $s);                                                          # Write activity source with the correct package name edited into place into the gen folder where it will be picked up automatically by Android::Build
  }

  unlink $a->apk;                                                               # Remove apk so that we can check that something got built
  develop ? $a->run : $a->compile;                                              # Compile or run

  if (! -e (my $apk = $a->apk))                                                 # Apk file produced by build
   {my $b = $a->buildFolder;
    confess join '',
      "Unable to create apk file $apk in build folder:\n$b\n",
      @{$a->log}, "\n";
   }
 } # compileApp

sub buildApp                                                                    # Build an app
 {makePath(appBuildFolder); #clearFolder(appBuildFolder, 999);                   # Clear build folder

  my @files = searchDirectoryTreesForMatchingFiles(homeDir);                    # Files available

  #convertImages(imageFiles @files);
  createKey();
  compileApp()
 }

buildApp;

__DATA__

my $devices             = {Nook=>{install=>1, id=>"3024600145324307"}, NokiaSmallScreen=>{install=>0, id=>"94f4d441"}, NokiaWideScreen=>{install=>0, id=>"1289d401"}, Hanspree=>{install=>0, id=>"17144044407fc257"}, emulator=>{install=>0, id=>"emulator-5554"}};

# Targets                   1    2     3           4      5        6      7           8    9        10       11     12     13        14      15    16      17          18    19
my @vendorCode = (undef, qw(test focii screenShots Google AppaApps Amazon UnderGround Nook ApkFiles Vodafone Huawei Xiaomi MegaStore SlideMe Nokia AppLand AppaAppsNJM Iran  Dora));

# Actions other than compile
&moreThanOneAction if (!caller and (@genAndroid ? 0 : 1) < grep {$_ > 0} (      # Complain if being used manually and more then one action has been requesteddorectly and
my $adb                 = 0,                                                    # 1 - pull screenshots, 2 - clear package
my $clearApk            = 0,                                                    # 1 - clear app data before loading to device
my $createAssets        = 0,                                                    # 1 - create icons needed for apps, 2 - screenshots for Nook for selected apps, 3 - icons for Xiaomi
my $dejaVu              = 0,                                                    # 1 - Create DejaVu.jar with DejaVuSans
my $genKey              = 0,                                                    # Generate a key pair
my $getAppaApps         = 0,                                                    # 1 - Print things in apps to allow identification of most important feature and retrieve coordinates file from www.appaapps.com, 2 - get email, 3 - backup web site (except apks) to S3, 4 - back up web site to TOSHIBA
my $makeVideo           = 0,                                                    # 1 - Make ogg video (Wikipedia), 2 - make avi video (Amazon, YouTube) in sub directory of temp screenshots for each app selected
my $printAmazon         = 0,                                                    # 1 - links to binary web page, 2 - price page, 3 - content, 4 - UnderGround, 7 UndergroundLive
my $printAmazonIds      = 0,                                                    # Manage Amazon Ids: 1 - create new versions of apps, 2 - generate index pages list for download, 3 - process index pages to create code for this script, 4 - check results, 11 - print underground ids.
my $printDescriptions   = 0,                                                    # 1 - Print descriptions for use on Amazon App Store and Google Play
my $printFacts          = 0,                                                    # 1 - print facts with titles to make translation easier
my $printGoogle         = 0,                                                    # 1 - questionaire, 2 - apks, 3 - Store listing, 4 - Pricing and distribution, -1 - links to apps on Google Play for Ebay
my $printHtml           = 0,                                                    # 1 - generate language specific web pages implied by gAppApps==1
my $printRecordingList  = 1,                                                    # List of things to record, 1 - differences without breath segments, 2 - differences with breath segments, 3 - create only breath segments, 4 - create composites without checking breaths (faster once breaths are known to be ready), 5 4+Always accept, 6 - analyze bit rates for files
my $printTitles         = 0,                                                    # 1 - Print titles of active groups 3 - apknames for Google, 5 - ftp's for Amazon, 6 - Apk names on S3, 7 - Nook, 11 - Underground
my $printZZZ            = 0,                                                    # 0 - off, 1 - free apks, 2 - jingles, 3 - apkFiles, 4 - free apk count, 5 - copy icons for upload to achievements gallery, 6 - format CSF file for achievements, 7 - print package names, 8 - check we have a key for each app, 9 - screenshots needed, 10 remove empty screenshot folders, 11 keywords, 12 genJava, 13 - download German numbers from Wikipedia
my $sendAmazon          = 0,                                                    # 1 - send icons and screenshots to Amazon, 2 - Underground
my $sendAppaApps        = 0,                                                    # 1 - apks from staging area to appaapps.com after compile for Appaapps         1 - html, 2 - icons, 3 - icons+apks, 4 - apks, 5 - everything, 6 - Index of AppaAppsTest, 7 - Privacy Policy
my $sendAppDF           = 0,                                                    # 1 - Prepare xml descriptions for opera, 2 - test AppDF format
my $sendHuawei          = 0,                                                    # 1 - Spreadsheet, 2 ftp screen shots, 3 - ftp apks, 4 restructure apks slightly, 3 - print keywords, title description
my $sendLinode          = 0,                                                    # 1 - print current app list and transfer to linode so apps can show new releases to user in appsList
my $sendNokia           = 0,                                                    # 1 - Prepare screenshots, 2 - write a bookmarklet to assist data entry
my $sendS3              = 0,                                                    # 1 - titles and genres by language, 2 - icons, 7 - Mirrors, 8 Clicks distribution
my $sendSamsung         = 0,                                                    # 1 - print titles and keys, 2/3 - prepare screenshots here/Ec2, 4 write a bookmarklet to assist data entry, 5 - goto page on Samsung
my $sendAppia           = 0,                                                    # 1 - icons, 2 - icons+screenShots, 3 - subset apks, 4 - main apks, 5 - everything, 6 - XML  (4, 5)-Make sure that main apks are not airpushed
my $sendVodafone        = 0,                                                    # 1 - create zip file for Vodafone for testing, the normal zip file is made as part of the compile process, 2 - create ids, 3 - package zip files
my $translate           = 0,                                                    # 1 - print strings which need to be translated, 2 - modify source with translated strings from translations.data and build Translations.jar, 3 - print all strings, 4 - add new language (2,4) use unicode/translations.data, 5 - print unused translation strings
my $translateFacts      = 0,                                                    # 1 - write files of fact translations required for active apps, 2 - process translated items into cache
my $translateStuff      = 0,                                                    # 1 - rebuild translations, 2 - ago, 3 - one liners, 4 - play time, 5 - Genres
my $translateText       = 0,                                                    # 1 - write files of text translations required, 2 - process translated texts - something to do with dooferage but I am not sure what
my $translateThings     = 0,                                                    # 1 - write new list for translation, 2 - load translations, 3 - use with care - overwrite list of translations
my $translateTitles     = 0,                                                    # 1 - write files of title translations required, 2 - process translated titles from unicode/translatedTitles.data so that we can get translated titles for android manifest
my $xjavap              = 0,                                                    # Print contents of a java class
my $xload               = 0,                                                    # Download special files with curl: 1 - man on the moon
 ));

my $objectifyAll        = $printHtml || $sendAppaApps || $translateFacts || $translateTitles; # Some operations require full set of app descriptions as objects

#-------------------------------------------------------------------------------
# Features - which are further tested against app, distributor, subset
# and so even if they are on here, might not actually be enabled in every app.
#-------------------------------------------------------------------------------

my $amazonAffiliates    = 1;                                                    # 1 - enable Amazon Affiliates
my $amazonGamesCircle   = 1;                                                    # 1 - enable Amazon Games Circle - only on Amazon App Store
my $amazonMobile        = 0;                                                    # 1 - enable Amazon Mobile Ads
my $amazonAnalytics     = 1;                                                    # 1 - enable Amazon Mobile Analytics
my $appList             = 1;                                                    # 1 - enable appList required permissions in android manifest this must be on if appList is enabled
my $delta               = 0;                                                    # Version offset in days to allow, normally 0, sometimes 1.
my $mp3Fanfares         = 1;                                                    # 1 - use mp3 versions of fanfares from ../midi/start
my $noVoiceChoices      = 2;                                                    # Number of voice choices for no

#-------------------------------------------------------------------------------
# Environment
#-------------------------------------------------------------------------------

my $amazonEC2File       = '/home/phil/Amazon/EC2/ProductionCompile';            # Running a production compile on Amazon EC2 file
my $amazonEC2SyncFile   = '/home/phil/Amazon/EC2/SyncFilesWithS3';              # Copy files off S3 first file
my $amazonEC2           = -e $amazonEC2File;                                    # Running a production compile on Amazon EC2?
my $amazonEC2Sync       = -e $amazonEC2SyncFile;                                # Copy files off S3 first?
my $androidTargetNumber = $amazonEC2 ? 1 : 2;                                   # Android list targets  to find these numbers
my $cleanBackups        = 0;                                                    # 0 - do not clean backups, 1 - clean backupo: normally this should be 0 but after a full compile with no error it can be  set to 1 for one backup to clean out any junk that has accumulated in the backups.  To make sure that it is not left on, it produces an annoying prompt
my $restartable         = !$noRestart && $amazonEC2;                            # 0 - redo compiles, 1 - skip compiles already started/done as indicated in S3
my $setActive           = 0;                                                    # 1 - set selection to active on S3 for bulk compile progress reports, deleting existing (started, completed) entries
my $setReleaseDate      = 0;                                                    # 0 - current time will be set as release date on AppaApps for selected apps, otherwise offset  + or - by this many days, but only if we are compiling via @genAndroid
my $xlint               = 0;                                                    # 1 - local lint, 2 lint before compile of source file. Set negative to just print command

#-------------------------------------------------------------------------------
# Languages and mime types
#-------------------------------------------------------------------------------

my %languages  = qw(af Afrikaans ar Arabic de German es Spanish fr French hi Hindi id Indonesian it Italian ja Japanese ko Korean nl Dutch pl Polish pt Portuguese ru Russian th Thai tr Turkish vi Vietnamese zh Chinese);
my %Languages  = reverse %languages;                                            # Language name to code

if (0) {die "Missing language name for $_" for grep {!$languages{$_}}  &appLanguagesMinusEnglish};
if (0) {say for &table([([qw(en English)], map  {[$_, $languages{$_}]} &appLanguagesMinusEnglish)]);}

my @mimeTypes  =                                                                # Mime types
 (my $mimeApk  = "application/vnd.android.package-archive",
  my $mimeJpg  = "image/jpeg",
  my $mimePng  = "image/png",
  my $mimeText = "text/plain",
  my $mimeHtml = "text/html",
  my $mimeJS   = "application/x-javascript");
my %mimeTypes  = (map {$_=>1} @mimeTypes);                                      # Mime types as hash

#-------------------------------------------------------------------------------
# Files
#-------------------------------------------------------------------------------

my $Home                  = "/home/phil/";                                      # Home
my $Temp                  = "${Home}vocabularyTemp/";                           # Files in this folder can be deleted at any time and are not backed up
my $supportingDoc         = "${Home}vocabulary/supportingDocumentation/";       # Directory containing supporting files for each app
my $supportingDocS3       = "s3://AppaApps/vocabulary/supportingDocumentation"; # Directory containing supporting files for each app
my $Midlet                = "VocabularyActivity";                               # Originally 'Midlet' when first developed on for Nokia S40
my $sourceDir             = $Home."vocabulary/src/";                            # Source code directory
my $sourceS3              = "s3://AppaApps/vocabulary/src";                     # Source code directory on S3
my $sourceCode            = $sourceDir.$Midlet.".java";                         # Source code file
my $perlDir               = "${supportingDoc}perl/";                            # Directory containing perl code
my $perlScript            = $perlDir."genApp.pm";                               # This perl script
my $perlS3                = "s3://AppaApps/vocabulary/supportingDocumentation/perl"; # Perl directory on S3
my $wwwLocal              = $supportingDoc."website/";                          # Local directory containing copies of elements of the web site displayed on www.appaapps.com
my $wwwHtml               = "/var/www/html/";                                   # Html directory on www.appaapps.com
my $version               = strftime("%y.%m.%d", localtime(time()+$delta*24*60*60)); # Version - will be editted into source code
my $titlesToTranslateFile = $perlDir.'unicode/translatedTitles.data';           # File in which titles needing translation are written by $translateTitles == 1 and from which translations are read by $translateTitles==2
my $translatedTitlesFile  = $perlDir.'GenApp/TranslatedTitles.pm';              # Subroutine containing translations of the app titles used to build an app

my $imComposite   = 'composite -strip';                                         # Composite images
my $imConvert     = 'convert -strip';                                           # Convert images
my $imIdentify    = 'identify';                                                 # Get size of images

my $Android       = $Home.'Android';                                            # Android
my $AndroidBase   = "${Temp}apps";                                              # Location of Android project builds - used by androidBuildDir()
my $AndroidSDK    = $Android.'/sdk';                                            # Android SDK
my $AndroidTools  = $AndroidSDK.'/tools';                                       # Android tools
my $AndroidPT     = $AndroidSDK.'/platform-tools';                              # Android platform tools
my $gameCircleSDK = $Home.'Amazon/sdk/Android/GameCircle/GameCircleSDK/';       # Game circle library - expressed so ant can cope with it

$ENV{PATH}        = "$AndroidTools:$AndroidPT:".$ENV{PATH};                     # Add Android to path

sub logFile                                                                     # Local log - a copy is also sent to  s3://AppaApps/compile/Log/
 {my $l = $Temp."genApp.log";
  &makePath($l);
  $l
 }

unlink(&logFile) if -e &logFile && &fileSize(&logFile) < 1e8;                   # Truncate log if it is getting too big

my $linodeIPAddress = '45.56.108.188';                                          # IP Address of Linode on which www.appaapps.com is running
my $linodeWWWDir    = '/var/www/html/';                                         # Directory on Linode used to store files for www.appaapps.com

sub supportingDoc {$supportingDoc}                                              # Make visible in files that call this file
sub comAppaApps   {"com/appaapps"}                                              # Jar structure

#-------------------------------------------------------------------------------
# Keys
#-------------------------------------------------------------------------------

my $airPushAPIKey = '1335364741103506386';                                      # Userid on Air Push
my $FacebookKeys  = [qw(423413364350602 781a9196c6c8a14229164b35fe9c9967)];

my $cacheReleaseDates     = "cache/releaseDates.data";                          # Dates apps were released by running setReleaseDate
my $cacheTranslatedStuff  = "cache/TranslatedStuff.data";                       # Stuff that has been translated

my $ageSoundFiles         = 360;                                                # Regard sound files older than this as old
my $imageSize2            = 512;                                                # Provide a scaled set of images twice as large as this in large image apps

my $aws_access_key_id     = "AKIAJUJD5LFCD272B5KA";
my $aws_secret_access_key = "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";

my $googleAnalyticsKey    = "UA-43267254-1";

#-------------------------------------------------------------------------------
# Return if caller - this allows use genApp; to get useful functionality such as
# logging and writeFile() without executing any of the app manipulation code in
# the process
#-------------------------------------------------------------------------------

return 1 if caller();

#-------------------------------------------------------------------------------
# App description keywords
#-------------------------------------------------------------------------------

my $active           = "active";           # App has been selected for processing and so is active
my $airPush          = "airPush";          # Airpush id
my $album            = "album";            # This is an album app
my $alphabet         = "alphabet";         # This is an alphabet app
my $amazon           = "amazon";           # Amazon mobile advertizing app keys
my $amazonId         = "amazonId";         # Amazon id for main app so we can FTP it - which must then be migrated to amazonKeysToIds()
my $animation        = "animation";        # Animation app
my $apk              = "apk";              # Alternate apk name for getting around undeletable Apks
my $apkGoogle        = "apkGoogle";        # Alternate apk name for getting around undeletable apks on Google
my $audioOnVideo     = "audioOnVideo";     # Audio for the app is on the videos in images
my $block            = "block";            # Words go together in blocks of this size
my $breathDepth      = "breathDepth";      # Breath depth table present
my $captions         = "captions";         # Has captions - 1 generate single caption files, 2 - generate split captions files
my $checked          = "checked";          # Last time checked
my $clicks           = "clicks";           # Hash of affiliate=>percent to distribute percent of shopping clicks to this affiliate program
my $collection       = "collection";       # Collection of things game
my $cantonese        = "cantonese";        # Cantonese Chinese
my $copyFacts        = "copyFacts";        # Copy fact files from this app
my $copyImages       = "copyImages";       # Copy image files from this app
my $counting         = "counting";         # Counting things game
my $desc             = "desc";             # Description of things in app for producing description
my $example          = "example";          # Example app built to test ideas not to ship as a product
my $facts            = "facts";            # Has facts 0-no facts, 1-has facts, 2-has audio facts
my $flattenAudio     = "flattenAudio";     # Use the flattened audio directory layout as this is easier for some kinds of apps - especially ones about numbers
my $free             = "free";             # Array of arrays of ranges of items in each free subset on android, everything in app if not present
my $freeSuffix       = "freeSuffix";       # Use the Free' suffix on subset 1 of the free version for backwards compatability with an earlier apk
my $freeSuffixAmazon = "freeSuffixAmazon"; # Use the 'Free' suffix on subset 1 of the free version for backwards compatability with an earlier apk on Amazon
my $freeSuffixGoogle = "freeSuffixGoogle"; # Use the 'Free' suffix on subset 1 of the free version for backwards compatability with an earlier apk on Google
my $french           = "french";           # The language for this app is French
my $full             = "full";             # Full app required during testing otherwise presentation mode ordering fails
my $genre            = "genre";            # The genre for this app
my $german           = "german";           # The language for this app is German
my $group            = "group";            # Group name for app
my $icon             = "icon";             # Icon lists [package[subset]] or assumes 'icon'.$subset if no icon supplied
my $ignore           = "ignore";           # Ignore these apps completely except to exclude them, unless==2 in which case we are creating the app
my $jpx              = "jpx";              # Use the jpx format
my $mandarin         = "mandarin";         # Mandarin Chinese
my $minimax          = "minimax";          # App contains maxima and minima questions
my $music            = "music";            # Music selection - paid version
my $musicFree        = "musicFree";        # Music selection - free version
my $noImages         = "noImages";         # Photos not used in this app, but the app must be updated to match
my $noTranslation    = "noTranslation";    # No translation of facts required for this app, probably becuase it uses maths formulae
my $noSubsets        = "noSubsets";        # No subsets - just the main app
my $noWords          = "noWords";          # No spoken words so the words list is not loaded - example: Gcd
my $nook             = 'nook';             # present on Nook
my $on               = "on";               # Creation date yymmdd, if not supplied 000000 assumed
my $phil             = "phil";             # Phil is the speaker not Ruth
my $ramesh           = "ramesh";           # Ramesh worked on the app
my $recipe           = "recipe";           # Recipe
my $redo             = "redo";             # subset numbr or list of subset numbers that need recompiling eg [0,2]
my $sent             = "sent";             # Array of vendors sent to
my $size100          = "size100";          # Size to get below 100M
my $size50           = "size50";           # Size to get below 50M  = Google and Samsung
my $squeezeMain      = "squeezeMain";      # 1 - apply various squeezes to reduce the size of a google main app to less than 50MB
my $speakers         = "speakers";         # Speakers - tyhe number of speakers.  Speaker 0 is important, their identity is recorded in the java
my $speech           = "speech";           # Regular expression for additional speech sub directories in addition to the standard noThat* - used by periodic table
my $speechNumbers    = "speechNumbers";    # Copy numbers from 1 to this number into speech numbers
my $swap             = "swap";             # Subset entries can be swapped - the number of subsets is given by the free keyword
my $subsetsOnly      = "subsetsOnly";      # 0 - none, 1 - main only, 2 - free only, 3 all NB:  amazon=>, AmazonId=> entries should be set to zero rather than being ommitted - this is problematic with appList because appList needs a main app which this feature allows one to avoid creating
my $title            = "title";            # Title of app - needed so that it can be translated and then used in the Android Manifest for each target language
my $titlesInFacts    = "titlesInFacts";    # The facts for this app contain the titles of the things via addTitleToFacts so that the translated title can be presented as a fact
my $underground      = "underground";      # Identifier from Amazon of underground version of this app
my $undergroundLive  = "undergroundLive";  # Live on Underground
my $useName          = "useName";          # Use name of things to identify the source and target of sound files rather than the title which is the default, unless further overriden by useNameSource or useNameTarget
my $useNameSource    = "useNameSource";    # Use name of things to identify the source of sound files rather than the title which is the default
my $useNameTarget    = "useNameTarget";    # Use name of things to identify the target of sound files rather than the title which is the default
my $xversion         = "xversion";         # Because you cannot delete stuff on Google
my $zShot            = "zShot";            # New format screen shots status
my $FongKheiMah      = "FongKheiMah";      # Spoken in Cantonese Chinese by FongKheiMah
my $Patrick          = "Patrick";          # Spoken in French by Patrick
my $Victoria         = "Victoria";         # Spoken in Mandarin Chinese by Victoria
my $Wolfgang         = "Wolfgang";         # Spoken in German by Wolfgang

#-------------------------------------------------------------------------------
# App descriptions
#-------------------------------------------------------------------------------

my @app = (

# Three letter words
   {$group=>'A3LetterWords', $title=>"Three-Letter Words", $speakers=>4, $airPush=>50869, $freeSuffix=>1, $swap=>3,
      $icon=>[qw(Eye Cat Leg Sun)], $genre=>'EV', $size50=>1280, $size100=>2048,
      $amazon=>[qw(584a524254344f333136374e46594c30 89d952d879254092905fa91a8804baa9 8274b00d6c30427792081ff35632eed9 1189f53553e04db59d7e0c9d5e19959b )],
      screenShots=>'ihg omn qpr cba dfe', $redo=>0,
   },

# Four letter words
   {$group=>'A4LetterWords', $title=>"Four-Letter Words", $speakers=>4, $airPush=>52275, $swap=>3,
      $size50=>1024, $size100=>1400, $nook=>1,
      $icon=>[qw(Baby Boat Lily Swan)], $genre=>'EV',
      $amazon=>[qw(d6e060dd5dd449c9a34f04e55bad7590 47cb0a6ba9974afca49a6d4f82bc8bb7 73d178bb019a49039faffdc884eb8f18 db4f710b712241a191e809ebf7226ca8 )],
      screenShots=>'rsqt xvwu pmon kjli', $redo=>0,
   },

# Five letter words
   {$group=>'A5LetterWords', $title=>"Five-Letter Words", $speakers=>4, $airPush=>52276, $swap=>3,
      $size50=>1024, $size100=>1600,
      $icon=>[qw(House Apple Panda Zebra)], $genre=>'EV',
      $amazon=>[qw(102facf9db274bec9909c86adae4d435 c3d294d657be408e94cf8253b69e9361 0caf2d39babb47f89ca5eab5fba9b89d b361d83bc841417290d529943000dcac )],
      screenShots=>'pqron cbda ighfe', $redo=>0,
   },

# Addition
   {$group=>'Addition', $title=>'Addition',  $animation=>1, $genre=>'MA',
    $noWords=>1, $on=>140411, $amazon=>[qw(b2513221ef454ef493a024a878828ade)],
   },

# Adjectives
   {$group=>'Adjectives', $title=>'Adjectives', $speakers=>1, $airPush=>96180,  $swap=>3,  $undergroundLive=>1,
      $icon=>["Wide Busy Road", "Curved Glass Building", "Large Brick Cathedral", "Tall High Statue"],
      $captions=>2, $on=>130101, $nook=>1,
      $genre=>'EV', $size100=>1024, $size50=>600,
      $amazon=>[qw(9935300482b440e48a8d3d0a21038db2 59ed0a24eb1d4d8c862f2fe5a458e86f 61c1bf87b63c45eb9c86af4d1e7558c4 3cf14d4a8fa44be598c696b71d92edcd )],
   },

# Alphabet
   {$group=>'Alphabet', $alphabet=>1, $title=>"Easy English Alphabet", $undergroundLive=>1,
      $freeSuffix=>1, $airPush=>49001,
      $free=>[[1..30],[26..56],[-30..-1]],
      $icon=>[qw(Palm Gate Plate Teddy)], $genre=>'EA',
      $amazon=>[qw(56464959503442304b33465841555351 607ea2ece533418bb4e85a90ca1a37ba b203c49b1075490793dddf2b89722207 5a689133b5c9411f9d4c380e704eca6e )],
      $redo=>0,
   },

# Alpine Flowers
   {$group=>'AlpineFlowers', $title=>'Wild Flowers of the Alps', $facts=>1, $on=>120329, $genre=>'FL', $swap=>2,
      $size100=>1000, $size50=>640, $nook=>1, $airPush=>59148, $undergroundLive=>1,
      $icon=>["Least Primrose", "Alpenrose", "Spring Gentian", "Spring Pasque Flower", "Rhaetian Poppy", "Trumpet Gentian"],
      $amazon=>[qw(ba4c21539a154bf39946e8a8df0b2908 776e5751f8934f25808178748c114870 92ebfa6280d94dc8b33d257a5d9d04eb )],
      screenShots=>'o p q r', $redo=>0,
   },

# Animal Alphabet
   {$group=>'AnimalAlphabet', $title=>"Easy Animal Alphabet", $alphabet=>1, $airPush=>49002, $freeSuffix=>1,
      $free=>[[1..30],[-30..-1]], $size100=>2048, $size50=>1280, $undergroundLive=>1,
      $icon=>[qw(Lion Antelope), "Yellow bird"], $genre=>'EA',
      $amazon=>[qw(584a53534a52474f323430544f314d37 e89ec324363f4dac8b34364a70449679 07cd1b75f13b4bef81326d2a950b08e7 )],
      $redo=>0,
   },

# Another Day Another Sunset
   {$group=>'AnotherDayAnotherSunset', $music=>[113..122], $musicFree=>[113..122], $album=>1,
      $title=>"Another Day, Another Sunset", $airPush=>52519, $on=>120801,
      $icon=>["Another Day, Another Sunset", "Another Day, Another Sunset"], $genre=>'TT',
      $amazon=>  [qw(395258324f5a535a345535314657494b 95e987de8cb64bacba2f7936a5e739c7)],
      $redo=>0,
   },

# Antarctica
   {$group=>'Antarctica', $title=>'Wild Animals of Antarctica', $facts=>2, $airPush=>65207, $swap=>2,
      $speakers=>2, $on=>130410, $genre=>'AN', $undergroundLive=>1,
      $size100=>1200, $size50=>600, $nook=>1,
      $icon=>["Gentoo Penguin 1", "Killer Whale 1", "King Penguin 2", "Weddell Seal 3"],
      $amazon=>[qw(1c18075eff5e4bb8a62d3d4053f7f59a 922693e3f2344deb93afe6b40692bfad ca1aec92cedc4d4c84bcf14a990be710 )],
      $redo=>0,
   },

# Apes
   {$group=>'Apes', $facts=>2, $airPush=>'103676', $undergroundLive=>1,
      $title=>"Amazing Apes", $speakers=>2, $on=>130212, $genre=>'AN',
      $size100=>2048, $size50=>1280, $nook=>1,
      $icon=>["Bonobo (juvenile)", "Eastern Gorilla (male)"],
      $amazon=>[qw(53bede68c4b744ecbfcaafc9b62fbe14 fe4c73ae72fb4f51886294937dbe25c9 )],
      $redo=>0,
   },

# Arches
   {$group=>'Arches', $title=>"Arches National Park USA", $on=>130429, $speakers=>2, $facts=>2, $airPush=>128041,
      $size100=>2048, $size50=>1024, $genre=>'GE', $nook=>1, $undergroundLive=>1,
      $icon=>["Double O Arch", "The Organ"],
      $amazon=>[qw(013349d4f44c46f7b44ff5b210de7aae 60686ac8dbfd4049bf283c47d4b785a3 )],
      $redo=>0,
   },

# Arctic
   {$group=>'Arctic', $title=>'Wild Animals of the Arctic', $facts=>2, $airPush=>66746, $genre=>'AN', $swap=>2,
      $speakers=>2, $on=>130323, $undergroundLive=>1,
      $size100=>1280, $size50=>700, $nook=>1,
      $icon=>["Polar Bear 1", "Polar Bear 3", "Harp Seal 3", "Snowy Owl 2"],
      $amazon=>[qw(9d04d5e9565143beaa563b6b54593716 faac4764634f423096c1ce790ef14567 e5239978671442f48133b38898507152 )],
      $redo=>0,
   },

# Baby Animals
   {$group=>'BabyAnimals', $airPush=>'103677', $title=>"Baby Animals", $speakers=>2, $on=>130212, $swap=>2,
      $size100=>1800, $size50=>1024, $genre=>'AN', $nook=>1,  $undergroundLive=>1,
      $amazon=>[qw(e78275bfed9549278c34587e582c7efe 87b91e67afee497ca562124f600b49c2 2cedebb6f882417ead2373ad7a5baa9a )],
      $icon=>["Piglet", "Chick", "Goslings"],
      $redo=>0,
   },

# Bathroom
   {$group=>'Bathroom', title=>'Bathroom', $airPush=>49003, $freeSuffix=>1, $swap=>3,
      $size100=>1800, $size50=>1200,
      $icon=>["Basin", "Bath", "Laundry Basket", "Toothbrush"], $genre=>'EV',
      $amazon=>  [qw(4b34474d514f50503736475957304e44 958263588626481fad24aa9968aa7afe 11018e318a184436978f28e07d5d4124 ff0d6fdbdd2944e1a4771e8d71d10ff8)],
      $redo=>0,
   },

# Birds
   {$group=>'Birds', $facts=>2, $airPush=>174933,
      $title=>'Nice Birds', $speakers=>2, $on=>130905, $ramesh=>1, $swap=>2,
      $size100=>2048, $size50=>1248, $genre=>'AN', $nook=>1,
      $icon=>[qw(Peafowl_4 Atlantic_Puffin Narrow_billed_tody)],
      $amazon=>[qw(dbd5304ba7a448faaa46d45c53cb35ff 454b51626e2f43c1b3f64d390d66f791 e46b4424b2fc485ba45151d36b4362f6 )],
      $redo=>0,
   },

# Boats
   {$group=>'Boats', $airPush=>53930, $freeSuffix=>1, $swap=>2,
      $title=>"Tugs and Tankers, Ships and Boats", $facts=>2, $speakers=>2, $genre=>'EV',
      $size100=>2048, $size50=>1450, $nook=>1, $freeSuffix=>1, $full=>1, $undergroundLive=>1,
      $icon=>["Fishing trawler", "Lifeboat", "Tanker"],
      $amazon=>[qw(42373032395130483044564a5a564637 7996a79b837946f69024c546348252be 64c33fada4924a708c7e912c80e0e7b0 )],
      $redo=>0,
   },

# Body
   {$group=>'Body', $title=>'Parts of the Body', $speakers=>2, $airPush=>63526, $useName=>1, $swap=>2, $undergroundLive=>1,
      $icon=>["Head - Head", "Nose - Nose", "Hand - Hand 1"], $genre=>'EV', $on=>120801, $size50=>1280, $size100=>2048,
      $amazon=>[qw(da36851ceaed4d80b6745f3750253c82 3570987ad6744bf0a570e264adda1083 1dcb5102b90a4a8d8ee6ed4134ab06b2 )],
      $redo=>1,
   },

# Bollywood
   {$group=>'Bollywood', $title=>'Stars of Bollywood', $airPush=>120329, $speakers=>2, $facts=>2, $on=>130405, $swap=>2,
      $genre=>'PE', $size50=>1200, $size100=>2048, $nook=>1, $ramesh=>1,
      $icon=>["Deepika Padukone", "Aishwarya Rai 2", "Ranbir Kapoor"],
      $amazon=>  [qw(168eaf86d7ae46eb921420532a1c03a2 58ae642f23504f9bb8028bec3e5914c4 a728397042284911965fc4b1d551b13c)],
      $redo=>0,
    },

# Boots
   {$group=>'Boots', $title=>'Boots and Shoes', $speakers=>2, $airPush=>69729, $swap=>2,
      $size100=>2048, $size50=>1200, $genre=>'EV', $nook=>1,
      $icon=>["Pointe Shoes", "Calf-length Boots", "Sneakers"], $on=>120401,  $facts=>2,
      $amazon=>[qw(9df1863d425647ec97a27cc7b28b65da 9a64168c7b7148b28292b698bfc9d04b b00a5f5f1e0c439e9e63d6e8f0a723cd )],
      $clicks=>{Dino=>20},
      $redo=>0,
   },

# Bridges
   {$group=>'Bridges', $ignore=>0, $jpx=>1, $facts=>2, $airPush=>139970, # Wrong
      $title=>"Bridges", $speakers=>2, $on=>140407, $ramesh=>1,
      $size100=>2048, $size50=>1800, $genre=>'GE', $nook=>1,
      $icon=>[qw(icon icon1)],
      $amazon=>[qw(5376a84ac9f34eb49c66db3fc316a6a1 5c84c3043a2f40b39133db7f462717b5)],
      $redo=>0,
   },

# British Royal Family
   {$group=>'BritishRoyalFamily', $facts=>2, $airPush=>'103678',  $undergroundLive=>1,
      $title=>"British Royal Family", $speakers=>2, $on=>130212, $genre=>'PE', $full=>1,
      $size100=>2048, $size50=>1600, $nook=>1,
      $icon=>["Queen Elizabeth II", "Wedding of Prince William and Catherine Middleton"],
      $amazon=>[qw(8c5d5fee909a44928c9af3d19d7246a7 7348e9e1a19c4b029cd6e621d983c9de )],
      $redo=>0,
   },

# Buildings
   {$group=>'Buildings', $title=>"Town and Country Buildings", $airPush=>50912, $swap=>2,
      $size100=>2400, $size50=>1400,
      $freeSuffix=>1, $genre=>'EV',
      $icon=>["Thatched cottage", "Skyscraper", "Windmill"],
      $amazon=>[qw(4c5555364f433834464d38443658385a 4e9d8fbb01d948f8b287d5f6d0801f30 b4381a56e9134655b13ddbcc0fce1681 )],
   },

# Cars Cranes Trucks Trains
   {$group=>'CarsCranesTrucksTrains', $airPush=>49006, $speakers=>2, $facts=>2, $on=>120402, $swap=>2,
      $size100=>2400, $size50=>1200, $nook=>1,
      $title=>'Cars Cranes Trucks Trains', $freeSuffix=>1,
      $icon=>["Sports car", "Motorbike", "Vintage bus"], $genre=>'EV', $undergroundLive=>1,
      $amazon=>[qw(3946455557514c43374956564159384c c7e8db9e696443ea857ec1092f9437ec b35a8521a3dd4644b464b07cae2b1a12 )],
    },

# Cars Cranes Trucks Trains in French
   {$group=>'CarsCranesTrucksTrainsFrench', $speakers=>2, $facts=>2, $on=>160114, $swap=>2, $french=>1, $Patrick=>1,
      $size100=>2200, $size50=>1200, $copyImages=>"CarsCranesTrucksTrains", $copyFacts=>"CarsCranesTrucksTrains",
      $title=>'Cars Cranes Trucks Trains in French', $underground=>qw(0),
      $icon=>["Sports car", "Motorbike", "Vintage bus"], $genre=>'FV',
      $amazonId=>[qw(0 0 0)], # This is unnecessary duplication
      $amazon=>[qw(0 0 0)],
     },

# Cars Cranes Trucks Trains in German
   {$group=>'CarsCranesTrucksTrainsGerman', $speakers=>2, $facts=>2, $on=>151126, $swap=>2, $german=>1, $Wolfgang=>1,
      $size100=>2200, $size50=>1200, $copyImages=>"CarsCranesTrucksTrains", $copyFacts=>"CarsCranesTrucksTrains",
      $title=>'Cars Cranes Trucks Trains in German', $underground=>qw(M1JFKD3NV52SE6),
      $icon=>["Sports car", "Motorbike", "Vintage bus"], $genre=>'DV',
      $amazonId=>[qw(M1JFKD3NV52SE6                 0 0)], # This is unnecessary duplication
      $amazon=>[qw(1d232600d42f4ff9bf8cc4afb7b887b7 0 0)],
    },

# Cats
   {$group=>'Cats', $title=>'Top 20 Cats and Kittens', $facts=>2, $airPush=>73032,
      $size100=>2048, $size50=>1600, $nook=>1, $undergroundLive=>1,
      $speakers=>1, $on=>120930, $genre=>'AN',
      $icon=>["Russian Blue - Cat", "American Shorthair - Kitten"],
      $amazon=>[qw(7bd2f1746453452fa883c270ef0761ff 7fbe1236e7fd4daa85b28f2cd42f8541 )],
   },

# Cereals
   {$group=>'Cereals', $title=>'Top 10 Cereals', $speakers=>2, $facts=>2, $airPush=>73028,  $undergroundLive=>1,
      $size100=>2048, $size50=>1024, $nook=>1, $on=>120325, $genre=>'FO',
      $icon=>["Barley 2 - Close-up", "Wheat 5 - Foods made from wheat", "Maize 3 - Maize cobs"],
      $amazon=>[qw(315a1901b2564d76bb8146bea276a5fa 40a9b327884644c9b8632ffac6164ecb 53198d094e5842daae885164ce2aa573)],
      $redo=>0,
   },

# China
   {$group=>'China', $facts=>2, $airPush=>173940,  $swap=>2,
      $title=>"China", $speakers=>2, $on=>130831, $ramesh=>1,
      $size100=>2048, $size50=>1024, $genre=>'GE', $nook=>1,
      $icon=>[qw(Forbidden_City_1 Yu_Garden_3 China_Pavilion_2)],
      $amazon=>[qw(f306d2f287434a9a8d6a2d2b9732aea0 dba50beb28414de08489b30cbecc638f 9c81b05cb48b4f5db63c2becaf203c6c )],
      $redo=>0,
   },

# Chocolate
   {$group=>'Chocolate', $title=>'Chocolate', $facts=>1, $airPush=>73020, $genre=>'FO', $swap=>2, $speakers=>2, $on=>120930,
      $size50=>1400, $size100=>2048,
      $amazon=>[qw(3163a0ab8b1647c1b9e1f6b3dc100a26 b99f51797046467fba0d62e261eedaf1 23625338a1ca4bccb83c05b38e7d3e82 )],
      $icon=>["Chocolate Truffles", "Chocolate Sundae", "Millionaire\'s Shortbread"],
      $redo=>0,
   },

# Chocolate Guinness Cake - Not sent to china because about needs doing
   {$ignore=>1, $group=>'ChocolateGoodnessCake', $title=>"Chocolate Goodness Cake", $recipe=>1,
      $icon=>[[], ["title", "p32. Add the Goodness to the cocoa powder, flour, eggs, sugar and butter mixture",
                            "d22. Sift enough icing sugar to cover the top of the cake with a light dusting"],
                  ["title", "d22. Sift enough icing sugar to cover the top of the cake with a light dusting"],
                  ["title"],["title"]],
      $redo=>0,
   },

# Christmas - started at 9.10pm Sat 10, Nov, 2012
   {$group=>'Christmas', $title=>'Christmas', $facts=>1, $genre=>'EV', $swap=>2,
      $size100=>1600, $size50=>1100, $nook=>1, $airPush=>82078, $speakers=>2, $on=>121110,
      $amazon=>[qw(4a33781d00e041ef930f6f2c7fa78656 95a793265b1f4374ba4ee22ee9370b52 35d81448243b41f4823205b8df6f28c2 )],
      $icon=>["Advent Candle", "Santa Claus", "Bauble"],
      $redo=>0,
   },

# Cliffs
   {$group=>'Cliffs', $title=>'Cliffs, Stacks and Monoliths', $facts=>2, $genre=>'GE',
      $size100=>1500, $size50=>900, $nook=>1, $ramesh=>1, $swap=>2, $minimax=>1, $phil=>1,
      $airPush=>99076, $speakers=>2, $on=>130122,
      $amazon=>[qw(894aca337b96471fad304537bbbeb066 666f509df0644370b763162a96f697a2 4f47ff86f91344a4a9af48bf6ee75480 )],
      $icon=>["Matterhorn (North face)", "The Twelve Apostles", "El Capitan"],
      $redo=>0,
   },

# Collective nouns
   {$group=>'CollectiveNounsInEnglish', icon=>"Host of angels", $genre=>'EV',
      $airPush=>49008, $size100=>2048, $size50=>1600,
      $title=>"Collective Nouns in English", $freeSuffix=>1,
      $icon=>["Flotilla of ships", "Host of angels"],
      $amazon=>[qw(4d5343354d36494f324f414242585037 f06a037153204a93ad6093e8c1fe4250)],
      $redo=>0,
   },

# Collective nouns German
   {$group=>'CollectiveNounsInGerman', $title=>"Collective Nouns in German", icon=>"Host of angels", $genre=>'DV',
      $size100=>2048, $size50=>1600, $icon=>["Flotilla of ships", "Host of angels"],
      $speakers=>2, $on=>151219, $german=>1, $Wolfgang=>1, $copyImages=>"CollectiveNounsInEnglish",
      $amazon=>[qw(0)],
   },

# Colours
    {$group=>'Colours', $title=>"World of Colour", $airPush=>63339, $speakers=>6, $genre=>'EV', $swap=>2,
      $on=>120801, $size50=>800,
      $icon=>["Pink 1", "Green 1", "Purple 1"],
      $amazon=>[qw(8fb61a18b71049828b60886db62d6137 766caef34d5041cfb92ba07139af4b2e 0bea7615e3674ecfab16f8b918fa1f1a )],
      $redo=>1,
    },

# Coral Reef Fish
   {$group=>'CoralReefFish', $title=>'Fish of the Coral Reef', $facts=>1,  $genre=>'AN',
      $size100=>1800, $size50=>1200,  $nook=>1, $swap=>2,
      $airPush=>75925, $speakers=>2, $on=>121015,
      $amazon=>[qw(4e380eaa927547319689f6d23648a89a bbab0ba005554d2784122347dc7970f0 3c39786c1ba64621b1d03e35d2e7a889 )],
      $icon=>["Red Sea Clownfish", "Copperband Butterflyfish", "Queen Angelfish"],
      $redo=>0,
   },

# the count series use just Speaker 0 (Ruth) as she sounds the best even though other speakers are available

# Count Action Toys In English
   {$group=>'CountActionToysInEnglish', $counting=>1, $genre=>'NU',
      $airPush=>49009,  $freeSuffix=>1,
      $title=>"Count Action Toys 1-10",
      $icon=>["Two", "Ten"],
      $amazon=>[qw(544a354f4a54484d4756433538513853 fc90f6a09bf54d1bbe5e0c8d58d3b0d3)],
      $redo=>0,
   },

# Count Animals In English
   {$group=>'CountAnimalsInEnglish',  $airPush=>49010, icon=>3, $counting=>1, $freeSuffix=>1, $useName=>1,
      $title=>"Count Animals 1-10", $icon=>[3, 8], $genre=>'NU',
      $amazon=>[qw(5541504e4f57564c4c5949554a434d46 af0e195519884f75852e1cd30ca274d9)],
      $redo=>0,
   },

# Count Chocolates In English
   {$group=>'CountChocolatesInEnglish', $counting=>1, $airPush=>49012, $useName=>1,
      $title=>"Count Chocolates 1-20", $freeSuffix=>1, $genre=>'NU',
      $free=>[[1..12],[-12..-1]],
      $icon=>[12, 7, 15],
      $amazon=>[qw(4251473039364833444a4e4d46563347 d04b5f8aea984c7cb910182a0810e776 50b3b38098f6494f8f316e6ce345d497 )],
      $redo=>0,
  },

# Count Dogs In English
   {$group=>'CountDogsInEnglish', $counting=>1,  $genre=>'NU', $useName=>1,
      $airPush=>49013,
      $title=>"Count Dogs 1-10", $freeSuffix=>1,
      $icon=>[3, 1],
      $amazon=>[qw(4c4a49324644314b4245485755354e4f a6fbe1e16add4f99a0a3aa973a6a4cdb)],
      $redo=>0,
   },

# Count Dolls In English
   {$group=>'CountDollsInEnglish', $counting=>1, $airPush=>49014, title=>"Count Dolls 1-20",  $useName=>1,
      $free=>[[1..12],[-12..-1]], $freeSuffix=>1, $genre=>'NU',
      $icon=>[2, 5, 13],
      $amazon=>[qw(57395941374c434d394f574e4b485254 2d561f1c42194e39a17766d94251a7f4 b9726d402cdf4ec5aae52246f63283bf )],
      $redo=>0,
   },

# Count Euros
   {$group=>'CountEuros', $speakers=>1, $title=>"Count Euros", $genre=>'MA',
      $free=>[[1..30],[-30..-1]], $size50=>900,
      $icon=>["10-66", "13-00", "7-40"],
      $amazon=>[qw(b6587805d67e4d45b7f5099e50607915 d3b6827906b94d88a5d71dd6d30d4177 1568fa5666224c60ae622cfd9c443842)],
      $redo=>0,
   },

# Count Flowers in English
   {$group=>'CountFlowersInEnglish', $counting=>1, $genre=>'NU', $useName=>1,
      $title=>"Count Flowers 1-10", $airPush=>49015, $freeSuffix=>1,
      $icon=>[7, 3],
      $amazon=>[qw(574d4d314643413836334d5746494b4b b38cfcf5277f4f578dcf9a0421b842d0)],
      $redo=>0,
   },

# Count Flowers in German
   {$group=>'CountFlowersInGerman', $title=>"Count Flowers in German", $counting=>1, $genre=>'NU', $useName=>1,
    $speakers=>2, $on=>151228, $german=>1, $Wolfgang=>1, $icon=>[7, 3], $speakers=>2, $on=>151228,
    $copyImages=>"CountFlowersInEnglish", $underground=>qw(M3FBIKTS1CK6GZ), $amazon=>[qw(5a021c1ccf164ca8afbc9dd1e903c56d)],
   },

# Count Soft Toys In English
   {$group=>'CountSoftToysInEnglish', $counting=>1, $genre=>'NU', $useName=>1, $freeSuffix=>1,
      $title=>"Count Soft Toys 1-10", $airPush=>49016,
      $free=>[[1..15],[-15..-1]],
      $icon=>["Eight Pigs", "Three Penguins", "Seven Chicks"],
      $amazon=>[qw(475942484e5a554657595356524f5748 17419d04e6684870bbb9a7f830b0aef6 5759426de08348fc8d8ecd57ef04d32a )],
      $redo=>0,
   },

# Count Teddy Bears In English
   {$group=>'CountTeddyBearsInEnglish', $counting=>1, $genre=>'NU', $useName=>1, $undergroundLive=>1,
      $title=>"Count Teddy Bears 1-20", $airPush=>49017, $freeSuffix=>1,
#     $free=>[[1..12],[-12..-1]], # Subsets on Amazon have the same apkname (accident) so reduced to one subset
      $icon=>[13, 3, 5],
      $amazon=>[qw(4c324c4d394930344143555959304949 28433f26bbdf4aa99094472e4716cdac f64eb07e27864f0d888c95715fd1741e )],
      $redo=>0,
    },

# Count Toy Dogs In English
   {$group=>'CountToyDogsInEnglish', $counting=>1, $title=>"Count Toy Dogs 1-20",  $airPush=>49018,  $freeSuffix=>1,
      $icon=>[14, 2, 15], $genre=>'NU',  $useName=>1,
      $amazon=>[qw(54355a5846374230355849324f555657 7cea90a8e2ca481a889fc073bb81c2f5)],
      $redo=>0,
   },

# Day of the week
   {$group=>'Day', $title =>"Day of the Week", $icon=>["Sunday", "Sunday"], $genre=>'EV', $airPush=>0,  $free=>[], $ignore=>1,
      $amazon=>[qw(cb912473491f484daea2da00fcb193ea)],
      $redo=>0,
   },

# Days of the week
   {$group=>'Days', $airPush=>50930, $sent=>[qw(ApkFiles)],
      $title=>"Days of the Week in English", $genre=>'EV', word=>1, $freeSuffix=>1,
      $amazon=>[qw(4b494d3351595147565039384251494d 849354f5ffdb4650adb4b765e756f1f2)],
      $icon=>["Thursday", "Saturday"],
      $redo=>0,
   },

# Days of the week in German
   {$group=>'DaysGerman', $title=>"Days of the Week in German", $genre=>'DV', word=>1, $copyImages=>"Days",
     $german=>1, $Wolfgang=>1, $speakers=>2, $on=>20151213, $icon=>["Thursday", "Saturday"],
     $underground=>qw(M3KCFC8W0W35BF),
     $amazon=>[qw(8550c365475b4bc4807a3846efe1639f)],
   },

# Death Valley
   {$group=>'DeathValley', $title=>"Death Valley USA", $on=>130428, $speakers=>2, $facts=>2, $airPush=>127392,
      $size100=>2400, $size50=>1200, $nook=>1,
      $icon=>["Mesquite Sand Dunes", "Badwater Basin salt flats"], $genre=>'GE',
      $amazon=>[qw(5cae26a0e04e4f0e9385b9caaecca93e dd37c4425b5949bebf5f6ab51ec8996f)],
      $redo=>0,
   },

# Discover Thorntons Chocolates
   {$ignore=>1, $group=>'DiscoverThorntonsChocolates', $facts=>1,
     $title=>"Enjoy Thorntons Chocolates",
     $icon=>[["Chocolate Truffle 2", "Honeycomb Crunch 2", "Soft Caramel 2", "Turkish Delight 2"],
             ["Creamy Fudge 2", "Orange Zest 2", "Strawberry Velvet 2"],
             ["Layered Chocolate Classic 2", "Turkish Delight 2"],
             ["Thorntons Chocolate Box 2"]],
   },

# Dogs
   {$group=>'Dogs', $facts=>2, $title=>"Puppies and Dogs",
      $size100=>1100, $size50=>700,
      $airPush=>56838, $speakers=>2, $genre=>'AN', $nook=>1,
      $free=>[[1..30],[25..55],[-30..-1]],
      screenShots=>'2 5 8 9 10 12 14 15 23 27',
      $amazon=>[qw(1ae6480e46544556a37f235b8c71cf2d 36050226eec14a05aa65f79be051bd22 3982f3bf8e804462b86330af1df5832d e25d419ce4bd446892250d9404ee482a)],
      $icon=>["Australian Cattle Dog 2", "Appenzeller Sennenhund 2", "Maltese 1", "West Highland White Terrier 1"],
      $redo=>0,
   },

# Dogs50
   {$group=>'Dogs50', $title=>'Top 50 Dog Breeds', $facts=>2, $airPush=>73024, $swap=>2,
      $size100=>2400, $size50=>1200,
      $speakers=>2, $on=>120930, $genre=>'AN',  $nook=>1,
      $icon=>["German Shepherd", "Australian Shepherd", "Yorkshire Terrier"],
      $amazon=>[qw(5babc2dde98146819c1621c87bdb35d0 241db870c70c4c5c909238c754f9c3b6 feb8674b4bc84b5f87d4cf4607ed617e)],
      $redo=>0,
   },

# Domesticated  Animals
   {$ignore=>1, $group=>'DomesticatedAnimals', $title=>'Farm Animals', $icon=>[["Oxen"],["Cat"],["Sheep"]],
   },

# Dunloe
   {$group=>'Dunloe', $airPush=>64380, $speakers=>2, $xversion=>1,
      $icon=>["Journey's End 6", "Split Rock 3"], $genre=>'GE', $size100=>2048, $size50=>1000,
      $title=>"Ride through the Gap of Dunloe in South-West Ireland",
      $amazon=>[qw(e3e08ffc532f4c8db512fb179d518456 00c080b430404fabaac99e3bf8fa2f7e)],
      $redo=>0,
   },

# Eyes
   {$group=>'Eyes', $title=>"Animal Eyes", $speakers=>2, $facts=>2, $airPush=>74511, $on=>'130326', $swap=>2,
      $icon=>[qw(Owl Hawk Tiger)],  $genre=>'AN',   $undergroundLive=>1,
      $size100=>1600, $size50=>1000,  $nook=>1,
      $amazon=>[qw(9e8232fc9a7f4b068dddb7b5671dcb10 46e18d8348ce4aa1b9d3778509cf3fc0 fbfe12162cc34b6eb477bcb5646ba3cb)],
      $redo=>0,
   },

# Famous Americans
   {$group=>'FamousAmericans', $ignore=>1, $title=>"Famous Americans", $ramesh=>1,
      $facts=>2, $speakers=>2, $on=>140408,
      $icon=>[qw(icon )], $genre=>'PE',
      $amazon=>[qw(007b9c27a67c42a184cbad97af37de99)],
      $redo=>0,
   },

# Famous City Landmarks
   {$group=>'FamousCityLandmarks', $facts=>1, $airPush=>49021, $swap=>3,
      $title=>"Famous City Landmarks", $speakers=>3, $genre=>'GE',
      $music=>[qw(104 103 100 99 97 95 92 91 88 87 81 80 75 74 72 68 60)],
      $freeSuffix=>1, $size50=>1400, $size100=>2048,
      $icon=>["Statue of Liberty 3", "Brandenburg Gate 2", "Leaning Tower of Pisa 1", "Taj Mahal 3"],
      $amazon=>[qw(5031353437524c5a4f4d4d4d3330384e 92853fa204da4acc890194fd6dabd527 407adfb74bd0421bb8798c386eeb596f 88ab8e923490495083ef078871410fd1 )],
      $redo=>0,
   },

# Famous London Landmarks
   {$group=>'FamousLondonLandmarks', $title=>'Famous London Landmarks', $speakers=>4, $swap=>3,
     $facts=>1, $airPush=>48514, $genre=>'GE', $size50=>800, $size100=>1400, $freeSuffix=>1,
     $icon=>["Big Ben 2", "10 Downing Street 1", "St. Paul's Cathedral 3", "Tower Bridge 2"],
     $amazon=>[qw(54474d4c4658363352384c48384b5750 5ea99ad77828458d9918e985a5ec43ab 971e2fb0adf34c9bb05e296b2ccab8e3 a8bd385cff114c8e9ccf3463b203db9e )],
     $redo=>0,
   },

# Flower Alphabet
   {$group=>'FlowerAlphabet',  $airPush=>49022, $title=>"Easy Flower Alphabet", $alphabet=>1,
      $free=>[[1..28],[22..50],[-28..-1]],  $freeSuffix=>1, $genre=>'EA', $size50=>1200, $size100=>1800,
      $icon=>["Turk's Cap", "Columbine", "Ipomoea", "Sunflower"],
      $amazon=>[qw(335656324a4a4e573653485544474d41 2ba07a45bf924874a68aa77b747560d2 0b7a1a32a8374d01a24875197e2cc5e6 665dffda881d47a08c754cfcb27a38fb )],
      $redo=>0,
   },

# Fractions
   {$group=>'Fractions', $title=>'Fractions', $facts=>2,
      $speakers=>2, $on=>150313, $nook=>1, $phil=>1,
      $genre=>'MA', $size100=>800, $size50=>400,
      $icon=>[qw(6-3c 6-4a)],
      $amazon=>[qw(8223c719bf264ba08f82c3d73f746ceb  d045ef4038964ac3a5e1ccf1a33bdf0f)],
      $redo=>0,
   },

# Fruits
   {$group=>'Fruits', $title=>'Fruits and Berries', $facts=>2, $airPush=>73026,
      $free=>[[1..60],[-60..-1]], $speakers=>2, $on=>120930, $size100=>1400, $size50=>750,
      $icon=>["Strawberry 2", "Blackberry 1", "Pawpaw 2"],  $genre=>'FO',
      $amazon=>[qw(82bb739bc06048e7b096d62263aa6ee3 3c49e9c14a104e4396cde6f4fdaa0d64 ea6c8950adb14acab62c3e931406db46)],
      $redo=>0,
   },

# Funfair
   {$group=>'FunFair', $title=>"A Day at the Fun Fair", $captions=>1, $airPush=>49024, $swap=>3, $freeSuffix=>2,  $genre=>'EV',
      $size100=>1400, $size50=>800,  $undergroundLive=>1,
      $amazon=>[qw(3144315447525255563746504b454e41 3574ef1863c04f50aa0cf68e789f34ce aa3e98ed424146d1ae00fa819428d27d 9e1a7f86bcb64dc8acabf6503392b6b3)],
      $icon=>["Giant Helter Skelter 2", "Big Wheel 1", "Orbit 6", "Twister 1"],
      $redo=>0,
   },
# FunfairGerman
#   {$group=>'FunFairGerman', $title=>"A Day at the Fun Fair in German", $captions=>1, $swap=>2, $genre=>'DV',
#      $size100=>1400, $size50=>800, $icon=>["Giant Helter Skelter 2", "Big Wheel 1", "Orbit 6", "Twister 1"],
#      $amazon=>[qw(0)],
#   },

# Functions
   {$group=>'Functions', $title=>'Mathematical Functions', $airPush=>67190, $useName=>1,
      $free=>[[1..25],[17..42],[-25..-1]], $speakers=>2, $on=>120901, $genre=>'MA',
      $icon=>["cos", "sinc", "minus one over exp squared", "minus squared sin"],
      $amazon=>[qw(ffb6ed90a09e4690ae66310ce984f921 b0b2e6ba8bad4513929734af43b97b0c b3beb00dcda947f6ac2ae6ff793bb0cc 565a0934fcb84f0a9c737307f7a4381a )],
      $redo=>0,
   },

# Garden Flowers
   {$group=>'GardenFlowers', $title=>'Garden Flowers',  $airPush=>49025, $swap=>2,
      $size100=>2048, $size50=>1400, $freeSuffix=>1, $genre=>'FL',
      $icon=>["Gerbera", "Lily", "Sweet Pea"],
      $amazon=>[qw(334b4f5531353930564d4334364c4153 f254438be5c342c397e7320db6fb07b9 e18cc4de21784b27afde1a7434615365)],
      $redo=>0,
    },

# Greatest Common Divisor
   {$group=>'Gcd', $title=>'Greatest Common Divisor',  $animation=>1, $genre=>'MA', $noWords=>1,
      $amazon=>[qw(d1e145618fbe4e02b15f865d7a33018b)],
    },

# Geography Manmade Features
   {$group=>'GeographyManmadeFeatures', $facts=>1, $airPush=>49026, $swap=>2, $undergroundLive=>1,
      $title=>"Geography Man-Made Features",  $size100=>2048, $size50=>1400, $freeSuffix=>1, $genre=>'GE',
      $icon=>["Fly-over", "Motorway", "Railway line"],
      $amazon=>[qw(565831564b57354844374f3950475548 e9063c7a7a304d14ab02292d10bef7b6 ef81e34601064dcd9f29901223a7d50c)],
      $redo=>0,
    },

# Geography Manmade Features in German
   {$group=>'GeographyManmadeFeaturesGerman', $facts=>1, $swap=>2, $on=>151228, $swap=>2, $german=>1, $Wolfgang=>1,
      $copyImages=>"GeographyManmadeFeatures", $copyFacts=>"GeographyManmadeFeatures",
      $title=>"Geography Man-Made Features in German",  $size100=>2048, $size50=>1400, $genre=>'GE',
      $icon=>["Fly-over", "Motorway", "Railway line"],
      $amazon=>[qw(0)],
    },

# Geography Natural Features
   {$group=>'GeographyNaturalFeatures', $facts=>1, $airPush=>49027, $swap=>2,  $undergroundLive=>1,
      $title=>'Geography Natural Features',  $size100=>2048, $size50=>1300, $freeSuffix=>1, $genre=>'GE',
      $icon=>["Mountain", "Coastline", "Rock pool"],
      $amazon=>[qw(375757454545474144525956315a4f35 28eddf17794d46dbaedb64f3966c78b0 a0e78e19af6c44f9b758b3180ad14cec)],
      $redo=>0,
    },

# GeometricShapes
   {$group=>'GeometricShapes', $title=>'Geometric Shapes', $facts=>2, $swap=>2,  $undergroundLive=>1,
      $airPush=>97717, $speakers=>2, $on=>130118, $genre=>'MA',
      $icon=>["Icon", "Dodecahedron", "Octahedron"], $nook=>1,
      $amazon=>[qw(a3b15b3ebdaf4fd48bec4fa0698a54ec 7ddde72d668d4664847da5a0ffbd6e00 82ffe2f9688a47db833cedfe611f8ce2)],
      $redo=>0,
   },

# Glacier
   {$group=>'Glacier', $title=>"Glacier National Park, USA", $on=>130508, $speakers=>2, $facts=>2, $airPush=>131160,
      $size100=>2048, $size50=>1200, $nook=>1, $genre=>'GE',
      $icon=>["Bearhat Mountain and Hidden Lake", "St. Mary Lake"],
      $amazon=>[qw(65d2ea1cb6874ff2abf00bf4782875b6 6531bb5232614d9c9893ed0cc792852f)],
      $redo=>0,
   },

# Great Olympians - has same appid as GNF which needs to be fixed - has incomplete translation due to url problems
   {$group=>'GreatOlympians', $facts=>1, $speakers=>2, $genre=>'SP', $swap=>3,
      $title=>'Great Olympians',  $airPush=>49027,
      $icon=>["Hans-Gunter Winkler", "Claudia Pechstein", "Jesse Owens", "Kelly Holmes"],
      $amazon=>[qw(57334b345556334e4a4858564f433132 590f93acba4642f193f5de7e29e6c214 8232ae0c50e34063a1b013b2f6ef14f8 e34590b2ceb545cd9334b0c06c2c2567 )],
      $redo=>0,
   },

# Great Sports Cars
   {$group=>'GreatSportsCars', $facts=>1, $speakers=>2, $title=>'Great Sports Cars', $airPush=>51487, $swap=>3,
      $genre=>'TT', $size50=>1024, $size100=>1800, $nook=>1, $undergroundLive=>1,
      $icon=>["Ferrari Enzo 2", "Bugatti Veyron 1", "Koenigsegg CCX 1", "Lotus Elise 1"],
      $amazon=>[qw(5445564636365036375a39304a545a33 ac38b7fda78648d48336c11c4475facc 7797518d2f5042aba9b41525a6065324 0251c8e4a0b74ab6a5f2277219303e85 )],
      $redo=>0,
    },

# Greek
   {$group=>'Greek', $speakers=>2, $title=>'The Greek Alphabet', $genre=>'MA', $on=>151021, $noImages=>1, $subsetsOnly=>2,
      $amazonId=>[qw(0 M3LX90M6LDN0YE)], $free=>[[1..24]],
      $amazon=>[qw(0 8f9586b7891d447485471a295e868347)],
      $redo=>0,
    },

# House
   {$group=>'House', $title=>'House', $facts=>2, $swap=>2, $undergroundLive=>1,
      $speakers=>2, $on=>140824, $nook=>0, $ramesh=>1, $phil=>1, $nook=>1, $sent=>[qw(Vodafone SlideMe)],
      $genre=>'EV', $size100=>1600, $size50=>1200, $jpx=>1,
      $icon=>[qw(icon0 icon1 icon2)],
      $amazon=>[qw(d9ecd0b5e84d4855aca628177b70a041 c41da47e089d4724a0bcb059cd9f677c fa2adfc1398c4023a427dbfb21a0f2ca)],
      $redo=>0,
   },

# How Heavy Am I
   {$group=>'HowHeavyAmI', $title=>"How Heavy Am I?", $speakers=>2, $facts=>2, $airPush=>114129, $on=>130320, $swap=>2,
      $genre=>'SC', $size50=>1400, $size100=>2048, $nook=>1,
      $icon=>["Heaviest land reptile (Galapagos Tortoise)", "Heaviest even-toed ungulate (Hippopotamus)", "Heaviest land animal (African Bush Elephant)"],
      $amazon=>[qw(faf82090237b4f09964cd84f05f4f814 d784267b11414c5f8f3d26357cecb8a1 0e97ad83f8764af4bd480b80e983fd78 )],
      $redo=>0,
   },

# How Long Am I
   {$group=>'HowLongAmI', $title=>"How Long Am I?", $speakers=>2, $facts=>2, $airPush=>114133, $on=>130320,
      $ignore=>1, $genre=>'SC',
      $icon=>["Heaviest land reptile (Galapagos Tortoise)", "Heaviest even-toed ungulate (Hippopotamus)", "Heaviest land animal (African Bush Elephant)"],
      $amazon=>  [qw()],
   },

# How Much Power Do I Use?
   {$group=>'HowMuchPowerDoIUse', $title=>"How Much Power Do I Use?", $speakers=>2, $facts=>2, $airPush=>114131, $on=>130320,
      $genre=>'SC', $size50=>1600, $size100=>2048, $nook=>1,
      $icon=>["Kettle", "Iron"],
      $amazon=>[qw(c5e3b796ad6f48f79c334aac300e3643 eda6557adc1a4700b75c25601183092e )],
      $redo=>0,
   },

# How Tall Am I
   {$group=>'HowTallAmI', $title=>"How Tall Am I?", $speakers=>2, $facts=>2, $airPush=>114132, $on=>130320,
      $ignore=>1, $free=>[[1..32]], $genre=>'SC',
      $icon=>["Largest land reptile (Galapagos Tortoise)", "Heaviest even-toed ungulate (Hippopotamus)"],
      $amazon=>[qw()],
   },

# Jets - Main too big for Google
   {$group=>'Jets', $title=>'Jets and Planes', $facts=>2, $minimax=>1, $swap=>2,  $undergroundLive=>1,
      $speakers=>2, $on=>141016, $nook=>1, $ramesh=>1, $phil=>1, $sent=>[qw(Amazon ApkFiles Google Nook Vodafone)],
      $genre=>'EV', $size100=>1000, $size50=>256,
      $icon=>[qw(F-22_Raptor F5_Tiger Supermarine_Spitfire)],
      $amazon=>[qw(cdb9f3caca944e2d9420bc5752ed1566 45d5a5e179e24f75b106035169128a6e adf276fa7ec34769aa847bf3caf1033f)],
      $redo=>0,
   },

# Kitchen
   {$group=>'Kitchen', $title=>"The Kitchen", $ignore=>1,
   },

# India
   {$group=>'India', $facts=>2, $airPush=>139970,
      $title=>"India", $speakers=>2, $on=>130602,  $undergroundLive=>1,
      $size100=>2048, $size50=>1300, $genre=>'GE',  $nook=>1, $ramesh=>1, $swap=>2,
      $icon=>[qw(Taj_Mahal_4 Akshardham_2 Lotus_Temple1)],
      $amazon=>[qw(652c2ee6813f4ba7bb19f00b507f8824 8ca523ab90574cbba718a523f9ffe409 a140c9f509414f0785d232d9d51538ff)],
      $redo=>0,
   },

# Inventions
   {$group=>'Inventions', $ignore=>1, $facts=>2, $airPush=>139970, # wrong
      $title=>"Inventions", $speakers=>2, $on=>140222, $ramesh=>1,
      $size100=>2000, $size50=>1200, $genre=>'GE',
      $icon=>[qw(icon1 icon2)],
      $amazon=>[qw(3f32f68ebec9447fb58bd802f49d2ea9)],
      $redo=>0,
   },

# Lake District
   {$group=>'LakeDistrict', $facts=>2,
      $title=>"The Lake District", $speakers=>2, $on=>1301208,  $swap=>2,
      $size100=>1200, $size50=>520, $genre=>'GE', $nook=>1,
      $icon=>[qw(icon0 icon1 icon2)], $undergroundLive=>1,
      $amazon=>[qw(0fdca8fe6b6a4cc884a58f698fc5c396   9ef594b028a046c0b711afb7861e5cdf 9db03008778647718392c89b112eac4f)],
      $redo=>0,
   },

# Man On The Moon
   {$group=>'ManOnTheMoon', $facts=>2, $airPush=>102254,
      $title=>"Man On The Moon", $speakers=>2, $on=>130204,
      $size100=>1400, $size50=>740,  $nook=>1,  $undergroundLive=>1,
      $free=>[[1..40],[-39..-1]], $genre=>'SC',
      $icon=>["icon", "Saturn V engines firing", "Command Service Module", "Apollo 11 insignia"],
      $amazon=>[qw(372c9e7fc30942c58b720afbefdd55f7 2b9aaf3805d24b25872ad4eb58967c58 5270ed6bf61b4065a5c0cabd27a76d85 )],
      $redo=>0,
   },

# Marine Aquarium Fish
   {$group=>'MarineAquariumFish', $facts=>1, $airPush=>82075, $swap=>2,
      $title=>"Marine Aquarium Fish", $speakers=>2, $on=>121110,  $nook=>1,  $undergroundLive=>1,
      $size50=>1280, $size100=>1600, $genre=>'AN',
      $icon=>["Lookdown Fish", "Orange Clownfish", "Raccoon Butterflyfish"],
      $amazon=>[qw(edf61a03e93a48a9bbb9a0b19abc8350 1d145524a7504626ad04be6bf424bd83 2a174833c3c2467eabd5df06545f2944 )],
      $redo=>0,
   },

# Months Of The Year in English
   {$group=>'MonthsOfTheYearInEnglish', $collection=>1, $airPush=>49028,
      $title=>"Months of the Year in English",  $freeSuffix=>1, $size100=>2048, $size50=>1600,
      $icon=>["October", "January"], $genre=>'EV',
      $amazon=>[qw(445939464b474a574238324d364c5132 d3c7b689b45d4432ada25140c17cd8a5)],
      $redo=>0,
   },

# Months Of The Year in German
   {$group=>'MonthsOfTheYearInGerman', $title=>"Months of the Year in German", $copyImages=>"MonthsOfTheYearInEnglish",
    $collection=>1, $size100=>2048, $size50=>1600, $on=>20151213, $german=>1, $Wolfgang=>1, $speakers=>2,
      $icon=>["October", "January"], $genre=>'DV',
      $underground=>qw(M5DQ4509EKSPH),
      $amazon=>[qw(f07378ece4c54d17aecd74a8f20ce4a1)],
   },

# Noses
   {$group=>'Noses', $title=>'Noses', $facts=>1, $airPush=>80015, $swap=>2,
      $speakers=>2, $on=>121103, $size100=>2800, $size50=>1200,
      $icon=>[qw(Pig Jaguar Baby)], $genre=>'AN',
      $amazon=>[qw(a3367cd2c107400299c52ddcafde4eb0 b31bede41c344fddb8f906eddd37662b 054966d749b74a7784c78a7f89342055)],
      $redo=>0,
   },

# Oodles of Animals
   {$group=>'OodlesOfAnimals', $facts=>2, $airPush=>'105621', # Article is A
      $title=>"Lots of Animals", $speakers=>2, $on=>130219,
      $genre=>'EV', $swap=>2,
      $icon=>["Herd of deer", "Team of horses", "School of fish"],
      $amazon=>[qw(fb01cf9c7c8c4815867b0f874b9ca7a5 e84623d97cf24ba1a19dcc3e80062ddd 379c6794bed849cb9f81ba99196e1aff )],
      $redo=>0,
   },

# Organic Molecules
   {$group=>'OrganicMolecules', $title=>"Organic Molecules", $airPush=>49029, $useName=>1, $swap=>3,  $undergroundLive=>1,
      $freeSuffix=>1, $nook=>1, $noImages=>1, $facts=>2, $checked=>121016, $genre=>'SC', $nook=>1,
      $icon=>['Acetic Acid', 'Caffeine', 'Benzene', 'Glycerol'],
      $amazon=>[qw(37325441434d39494f37414e434d3938 f0c66eb438b5434c82a61fa70ed1ee06 abde77df56424fb68510beb7b1376471 dcc4522c52064b6590909420cf5d88ae )],
      $redo=>0,
   },

# Parks - National Parks USA
   {$group=>'Parks', $title=>'National Parks USA', $facts=>2, $airPush=>122084, $swap=>2,  $undergroundLive=>1,
      $speakers=>2, $on=>130411, $genre=>'GE',
      $size100=>1000, $size50=>400, $nook=>1,
      $icon=>["Arches National Park, Delicate Arch", "Grand Teton National Park, Cathedral Group", "Glacier National Park, St Mary Lake"],
      $amazon=>[qw(9e785ac46ac84267b3e1cdc3795ff5d3 0884529f6d9f4f3f9aa331598b63678c 338ca79407cc4afe9740928ae0849f37)],
      $redo=>0,
   },

# Past
   {$group=>'Past', $title=>'The Irregular Past in English', $facts=>2, $minimax=>0, $swap=>3,   $undergroundLive=>1,
      $speakers=>2, $on=>150219, $nook=>1, $phil=>1, $sent=>[qw()],
      $genre=>'EV', $size100=>800, $size50=>400,
      $icon=>[qw(Pay Bend Blow Burst)],
      $amazon=>[qw(2711d6129bab43659ef2e6a60833db8b d565464ad0a24b8c9109cb0f562d934d 9f32f382a6bd4b089902e817492097b5  487f7285582346b084a1377a5c378dcc)],
      $redo=>0,
   },

# Paws and Claws
   {$group=>'PawsAndClaws', $title=>'Paws And Claws', $facts=>1, $airPush=>80016, $swap=>2,
      $speakers=>2, $on=>121103,
      $size100=>2800, $size50=>2000, $genre=>'AN', $size50=>1200,
      $icon=>[qw(Rhinoceros Booby Tiger)],
      $amazon=>[qw(a05691c8369d46d2a2fc305ccaa26f57 7137e387bd5c4e21acd5c299af208a2f 7d876c86c7554783bf96d0a09ff24bca)],
      $redo=>0,
   },

# Penguins
   {$group=>'Penguins', $title=>"Penguins of Antarctica", $airPush=>65853,
      $speakers=>4, $facts=>1, $on=>120801, $xversion=>1, $genre=>'AN',
      $icon=>["Emperor Penguin 2", "Emperor Penguin 4"],
      $amazon=>[qw(9492294576744ee89720f091534be581 798fa87305e44303bb97b4743bfbe58f)],
      $redo=>0,
   },

# Periodic Table
   {$group=>'PeriodicTable', $noImages=>1, $facts=>1,  $on=>120801, $ignore=>1, # convert to a number of apps as the current arrangement is too specific
      $airPush=>57916, $speechNumbers=>92, $speech=>'atomic|valency', $xversion=>1, $genre=>'SC',
       screenShots=>['1 2 3 4 5 9 13 79 57 92',                                 # All
                     '1 6 7 8 15 16 34',                                        # NonMetals
                     '2 10 18 36 54 86',                                        # NobleGases
                     '3 11 19 37 55 87',                                        # AlkaliMetals
                     '4 12 20 38 56 88',                                        # AlkalineEarthMetals
                     '5 14 32 33 51 52 84',                                     # Metalloids
                     '9 17 35 53 85',                                           # Halogens
                     '13 31 49 50 81 82 83',                                    # PostTransitionMetals
                     '22 26 27 28 29 30 74 77 78 79',                           # TransitionMetals

          '57 58 59 60 61 62 63 64 65 66',                         # Lanthanides
                     '89 90 91 92'],                                            # Actinides
      $title=>["The Periodic Table","The Periodic Table - Actinides","The Periodic Table - Alkali Metals","The Periodic Table - Alkaline Earth Metals","The Periodic Table - Halogens","The Periodic Table - Lanthanides","The Periodic Table - Metalloids","The Periodic Table - Noble Gases","The Periodic Table - Non Metals","The Periodic Table - Post Transition Metals","The Periodic Table - Transition Metals"],
    },

# Plus Or Minus
   {$group=>'PlusOrMinus', $title=>"Plus or Minus, More or Less", $on=>150424, $phil=>1, $breathDepth=>1, $swap=>2, $squeezeMain=>1, $nook=>1,
      $facts=>2, $speakers=>2, $icon=>["icon0", "icon1a", "icon2a"], $genre=>'MA', $noTranslation=>1, $noImages=>1, $full=>1, $useName=>1,
      $amazon=>[qw(cdda38e3e3dc466e942fc373cf7ddd9f  513658e3226a4c219fe49b4db244b7b2 b94a69c9de974e22a096be2fc045ab55)],
   },

# Puppy Dog Breeds one and two
   {$group=>'PuppyDogBreedsOne', $title=>"Model Puppy Dog Breeds 1",
      $facts=>1,  $airPush=>49031, $freeSuffix=>1,
      $icon=>["Bassett Hound 1", "Beagle Family 1"], $genre=>'AN',
      $amazon=>[qw(49464439334c33484b33443336493949 e623ee3a6fe348428b024ae0a52c0bce)],
   },

   {$group=>'PuppyDogBreedsTwo', $title=>"Model Puppy Dog Breeds 2",
      $facts=>1,  $airPush=>49032, $freeSuffix=>1,
      $icon=>["Standard Poodle 1", "Beagle 1"], $genre=>'AN',
      $amazon=>[qw(474e394b44494b4c4d38354459593149 ce384879793a4d0682be575c4ee9282a)],
      $redo=>0,
   },

# Rhyming Kitchen
   {$captions=>1, $group=>'RhymingKitchen', $title=>"Rhyming Kitchen in English", $swap=>3,
      $airPush=>49033, $freeSuffix=>1, $genre=>'EV', $size100=>1600, $size50=>1024,
      $icon=>["Chopping Board", "Biscuit Jars", "Oven", "Table and Chairs"],
      $amazon=>[qw(5132524d47584259464d454135463532 55abd3edc4504147a9c28e85b1c2bed5 ba6560c66a36454c80d1f7c64c2d5115 15549756e0ae4d039afd22e277d9a711 )],
      $redo=>0,
   },

# Seasons
   {$group=>'Seasons', $title=>'The Four Seasons in English', $facts=>2,
      $airPush=>138671, $speakers=>2, $on=>130529,  $nook=>1, $full=>1,  $undergroundLive=>1,
      $genre=>'EV', $size100=>2400, $size50=>2000,
      $icon=>["Summer P", "Spring P"],
      $amazon=>[qw(55ed09b642594d9088dad3880d08c774 e31f8969afed4b7aabd19e71e64c4f72 )],
      $redo=>0,
   },

# Sharks
   {$group=>'Sharks', $title=>'Sharks', $facts=>2, $size50=>800, $swap=>2,   $undergroundLive=>1,
      $airPush=>97646, $speakers=>2, $on=>130108, $nook=>1, $genre=>'AN', $size50=>900, $size100=>2048,
      $icon=>["Great White Shark", "Basking Shark", "Shortfin Mako Shark"],
      $amazon=>[qw(2dfca76f03444f88a0a4d238a410c71a 6407c661b40c49b2ae59aa2814d9dce5 360c25a4effd4341ad80fc5c44ba5a88 )],
      $redo=>0,
   },

# Sharks in German
   {$group=>'SharksGerman', $title=>'Sharks In German', $facts=>2, $swap=>2,
      $speakers=>2, $on=>160218, $size50=>900, $size100=>2048,
      $german=>1, $Wolfgang=>1, $genre=>'DV', $copyImages=>"Sharks", $copyFacts=>"Sharks",
      $icon=>["Great White Shark", "Basking Shark", "Shortfin Mako Shark"],
      $amazon=>[qw(0 0)],
   },

# Signs of the Zodiac
   {$group=>'SignsoftheZodiac', $title=>"Signs of the Zodiac", $facts=>1, $freeSuffix=>1, $airPush=>49034,
      $icon=>["Taurus 2", "Aries 2"], $genre=>'PE',
      $amazon=>[qw(55485830365a46364849374847333551 d10a52d7237e4916bb3d6a1f7d4b7a84)],
      $redo=>0,
   },

# Soft Toy Alphabet
   {$group=>'SoftToyAlphabet', $alphabet=>1,
     $airPush=>49036, $genre=>'EA',
     $free=>[[1..30],[-30..-1]], $size50=>1400, $size100=>2048,
     $title=>"Easy Soft Toy Alphabet",
     $icon=>["Old Bear", "Bee", "Penguin"],
     $amazon=>[qw(5338415a4b4233544d37413846425941 05d8b8a1a4fc49e492aa2e9711c9ed8b d2b794b4400c431289a17da3eabf111b )],
     $apkGoogle=>"SoftToyAlphabetA", $freeSuffixAmazon=>1,
     $redo=>0,
   },

# Subtraction
   {$group=>'Subtraction', $title=>'Subtraction',  $animation=>1, $genre=>'MA', $noWords=>1, $on=>140415, $amazon=>[qw(878c6a18874242aea0d458b48d759d17)],
   },

# SunMoonsPlanets
   {$group=>'SunMoonsPlanets', $facts=>2, $speakers=>2, $airPush=>49037, $undergroundLive=>1,
      $title=>"Sun, Moons and Planets", $genre=>'SC',  $nook=>1,
      $size100=>2800, $size50=>1600,
      $free=>[[1..44],[1..44]], # Free subsets have all moons and planets because otherwise the moons and planets get mixed up in slide show mode
      $music=>[qw(102 99 60 59 55 97 91 88 87 86 85 84 80 68 72 17 16 13 11 9 51 46 45 42 28 26 18)],
      $icon=>["Saturn", "Earth", "Mars"],
      $amazon=>[qw(30a321ec286c4e95b1271a76631d8dca 2f49559cbde74cb7a193fb2bccb5be1e 9ffa6eda39084839a29cc39b1e2eb9bd )],
      $redo=>0,
   },

# Super Birds
   {$group=>'SuperBirds', $facts=>2, $airPush=>'111325', # Size is 4*3, Article is A
      $title=>"Super Birds", $speakers=>2, $on=>130308, $genre=>'AN', $size50=>1200, $size100=>2048,  $nook=>1,
      $icon=>["Keenest sense of hearing of any bird (Barn Owl)", "Biggest parrot (Hyacinth Macaw)"],
      $amazon=>[qw(facd47c477db4a949919f0dc8a8f8323 ffac014645334f99ab73685e1d81eca6 )],
      $redo=>0,
   },

# Super Fish
   {$group=>'SuperFish', $facts=>2, $airPush=>'111329', # Size is 4*3, Article is A
      $title=>"Super Fish", $speakers=>2, $on=>130312, $genre=>'AN', $size50=>1600, $size100=>2048, $nook=>1,
      $icon=>["Most inflateable fish (Pufferfish)", "Most colourful fish (Mandarinfish)"],
      $amazon=>[qw(09d50ac30a7c49f6bf6cdb586106cf01 e219a78733be4638a754e8fbcc3e2d76 )],
      $redo=>0,
   },

# Super Mammals
   {$group=>'SuperMammals', $facts=>2, $airPush=>'113434', # Size is 4*3, Article is A
      $title=>"Super Mammals", $speakers=>2, $on=>130316, $genre=>'AN', $size50=>1400, $size100=>2048, $nook=>1,
      $icon=>["Tallest land mammal (Giraffe)", "Biggest mouth of any land mammal (Hippopotamus)"],
      $amazon=>[qw(a9620875f97d48f288021680bbe7008f 75178ba6d12b4bac890a244dbe385862 )],
   },

# Teddy Bears In Action
   {$group=>'TeddyBearsInAction', $title=>'Teddy Bears In Action',
      $airPush=>101720, $speakers=>2, $on=>130204, $genre=>'EV', $nook=>1,   $undergroundLive=>1,
      $icon=>["Drinking a cup of tea", "Reading a book", "Talking on the phone"],
      $amazon=>[qw(c07a51b31d13407fbd21e567d4a5bc20 ed2fc1fcb8144b7897b9364483cb95a5 )],
   },

# Teddy Bears In Action in German
   {$group=>'TeddyBearsInActionGerman', $title=>'Teddy Bears In Action In German',
      $speakers=>2, $on=>151228, $swap=>2, $german=>1, $Wolfgang=>1, $genre=>'DV',
      $copyImages=>"TeddyBearsInAction",
      $icon=>["Drinking a cup of tea", "Reading a book", "Talking on the phone"],
      $amazon=>[qw(0 0)],
    },

# Tell The Time
   {$group=>'TellTheTime', $title=>"Tell the Time", $speakers=>4, $airPush=>50937, $freeSuffix=>1,
      $icon=>["Three O'Clock", "Twelve O'Clock"], $genre=>'EV',  $undergroundLive=>1,
      $amazon=>[qw(5649454f53544e395751343732315543 ebf59772d0b64cd5a44c23d6e06b79e2)],
   },

# Tell The Time in German
   {$group=>'TellTheTimeGerman', $title=>"Tell the Time in German", $speakers=>2, $on=>151115,
      $icon=>["Three O'Clock", "Twelve O'Clock"], $genre=>'DV', $german=>1, $Wolfgang=>1, $copyImages=>"TellTheTime",
      $underground=>qw(MVH7ZLW5AEMH1),
      $amazon=>[qw(3848522e0fbb4e7c8bb19cf28bef896d)],
   },

# Tell The Time Two - facts not translated as they are licence only info
   {$group=>'TellTheTimeTwo', $title=>"Tell the Time Two", $speakers=>1, $facts=>1, $airPush=>75254, $useName=>1,
      $icon=>["09_35a", "00_00a", "11_30a"], $genre=>'EV',
      $size50=>800, $nook=>1,
      $amazon=>[qw(0e760f2c741c450b87f062ee2c6643b9 17b527f53106407c902ebbbbb154921f)],
      $redo=>0,
   },

# Test Cricketers of Australia
   {$group=>'TestCricketersAustralia', $facts=>1, $title=>"Test Cricketers of Australia", $swap=>2,
      $airPush=>57709, $speakers=>2, $genre=>'SP', $size50=>1400,
      screenShots=>'1 9 14 17 18 19 20 24 32 22',
      $icon=>["Michael Clarke 2", "Brad Hodge 1", "Shane Warne 2"],
      $amazon=>[qw(10e51da7c14b41de9fcc97ca6af43965 3e8457ac16054e3984a20d93058e21dd dee6efdd059648aba3dc3faa39bec34e )],
      $redo=>0,
   },

# Test Cricketers of India
   {$group=>'TestCricketersIndia', $facts=>1, $title=>"Test Cricketers of India", $airPush=>56840, $speakers=>4, $swap=>2,
      $genre=>'SP', $size50=>1600,
      screenShots=>'20 13 18 21 4 5 6 8 9 7',
      $icon=>["Rahul Dravid 3", "Ajinkya Rahane 1", "Sachin Tendulkar 4"],
      $amazon=>[qw(4392dc4805dd421a80e5cfa366072e42 9b434b8ca8f342c9bcb9d8f0fa2b0f56 c749e796bd6b4026a1bdb485913d7f83 )],
   },

# The Numbers from 1 to 100  - the main subset is the free subset on Google play hence the noSubsets keyword
   {$group=>'TheNumbersFrom1To100InEnglish', $on=>120801, $free=>[[1..100]], $freeSuffix=>1, $undergroundLive=>1,
      $noImages=>1, $speakers=>4, $useName=>1, $noSubsets=>1, $underground=>qw(MOLRR5D2IUH7U),
      $genre=>'NU', $icon=>["icon2"], $airPush=>49023,
      $title=>"The Numbers from 1 to 100 in English",
      $amazon=>[qw(453030453436344b45554d4842475355 453030453436344b45554d4842475355)], # Free only on Google with audio ads
   },

# The Numbers from 1 to 100 in French - at the moment only the free subset is loaded onto Google Play
   {$group=>'TheNumbersFrom1To100InFrench', $on=>160114, $free=>[[1..100]],
      $noImages=>1, $speakers=>2, $useName=>1, $subsetsOnly=>1, $underground=>qw(0), $french=>1, $Patrick=>1,
      $copyImages=>'TheNumbersFrom1To100InEnglish', $genre=>'NU', $icon=>["icon", "icon"],
      $title=>"The Numbers from 1 to 100 in French",
      $amazon=>[qw(0 MMTS1AWRTDVV)], $amazonId=>[qw(0 5d101447baed437f9b8749f110eb22bb)],
   },

# The Numbers from 1 to 100 in German
   {$group=>'TheNumbersFrom1To100InGerman', $on=>150906, $free=>[[1..100]],
      $noImages=>1, $speakers=>2, $useName=>1, $noSubsets=>1, $underground=>qw(0),  $german=>1, $Wolfgang=>1,
      $genre=>'NU', $icon=>["icon", "icon"],
      $title=>"The Numbers from 1 to 100 in German",
      $amazon=>[qw(cc3befb214f24e1cbb56ebbccef6c00d)], $amazonId=>[qw(M3DJ0SDVO9X31P)],
   },

# The Numbers from 1 to 100 in Italian
   {$group=>'TheNumbersFrom1To100InItalian', $ignore=>1, $title=>"The Numbers 1 to 100 in Italian", $noImages=>1, $speakers=>1, $airPush=>122674, $on=>130413,
    $free=>[[1..100]],  $genre=>'NU',
    $icon=>["icon2", "icon2"],
      $redo=>0,
   },

# To Be Or Not To Be
   {$group=>'ToBeOrNotToBe', $ignore=>0, $title=>"To Be Or Not To Be", $jpx=>256,
      $size100=>2800, $size50=>2800, $useNameSource=>1, # Copy sound source which was done by name to target done by title
      $genre=>'HI', $on=>140222, $titlesInFacts=>1,
      $icon=>[qw(icon2 icon1)],
      $amazon=>[qw(3685b0ee8e194d6bb356e2e3e4a20f69 a1d0680dc2cf44c8bbf48f974a6787c4)],
      $redo=>0, $speakers=>2,
   },

# Top 10 Fast Motor Bikes
   {$group=>'Top10FastMotorBikes', $title=>"Top 10 Fast Motor Bikes", $airPush=>49033, $undergroundLive=>1,
      $facts=>1, $airPush=>48265, $freeSuffix=>1,
      $size100=>2800, $size50=>2048,
      $genre=>'TT',
      $music=>[qw(103 100 96 94 93 82 81 78 62 60 59 57 56 55 49 47 46 43 40 36 18 11 1)],
      $icon=>["Suzuki Hayabusa", "Honda CBR1100XX"],
      $amazon=>[qw(363849385248555257424c424336474d a6b1c2e8476c4affa9caee222f4b7fe9 )],
      $redo=>0,
   },

# Top 10 Highest Mountains
   {$group=>'Top10HighestMountains', $facts=>1, $speakers=>4, $swap=>2, $airPush=>49039, $genre=>'GE',
      $title=>"Top 10 Highest Mountains", $freeSuffix=>1,
      $icon=>["Manaslu 3", "Everest 1", "K2 2"],
      $amazon=>[qw(364e4b554e55524642494d3932414a4f 694713fe809145109375cc341a3acbf7 95848c851abb4e8091fbb4052ea7d45e )],
      $redo=>0,
    },

# Top 10 Tallest Asia Pacific Roller Coasters
   {$group=>'Top10TallestAsiaPacificRollerCoasters', $title=>"Top 10 Tallest Asia Pacific Roller Coasters",
      $facts=>1, $speakers=>4, $on=>120801, $swap=>2, $genre=>'TT', $airPush=>63462,  $undergroundLive=>1,
      $icon=>["Eejanaika 5", "Fujiyama 3", "Thunder Dolphin 6"],
      $amazon=>[qw(0ebd00f6d1164a89bf8875e8e470962b b3caf7b8660f4418be7a486bee10cc17 01992f48cc274625a3fb191ae76f0a8f )],
      $redo=>1,
   },

# Top 10 Tallest European Roller Coasters
   {$group=>'Top10TallestEuropeanRollerCoasters', $title=>"Top 10 Tallest European Roller Coasters",
      $facts=>1, $speakers=>4, $on=>120801, $swap=>2, $genre=>'TT',  $undergroundLive=>1,
      $airPush=>62577, $size50=>640,
      $icon=>["Expedition GeForce 4", "iSpeed 1", "Stunt Fall 5"],
      $amazon=>[qw(a60a8310833249e7afd4f6c36e1a3f00 03c1716dd49748b796dd6c5c88c6f243 68c41ed75db94d468450b10038e63b24 )],
      $redo=>0,
   },

# Top 10 Tallest Ferris Wheels
   {$group=>'Top10TallestFerrisWheels', $title=>"Top 10 Tallest Ferris Wheels", $swap=>2,
      $facts=>1, $speakers=>4, $genre=>'TT', $size50=>1600, $airPush=>50935,
      $icon=>["Tianjin Eye 3", "London Eye 2", "Southern Star 2"],
      $amazon=>[qw(4d4454315247354c574c353832344c57 9707e280a930482da0fa241708d229b3 3398108c8eb64017a9138226b0e00e6d )],
      $redo=>1,
   },

# Top 10 Tallest North American Rollercoasters
   {$group=>'Top10TallestNorthAmericanRollerCoasters', $title=>"Top 10 Tallest North American Roller Coasters",
      $facts=>1, $speakers=>4,  $on=>120801, $undergroundLive=>1,
      $free=>[[1..4,7,10], [-6..-1]], $genre=>'TT',
      $airPush=>62969, $size50=>256, $sent=>[qw(ApkFiles)],
      $icon=>["Leviathan 4", "Intimidator 305 3", "Millennium Force 4"],

      $amazon=>[qw(ddab4dea540441109b73f5314700f49e a5ea643393a348d2b7062e7f3d6d3e1e af0949ac44b6477a92bf17c5427d40f4 )],
      $redo=>0,
   },

# Top 10 Tallest Rollercoasters
   {$group=>'Top10TallestRollerCoasters', $title=>"Top 10 Tallest Roller Coasters", $swap=>2,
      $facts=>1, $speakers=>4, $on=>120801, $genre=>'TT', $airPush=>51478,
      $icon=>["Millennium Force 1", "Intimidator 305 1", "Top Thrill Dragster 3"],
      $amazon=>[qw(534e384d49584949513350514d4c5957 44ed024a9c724da9bb2acbf836cbe223 37a834b6a77f4ca5abcf9107d2672d24 )],
      $apkGoogle=>"Top10TallestRollerCoastersA",
      $redo=>0,
   },

# Top 10 Tallest Towers
   {$group=>'Top10TallestTowers', $title=>"Top 10 Tallest Towers", $minimax=>1, $facts=>2, # Upgrade facts from 1 to 2 on 2014/11/11
      $airPush=>50938, $genre=>'TT', $speakers=>2, $nook=>1, $size100=>2048, $size50=>1280,
      $icon=>["PetronasTowers", "BurjKhalifa"], $sent=>[qw(Google Apkfiles Amazon Nook)],
      $amazon=>[qw(504542485a494f4e53364c5753584452 a0c4b66663f042b9a05b10ed95762550)],
      $redo=>0,
   },

# Top 20 Horse Breeds
   {$group=>'Top20HorseBreeds', $facts=>2, $airPush=>'105261', $swap=>2, # Size is 4*3, Article is A
      $title=>"Top 20 Horse Breeds", $speakers=>2, $on=>130218, $nook=>1,
      $size100=>2048, $size50=>1024,
      $genre=>'AN',
      $icon=>["Andalusian 2", "Mustang", "Morgan"],
      $amazon=>[qw(134f381985cc4b12a0b6a635f43c89c1 b57ecaf903ff42bc980f655340e81737 ce04b190dbf74179be246c318a405943 )],
      $redo=>0,
   },

# Toy Transport Alphabet
   {$group=>'ToyTransportAlphabet', $alphabet=>1, $title=>"Easy Toy Transport Alphabet", $airPush=>49040, $freeSuffix=>1,
      $icon=>["Helicopters", "Campers"], $genre=>'EA', $undergroundLive=>1,
      $amazon=>[qw(31415254494433313341455536334f43 b3fc1d9e0a3a47c683479c4446b9bb1c)],
      $redo=>0,
    },

# Trace Numbers09
   {$group=>'TraceNumbers09', $useName=>1, $title=>'Trace Numbers 0 to 9', $noImages=>1, $airPush=>49041, # $numbers=>1,
      $icon=>["icon", "icon"],  $genre=>'NU',
      $amazon=>[qw(4833513744505a47354d323054303036 2a4ea2da47334d238af7a78c18e11f2f)],
   },

# Trace Numbers09 in Cantonese
   {$group=>'TraceNumbers09InCantonese', $useName=>1, $title=>'Trace Numbers 0 to 9 in Cantonese', $noImages=>1, $flattenAudio=>1,
      $icon=>["icon", "icon"],  $genre=>'NU', $FongKheiMah=>1, $cantonese=>1, $speakers=>3, $subsetsOnly=>2, $copyImages=>'TraceNumbers09',
      $underground=>[qw(0)],
      $amazon=>[qw(00 )],
   },

# Trace Numbers09 in Mandarin
   {$group=>'TraceNumbers09InMandarin', $useName=>1, $title=>'Trace Numbers 0 to 9 in Mandarin', $noImages=>1,
      $icon=>["icon", "icon"],  $genre=>'NU', $Victoria=>1, $mandarin=>1, $speakers=>2, $subsetsOnly=>2, $copyImages=>'TraceNumbers09',
      $amazonId=>[qw(0 M26HJQ88M0IAFH)],
      $amazon=>[qw(0 6c50c23f92fe4ded8c1a143fef8b380b)],
   },

# Trace Numbers09 in French
   {$group=>'TraceNumbers09InFrench', $useName=>1, $title=>'Trace Numbers 0 to 9 in French', $noImages=>1,
      $icon=>["icon", "icon"],  $genre=>'NU', $Patrick=>1, $french=>1, $speakers=>3, $subsetsOnly=>2,
      $amazonId=>[qw(00  M2XP9FK3X17XD5)],
      $amazon=>[qw(00  093704877ca74a0d818923364391898a)],
   },

# Trace Numbers09 in German
   {$group=>'TraceNumbers09InGerman', $useName=>1, $title=>'Trace Numbers 0 to 9 in German', $noImages=>1,
      $icon=>["icon", "icon"],  $genre=>'NU', $Wolfgang=>1, $german=>1, $speakers=>3,
      $amazonId=>[qw(01  M2J6IVM00KCFBX)],
      $amazon=>[qw(01  80aff41acda746119083b5805564d7e5)],
   },

# Transport Alphabet
   {$group=>'TransportAlphabet', $title=>"Easy Transport Alphabet", $alphabet=>1, $airPush=>49042,
      $free=>[[1..30],[25..55],[-30..-1]], $freeSuffix=>1,  $genre=>'EA', $undergroundLive=>1,
      $icon=>["Helicopter", "Airplane", "Mini", "Scooter"],
      $amazon=>[qw(56475151325041344f39584a4d315450 960ba166058442058b47eafca2c2ab13 ec2b5f006f864be3a61fc1d5dcc90d5e 21d601bce2494ef5afe71dc7c52554fe )],
      $redo=>0,
   },

# Trees
   {$group=>'Trees', $title=>'Trees', $facts=>2, $ramesh=>1, $phil=>1, $swap=>2, $undergroundLive=>1,
      $speakers=>2, $on=>140810, $nook=>0, $jpx=>1, $size100=>1800, $size50=>900, $nook=>1, $genre=>'FL',
      $icon=>[qw(icon0 icon1 icon2)],
      $amazon=>[qw(a7b03594d2704f0f852a9b5794463b1f 7a90f00294a94800998fd806b8bfb250 44dc88fd108148d682582eefe21f4c95)],
      $redo=>0,
   },


# Waterfalls
   {$group=>'Waterfalls', $title=>'Waterfalls', $airPush=>64228, $icon=>"1", $on=>120801, $swap=>2, $genre=>'GE', $icon=>[8, 1, 7], $audioOnVideo=>1,
      $amazon=>[qw(196e74ab0bd144d8998f6a8b61f7a2d2 f32e9802ae02443085ad50501f1f105c b35017a31fbe4e26aa39d108a65d14e1 )], $undergroundLive=>1,
      $redo=>0,
   },

# Weather vanes
   {$group=>'WeatherVanes', $title=>'Easy Weather Vane Alphabet',
      $alphabet=>1,  $airPush=>49043,  $freeSuffix=>1,  $undergroundLive=>1,
      $icon=>["Nine Sails", "Cockerel"],  $genre=>'EA',
      $amazon=>[qw(335a4c54423145455143435258584457 ba1140a401d64f519e20772054a5f3e3)],
      $redo=>0,
   },

# Wild Animals
   {$group=>'WildAnimals', $swap=>2,
      $title=>'Wild Animals',  $airPush=>49044, $genre=>'AN',
      $freeSuffix=>1, $size50=>1600, $nook=>1,  $undergroundLive=>1,
      $icon=>["Kangaroo", "Giraffe", "Lion"],
      $amazon=>[qw(584e54565431504159304c36484f3636 edfab9691a8c4dccad17cc7e285d4780 10f32b4fb96b4d04ab67f472b39cd22f )],
      $redo=>0,
    },

# Wild Animals German
   {$group=>'WildAnimalsGerman', $title=>'Wild Animals in German', $speakers=>2, $on=>151212, $swap=>2,
      $size100=>2400, $size50=>1600, $genre=>'DV', $german=>1, $Wolfgang=>1, $copyImages=>"WildAnimals",
      $icon=>["Kangaroo", "Giraffe", "Lion"],
      $underground=>[qw(M2PN1WTKR9F50I)],
      $amazon=>[qw(f0ad662885654ee4baba12737b666720)],
    },

# Wild Flowers
   {$group=>'WildFlowers', $title=>'Wild Flowers', $speakers=>2, $on=>120402, $airPush=>49045, $swap=>2,
      $freeSuffix=>1, $genre=>'FL', $nook=>1, $undergroundLive=>1,
      $icon=>["Globeflower", "Avens", "Snowbell"],
      $size100=>2000, $size50=>1600,
      $amazon=>[qw(43364151524437574857563234454945 3dedda43712947748417118b029e00af 19c4b031d1864421ac255ef25b4cc003)],
    },

# Wild Flowers in German
   {$group=>'WildFlowersGerman', $title=>'Wild Flowers in German', $speakers=>1, $on=>151212, $swap=>2, # Wolfgang recorded as a teaching app because I forgot to mention that it was more of a non teaching app and so he did tehg flower names overly clealry and slowly, so I reduced the number of speakers to 1 and took the fast version of each name and wrote off the slow version as in Brookes: "The Mythical Man Month" viz: "Build one to throw away - you will anyway"
      $size100=>2000, $size50=>1600,$genre=>'DV',  $german=>1, $Wolfgang=>1, $copyImages=>"WildFlowers",
      $icon=>["Globeflower", "Avens", "Snowbell"],
      $underground=>qw(M30LAXXNQ3FGE), $amazon=>[qw(0)],
    },

# Word Endings
    {$group=>'WordEndings', $block=>2, $airPush=>49046, $full=>1,
      $title=>"Common Word Endings",  $genre=>'EV',  $undergroundLive=>1,
      $free=>[[1..40],[27..66],[-40..-1]], $freeSuffix=>1,
      $icon=>["Icon 4", "Icon 2", "Icon 6", "Icon"],
      $amazon=>[qw(4431425341553455465453584e593744 4062e3146bf74b7fbda3bd7916a134c3 8b94629ba5c644088beccd08342def5e 1f793342eadf406688de8b6f0cc41301 )],
    },

# Yawning
   {$group=>'Yawning', $title=>'Animals Yawning', $airPush=>74013, $airPush=>83614, $swap=>2,
      $speakers=>2, $on=>121005, $size100=>2000, $size50=>1200,  $undergroundLive=>1,

      $icon=>["Hippopotamus", "Cat", "Tiger"],  $genre=>'AN',
      $amazon=>[qw(1ae63c38064f49a4ad416c4c447af05d 20f8e6e76e304a5389e622ae98baf41e 5652fd8d0acd43b09ca4b2347675c600)],
      $redo=>0,
   },

# Yosemite
   {$group=>'Yosemite', $title=>'Yosemite National Park, USA', $facts=>2, $airPush=>129937,
      $speakers=>2, $on=>130505, $undergroundLive=>1,
      $size100=>2800, $size50=>1300, $nook=>1,
      $icon=>["Yosemite Valley", "Yosemite Falls"],  $genre=>'GE',
      $amazon=>[qw(19684a48a28b47b9821c1e790ea07df3 be5114fcc22248c3bf31bbe2ff2ab5fb )],
      $redo=>0,
   },

#-------------------------------------------------------------------------------
# Example apps - built to test new ideas before incorporating them into the main
# build process
#-------------------------------------------------------------------------------

    {$group=>"Geometry", $ignore=>1, title=>"Geometry Animations", $on=>"20150608", $example=>1,
    }

 );

#-------------------------------------------------------------------------------
# More than one action specified - Log() not available yet
#-------------------------------------------------------------------------------

sub moreThanOneAction()
 {say STDERR "Ignoring compile as more than one action specified";
  @genAndroid = ();
 }

#-------------------------------------------------------------------------------
# Log an error message
#-------------------------------------------------------------------------------

my @log;

sub uploadLog()                                                                 # Its free as its in going
 {if ($amazonEC2)                                                               # S3 log identified by instance id in meta
   {my $f = (&dateStamp." pid $$") =~ s/\s+/_/gr;                               # Name log
    amazonBucket()->add_key("Compile/Log/$f.html",
     '<pre>'.join('', map {"$_\n"} @log).'</pre>',
     "text/html", 0, {from=>$f});
   }
 }

sub Log(@)
 {my $t = timeStamp().($amazonEC2 ? "-$$ ": " ").join('', map {$_//''} @_);     # To stop undefs destroying messages
     $t =~ s/\s+\Z//;                                                           # Trim trailing spaces
  push @log, $t;
  say STDERR $t;
  if (1)                                                                        # Local log
   {open my $F, ">>".&logFile;
    say $F $t;
    close($F);
   }
  if ($amazonEC2 && @log % 10 == 9) {uploadLog()}
 }

sub Advise(@)         {Log(colored(join('', @_), 'green bold on_yellow'))}
sub Carp(@)           {Log(colored(join('', @_), 'red'))}
sub Confess(@)        {Log(colored(join('', @_), 'red bold')); use Carp; Carp::confess();}
sub ConfessAndExit(@) {Confess(@_); exit(1)}                                    # Exit, even if inside an eval
sub normalFinish(@)                                                             # Confirm action completed and exit
 {my ($package, $filename, $line) = caller();
  Advise("Normal Finish on line $line: ", @_);                                  # Message
  exit(0);
 }

END
 {uploadLog();
 }

#-------------------------------------------------------------------------------
# Genre descriptions
#-------------------------------------------------------------------------------

my $genres =
 {AN=>"Animals",
  EA=>"English Alphabet",
  EV=>"English Vocabulary",
  DV=>"German Vocabulary",
  FV=>"French Vocabulary",
  FL=>"Flowers",
  FO=>"Food",
  GE=>"Geography",
  HI=>"History",
  MA=>"Maths",
  NU=>"Numbers",
  PE=>"People",
  SC=>"Science",
  SP=>"Sport",
  TT=>"Top Ten",
 };

# Check every app has a valid genre and amazon key

if (rand() > 0.9)
 {for(@app)
   {next if ($_->{$ignore} or $_->{$example});
    my $g = $_->{$group} or Confess "No group name for app";
    $_->{$title}         or Carp    "No title for app $g";
    my $G = $_->{$genre};
    $G && $genres->{$G}  or Carp "Bad genre for group $g";
   }
 }

#-------------------------------------------------------------------------------
# Time
#-------------------------------------------------------------------------------

sub dateTimeStamp() {strftime('%d-%b-%Y at %H:%M:%S', localtime)}
sub dateStamp()     {strftime('%Y-%b-%d',             localtime)}
sub timeStamp()     {strftime(            '%H:%M:%S', localtime)}

#-------------------------------------------------------------------------------
# Debug at a point
#-------------------------------------------------------------------------------

sub debug                                                                       # Break for debugger
 {no warnings qw(once);
  say STDERR "@_" if @_;
  $DB::single = 1;
 }

#-------------------------------------------------------------------------------
# Backup/Refresh to ensure that a production compile uses the latest code
#-------------------------------------------------------------------------------

sub backUp                                                                      # Backup crucial files that change frequently
 {my ($backUp) = @_;
  my $genApp  = "${perlDir}genApp.pm";
  my $svb     = "AppaAppsSourceVersions";
  my $td      = "Vocabulary";                                                   # Directory in back up bucket
  my $Svb     = "s3://$svb/$td";                                                # S3 address of back up target directory

  if (1)                                                                        # For compile on EC2
   {Advise "Backup starting for compile today";
    my $t = strftime("%Y-%m-%d", gmtime(time()));
    &sendFileS3("AppaApps", "Source/$t-genApp.pm",  $genApp);
    &sendFileS3("AppaApps", "Source/$t-$Midlet.java", $sourceCode);
    Advise "Backup finished for compile today";
   }
  if (1)                                                                        # Intermediate work - crucial files
   {Advise "Backup starting of intermediate development files to $Svb";
    my @f = (["Facts2.pm", "${perlDir}Facts/Facts2.pm"], ["$Midlet.java", $sourceCode], ["genApp.pm", $genApp]);
    for(@f)
     {my ($t, $s) = @$_;
      &sendFileS3($svb, "$td/$t", $s);
     }
    Advise "Backup finished of intermediate development files to $Svb"
   }
  if (1)                                                                        # Intermediate work - crucial files
   {Advise "Sync starting";
    &syncS3($sourceDir,     $sourceS3);                                         # Always sync source code
    &syncS3($perlDir,       $perlS3);                                           # Always sync perl
    &syncS3($Home."eclipse/workspace", "s3://AppaApps/eclipse");                # Always sync eclipse to back up animations
    &syncS3($supportingDoc, $supportingDocS3, 1);                               # Always sync everything
    Advise "Sync finshed";
   }
 }

sub syncS3($$;$)                                                                # Synchronize with a folder on S3
 {my ($s, $t, $cleanPossible) = @_;
  Log   "Sync started  $s to $t";
  my $delete = '';
  if ($cleanBackups && $cleanPossible)
   {Log "Type yes to permit a clean backup to be made - this should be only done after a full recompile of everything that has produced no errors";
    my $r = <>;
    if ($r =~ /yes/)
     {$delete = '--delete';
      Log "Making a clean backup";
     }
    else
     {Log "Not making a clean backup because response $r was not yes";
     }
   }

  my $c = "aws s3 sync $delete $s $t";                                          # Note --delete option
  print &execCommand($c);
  Log   "Sync finished $s to $t";
 }

sub backDownSourceCode($$)                                                      # Get latest version of java/perl
 {my ($source, $target) = @_;
  my $t = strftime("%Y-%m-%d", gmtime(time()));
  my $m = "Source/$t-$source";
  if (my $M = amazonBucket()->head_key($m))
   {my $d = $M->{Metadata}{time};
    my $D = modTime($target);
    if ($d > $D)
     {my $b = amazonBucket();
      my $r = $b->get_key_filename($m, $target);
      my $c = $r->{'ContentType'};
      if ($c && $c =~ /text\/plain/)
       {Log "Updated $source from $D to $d";
        return 1;
       }
      else {::Confess "Unable to refresh $source because ", dump($r)}
     }
    else {::Log "$source already refreshed to $d"; return 0}
   }
  ::Confess "Cannot get $m from S3";                                            # Complain if we cannot access S3
 }

if ($amazonEC2)                                                                 # So we always compile with today's version
 {    &backDownSourceCode("$Midlet.java", $sourceCode);                         # Java
  if (&backDownSourceCode("genApp.pm",    $perlScript))                         # Perl
   {Confess "Newer versions of Perl script found, rerun to continue";
   }
 }

#-------------------------------------------------------------------------------
# App selection
#-------------------------------------------------------------------------------

if ($activeList)
 {my $o = substr($activeList, 0, 1);
  if ($o ne '*')
   {my $v = substr($activeList, 1);
    for(@app)
     {if    ($o eq '=') {$_->{$active} = $_->{$group} =~ /$v/i}
      elsif ($o eq '!') {$_->{$active} = $_->{$group} !~ /$v/i}
      elsif ($o eq '>') {$_->{$active} = $_->{$group} ge $v}
      elsif ($o eq '<') {$_->{$active} = $_->{$group} le $v}
      else              {$_->{$active} = $_->{$group} =~ /$activeList/i}
     }
   }
  else {$_->{$active} = 1 for @app}
 }
else   {$_->{$active} = 1 for @app}


if (1)                                                                          # Selected apps statistics
 {my $n = 0; my $N = 0; my @s;
  for(@app)
   {next if $_->{ignore};
    $n++;
    if ($_->{$active})
     {$N++;
      push @s, $_->{group}
     }
   }
  ::Log "$n apps, $N:", join ' ', @s;
 }

#-------------------------------------------------------------------------------
# App names
#-------------------------------------------------------------------------------

sub appNames {join ',', map {'"'.$_->{group}.'"'} grep {!$_->{ignore}} @app}

#-------------------------------------------------------------------------------
# App languages
#-------------------------------------------------------------------------------

sub appLanguagesMinusEnglish {sort keys %languages}
sub appLanguagesPlusEnglish  {('en', appLanguagesMinusEnglish)}
sub appLanguages             {join ',', map {'"'.$_.'"'} &appLanguagesPlusEnglish}

#-------------------------------------------------------------------------------
# One of
#-------------------------------------------------------------------------------

sub oneOf($@)                                                                   # Check the first number is in the remaining numbers
 {my ($a, @a) = @_;
  for(@a)
   {return 1 if $a == $_;
   }
  undef
 }

sub oneOfStrings($@)                                                            # Check the first string is in the remaining numbers
 {my ($a, @a) = @_;
  Confess "string required" unless defined $a;
  for(@a)
   {return 1 if $a eq $_;
   }
  undef
 }

sub vendorCode($)                                                               # Returns name of vendor
 {my ($genAndroid) = @_;                                                        # from numeric code for vendor
  my $v = $vendorCode[$genAndroid] or ::Confess "No vendor code for genAndroid=$genAndroid";
  $v
 }

my %vendorCode = map {vendorCode($_), $_} 1..$#vendorCode;

sub vendorNumber($)                                                             # Returns number of vendor
 {my ($name) = @_;                                                              # from name of vendor
  return $vendorCode{$name} if defined $vendorCode{$name};
  Confess "No vendor with name $name";
 }

sub validVendor($)                                                              # Returns name of vendor
 {my ($name) = @_;                                                              # from valid name of vendor
  return $name if defined $vendorCode{$name};
  Confess "No vendor with name $name";                                          # Or dies if invalid
 }

sub oneOfVendor($@)
 {my $genAndroid = shift;
  for(@_)
   {Confess "No such vendor code: ". $_ unless my $c = $vendorCode{$_};
    Confess "Missing genAndroid" unless $genAndroid;
    return 1 if $genAndroid == $c;
   }
  undef
 }

#-------------------------------------------------------------------------------
# Read file into string
#-------------------------------------------------------------------------------

sub readFile($)
 {my ($f) = @_;
  $f or ::Confess "readFile: No file specified";
  open my $F, "<$f" or ::Confess "Cannot open $f for input";
  local $/ = undef;
  <$F>;
 }

sub readUnicode($)
 {my ($f) = @_;
  open(my $F, "<:encoding(UTF-8)", $f) or ::Confess "Cannot open $f for unicode input";
  local $/ = undef;
  <$F>;
 }

#-------------------------------------------------------------------------------
# Preprocess java source code
#-------------------------------------------------------------------------------

sub javaSource($)
 {my ($gen) =  @_;
  $gen->confirmGen;
  my ($genAndroid, $app, $subset) = ($gen->genAndroid, $gen->app, $gen->subset);
  my  $group = $app->group;
  my $s = $sourceCode;
     $s = $sourceDir.$group.'/'.$Midlet.".java" if $app->example;

  my   @p = (ANDROID=>1, group=>$group);
  push @p, (vendor               =>$vendorCode[$genAndroid]);
  push @p, (amazonAffiliates     =>1) if $app->addAmazonAffiliates ($subset, $genAndroid);
  push @p, (amazonGamesCircle    =>1) if $app->addAmazonGamesCircle($subset, $genAndroid);
  push @p, (amazon               =>1) if $app->addAmazonMobile     ($subset, $genAndroid);
  push @p, (amazonMobileAnalytics=>1) if $amazonAnalytics;
  push @p, (appList              =>1) if $appList;
  push @p, (appDaily             =>1) if $gen->appDaily;                        # Download a new app  every day
  javaPreprocess($s, {@p})
 }

#-------------------------------------------------------------------------------
# Preprocess java source input file returning the result as a string
#-------------------------------------------------------------------------------

sub javaPreprocess($$)
 {my ($if, $defines) = @_;                                                      # Input file, defines

  my @s = split(/\n/, readFile($if));

  my @include = ();                                                             # Every element must be true for a source line to be included
  my @S;                                                                        # Source after preprocessing
  my $L = 0;                                                                    # Line number
  for(@s)
   {++$L;
    if (m(\A//#ifdef\s+(\w+)))
     {#$defines->{$1} or ::Confess "javaPreprocessor: $1 undefined on line $L in ifdef";
      push @include, $defines->{$1};
     }
    elsif (m(\A//#ifndef\s+(\w+)))
     {#$defines->{$1} or ::Confess "javaPreprocessor: $1 undefined on line $L in ifndef";
      push @include, !$defines->{$1};
     }
    elsif (m(\A//#if\s+(\w+)\s*==\s*\"(.+?)\"))
     {$defines->{$1} or ::Confess "javaPreprocessor: $1 undefined on line $L in if ==";
      push @include, $defines->{$1} && $defines->{$1} eq $2;
     }
    elsif (m(\A//#if\s+(\w+)\s*!=\s*\"(.+?)\"))
     {$defines->{$1} or ::Confess "javaPreprocessor: $1 undefined on line $L in if !=";
      push @include, $defines->{$1} && $defines->{$1} ne $2;
     }
    elsif (m(\A//#elif\s+(\w+)\s*==\s*\"(.+?)\"))
     {@include or ::Confess "elif without if";
      $defines->{$1} or ::Confess "javaPreprocessor: $1 undefined on line $L in elif ==";
      $include[-1] = $defines->{$1} && $defines->{$1} eq $2;
     }
    elsif (m(\A//#elif\s+(\w+)\s*!=\s*\"(.+?)\"))
     {@include or ::Confess "elif without if";
      $defines->{$1} or ::Confess "javaPreprocessor: $1 undefined on line $L in elif !=";
      $include[-1] = $defines->{$1} && $defines->{$1} ne $2;
     }
    elsif (m(\A//#else))
     {@include or ::Confess "javaPreprocessor: else without if on line $L";
      $include[-1] = !$include[-1];
     }
    elsif (m(\A//#endif))
     {@include or ::Confess "javaPreprocessor: endif without if on line $L";
      pop @include;
     }
    elsif (m(\A//#define\s+(\w+)))
     {$defines->{$1} = 1;
     }
    elsif (m(\A//#undefine\s+(\w+)))
     {delete $defines->{$1};
     }
    elsif (m(\A//#\S))
     {::Confess "javaPreprocessor: Bad pre-processor line on line $L:\n$_";
     }
    if (!grep {!$_} @include or m(\A//#))                                       # Add line uncommented if all conditions are true or its a preprocessor line in which case the comment is kept
     {push @S, s/\A\/\/\//   /r;                                                # Lines starting with /// are uncommented and included - they are use to make lint work without having to preprocess the code
     }
    else
     {push @S, '//# '.$_;
     }
   }
  if (@include)
   {::Log "javaPreprocessor: FINISH with open if";
    return undef;
   }
  else
   {return join("\n", @S);
   }
 }

#-------------------------------------------------------------------------------
# Write a string to a file
#-------------------------------------------------------------------------------

sub writeFile($$;$)
 {my ($f, $s, $line) = @_;                                                      # File, string, line
  if ($f =~ /\A(.+[\\\/])/)
   {my $d = $1;
    makePath($d);
   }

  unless($test)
   {open my $F, ">$f" or ::Confess "writeFile: cannot open $f for write";
    say    {$F} $s;
    close  ($F);
    -e $f or ::Confess "writeFile: failed to write to file $f";
    ::Log "writeFile: Wrote file $f ", scalar(split(/ /, $s)), " lines ", length($s), " characters at line ", $line  if $line;
   }
  else
   {::Log "writeFile file=$f chars=", length($s) if $debug;
   }
 }

sub appendFile($$;$)
 {my ($f, $s, $line) = @_;                                                      # File, string, line
  if ($f =~ /\A(.+[\\\/])/)
   {my $d = $1;
    makePath($d);
   }

  unless($test)
   {open my $F, ">>$f" or ::Confess "writeFile: cannot open $f for append";
    say    {$F} $s;
    close  ($F);
    -e $f or ::Confess "appendFile: failed to append to file $f";
    ::Log "appendFile: Appended to file $f ", scalar(split(/ /, $s)), " lines ", length($s), " characters at line ", $line  if $line;
   }
  else
   {::Log "appendFile file=$f chars=", length($s) if $debug;
   }
 }

sub writeUnicode($$;$)
 {my ($f, $s, $line) = @_;                                                      # File, string, line
  if ($f =~ /\A(.+[\\\/])/)
   {my $d = $1;
    makePath($d);
   }

  unless($test)
   {open(my $F, ">:encoding(UTF-8)", $f) or ::Confess "Cannot open $f";
#    say    {$F} "\x{EF}\x{BB}\x{BF}$s";
    say    {$F} $s;
    close  ($F);
    -e $f or ::Confess "Failed to write to file $f";
    ::Log "writeUnicode: Wrote to file $f ", scalar(split(/ /, $s)), " lines ", length($s), " characters at line ", $line  if $line;
   }
  else
   {::Log "writeUnicode file=$f chars=", length($s) if $debug;
   }
 }

#-------------------------------------------------------------------------------
# Remove path
#-------------------------------------------------------------------------------

sub removePath($)
 {my ($path) = @_;
  remove_tree($path);
  ::Confess "Cannot removePath $path" if -e $path;
 }

#-------------------------------------------------------------------------------
# Make a path
#-------------------------------------------------------------------------------

sub makePath($)
 {my ($path) = @_;
  if ($path =~ /\A(.+[\\\/])/)
   {$path = $1;
   }

  return 0 if -d $path;
  return 1 if $test;
  make_path($path);
  -d $path or ::Confess "Cannot makePath $path";
  1
 }

#-------------------------------------------------------------------------------
# Shuffle an array in place
#-------------------------------------------------------------------------------

sub shuffle($)
 {my ($f) = @_;
  for (1..$#$f)
   {my $a = int rand(@$f);
    my $b = int rand(@$f);
    next if $a == $b;
    ($f->[$a], $f->[$b]) = ($f->[$b], $f->[$a]);
   }
  $f
 }

#-------------------------------------------------------------------------------
# Get all the files in a directory relative to the directory
#-------------------------------------------------------------------------------

sub fileList($)
 {my ($f) = @_;
  my @f = glob("${f}*");
  $_ = substr($_, length($f)) for @f;
  @f
 }

#-------------------------------------------------------------------------------
# Chop any trailing /s from the end of a directory name
#-------------------------------------------------------------------------------

sub chopDir($) {$_[0] =~ s/\/+\Z//g}

#-------------------------------------------------------------------------------
# Get all the directories in a directory
#-------------------------------------------------------------------------------

sub dirList($)
 {my ($d) = @_;
  -d $d or Confess "Directory $d does not exist";
  chopDir($d);
  opendir (my $D, $d);
  return () unless $D;
  my @d = readdir($D);
  closedir $D;
  my @D;
  for(sort @d)
   {push @D, $_ if -d "$d/$_" and $_ ne '.' and $_ ne '..';
   }
  @D
 }

#-------------------------------------------------------------------------------
# Get all the file names in a directory
#-------------------------------------------------------------------------------

sub filesInDir($)
 {my ($d) = @_;
  chopDir($d);
  -d $d or Confess "No such directory $d";
  opendir (my $D, $d);
  return () unless $D;
  my @d = readdir($D);
  closedir $D;
  my @D;
  for(sort @d)
   {push @D, $_ if !-d "$d/$_" and $_ ne '.' and $_ ne '..';
   }
  @D
 }

#-------------------------------------------------------------------------------
# Get all the file path names in a directory
#-------------------------------------------------------------------------------

sub filePathsInDir($)
 {my ($d) = @_;
  chopDir($d);
  my @D;
  push @D, "$d/$_" for filesInDir($d);
  @D
 }

#-------------------------------------------------------------------------------
# Get all the files in and below a directory
#-------------------------------------------------------------------------------

sub filesInAndBelowDir($);
sub filesInAndBelowDir($)
 {my ($d) = @_;
  chopDir($d);
  my @D;
  for(filesInDir($d))
   {next if $_ eq '.' or $_ eq  '..';
    my $f = "$d/$_";
    push @D, $f unless -d $f;
   }
  push @D, filesInAndBelowDir("$d/$_") for dirList($d);
  @D
 }

#-------------------------------------------------------------------------------
# Get all the files in and below a directory relative to a directory
#-------------------------------------------------------------------------------

sub filesInAndBelowDirRelative($;$)                                             # Directory, relative directory which currently has to be a part of directory
 {my ($d, $r) = @_;
  chopDir($d);
  my $l = length($r // $d);
  my @D = filesInAndBelowDir($d);
  $_ = substr($_, $l) for @D;
  return @D
 }

#-------------------------------------------------------------------------------
# Copy all the files in one directory to another directory recursively
#-------------------------------------------------------------------------------

sub copyDir($$);
sub copyDir($$)
 {my ($S, $T) = @_; # Source, target directories
  if ($test)
   {say "Copy directory $S to $T" if $debug;
    return;
   }
  -d $S or ::Confess "$S is not a directory";
  !-e $T || -d $T  or ::Confess "$T is not a directory";
  makePath($T) unless -d $T;

# Copy files
  for(filesInDir($S))
   {my $s = "$S/$_";
    my $t = "$T/$_";
    next unless -e $s;
    copyFile($s, $t);
   }

# Copy directories
  for(dirList($S))
   {my $s = "$S/$_";
    my $t = "$T/$_";
    copyDir($s, $t);
   }
 }

#-------------------------------------------------------------------------------
# Get the size of a file
#-------------------------------------------------------------------------------

sub fileSize($)
 {my ($f) = @_;
  (stat($f))[7]
 }

#-------------------------------------------------------------------------------
# Get the modified time of a file in seconds since epoch
#-------------------------------------------------------------------------------

sub modTime($)
 {my ($f) = @_;
  (stat($f))[9] // 0
 }

#-------------------------------------------------------------------------------
# Is the source newer than the target
#-------------------------------------------------------------------------------

sub mod($$)
 {my ($source, $target) = @_;
  modTime($source) > modTime($target)
 }

#-------------------------------------------------------------------------------
# Check whether a target is out of date relative to an array of files.
#-------------------------------------------------------------------------------

=pod

Used when one file is dependent on many files to make sure that the target is
later (not older) than all its sources. Allows for an easy test of the form:

if (outOfDate($target, $source1,$source2,$source3))

as in make to decide whether the target needs to be updated from its sources.

Returns the first out of date source file to make debugging easier, or undef if
no files are out of date.

=cut

sub outOfDate($@)
 {my ($target, @sources) = @_;                                                  # Target, sources
  return $target unless -e $target;                                             # Out of date if target does not exist
  my $t = modTime($target);                                                     # Time of target
  for(@sources)                                                                 # Each source
   {return $_ unless -e $_;                                                     # Out of date if source does not exist
    my $T = modTime($_);                                                        # Time of source
    return $_ if $T > $t;                                                       # Out of date if source newer than target
   }
  undef                                                                         # Not out of date as : target and all sources exist and target later than all of the sources
 }
#-------------------------------------------------------------------------------
# Same number of lines in source as target
#-------------------------------------------------------------------------------

sub compareNumberOfLinesIn($$)
 {my ($s, $t) = @_;
  -e $s or ::Confess "Source file $s does not exist";
  -e $t or ::Confess "Target file $t does not exist";
  my ($S, $T) = (readFile($s), readFile($t));
  my @m = split /\n/, $S; pop @m while @m && $m[-1] =~ /\A\s*\Z/;
  my @n = split /\n/, $T; pop @n while @n && $n[-1] =~ /\A\s*\Z/;
  @n - @m
 }

#-------------------------------------------------------------------------------
# Check whether a sound file is old or not
#-------------------------------------------------------------------------------

sub old($)
 {my ($f) = @_;
  return undef unless my $t = modTime($f);
  my $T = time();
  ($T - $t) > $ageSoundFiles*24*60*60
 }

#-------------------------------------------------------------------------------
# Copy a file
#-------------------------------------------------------------------------------

sub copyFile($$)
 {my ($source, $target) = @_;
     $source or Confess "No source file specified for copyFile";
  -e $source or Confess "copyFile: cannot copy because source file does not exist, source=$source";
  Confess "Small file $source" if fileSize($source) < 10 && $source !~ /data\Z/ ;

  if ($test)
   {::Log "copy $source $target" if $debug;
    return;
   }
  if ($target =~ /\A(.+[\\\/])/)
   {my $d = $1;
    makePath($d);
   }
  copy($source, $target);                                                       # 0 - if already exists, 1 - if created
  -e $target or Confess "copyFile: copied file does not exist: source=$source, target=$target";
  Log "copyFile: copied file $source to $target" if $debug > 1;
  1
 }

sub copyFile1($$)
 {my ($source, $target) = @_;
     $source or Confess "No source file specified for copyFile1";
  -e $source or Confess "Cannot copy file  $source  as it does not exist";
  return if $test;
  return if -e $target and !mod($source, $target) and fileSize($source) == fileSize($target);
  copyFile($source, $target);
 }

#-------------------------------------------------------------------------------
# Check speech files were copied
#-------------------------------------------------------------------------------

sub checkSpeech($$;$)
 {my ($dir, $from, $to) = @_;
  return if $test;
  for my $i($from..($to//$from))
   {my $f = "$dir/$i.mp3";
    -e $f or Confess "Failed to copy speech file to $f";
   }
 }

#-------------------------------------------------------------------------------
# Execute a command on the underlying OS
#-------------------------------------------------------------------------------

sub quoteFile($)                                                                # Quote a file name
 {my ($f) = @_;
  "\"$f\""
 }

sub execCommand($;$)                                                            # Execute a command and return result string
 {my ($command, $Debug) = @_;
  Log $command if $debug or $Debug;
  Confess "Attempt to execute command while testing: $command" if $test;        # Commands cannot be executed while test, they must be simulated
  my $s = qx($command);
  Log($s) if $debug or $Debug;
  $s
 }

sub rr {" --storage-class REDUCED_REDUNDANCY"}                                  # A useful constant for constructing sync commands

sub execSyncCommand($)                                                          # Execute an aws S3 sync command and check easily checked result string
 {my ($c) = @_;
          execCommand($c);                                                      # Perform sync
  my $r = execCommand($c);                                                      # Check sync
  if ($r !~ /\A\s*\Z/)                                                          # Complain if sync failed
   {Confess "  Failed: $c\n$r";
   }
 }

#-------------------------------------------------------------------------------
# Check dimensions of an image
#-------------------------------------------------------------------------------

sub imageArea($$)                                                               # Check image area
 {my ($image, $size) = @_;                                                      # Size is square root of area
  if (-e $image)
   {my $s = execCommand("$imIdentify -format \"%w %h\" \"$image\"");
    if ($s =~ /\A(\d+)\s+(\d+)\s+\Z/)
     {return $s * $s == $1 * $2;
     }
   }
  undef
 }

sub imageDimensions($$)                                                         # Check image dimensions
 {my ($i, $x, $y) = @_;
  if (-e $i)
   {my $s = execCommand("$imIdentify -format \"%w %h\" \"$i\"");
    if ($s =~ /\A(\d+)\s+(\d+)\s+\Z/)
     {if ($x and $y) {return 1 if $x == $1 && $y == $2}
      elsif ($x)     {return 1 if $x == $1}
      elsif ($y)     {return 1 if $y == $2}
      return 0;
     }
   }
  undef
 }

sub imageSize($)                                                                # Return (width, height) of image
 {my ($i) = @_;
  -e $i or Confess "Cannot get size of image $i as file does not exist";
  return(240,240) if $test == 1;
  if (-e $i)
   {my $s = execCommand("$imIdentify -format \"%w %h\" \"$i\"");
    if ($s =~ /\A(\d+)\s+(\d+)\s+\Z/)
     {return ($1, $2);
     }
    else
     {Confess "Cannot get image size for $i, \n$s";
     }
   }
  Confess "Cannot get image size for $i - file does not exist";
 }

#-------------------------------------------------------------------------------
# Useful formatting routines
#-------------------------------------------------------------------------------

sub r2($)
 {my ($n) = @_;
  (int($n*100))/100
 }

#-------------------------------------------------------------------------------
# Squeeze out bad characters from a file name base
#-------------------------------------------------------------------------------

sub squeezeOutBadChars($)
 {my ($s) = @_;
  $s =~ s/[^a-zA-Z0-9]//gr;
 }

sub  squeezeOutBadCharsExceptDir
 {my ($s) = @_;
  $s =~ s/[^a-zA-Z0-9\/]//gr;
 }

#-------------------------------------------------------------------------------
# Randomize an array
#-------------------------------------------------------------------------------

sub randomizeArray(@)
 {for(1..@_)
   {my ($a, $b) = ($_-1, int rand @_);
    ($_[$a], $_[$b]) = ($_[$b], $_[$a])
   }
  @_
 }

#-------------------------------------------------------------------------------
# Perform an action on every active group
#-------------------------------------------------------------------------------

sub processApp($$)
 {my ($sub, $app) = @_;
  return $sub->($app) if $test;                                                 # Fail immediately if testing
  if (defined (my $c = eval {$sub->($app)})) {return $c;}                       # The eval is so that we continue to other apps after a problem with one app
  Log $@;                                                                       # reason for failure
  0
 }

sub byApp($$)
 {my ($text, $sub) = @_;
  Log $text;
  Log $_ for table([map {["  ", $_->group, " ", processApp($sub, $_)]} grep {$_->active and !$_->ignore} @app]);
 }

sub byAllApp($$)
 {my ($text, $sub) = @_;
  Log $text;
  Log $_ for table([map {["  ", $_->group, " ", processApp($sub, $_)]} grep {!$_->ignore} @app]);
 }

sub byAllAppQuiet($$)
 {my ($text, $sub) = @_;
  $sub->($_) for grep {!$_->ignore} @app;
 }

sub bySubset
 {my ($text, $genAndroid, $sub) = @_;
  Log $text;
  for my $app(@app)
   {next unless $app->active and !$app->ignore;
    for my $subset(0..$app->subsets)
     {next if $app->skipSubset($subset, $genAndroid);
      $sub->($app, $subset, $genAndroid);
     }
   }
 }

sub byAllSubset
 {my ($text, $sub) = @_;
  Log $text;
  for my $app(@app)
   {next if $app->ignore;
    for my $subset(0..$app->subsets)
     {$sub->($app, $subset);
     }
   }
 }

#-------------------------------------------------------------------------------
# Perform an action on everything in a group
#-------------------------------------------------------------------------------

sub everyThing($$$)
 {my ($flag, $text, $sub) = @_;
  if ($flag)
   {::Log $text;
    for my $app(@app)
     {next unless $app->active;
      my $group = $app->group;
      ::Log "  $group";
      my $i = 0;
      for my $thing($app->things)
       {$i += $sub->($thing) // 0;
       }
      ::Log "    $i files created" if $i;
     }
   }
 }

#-------------------------------------------------------------------------------
# Perform an action on everything in a group for every speaker
#-------------------------------------------------------------------------------

sub everyThingBySpeaker($$$)
 {my ($flag, $text, $sub) = @_;
  my $t = [];
  if ($flag)
   {::Log $text;
    for my $app(@app)
     {next unless $app->active;
      my $group = $app->group;
      ::Log "  $group";
      my $i = 0;
      for my $thing($app->things)
       {for my $s($app->speakers)
         {
           $i += $sub->($thing, $s ? $s : undef) // 0;                           # Would probably work just as well with $s when 0
         }
       }
      push @$t, ["", $group, $i//0];
     }
   }
  if (@$t)
   {::Log  $_ for table($t);
   }
 }

#-------------------------------------------------------------------------------
# Tabularize text
#-------------------------------------------------------------------------------

sub table($;$$)
 {my ($d, $c, $w) = @_;                                                         # Data, control, width
  my @D;
  for   my $e(@$d)
   {for my $D(0..$#$e)
     {my $a = $D[$D] // $w->[$D] // 0;
      my $b = length($e->[$D]) // 0;
      $D[$D] = ($a > $b ? $a : $b);
     }
   }
  my @t;
  for   my $e(@$d)
   {my $t = '';
    for my $D(0..$#$e)
     {if (substr(($c//'').('L'x($D+1)), $D, 1) =~ /L/i)
       {$t .= substr(($e->[$D]//'').(' 'x$D[$D]), 0, $D[$D])."  ";
       }
      else
       {$t .= substr((' 'x$D[$D]).($e->[$D]//''), -$D[$D])."  ";
       }
     }
    push @t, $t;
   }
  @t
 }

#-------------------------------------------------------------------------------
# Load title languages
#-------------------------------------------------------------------------------

my $translatedTitles = translatedTitles();

#-------------------------------------------------------------------------------
# Load app descriptions
#-------------------------------------------------------------------------------

my %app;

for(@app)
 {my $group = $_->{group}; $group or ::Confess "No group for app: ". dump($_);
  next if $_->{$ignore} or $_->{$noWords} or $_->{$example};                    # Skip load for ignored apps and apps with no words like Gcd

  if ($_->{$active} or $objectifyAll)                                           # Some operations require every app description to be loaded
   {no strict;
    my $s = $group; my $l = 'en';                                               # Default language unless indicated otherwise by app name suffix
    if    ($group =~ /\A(TraceNumbers09)\Z/)         {$s = $1; $l = 'en'}       # Process alternate language versions - special cases
    elsif ($group =~ /\A(TraceNumbers09)(In)(.+)\Z/) {$s = $1; $l = $Languages{$3}}
    elsif ($s =~ m/\A(.+)(In)(Cantonese|Mandarin|German|French)\Z/i)            # Process alternate language versions where the original had a suffix of "in English"
     {$s = $1."InEnglish";
      $l = $Languages{$3};
     }
    elsif ($s =~ m/\A(.+)(German|French)\Z/)                                    # Process alternate language versions where the original did not mention a language
     {$s = $1;
      $l = $Languages{$2};
     }
    $_->{data} = eval{$s->Load($l)};                                            # Load details of things in app
    !$@ or ::Confess $@;

    if ($_->{$breathDepth})
     {$_->{$breathDepth} = eval{$group->loadBreathDepth};                        # Load breath segment depth data if required
      !$@ or ::Confess $@;
     }
   }
  $app{$_->{group}} = $_;
 }

# say dump(@app); exit;

#-------------------------------------------------------------------------------
# Keystore directory file
#-------------------------------------------------------------------------------

sub keyStore($)
 {my ($f) = @_;
  "${supportingDoc}keystore/$f"
 }

#-------------------------------------------------------------------------------
# App generation request
#-------------------------------------------------------------------------------

sub Generate($$$;$)
 {package Generate;                                                             # Description of an apk being compiled
  use Data::Dump qw(dump);
  my ($app, $subset, $genAndroid, $pass) = @_;
  BEGIN
   {for(qw(app subset genAndroid group vendor pass skipSubset pictureSize),     # Generate fields
        qw(apk jpx comment ec2))
     {eval "sub $_ :lvalue {\$_[0]->{$_}}";
      ::Log $@ if $@;                                                           # Reason for failure
     }
   }
  return bless
   {app=>$app, subset=>$subset, genAndroid=>$genAndroid, pass=>($pass//0),
    apk=>$app->apkName($subset, $genAndroid),
    group=>$app->group, vendor=>::vendorCode($genAndroid),
    skipSubset=>$app->skipSubset($subset, $genAndroid),
    pictureSize=>$app->pictureSize($genAndroid, $subset),
    jpx=>$app->jpx($subset, $genAndroid), ec2=>$amazonEC2};

  sub confirmGen
   {my ($gen) = @_;
    ref($gen) =~ /Generate/ or ::Confess "Not a Generate request object ", dump($gen);
    }

#-------------------------------------------------------------------------------
# In test
#-------------------------------------------------------------------------------

  sub inTest($)                                                                 # App is being tested
   {my ($gen) = @_;
    my $genAndroid = $gen->genAndroid;
    return 1 if ::oneOfVendor($genAndroid, qw(test screenShots));               # Build mode or from test
    0                                                                           # otherwise not in test
   }

#-------------------------------------------------------------------------------
# App daily
#-------------------------------------------------------------------------------

  sub appDaily($)                                                               # Include AppDaily in whole or in part
   {my ($gen) = @_;
    my $genAndroid = $gen->genAndroid;
    return 0 if ::oneOfVendor($genAndroid, qw(Amazon Nook));                    # Never for Amazon or Nook
    1                                                                           # App daily
   }

  sub appDailyBoot($)                                                           # Boot receiver to restart app daily
   {my ($gen) = @_;
    my $genAndroid = $gen->genAndroid;
    return 0 if ::oneOfVendor($genAndroid, qw(SlideMe));                        # Without boot receiver for SlideMe
    appDaily($gen);                                                             # Every one else gets the boot receiver if they are getting app every day so that the process continues across boots
   }
 } # Generate

#-------------------------------------------------------------------------------
# Transform into object oriented representation
#-------------------------------------------------------------------------------
=pod

Things in an app are sorted by the order field which is the same as the
name field by default.

=cut

for my $app(@app)
 {package ApplicationDescription;                                               # Description of an app
  use Data::Dump qw(dump);
  use base qw(main);                                                            # This makes the globally defined subs visible
  use Scalar::Util qw(blessed);
  use Data::Dump qw(dump);
  bless $app, blessed $app->{data} ? ref $app->{data} : __PACKAGE__;

  sub check($$)
   {my ($app, $title) = @_;
    for my $t($app->things)
     {ref($t) =~ /ApplicationThingDescription/ or ::Confess "$title: Unblessed thing $t in group ". $app->group;
      exists($app->{data}{$t->name}) && $app->{data}{$t->name} == $t or ::Confess "$title thing not indexed correctly by name ", $t->name;

      if (0)                                                                    # Number of subsets matches icons - now checked in iconSource 2015/04/10
       {my $g = $app->group;
        my $i = $app->icon;
        ::Confess "Icon not an array reference for app $g" unless ref($i) =~ /ARRAY/;
        ::Confess "Not enough icons for app $g" unless @$i >= $app->subsets;

       }
     }
   }

  sub postObjectivizationChecks
   {return;                                                                     # 2015/09/08 - currently amazonLongId complains and so this check is a distraction
    my ($app) = @_;
    if (!$app->ignore && !$app->example)
     {my $g = $app->group;
      for(0..$app->subsets)
       {my $k = $app->amazonLongId($_);
        ::Carp "No Amazon key for app $g subset $_" unless $k;
        next unless $k;
        length($k) == 32 or ::Carp "Wrong length for Amazon key for app $g subset $_";
       }
     }
   }
  sub active($)           {my ($app) = @_; $app->{$active}}                     # Whether this app is active
  sub album($)            {my ($app) = @_; $app->{$album}}                      # Album app
  sub alphabet2($)        {my ($app) = @_; $app->{$alphabet}//0}                # Alphabet app
  sub airPush($)          {my ($app) = @_; $app->{$airPush};}                   # airPush ID for an app
  sub animation($)        {my ($app) = @_; $app->{$animation}}                  # Animation app
  sub audioOnVideo($)     {my ($app) = @_; $app->{$audioOnVideo}}               # Audio is on videos in images
  sub block($)            {my ($app) = @_; $app->{$block}//1}                   # Words are grouped together in blocks of this size
  sub breathDepth($)      {my ($app) = @_; $app->{$breathDepth}}                # Breath depth for this app
  sub cantonese($)        {my ($app) = @_; $app->{$cantonese}}                  # App is in Cantonese Chinese
  sub captions($)         {my ($app) = @_; $app->{$captions}//0 }               # Application uses captions
  sub clicks($)           {my ($app) = @_; $app->{$clicks}}                     # Clicks distribution hash
  sub copyFacts($)        {my ($app) = @_; $app->{$copyFacts}}                  # Copy fact  files from this app
  sub copyImages($)       {my ($app) = @_; $app->{$copyImages}}                 # Copy image files from this app
  sub example($)          {my ($app) = @_; $app->{$example}}                    # Example app
  sub facts($)            {my ($app) = @_; $app->{$facts} // 0}                 # Application has facts
  sub flattenAudio($)     {my ($app) = @_; $app->{$flattenAudio} // 0}          # Application uses flat audio directory layout
  sub freeSuffix($)       {my ($app) = @_; $app->{$freeSuffix}       ? 'Free' : undef} # An annoying hangover from when not so many subsets were present
  sub freeSuffixAmazon($) {my ($app) = @_; $app->{$freeSuffixAmazon} ? 'Free' : undef} # An annoying hangover from when not so many subsets were present
  sub freeSuffixGoogle($) {my ($app) = @_; $app->{$freeSuffixGoogle} ? 'Free' : undef} # An annoying hangover from when not so many subsets were present
  sub french($)           {my ($app) = @_; $app->{$french}}                     # App is in german
  sub full                {my ($app) = @_; $app->{$full}}                       # Full app required despite test
  sub genre($)            {my ($app) = @_; $app->{$genre}}                      # Genre of the app
  sub Genre($)            {my ($app) = @_; $genres->{$app->{$genre}}}           # Genre name of the app
  sub german($)           {my ($app) = @_; $app->{$german}}                     # App is in german
  sub group($)            {my ($app) = @_; ref($app) or ::Confess "Bad app"; $app->{$group}}                      # Name of the app
  sub Group($)            {my ($app) = @_; uc substr($app->{$group}, 0, 1)}     # Some directories are sub divided by the forst letter of the app name capitalized
  sub icon($)             {my ($app) = @_; $app->{$icon}}                       # Icon specification array
  sub iconsDir($)         {my ($app) = @_; "../Icons/".$app->group}             # Icons directory for this app
  sub ignore($)           {my ($app) = @_; $app->{$ignore} // 0}                # Ignore this app, unless 2 for creating app
  sub mandarin($)         {my ($app) = @_; $app->{$mandarin}}                   # App is in Mandarin Chinese
  sub minimax($)          {my ($app) = @_; $app->{$minimax}}                    # App contains minimum and maximum questions
  sub mp3GainFile($)      {my ($app) = @_; $app->recordingListDirectory .'/mp3Gain.data'} # Details of which files have had mp3 gain applied
  sub noImages($)         {my ($app) = @_; $app->{$noImages}}                   # No photos used in this application - images are drawn directly
  sub nook($)             {my ($app) = @_; $app->{$nook}}                       # Present on Nook
  sub noSubsets($)        {my ($app) = @_; $app->{$noSubsets}}                  # No subsets for this application
  sub noTranslation($)    {my ($app) = @_; $app->{$noTranslation}}              # Translation of facts not required
  sub on($)               {my ($app) = @_; $app->{$on}//0}                      # Creation date
  sub Patrick($)          {my ($app) = @_; $app->{$Patrick}}                    # Patrick on vocals - French
  sub phil($)             {my ($app) = @_; $app->{$phil}}                       # Phil on vocals - English
  sub recipe($)           {my ($app) = @_; $app->{$recipe}}                     # Recipe app
  sub size100($)          {my ($app) = @_; $app->{$size100}}                    # Image size for 100 MB app desired by Nook
  sub size50($)           {my ($app) = @_; $app->{$size50}}                     # Image size for  50 MB app desired by Google
  sub squeezeMain($)      {my ($app) = @_; $app->{$squeezeMain}}                # Apply additional squeezes to Google main app
  sub speech($)           {my ($app) = @_; $app->{$speech}}                     # Additional speech directories regular expression
  sub speechNumbers($)    {my ($app) = @_; $app->{$speechNumbers}}              # Numbers up to this number required
  sub spokenFacts($)      {&facts(@_) == 2}                                     # App has spoken facts
  sub swap                {my ($app) = @_; $app->{$swap}}                       # Things in subsets can be swapped
  sub subsetsOnly         {my ($app) = @_; $app->{$subsetsOnly}}                # Masks main and subsets allowed as some apps have only a main or only subsets
  sub titlesInFacts($)    {my ($app) = @_; $app->{$titlesInFacts}}              # Titles of each thing are included in the facts
  sub xversion($)         {my ($app) = @_; $app->{$xversion} // ''}             # Extended version number required for some apps due to early mistakes on Google
  sub undergroundLive($)  {my ($app) = @_; $app->{$undergroundLive} //0}        # Submitted on Amazon underground
  sub useName($)          {my ($app) = @_; $app->{$useName} //0}                # Use name rather than title for sound files
  sub useNameSource($)    {my ($app) = @_; $app->{$useNameSource} //0}          # Use name rather than title for source of sound files
  sub useNameTarget($)    {my ($app) = @_; $app->{$useNameTarget} //0}          # Use name rather than title for target of sound files
  sub Wolfgang($)         {my ($app) = @_; $app->{$Wolfgang}}                   # Wolfgang on vocals - German
  sub Victoria($)         {my ($app) = @_; $app->{$Victoria}}                   # Victoria - Mandarin
  sub FongKheiMah($)      {my ($app) = @_; $app->{$FongKheiMah}}                # FongKheiMah - Cantonese
  sub amazonLongId($$;$)                                                        # Amazon key by subset for mobile advertizing and mobile affiliates
   {my ($app, $subset, $doNotComplain) = @_;
    my $g = $app->group;                                                        # Group
    my $a = $app->{$amazon}[$app->animation ? 0 : $subset];                     # Use the first id for animations as there is only subset 1
    defined($a) or $doNotComplain or                                            # Complain if it does not exist
     ::Confess "No long Amazon Id for app $g subset $subset, please provide one or switch to vendor test";
    $a
   }
  sub redo($$)                                                                  # List of redos for this app, or indicates whether a subset should be redone
   {my ($app, $subset) = @_;
    my $g = $app->group;
    my $s = $app->subsets;
    my $r = $app->{$redo};
    return 0 unless $r;                                                         # Allows redo=>0 which is more convenient in searchs
    return 1 if $r && !ref($r);                                                 # Allows redo=>1 which is useful for all of the app
    ::Confess "Redo list for $g must be a reference to an array of subset numbers", not dump($r) unless !$r || (ref($r) && ref($r) =~ /ARRAY/);
    for(@$r)
     {::Confess "Bad subset number $_ in redo list for app $g subset $subset" unless /\A\d+\Z/;
      ::Confess "Subset number $_ out of range in redo list for app $g subset $subset" unless $_ >= 0 && $_ <= $s;
      return 1 if $_ == $subset;
     }
    0
   }
##Vendor
  sub jpx($$)                                                                   # Use jpx format images
   {my ($app, $subset, $genAndroid) = @_;
    return 256 if !$subset && ::oneOfVendor($genAndroid, qw(test focii Amazon AppaApps UnderGround));
    undef
   }
  sub free($)                                                                   # Free subset sizes - there is always at least one free subset even if it is just a copy of the entire app
   {my ($app) = @_;
    my $g = $app->{group};
    my $f = $app->{free};
    !$f or  ref($f) =~ /Array/i or ::Confess "Invalid free parameter for app $g, must be undef or a reference to an array of arrays of integers. undef implies one free subset.";
    return $f if $f;
    [[1..$app->thingsCount]]
   }
  sub title($;$$$)                                                              # Title of the piece, by subset, by language
   {my ($app, $subset, $language, $decode) = @_;                                # Decode converts the title from &#x\d+; to unicode
    my $g = $app->group;
    my $T = $app->{title} // $g;
    my $t = ref($T) ? $T->[$subset//0] : $T;                                    # Periodic table for example has non defaulted titles
    my $l = $language && $language !~ /en/;
    return $t unless $subset or $l;
    $t .= " $subset" if $subset && !ref $T;                                     # Default subset titles are simply numbered variants of the app name
    return $t if !$l;                                                           # No translation required
    my $s = $translatedTitles->{$g.$subset.$language};                          # Translate via title translations hash
    if ($decode)                                                                # Translate to unicode if requested
     {for(1..100)
       {if ($s =~ /&#x([0-9a-fA-F]+);/)                                         # Escaped sequence of hex digits
         {my $n = $1;                                                           # Character number
          my $N = chr hex $n;                                                   # Convert to unicode
          $s =~ s/&#x$n;/$N/g;
         }
        else {last}                                                             # All escape sequqnces converted
       }
     }
    $s
   }
  sub description($;$)                                                          # Description of the piece by language
   {my ($app, $language) = @_;
    my $g = $app->group;
    my $o = $app->oneLiner;
    ::Confess "No one liner for app $g" unless $o;
    return $o if !$language || $language =~ /en/;

    my $translations = ::loadTranslatedStuff();
    my $t = $translations->{$o}{$language};
    ::Confess "No one liner for app $g in language $language" unless $t;
    $t
   }
  sub longDescription($;$)                                                      # Long description of the piece by language
   {my ($app, $language) = @_;
    my $g = $app->group;
    my $D = &::appDescriptions;
    my $d = $D->{$g};
    ::Confess "No long app description for app $g" unless $d;
    return $d if !$language || $language =~ /en/;

    my $translations = ::loadTranslatedStuff();
    my $t = $translations->{$d}{$language};
    ::Confess "No long description for app $g in language $language" unless $t;
    $t
   }
  sub keywords($)                                                               # Keywords by calculation
   {my ($app) = @_;
    my $g = $app->group;
    my %oneLiners = %{&::oneLiners};
    my %c;
    for(values %oneLiners)
     {$c{$_}++ for split /\s+/, s/[^a-z]/ /gir;
     }
    my %k = map {$_=>1} grep {$c{$_} <= 10} split /\s+/, $oneLiners{$g} =~ s/[^a-z]/ /gir;
    sort keys %k
   }
  sub keywordNames($)                                                           # Keywords by reference - more reliable
   {my ($app) = @_;
    my $g = $app->group;
    &::appKeywords->{$g}
   }
  sub apk($;$)                                                                  # Apk name for app without subset detail, with no leading path and no trailing .apk
   {my ($app, $genAndroid) = @_;
    my $a = $app->{$apk} // $app->{$group};
    if ($genAndroid and ::oneOfVendor($genAndroid, qw(Google)) and (my $A = $app->{$apkGoogle}))
     {$a = $A;
     }
    $a .= 'U' if ::oneOfVendor($genAndroid, qw(UnderGround));                   # Modify apk name per amazon: https://developer.amazon.com/public/solutions/underground
    $a
   }
  sub packageName($;$$)
   {lc("com.appaapps.".&apkName(@_))
   }
  sub apkName($;$$)                                                             # Apk name (no trailing .apk and no leading path)
   {my ($app, $subset, $genAndroid) = @_;                                       # App, optional subset, optional target
    my $a = $app->apk($genAndroid);
    return $a unless $subset;
    my $s = $subset;                                                            # Subset names
    $s = "Free" if $s == 1 and $app->freeSuffix || ($genAndroid && ::oneOfVendor($genAndroid, qw(Amazon)) && $app->freeSuffixAmazon)
                                                || ($genAndroid && ::oneOfVendor($genAndroid, qw(Google)) && $app->freeSuffixGoogle);
    "$a$s";
   }
  sub apkManualUploadFileName                                                   # File used for manual uploads
   {my ($app, $subset, $genAndroid) = @_;
    my $a = $app->apkName($subset, $genAndroid);
    my $v = ::vendorCode($genAndroid);
    my $f = "${Temp}apks/$v/$a.apk";
    ::makePath($f);
    $f
   }
  sub androidBuildDir($$$)                                                      # Directory in which we build this variant of the android app
   {my ($app, $subset, $genAndroid) = @_;
    my $a = $app->apkName($subset, $genAndroid);
    my $v = $amazonEC2 ? ::vendorCode($genAndroid).'/' : '';
    my $d = "$AndroidBase/$v$a";
    ::makePath($d);
    $d
   }
  sub apkS3($$$)                                                                # Apk on S3 with leading path and trailing .apk
   {my ($app, $subset, $genAndroid) = @_;
    my $apk = $app->apkName($subset, $genAndroid);                              # Apk name
    my $A   = uc(substr($apk, 0, 1));                                           # Super directory
    my $v   = ::vendorCode($genAndroid);                                        # Vendor
    "apks/$v/$A/$apk.apk"
   }
  sub amazonId($$)                                                              # Amazon Id for app allowing it to be Ftped
   {my ($app, $subset) = @_;
    my $g = $app->group;
    my $i = $app->{$amazonId}[$app->animation ? 0 : $subset];                   # Use the first id for animations as there is only subset 1
    return $i if $i;                                                            # Use one in initial description if it is available
    my $I = &::amazonKeysToIds;
    my $K = $app->{amazon};
    ref($K) =~ /array/i or ::Confess "Wong number of Amazon keys vs subsets for app $g";
    if (my $k = $K->[$subset])
     {if (my $i = $I->{$k}{id})
       {return $i;
       }
      else
       {::Confess "No amazon id for key $k in app $g";
       }
     }
    else
     {::Confess "No amazon id for subset $subset in app $g";
     }
    my $a = $app->{$amazonId};
    !$a or ref($a) or ::Confess "Bad amazonId definition for ", $app->group;
    $a->[$subset]
   }

  sub amazonIdUnderGround($$)                                                   # Amazon Id for app on UnderGround
   {my ($app, $subset) = @_;
    my $g = $app->group;
    my $u = &::undergroundId;                                                   # Underground ids
    my $i = $app->{$underground} // $u->{$g};                                   # Id on app overrides id in table
    ::Confess "No underground id for app $g" unless $i;                         # Check we have the underground id for the app
    $i
   }

  sub keyStore($$$)                                                             # Keystore file name
   {my ($app, $subset, $genAndroid) = @_;
    my $a = lc $app->apkName($subset, $genAndroid);
    my $f = ::keyStore("keys/$a.data");
    unless (-e $f)
     {my $m = "Amazon key file $f does not exist";
      my $d = $app->debugMode($subset, $genAndroid);
      ::Carp $m    if $app->debugMode($subset, $genAndroid);                    # So we see the lack of the key during development of the app
      ::Confess $m if $app->addAmazonGamesCircle($subset, $genAndroid);         # Die if compiling for Amazon
     }
    $f
   }

  sub source($$;$$)                                                             # Folders in folder supportingDocumentation
   {my ($app, $dir, $dir2, $copyDir) = @_;                                      # App, major folder, optional minor folder, optional override for major folder
    my $d = $copyDir // $app->group;                                            # Full path name of app's normal folder
    my $f = $dir2 ? "$dir2/" : "";                                              # Sub folder
    $supportingDoc."$dir/$d/$f"                                                 # Full path name
   }
  sub audioCaptionsSourceDirectory($) {$_[0]->source(qw(audio))}                # Same as audio in general
  sub audioSourceDirectory($)         {$_[0]->source(qw(audio))}
  sub audioFactsSourceDirectory($)    {$_[0]->source(qw(audio facts))}          # Audio recording of facts are cut out here
  sub audioMinimaxSourceDirectory($)  {$_[0]->source(qw(audio minimax))}        # Audio recording of minimax questions are cut out here
  sub recordingListDirectory($)       {my ($app) = @_; my $g = $app->group; "${Temp}recordingList/$g"}
  sub factsSourceDirectory($)         {$_[0]->source(qw(facts),  undef, $_[0]->copyFacts)}   # Facts can be copied from another app
  sub iconsSourceDirectory($)         {$_[0]->source(qw(Icons),  undef, $_[0]->copyImages)}  # Icon can be copied from another app
  sub imageSourceDirectory($)         {$_[0]->source(qw(images), undef, $_[0]->copyImages)}  # Image can be copied from another app
  sub screenShotsSourceDirectory($)   {$_[0]->source(qw(ScreenShots))}
  sub textCaptionsSourceDirectory($)  {$_[0]->source(qw(captions))}

  sub midiDir()                       {$supportingDoc."midi/"}                  # Non application specific midi files
  sub speechDir()                     {$supportingDoc."speech/"}                # Non application specific speech files

  sub buildDir                                                                  # Sub directory within the directory in which app gets built
   {my ($app, $subset, $genAndroid, $dir) = @_;
    my $buildDir = $app->androidBuildDir($subset, $genAndroid);                 # App build dir
    "$buildDir/$dir";                                                           # App build sub directory
   }

  sub javaDir                                                                   # Java build directory containing source code
   {my ($app, $subset, $genAndroid) = @_;
    my $apk = $app->apkName($subset, $genAndroid);                              # Apk name
    &buildDir(@_, "src/com/appaapps/$apk")                                      # Java source build directory
   }
  sub javaBuildFile                                                             # Java source code file in build directory
   {&javaDir(@_)."/VocabularyActivity.java";
   }
  sub assetsDir($$$;$)                                                          # Android assets directory
   {my ($app, $subset, $genAndroid, $dir) = @_;
    my $d = $dir ? "$dir/" : "";
    $app->buildDir($subset, $genAndroid, "assets/$d")
   }
  sub resDir($$$)                                                               # Android res directory
   {my ($app, $subset, $genAndroid) = @_;
    $app->buildDir($subset, $genAndroid, "res/")
   }

  sub factsTargetDir($$$;$)                                                     # Target directory for facts
   {my ($app, $subset, $genAndroid, $language) = @_;
    my $l   = $language && $language !~ /en/ ? "/$language" : '';
    $app->assetsDir($subset, $genAndroid, "facts$l");
   }
  sub music($)
   {my ($app) = @_;
    my $m = $app->{$music};
    return undef unless $m;
    my @m; push @m, "$_.mid" for @$m;
    [@m];
   }
  sub musicFree($)
   {my ($app) = @_;
    my $m = $app->{$musicFree};
    return undef unless $m;
    my @m; push @m, "$_.mid" for @$m;
    [@m];
   }
  sub groupDir($)                                                               # Group directories by first letter of group
   {my ($app) =  @_;
    uc substr($app->group, 0, 1);
   }
  sub makeZipDir($$$)
   {my ($app, $subset, $genAndroid) =  @_;
    my $s      = "/$subset";
    my $group  = $app->group;
    my $G      = $app->groupDir;
    my $vendor = ::vendorCode($genAndroid);

    $amazonEC2 ? 'E:/makeZip/'.$vendor.'/'.$G.'/'.$group.'/'.$s:
    $Home.'Android/makeZip/'                     .$group.'/'.$s;
   }
  sub sortArrayOfThings(@)                                                      # This is not a method
   {sort {$a->{order} cmp $b->{order}} @_
   }
  sub thingsNoSort($)                                                           # Items in an app ordered as they occur in the package
   {my ($app) = @_;
    map {$app->{data}{$_}} keys %{$app->{data}};
   }
  sub things($)                                                                 # Items in an app
   {my ($app) = @_;
    my @t = map {$app->{data}{$_}} keys %{$app->{data}};
    my @T = sortArrayOfThings(@t);
    @T
   }
  sub thingsCount($)                                                            # Number of items in an app
   {my ($app) = @_;
    scalar(keys %{$app->{data}})
   }
  sub skipSubset($$$)                                                           # Skip unselected subsets
   {my ($app, $subset, $genAndroid) =  @_;
    defined($subset)     or ::Confess "Need subset as a parameter";
    defined($genAndroid) or ::Confess "Need genAndroid as a parameter";
    return 1 if ::oneOfVendor($genAndroid, qw(UnderGround)) &&                  # Skip non underground apps if compiling for underground
      !$app->amazonIdUnderGround($subset);

    return 1 if  $app->animation and $subset != 1;                              # Only subset 1 for animations
    return 1 if !$subset && $app->subsetsOnly;                                  # Subsets only required - i.e. no paid version of the app
    return 1 if  $appSubsets =~ /[01]/ && !$subset && !$app->genMain  ($genAndroid);          # Main and main not used
    return 1 if  $appSubsets =~ /[02]/ &&  $subset && !$app->genSubset($genAndroid, $subset); # Subset and subset not used
    return 1 if  $appSubsets == 1      &&  $subset;                             # Main   but on subset
    return 1 if  $appSubsets == 2      && !$subset;                             # Subset but on main
    return 1 if  $appSubsets == 3      &&  $subset != 1;                        # First  subset only
    return 1 if  $appSubsets == 4      &&  $subset != 2;                        # Second subset only
    return 1 if  $appSubsets == 5      &&  $subset != 3;                        # Third  subset only
    0
   }
  sub subsets($)                                                                # Number of subsets
   {my ($app) = @_;
    if (my $s = $app->swap) {return $s < 2 ? 2 : $s}                            # Determined by swap keyword
    if (my $f = $app->free) {return scalar @$f}                                 # Determined by free keyword
    1                                                                           # Always one subset at least
   }
  sub thingsInSubset($$$)                                                       # Things in a subset
   {my ($app, $subset, $genAndroid) = @_;                                       # App, subset, vendor
    my $g = $app->group;                                                        # App group name
    my @t = $app->things;                                                       # Things in app
    return @t if $app->debugMode($subset, $genAndroid);                         # If testing, just return the list of things, it will be cut down to size in genAndroid() anyway, this saves building ever bigger test apps

    if ($subset)                                                                # Subset number - subset numbers are one based
     {if ($app->swap)                                                           # Use swap specification if available first
       {         $app->{thingSelection} = [keys %{{map {$_-1=>1} 1..@t}}]       # Selecting order - unique for this gen - zero based
          unless $app->{thingSelection};
        my $s = $app->subsets;                                                  # Number of subsets
        my @T;                                                                  # Things selected for this subset
        for my $i(@{$app->{thingSelection}})                                    # Random order that repeats over this gen
         {push @T, $t[$i] if $i % $s == $subset-1                               # Load subset
         }
#say STDERR "swapped ", scalar(@o), "=$s*", scalar(@T), " ", join("  ", map {$_->name} @T);
        return @T;                                                              # Return randomized swapped subset
       }
      elsif (my $f = $app->free)                                                # Otherwise use free specification
       {if (my $fs = $f->[$subset-1])                                           # Subset definition
         {my @T = map {$t[$_> 0 ? $_-1 : $_]} @$fs;                             # Zero base
          return @T if @T >= 4;                                                 # At least 4 things required to make a subset
         }
       }
     }
# The following line of code only applied to Periodic Table, which is not currently being built
#   return sortArrayOfThings($app->data->subsetThings($subset)) if $app->data->can("subsetThings");
    @t                                                                          # Return everything for main or empty subset
   }
  sub iconSource($$)                                                            # Full path file name to icon
   {my ($app, $subset) = @_;
    defined($subset) or ::Confess "Subset number required";                     # Once was optional so now have to check that it is explicitly supplied
    my $group = $app->group;
    my $icon  = $app->icon;
    my $dir   = $app->imageSourceDirectory;
    if ($app->animation)                                                        # Icon for animation
     {my $f = ($dir =~ s/[^\/]+\/\Z//r)."Animations/$group.jpg";                # File name
      -e $f or ::Confess "Icon $f for animation $group does not exist";
      return $f;
     }
    if (my $i = $icon->[$subset])                                               # Icon specified by icon=> keyword
     {my $f = $dir.$i.".jpg";
      -e $f or ::Confess "Icon $f does not exist";
      return $f;
     }
    if (my $i = 'icon'.$subset)                                                 # Default icon
     {my $f = $dir.$i.'.jpg';
      -e $f or ::Confess "Default icon $f for subset $subset does not exist";
      return $f;
     }
    ::Confess "No icon for app $group ".($subset ? " subset $subset" : '');
   }
  sub data($)  # The list of things in the app
   {my ($app) = @_;
    $app->group or ::Confess "Missing application details";
    my $d = $app->{data};
    $d && ref($d) or ::Confess "Data not set for ".$app->group;
    $app->{data}
   }
  sub speakers($)                                                               # Maximum number of speakers required
   {my ($app) = @_;
    my $s = $app->{$speakers} // 1;
    (0..$s-1)
   }
  sub screenShotsDir($)                                                         # Directory for screen shots
   {my ($app) = @_;
    my $group = $app->group;
    $app->screenShotsSourceDirectory."screenShots/"
   }
  sub screenShotsTempDir($)                                                     # Directory for screen shots as obtained from device
   {my ($app) = @_;
    my $group = $app->group;
    $Temp."screenshots/$group/";
   }
  sub iconSubsetName($)                                                         # Suffix subset name to an icon if not main app
   {my ($subset) = @_;
    $subset ? "-$subset-" : ""
   }
  sub iconTarget($$)                                                            # File containing a processed app icon ready for upload, create by genAndroid() if missing
   {my ($app, $subset) = @_;
    my $t = iconSubsetName($subset);                                            # Subset suffix
    $app->iconsSourceDirectory."icon$t"                                         # This is the permanent file name used for frequently used icon sizes
   }
  sub iconTargetTemp($$)                                                        # File containing a processed app icon ready for upload, create by genAndroid() if missing
   {my ($app, $subset) = @_;
    my $g = $app->group;                                                        # App name
    my $t = iconSubsetName($subset);                                            # Subset suffix
    $Temp."icons/$g/icon$t"                                                     # This is the temporary file name used for infrequently used icon sizes
   }
  sub icon512($$)                                                               # Full size icon in /Icons for app by subset
   {my ($app, $subset) = @_;
    my $d = $app->iconTarget($subset);
    my $t = ''; $t = "-$subset-" if $subset;
    $d."512.png"
   }
  sub icon114($$)                                                               # 114 pixel icon in /Icons for app by subset for Amazon
   {my ($app, $subset) = @_;
    my $d = $app->iconTarget($subset);
    my $t = ''; $t = "-$subset-" if $subset;
    $d."114.png"
   }
  sub icon64($$)                                                                # 64 pixel icon in /Icons for app by subset
   {my ($app, $subset) = @_;
    my $d = $app->iconTarget($subset);
    my $t = ''; $t = "-$subset-" if $subset;
    $d."64.png"
   }
  sub screenShots($)                                                            # Choose screenshots - only Periodic Table has screenshots by subset and it is not being built at the moment
   {my ($app) = @_;
    my $g = $app->group;                                                        # App name
    my $d = $app->screenShotsDir();                                             # Directory containing screenshots
    -d $d or ::Confess "Screenshot directory $d does not exist";
    [glob("$d*.jpg")]                                                           # Return screen shots
   }
  my %versionCache;
  sub version                                                                   # Get version from Google
   {my ($app) = @_;
    my $g = lc($app->group);
    my $c = $versionCache{$g};
    return $c if $c;
    my $l = execCommand("curl -ks https://play.google.com/store/apps/details?id=com.appaapps.$g");
    $l =~ s/\</\n</gs;
    if ($l =~ /\"softwareVersion\"\>(\d{6})/)
     {$versionCache{$g} = $1;
      return $1;
     }
    undef
   }
  sub age()
   {my ($app) = @_;
    if (my $v = $app->version)
     {my @d = qw(31 28 31 30 31 30 31 31 30 31 30 31);
      my ($y, $m, $d) = $v =~ m/(\d\d)(\d\d)(\d\d)/;
      my $t = 365*$y+$d;
         $t += $_ for @d[0..$m-2];
         $t += 4; # Leap years from 2000 to now
         $t *= 60*60*24;
         $t += 946684800;                                                       # Seconds since epoch to start of century
      my $T = time()-$t;
         $T /= 60*60*24;
         $T = int($T);
      return $T
     }
    -1
   }

  sub setReleaseDate($)
   {my ($app) = @_;
    my $f = $cacheReleaseDates;
    my $s; $s = ::retrieve $f if -e $f;
    $s->{app}{$app->group}{releaseDate} = time() + ($setReleaseDate//0)*24*60*60; # Set release date with optional adjust in days
    ::store $s, $f;
   }

  sub getReleaseDate($)
   {my ($app) = @_;
    my $f = $cacheReleaseDates;
    my $s = ::retrieve $f if -e $f;
    $s->{app}{$app->group}{releaseDate}
   }

  sub oneLiner($)
   {my ($app) = @_;
    my $g = $app->group;
    my $o = &::oneLiners();
    $o->{$g}
   }

  sub appDescription($)
   {my ($app) = @_;
    my $g = $app->group;
    my $o = &::appDescriptions();
    $o->{$g}
   }

  sub vodafoneCodeOld($$)                                                       # Vodafone product code from first shipment on May 5, 2014
   {my ($app, $subset) = @_;
    my $g = $app->group;
    my $c = &::vodafoneCodes;
    $c->{$g}{$subset}                                                           # Undef if app was not in 2014/05/05 Shipment
   }

  sub vodafoneCode($$)                                                          # Vodafone product code
   {my ($app, $subset) = @_;
    my $c = vodafoneCodeOld($app, $subset);
    return $c if $c;
    my $g = $app->group;
    "AppaApps_$g$subset"                                                        # Generated code as non prior exists
   }

  sub sent($$)                                                                  # Check whether we have sent to this vendor before according to $sent keyword on app description, necessary foir Vodafone who requires an update flag to be set if we have
   {my ($app, $vendor) = @_;
    ::validVendor($vendor);                                                     # Check supplied vendor is valid
    my $s = $app->{$sent};
    return 0 unless $s;                                                         # No keyword supplied, so we assume not sent
    my $g = $app->group;
    ::Confess "Sent should be a reference to an array of vendor names" unless ref($s) =~ /array/i;
    my %s = map {$_=>1} @$s;                                                    # Hash of vendors sent to
    $s{$vendor}                                                                 # Sent if vendor name is present on keyword
   }

  sub sentVodafone($$$)                                                         # Check whether we have sent this app to vodafone before or not
   {my ($app, $subset) = @_;
    return 1 if vodafoneCodeOld($app, $subset);                                 # Vodafone product code from first shipment on May 5, 2014
    sent($app, "Vodafone");                                                     # Otherwise check by keyword
   }

#-------------------------------------------------------------------------------
# Image size, picture size by vendor and subset
#-------------------------------------------------------------------------------
##Vendor
  sub pictureSize($$$)
   {my ($app, $genAndroid, $subset) = @_;
    if ($subset == 0)                                                           # Amazon and AppaApps use JPX for main apps so are not listed below
     {return 1920                   if ::oneOfVendor($genAndroid, qw(screenShots));
      return $app->size100 // 1280  if ::oneOfVendor($genAndroid, qw(Nook));
      return $app->size50  // 1024  if ::oneOfVendor($genAndroid, qw(Google));  # 100M apks now allowed on Google Play as of Oct 21, 2015 but one still cannot upload above 50M on their site!!
      return 512;
     }
    return 1024 if $app->group =~ /Bridges/;                                    # Long and thin
    return  512 if ::oneOfVendor($genAndroid, qw(Amazon));                      # Amazon subsets are larger because they can be paid
    256
   }

#-------------------------------------------------------------------------------
# Screenshots required - include screenshot capability in app
#-------------------------------------------------------------------------------

  sub screenShotsWanted($$$) {my ($app, $g, $s) = @_; ::vendorCode($g) =~ /screenShots/i ? 'true' : 'false'}

#-------------------------------------------------------------------------------
# Main and subsets by vendor
#-------------------------------------------------------------------------------
##Vendor
  sub genSubset($$$)
   {my ($app, $genAndroid, $subset) = @_;
    return 0 if $subset && $app->noSubsets &&                                   # The 1 to 100 apps have no subsets on Google
      ::oneOfVendor($genAndroid, qw(Google));                                   # Because of Trace Numbers 0 to 9
    return !$subset && $app->nook if ::oneOfVendor($genAndroid, qw(Nook));      # Nook gets just some main apps
    return !$subset if ::oneOfVendor($genAndroid, qw(UnderGround Dora));        # Underground gets all main apps but no subsets
    return 1 if !$subset &&                                                     # These vendors get main apps
      ::oneOfVendor($genAndroid, qw(test focii screenShots Amazon AppaApps Google));
    $subset                                                                     # Other vendors do not get main apps
   }

  sub genMain($$)
   {my ($app, $genAndroid) = @_;
    genSubset($app, $genAndroid, 0)
   }

#-------------------------------------------------------------------------------
# Advertize on android or not for an app subset
# Currently the only ads shown are house ads fro Appa Apps.
# They are shown in all apps, but on a different schedule for free/paid.
#-------------------------------------------------------------------------------

  sub advertizeOnAndroid($$$)
   {my ($app, $genAndroid, $subset) = @_;
    return 0 if $app->group eq "Day";
    $subset;
   }

  sub appIsFree
   {my ($app, $genAndroid, $subset) = @_;
    return ::oneOfVendor($genAndroid, qw(AppaApps)) || $subset ? 'true' : 'false'
   }
##Vendor
  sub addAmazonAffiliates   ($$$) {my ($app, $subset, $genAndroid) = @_; $amazonAffiliates && !::oneOfVendor($genAndroid, qw(UnderGround))}
  sub addAmazonGamesCircle  ($$$) {my ($app, $subset, $genAndroid) = @_; 0} # ::oneOfVendor($genAndroid, qw(Amazon))} # No longer as no incentive from Amazon
  sub addAmazonMobile       ($$$) {my ($app, $subset, $genAndroid) = @_; $amazonMobile && $app->advertizeOnAndroid($genAndroid, $subset) && ::oneOfVendor($genAndroid, qw(Amazon AppaApps Vodafone Huawei SlideMe Nokia ApkFiles Xiaomi Iran AppaAppsNJM))}
  sub addAppList            ($$$) {my ($app, $subset, $genAndroid) = @_; $appList}
  sub debugMode             ($$$) {my ($app, $subset, $genAndroid) = @_; ::oneOfVendor($genAndroid, qw(test))}
  sub debugModeOrScreenShots($$$) {my ($app, $subset, $genAndroid) = @_; ::oneOfVendor($genAndroid, qw(test screenShots))}

#-------------------------------------------------------------------------------
# Number question files
#-------------------------------------------------------------------------------

  sub audioMinimaxQuestionFile($)                                               # File containing list of maxima and minima quwstions
   {my ($app) = @_;
    my $dir = $app->factsSourceDirectory;                                       # Facts directory
    "${dir}maximaAndMinimaQuestions.data";                                      # File holding number questions
   }
  sub audioMinimaxQuestions($)                                                  # Check whether there are any maxima and minima questions for this app
   {my ($app) = @_;
    my $f = $app->audioMinimaxQuestionFile;                                     # Minimax questions list file
    my $m = $app->minimax;                                                      # App markedfor maxima and minima questions
     $m && !-e $f && ::Confess "Cannot find audioMinimax file $f";
    !$m &&  -e $f && ::Log     "AudioMinimax file $f present, but app not marked with \$minimax=>1, to make it a minimax app";
    $f                                                                          # Assume minimax if file of questions present
   }
  sub audioMinimaxQuestionText($)                                               # Files needed for number questions
   {my ($app) = @_;
    my $f = $app->audioMinimaxQuestionFile;                                     # File holding number questions
    return () unless -e $f;                                                     # No number questions
    split /\n/, ::readFile($f);                                                 # Number questions
   }
  sub audioMinimaxQuestionFiles($$;$$)                                          # Source Files needed for number questions
   {my ($app, $speaker, $gen) = @_;                                             # The optional gen parameter will add the corresponding target file to teh array of results
    my @f = audioMinimaxQuestionText($app);                                     # Number questions one per line
    return () unless @f;                                                        # No number questions
    my @p;                                                                      # Paths to number question sound files
    my $a = $app->audioMinimaxSourceDirectory;                                  # Location of recorded audio files for minimax questions
    my $s = ($speaker//0)."/";                                                  # Speaker designations - now speaker 0 is designated explicitly rather than implicitly as was the case earlier with titles and facts.
    my $S = $speaker ? "-Speaker-$speaker" : "";                                # Speaker designation for target
    my $t = $app->factsTargetDir($gen->subset, $gen->genAndroid) if $gen;       # Target directory for audio files
    for(@f)
     {my $f = ::squeezeOutBadChars($_);                                         # File name for number question
      my $F = uc substr($f, 0, 1).'/';                                          # Super directory
      my $p = "$a$s$F$f.mp3";                                                   # Path to number question sound file
      push @p, [$p, $_, $gen ? "$t$f$S.mp3" : undef];                           # Save file details, question text, optional target file
     }
    @p
   }

#-------------------------------------------------------------------------------
# Things
#-------------------------------------------------------------------------------

  for my $thing($app->things)
   {package ApplicationThingDescription;
    use Data::Dump qw(dump);
    $thing->{app} = $app;
    bless $thing;

    sub app($)         {my ($t) = @_; $t->{app}}                                # Application containing thing
    sub caption($)     {my ($t) = @_; $t->{caption}}                            # Caption or undef if none
    sub relation($)    {my ($t) = @_; $t->{relation}}                           # Relationship to other words in this app
    sub title($)       {my ($t) = @_; $t->{title} // $t->name}                  # Title of photo as displayed during response
    sub name($)        {my ($t) = @_; $t->{name}}                               # Name of file/directory containing photo
    sub sequence($)    {my ($t) = @_; $t->{sequence} // 0}                      # Maximum sequence shot number for thing, or 0 if no sequence shots
    sub url            {my ($t) = @_; $t->{url}}                                # Url of photo licence details for this thing
    sub videoStart($)  {my ($t) = @_; $t->{start}}                              # Start time of clip desired from movie if specified
    sub videoEnd($)    {my ($t) = @_; $t->{end}}                                # End time of desired video clip from video if specified
    sub videoLength($) {my ($t) = @_; my ($s, $e) = ($t->{start}, $t->{end}); return $e-$s if $s && $e; undef} # Length of video or undef for whole video
    sub videoIgnore($) {my ($t) = @_; $t->app->data->videoIgnore//$t->{videoIgnore}} # Ignore video for this thing
    sub order($)       {my ($t) = @_; $t->{order} // $t->{name}}                # Order of things - affects subsetting
    sub group($)       {my ($t) = @_; $t->{group}}                              # Teaching group
    sub colour($)      {my ($t) = @_; $t->{colour}}                             # Colour
    sub prefix($)      {my ($t) = @_; $t->{prefix}}                             # Prefix
    sub setName   ($$) {my ($t, $v) = @_; $t->{name}     = $v;}                 # Set name
    sub setCaption($$) {my ($t, $v) = @_; $t->{caption}  = $v;}                 # Set caption
    sub setPhoto  ($$) {my ($t, $v) = @_; $t->{photo}    = $v;}                 # Set photo
    sub setTitle  ($$) {my ($t, $v) = @_; $t->{title}    = $v;}                 # Set question title
    sub setOrder  ($$) {my ($t, $v) = @_; $t->{order}    = $v;}                 # Set order
    sub setRelation($$){my ($t, $v) = @_; $t->{relation} = $v;}                 # Set relation

    sub images($)                                                               # Images for thing
     {my ($thing) = @_;
      my $name = $thing->name;
      my @s;
      if (my $s = $thing->sequence)
       {push @s, "$name $_" for 1..$s;
       }
      else
       {push @s, $name;
       }
      @s
     }
    sub imageCount($)                                                           # Count of images for thing
     {my ($thing) = @_;
      my $s = $thing->sequence;
      return $s if $s;
      1
     }
    sub photoName($;$)                                                          # Name of file containing source photo minus directory and extension
     {my ($thing, $sequence) = @_;
      my $s = $thing->{photo} // $thing->name;
         $s .= " $sequence" if $sequence;
      $s
     }
    sub photoSource($;$)                                                        # Name of file containing the source of a photo
     {my ($thing, $sequence) = @_;
      my $dir = $thing->app->imageSourceDirectory;
      my $name = $thing->photoName($sequence);
      "$dir$name.jpg";
     }
    sub photoTargetName($;$)
     {my ($thing, $sequence) = @_;                                              # Thing, sequence
      my $photo = ::squeezeOutBadChars($thing->photoName);
      return $photo unless $sequence;
      my $s = 1e6+$sequence;
      "$photo/$s"
     }
    sub photoTarget($$$;$)
     {my ($thing, $genAndroid, $subset, $sequence) = @_;                        # Thing, subset, sequence
      my $app = $thing->app;
      my $s   = $app->androidBuildDir($subset, $genAndroid)."/assets/images/";
      my $t   = photoTargetName($thing, $sequence);
      "$s$t.jpg"
     }
    sub videoSourcePossibility($)
     {my ($thing) = @_;
      my $group = $thing->app->group;
      my $name  = $thing->name;
      for   my $s(qw(images videos))
       {for my $t(qw(mp4 avi mov))
         {my $f = "../$s/$group/$name.$t";
          return $f if -e $f;
         }
       }
      undef
     }
    sub videoSource($;$)
     {my ($thing, $video) = @_;
      my $vs = "videoSource";
      if (@_ == 2)
       {$thing->{$vs} = $video;
        return $thing;
       }
      return $thing->{$vs};
     }
    sub sound($;$)                                                              # Sound file - how the title is said
     {my ($thing, $sound) = @_;
      return $sound ? $thing->{sound} : $thing->app->useName ?  $thing->name : $thing->title
     }
    sub soundSource($;$)                                                        # Sound file - source
     {my ($thing, $sound) = @_;
      return $thing->name if $thing->app->useNameSource;
      return &sound(@_);
     }
    sub soundTarget($;$)                                                        # Sound file - target
     {my ($thing, $sound) = @_;
      return $thing->name if $thing->app->useNameTarget;
      return &sound(@_);
     }
    sub audioSource($;$$)                                                       # Name of source file containing a question
     {my ($thing, $speaker, $sound) = @_;                                       # sound is only used by captions=>2 = Adjectives
      my $app = $thing->app;
      my $dir = $app->audioSourceDirectory;
      my $name = $thing->soundSource($sound);
      my $Name = substr($name, 0, 1);
      my $Same = ($speaker ? $speaker.'/' : '').$Name;                          # Either "speaker number"/"thing name".mp3 or just "thing name".mp3 if speaker 0 (the quotes are not present)
      my $Speaker = ($speaker ? "-Speaker-$speaker" : '');
      my $s1 = "$dir$name$Speaker.mp3";                          return $s1 if -e $s1 or $app->flattenAudio;
      my $s2 = "$dir$Name/$name$Speaker.mp3";                    return $s2 if -e $s2; # Separate directory by first character
      my $s3 = "$dir$Same/$name.mp3";                            return $s3 if -e $s3; # Separate directory for each speaker
      my $s4 =  $dir.::squeezeOutBadChars($name)."$Speaker.mp3"; return $s4 if -e $s4; # FunFair
      ::makePath("$dir$Name");
      $s3
     }
    sub audioTarget($$$;$$)
     {my ($thing, $genAndroid, $subset, $speaker, $sound) = @_;                 # sound is only used by captions=>2 = Adjectives
      my $app = $thing->app;
      my $d   = $app->androidBuildDir($subset, $genAndroid);
      my $s   = ::squeezeOutBadChars($thing->soundTarget($sound));
      my $S   = $speaker ? "Speaker$speaker" : '';
      my $r = "$d/assets/audio/$s$S.mp3";
      $r
     }
    sub audioCaptionsSource($;$$$)                                              # Name of source file containing an audio caption
     {my ($thing, $wantName, $speaker, $caption) = @_;
      my $app = $thing->app;
      my $dir = $app->audioCaptionsSourceDirectory;
      my $name = $thing->name;
      my $Name = substr($name, 0, 1);
      my $Same = ($speaker ? $speaker.'/' : '').$Name;
      my $Speaker = ($speaker ? "-Speaker-$speaker" : '');
      return "$dir$Same/$name-Caption$caption.mp3" if $caption; # Split captions always use this format
      my $s1 = "$dir$name-Caption$Speaker.mp3";                         return $s1 if -e $s1; # Older unsplit captions can use a variey of naming conventions
      my $s2 = "$dir$Name/$name-Caption$Speaker.mp3";                   return $s2 if -e $s2;
      my $s3 = "$dir$Same/$name-Caption.mp3";                           return $s3 if -e $s3;
      my $s4 = $dir.::squeezeOutBadChars($name)."-Caption$Speaker.mp3"; return $s4 if -e $s4;
      return $s3 if $wantName; # Preferred name if no existing file dictates otherwise
      ::Log("No audio caption file matching $s1 or $s2 or $s3 or $s4 for $name");
      undef
     }
    sub androidAudioCaptionsTarget($$$$;$$)
     {my ($thing, $genAndroid, $subset, $speaker, $caption) = @_;               # caption number0 or 1,2
      my $app = $thing->app;
      my $d   = $app->androidBuildDir($subset, $genAndroid);
      my $n   = ::squeezeOutBadChars($thing->name);
      my $c   = $caption ? $caption : '';
      my $S   = $speaker ? "Speaker$speaker" : '';
      "$d/assets/captions/$n$c$S.mp3"
     }
    sub factsSource($;$$)                                                       # Name of source file containing facts
     {my ($thing, $wantName, $language) = @_;                                   # Thing, desire for a name, language to use (two character code come it ...)
      my $app = $thing->app;
      my $dir = $app->factsSourceDirectory;
      my $name = $thing->name;
      my $l = $language && $language ne 'en' ? "$language/" : "";               # Language specified
      my $s = "$dir$l$name.data";
      return $s if -e $s || $wantName;
      my $S = "$dir$l".::squeezeOutBadChars($name).".data";
      return $S if -e $S;
      undef
     }
    sub factsTarget($$$;$)
     {my ($thing, $genAndroid, $subset, $language) = @_;
      my $d = $thing->app->factsTargetDir($subset, $genAndroid, $language);
      my $s = ::squeezeOutBadChars($thing->name);
      "$d$s.jet"
     }
    sub textCaptionsSource($;$)                                                 # Name of source file containing the text of a caption
     {my ($thing, $wantName) = @_;
      my $app = $thing->app;
      my $dir = $app->textCaptionsSourceDirectory;
      my $name = $thing->name;
      my $s = "$dir$name.data";
      return $s if -e $s || $wantName;
      my $S = $dir.::squeezeOutBadChars($name).".data";
      return $S if -e $S;
      undef
     }
    sub androidTextCaptionsTarget($$$)
     {my ($thing, $subset, $genAndroid) = @_;
      my $app = $thing->app;
      my $d   = $app->androidBuildDir($subset, $genAndroid);
      my $s   = ::squeezeOutBadChars($thing->name);
      "$d/assets/captions/$s.jet"
     }
    sub captionText                                                             # Text of caption
     {my ($thing) = @_;
      my $t = $thing->{caption};
      return $t if $t;
      my $f = $thing->textCaptionsSource;
      return ::readFile($f) if $f;
      undef
     }

# Facts for a thing
    sub facts($;$$)
     {my ($thing, $additional, $allFacts) = @_;
      $additional //= 0;                                                        # Additional: 0 (default) - spoken facts, 1 spoken and unspoken facts
      $allFacts   //= 0;                                                        # allFacts: 0 - facts up to licence details, 1 - all facts
      my $app = $thing->app;                                                    # Things in app
      return () unless $thing->app->facts or $thing->app->titlesInFacts;        # Nothing if the app does not have any facts
      my @f;
      for(split /\n/, ::readFile($thing->factsSource(1)))                       # Each line of the fact file for the thing
       {last if /\A\*/ && !$allFacts;                                           # Author details - no sound files would be generated for these
        next if /\A\-/ && !$additional;                                         # - at front indicates an unspoken fact, ignored for additional == 0
        next if /\A\s*\Z/;                                                      # Skip blank lines
        my @a;                                                                  # The various possibilities
        for my $a(0..3)                                                         # Generate each possibility
         {my $f = s/\A\s+//r =~ s/\s+\Z//r;                                     # Fact - remove leading and trailing spaces
          $f =~ s/\A[+=-]// if ::oneOf($a, 0, 1);                               # Remove command punctuation
          $f =~ s/\|//g     if ::oneOf($a, 0, 2);                               # Remove breath | breaks
          push @a, $f;
         }
        push @f, [@a];
       }
      @f
     }
    sub factFileNames($$$$)                                                     # Name of the audio source and target files from a fact
     {my ($thing, $fact, $genAndroid, $subset) = @_;                            # Thing, genAndroid+subset is used to supply target mp3 file names, if these are not needed $genAndroid and $subset can be undef
      my $app = $thing->app;
      return () if !$app->facts;
      my @f;
      #my $d = $thing->app->androidBuildDir($subset, $genAndroid) if defined $genAndroid;
      my $f = ::squeezeOutBadChars($fact);
      my $F = uc(substr($f, 0, 1));                                             # Super directory name from first letter of fact to make cutting out easier
      my $s = $app->audioFactsSourceDirectory.$F."/$f";                         # Audio source file name for audio fact
      my $t = $app->factsTargetDir($subset, $genAndroid).$f if $genAndroid;     # Audio target file name for audio fact if we have a genAndroid - otherwise we cannot tell and so presumably we are doing something other than a compile
      ("$s.mp3", $t ? "$t.mp3": undef)                                          # Source, target - not used for breath files
     }
    sub factFiles($;$$)                                                         # Audio files used to hold spoken facts
     {my ($thing, $genAndroid, $subset) = @_;                                   # Thing, genAndroid+subset is used to supply target mp3 file names, if these are not needed $genAndroid and $subset can be undef
      my $app = $thing->app;
      return () unless $app->facts;                                             # No data for apps without facts
      my $groupName = $app->group;
      my $thingName = $thing->name;
      my $cache = $app->{cache}{$groupName}{$subset//0}{$thingName};            # Cached data if this data already available
      return @$cache if $cache;
      my @f;                                                                    # Fact file details for thing
##    my $d = $app->androidBuildDir($subset, $genAndroid) if defined $genAndroid;
      for($thing->facts)
       {my ($source, $target) = factFileNames($thing, $_->[0], $genAndroid, $subset); # Parse fact
        if (1)                                                                  # Package the audio file details as otherwise it is too easy to mis-spell things
         {package FactFileDetails;
          use Data::Dump qw(dump);
          sub breath       :lvalue {$_[0]->{breath}}                            # Array of breath segments if composed of breath segments
          sub commands     :lvalue {$_[0]->{commands}}
          sub raw          :lvalue {$_[0]->{raw}}
          sub source       :lvalue {$_[0]->{source}}
          sub recordFile   :lvalue {::recordFile($_[0]->source)}
          sub target       :lvalue {$_[0]->{target}}
          sub text         :lvalue {$_[0]->{text}}
          sub thing        :lvalue {$_[0]->{thing}}
          sub chooser      :lvalue {$_[0]->{chooser}}                           # The number which chooses breath segments for this fact
          sub allBreathFilesPresent :lvalue {$_[0]->{allBreathFilesPresent}}    # Cache of whether all breath files are present or not as this does not change over one execution
          sub allBreathFiles($)                                                 # Array of all breath files
           {my ($f) = @_;                                                       # Fact being checked
            return () unless $f->breath;                                        # All present or none required
            my @b;                                                              # Breath files array
            for my $b(@{$f->breath})                                            # Breath files
             {push @b, $b->file($_) for 1..$b->depth;                           # At each depth
             }
            @b                                                                  # All breath files found
           }
          sub allBreathsPresent($)                                              # Check all the breath files for a fact are present
           {my ($f) = @_;                                                       # Fact being checked
            return 1 unless $f->breath;                                         # All present or none required
            my $a = \$f->allBreathFilesPresent;                                 # Cached value
            return $$a if defined $$a;                                          # Returned cached value
            for my $b(@{$f->breath})                                            # Breath files
             {for my $d(1..$b->depth)                                           # At each depth
               {return $$a = 0 if $b->checkRecordFile($d);                      # Missing file at this depth
               }
             }
            $$a = 1                                                             # All breath files found
           }
          sub chosenBreathFiles($)                                              # Choose the breath segments (at random) that will be used to construct this fact
           {my ($f) = @_;                                                       # Fact being checked
            return () unless $f->breath;                                        # No choice made if not breath segmented
            my @f;                                                              # Breath files array
            push @f, $_->chose for @{$f->breath};                               # File chosen for each breath
            @f                                                                  # All breath files found
           }
          sub createChooserForFact($)                                           # Create a unique number for the fact that can be used to select the breath segments to be used if required
           {my ($f) = @_;                                                       # Fact being checked
            my $n = 0;                                                          # Semi random nunber
            $n += ord for split //, $f->text;                                   # Based on text of fact
            $n
           }
          sub outOfDate($_)                                                     # Whether this fact is out of date with regard to its breath files
           {my ($f) = @_;                                                       # Fact being checked
            return undef unless $f->breath;                                     # No breath files so not out of date with regard to them
            ::outOfDate($f->source, $f->chosenBreathFiles);                     # Check chosen files are all older than target
           }
          push @f, bless my $f = {};                                            # Fact details
          $f->thing        = $thing;                                            # Thing associated with fact
          $f->text         = $_->[0];                                           # Text of fact
          $f->source       = $source;                                           # Consolidated audio file
          $f->target       = $target;                                           # Target this file will be copied to build the app
          $f->commands     = $_->[2];
          $f->raw          = $_->[3];
          $f->chooser      = $f->createChooserForFact;                          # Create a unique number for the fact that can be used to select the breath segments to be used if required

          my @B  = split(/\s*[\|:;]\s*/, $_->[1]);                              # Split on breath separators
          if (@B > 1)                                                           # If there are any breaths
           {$f->breath = [];
            for(1..@B)
             {my $b = $B[$_-1];                                                 # Text of breath segments
              my ($source, $target)= $thing->factFileNames($b, $genAndroid, $subset); # Breath source and target files
              if (1)                                                            # Package the breath segments as otherwise it is too easy to misspell things
               {package BreathSegments;

                push @{$f->breath}, (bless my $s = {});                         # Breath segment details
                $s->thing      = $thing;                                        # Associated thing
                $s->text       = $b;                                            # Breath segment text
                $s->fact       = $f;                                            # Breath segment text
                $s->chose      = $s->chooseAudioFile($f);                       # Choose audio file for this breath segment

                sub fact :lvalue {$_[0]->{fact}}                                # Fact for this breath segment
                sub thing:lvalue {$_[0]->{thing}}                               # Thing this breath segment is associated with
                sub text :lvalue {$_[0]->{text}}                                # Text of breath segment
                sub chose:lvalue {$_[0]->{chose}}                               # The breath segment file chosen
                sub count:lvalue {$_[0]->{count}}                               # Count of number of times this breath segment is used in this app
                sub recordFile:lvalue  {$_[0]->{recordFile}[$_[1]]}             # Whether a breath segment needs to be recorded at a depth or not - cached as breath segments are not composite and so will not change during execution
                sub allDepthsPresent:lvalue {$_[0]->{allDepthsPresent}}         # Whether all depths are present fpr this breath

                sub checkRecordFile
                 {my ($breath, $depth) = @_;                                    # Breath segment details, depth requested
                  my $d = $depth;                                               # Depth
                  return       $breath->recordFile($d)                          # Cached value if available
                    if defined $breath->recordFile($d);
                  $breath->recordFile($d) = ::recordFile(&file(@_))             # Cache whether file needs to be recorded
                 }
                sub depth                                                       # Breath depth for this segment - the number of recordings required for it
                 {my ($breath) = @_;                                            # Breath segment details, depth requested
                  my $d = $breath->thing->app->breathDepth;                     # Depth details held with app if present at all
                  return 1 unless $d;                                           # No depth available, return default whichis 1 recording required of this breath segment
                  $d->{$breath->text} // 1                                      # Number of recordings required for this breath segmnent
                 }
                sub checkAllDepthsPresent($)                                    # Check that each depth has been recorded for this breath
                 {my ($b) = @_;                                                 # Breath
                  my $a = \$b->allDepthsPresent;                                # Cached value
                  return $$a if defined $$a;                                    # Returned cached value
                  for my $d(1..$b->depth)                                       # At each depth
                   {return $$a = 0 if $b->checkRecordFile($d);                  # Missing file at this depth
                   }
                  $$a = 1                                                       # Files found at all depths fopr breath
                 }
                sub file                                                        # Return the name of the file for the specified depth
                 {my ($breath, $depth) = @_;                                    # Breath segment details, depth requested
                  $depth or ::Confess "No depth provided for breath file";      # Insist that depth be explicitly provided
                  my $f = ::squeezeOutBadChars($breath->text);                  # File name from text of breath segment
                  my $F = uc(substr($f, 0, 1));                                 # Super directory name
                  my $a = $breath->thing->app->audioFactsSourceDirectory;       # Directory name for facts
                  my $d = $breath->depth;                                       # Number of recordings required for this breath segment
                  my $D = $d == 1 ? '' : "d/$depth";                            # Single depth recording packaged as a file, multiple as a separate directory with d to indicate depth otherwise it is easy to confuse the names of the files
                  $a."Breathe/$F/$f$D.mp3"                                      # Return file name
                 }
                sub chooseAudioFile                                             # Returns a breath segment file chosen by the chooser for this fact which can subsequently retrieved by ->chose
                 {my ($breath, $fact) = @_;                                     # Breath segment details
                  my $i = $fact->chooser % $breath->depth;                      # Chosen breath segment
                  $breath->file($i+1)                                           # Chosen file
                 }
               }
             }
           }
         }
       }
      shift @f if $app->titlesInFacts();                                        # Ignore the title when generating sound files for facts, it is taken care of else where, but the title is included as a fact so that it gets translated, hence the need to remove it
      $app->{cache}{$groupName}{$subset//0}{$thingName} = [@f];                 # Cache data
      @f
     }
    sub numberOfFacts($$;$)
     {my ($thing, $genAndroid, $subset) = @_;
      scalar($thing->factFiles($genAndroid, $subset)) // 0
     }
   }

#-------------------------------------------------------------------------------
# Check consistency
#-------------------------------------------------------------------------------

  $app->check(__LINE__);
  $app->postObjectivizationChecks if $app->active;
 }

#-------------------------------------------------------------------------------
# Check keywords
#-------------------------------------------------------------------------------

for my $app(@app)
 {Log ("No title for ". $app->group) unless $app->title;
 }

#-------------------------------------------------------------------------------
# Actions from parameters
#-------------------------------------------------------------------------------

sub clearOptions() {@genAndroid = (); $activeList = undef; $appSubsets = 0; $send = 0;}

if (@ARGV)
 {use Getopt::Long;
  GetOptions
   ('backUp' =>sub {&backUp;},
   );
  if (@ARGV)
   {say "Invalid arguments :", join(" ", @ARGV);
   }
  exit;
 }

#-------------------------------------------------------------------------------
# ADB - pull screenshots
#-------------------------------------------------------------------------------

if ($adb == 1)
 {my @s;
  my $device = "-s ". $devices->{Nook}{id};                                     # Device to pull from
  byAllApp("  Pull screenshots", sub
   {my ($app) = @_;
    my $g = $app->group;
    my $d = $app->screenShotsTempDir();
    my $s = "/mnt/sdcard/Pictures/$g/";
    my $i = "adb $device shell ls $s";
    my $r = execCommand("$i 2>&1");
    Log dump($r);
    return 0 if $r && $r =~ /No such file or directory/;
    return 0 if $r && $r =~ /error: device not found/;
    my @f = split /\n/, $r;
    chop(@f);
    makePath($d);
    my $c = 0;
    for(@f)
     {my $f = "$d$_";
      next if -e $f;
      my $t = s/\s|[?]//gr;
      my $i = "adb $device  pull \"$s$_\" \"$d$t\"";
      Log dump($i);
      execCommand("$i 2>&1");
      ++$c;
     }
    if (1)                                                                      # Should check that the file has been transferred
     {for(@f)
       {my $f = "$s$_";
        my $i = "adb $device shell rm \"$f\"";
        execCommand("$i 2>&1");
       }
     }
    $c
   });
  normalFinish "adb=$adb";
  exit;
 }

#-------------------------------------------------------------------------------
# Make a video from a numbered sub directory of temp screenshots
#-------------------------------------------------------------------------------

sub xc($)                                                                       # Execute a command while showing output directly
 {my ($c) = @_;
  say STDERR $c;
  say for qx($c)
 }

if ($makeVideo)                                                                 # Make a video using ffmpeg to concatenate all the files in an umbered sub folder of temp screenshots
 {byApp("  Make video $makeVideo", sub
   {my ($app) = @_;                                                             # App
    my $g = $app->group;
    my $d = $app->screenShotsTempDir();                                         # Temporary screenshots folder
    my $rate = 20;                                                              # Frame rate = frame per second
    if ($makeVideo == 1)                                                        # Convert for Wikipedia
     {my $i = $d."*.jpg";
      my $o = "$d$g.ogv";                                                       # Output file for Wikipedia
      xc("ffmpeg -y -pattern_type glob -framerate $rate -i '$i' $o");           # Convert
     }
    if ($makeVideo == 1)                                                        # Convert for Amazon
     {my ($W, $H) = (1920, 1200);                                               # Input image dimensions
      my $M = 1080;                                                             # Max size on Amazon
      my $w = $M;                                                               # Assume landscape
      my $h = int($M/$W*$H);
      my $i = $d."*.jpg";
      my $o = "$d$g.avi";                                                       # Output file for Amazon
      xc("ffmpeg -y -pattern_type glob -framerate $rate -i '$i' -s ${w}x${h} $o");  # Convert
     }
    1
   });
  normalFinish "makeVideo=$makeVideo";
  exit;
 }

#-------------------------------------------------------------------------------
# Convert DejaVuSans ttf to Android path calls
#-------------------------------------------------------------------------------

=pod

Download latest definition of DejaVuSans from: http://sourceforge.net/projects/dejavu/files/dejavu/
sudo apt-get install libbatik-java                                              # Install ttf to svg

=cut
sub translateUnicodeName($)                                                     # Translate a unicode name in format: &#xa4; to java
 {my ($name) = @_;

  my $translate =                                                               # Transliterations
   {'&lt;'  =>'<', '&gt;'=>'>',
    '&quot;'=>'"',
    '\\'    =>'\\\\',
    '&amp;' =>'&',
    '&apos;'=>'\\\'',
   };
  my $q = '\'';
  my $t = $translate->{$name}; return "$q$t$q" if $t;                           # Explicit translation

  if ($name =~ /\A\&\#x([[:xdigit:]]+)/i)                                       # Match unicode hexadecimal point name
   {return dump(hex($1));                                                       # Java format
   }

  "$q$name$q"                                                                   # Use as is - the character is the same as the name
 }

sub translateGlyphName($)                                                       # Translate a unicode name in format: &#xa4; to java
 {my ($name) = @_;
  my $translate =                                                               # Explicit translation
   {"integral\'"  =>"integral",
    ""            =>"emptyString"
   };

  $translate->{$name} // $name =~ s/\.//gr;
 }

if ($dejaVu)                                                                    # Create a jar file from DejaVu
 {my $dejaVuDir  = $perlDir."DejaVu/";
  my $font       = "DejaVuSans";                                                # Font name
  my $fontTtf    = $dejaVuDir.$font.".ttf";                                     # File containing font in ttf format from SourceForge
  my $fontSvg    = $dejaVuDir.$font.".svg";                                     # File containing font in svg format
  my $fontJava   = $dejaVuDir.$font.".java";                                    # Output file - java
  my $fontClass  = $dejaVuDir.$font.".class";                                   # Output file - class
  my $fontForJar = $Temp."jar/DejaVu|com/appaapps/dejavu/$font.class";          # Output file - class tree
  my $fontJar    = $supportingDoc."libs/DejaVu.jar";                            # Output file - jar

  say for qx(ttf2svg $fontTtf  -l 0 -h 999999 >$fontSvg);                       # Convert ttf to svg

  my $fontDef = &readFile($fontSvg) =~ s/\R/ /rg;                               # Read font definition from svg file, convert to a single line and parse

  my @Kern = $fontDef =~ m/(<hkern.+?\/>)/gi;                                   # Separate into kerns
  my @Glyphs = grep {!/arabic-form=/} $fontDef =~ m/(<glyph.+?\/>)/gi;          # Separate into glyphs
  Log scalar(@Glyphs), " DejaVuSans symbol definitions found";

  my %Symbol;                                                                   # Symbol name to character code translation
  my @NumberToGlyph;                                                            # Number to glyph
  my %NumberToGlyph;                                                            # Glyph character to number
  if (1)
   {my $N = 0;
    for(@Glyphs)                                                                # Gather symbol to character code translation
     {my @p = my ($name, $symbol) =                                             # Keywords for each glyph
        /<glyph\s*unicode=   \s*\"(.+?)\"
               \s*glyph-name=\s*\"(.*?)\"
        /xgi;
      if (grep{!defined} @p)                                                    # All keywords found check
       {Carp "Not all keywords present for DejaVu glyph $_ during gather symbol names";
        next;
       }
      my $s = $Symbol{$symbol} = translateUnicodeName($name);                   # Translate name
      $NumberToGlyph{$s} = @NumberToGlyph;                                      # Assign a consecutive number to each glyph
      push @NumberToGlyph, $s;                                                  # Number to glyph
     }
   }

  my %Kern;                                                                     # Advance for each kern pair
  for(@Kern)                                                                    # Kern pairs
   {my @p = my ($n1, $n2, $k) =                                                 # Keywords for hkern command
      /<hkern\s+g1="(.+?)"\s+g2="(.*?)"\s+k="([+-]?\d+?)"\s*\/>/gi;
    if (grep{!defined} @p)                                                      # All keywords found check
     {Carp "Not all keywords present for DejaVu hkern $_";
      next;
     }
    my $N1 = $Symbol{$n1};                                                      # Character code for first symbol
    my $N2 = $Symbol{$n2};                                                      # Character code for second symbol
    if (! defined $N1)                                                          # Check code exists for name
     {Carp "No character code for $n1";
      next;
     }
    if (! defined $N2)                                                          # Check code exists for name
     {Carp "No character code for $n2";
      next;
     }
    $Kern{$N1}{$N2} = $k;
   }

  my @SymbolDef;                                                                # Symbol definitions
  my @Advance;                                                                  # Symbol advances
  my @GetGlyphNumber;                                                           # Code to assign glyph number
  my @DrawSymbol;                                                               # Symbol draw methods
  my @AdvanceSymbol;                                                            # Symbol advance methods
  for(@Glyphs)                                                                  # Convert each glyph
   {my @p = my ($name, $symbol, $advance, $svg) =                               # Keywords for each glyph. There is a glyp with the name ""
      /<glyph
             \s*unicode=       \"(.+?)\"
             \s*glyph-name=    \"(.*?)\"
             \s*(?:horiz-adv-x=\"(\d+?)\")?
             \s*(?:d=          \"([^"]+?)\")?
             .+?\/>
      /xgi;
    $advance //= 0;                                                             # Two characters have no advance - assumed that the advance is 0
    $svg     //= '';                                                            # Some characters like spaces do not need drawing
    if (grep{!defined} ($name, $symbol))                                        # Keywords found check
     {Carp "Not all keywords present for DejaVu glyph $_";
      next;
     }
    my $n = translateUnicodeName($name);                                        # Translate name

    if (1)                                                                      # Commands to draw glyp
     {my @c = $svg =~ /([[:alpha:]][^[:alpha:]]*)/g;                            # Commands to draw glyp
      my $P = translateGlyphName($symbol);
      my $D = '  private int draw'   .$P.'() {';                                # Procedure to draw symbol
      my $A = '  private int advance'.$P.'() {';                                # Procedure to advance symbol
      for(@c)                                                                   # Each command
       {my ($c, $p) = /\A(.)(.*)\Z/;                                            # Command plus zero or more parameters
        $D .= "$c(";                                                            # Java command
        $D .= $_."f," for split /\s+/, $p;                                      # Make each number floating point
        chop($D) if $D =~ /,\Z/;                                                # Remove trailing comma
        $D .= ");\n";                                                           # End of command
       }

      my $a = '';                                                               # End symbol/advance definition
      if (my $kern = $Kern{$n})                                                 # If kerning info is present for this character code
       {$a .= "  switch(C) {\n";
        for(sort keys %$kern)
         {$a .= sprintf("    case %s: return %6d + %6d;\n", $_, $advance, $kern->{$_});
         }
        $a .= "   }\n";
       }
      $a .= sprintf("  return %6d;", $advance);                                 # End symbol/advance definition with no kern available
      $a .= " }";

      push @DrawSymbol,    $D.$a;                                               # Save symbol draw method
      push @AdvanceSymbol, $A.$a;                                               # Save symbol advance method
     }
    my $P = translateGlyphName($symbol);
    push @GetGlyphNumber, sprintf("      case %s: return %s;", $n, $NumberToGlyph{$n}); # Decode glyph number
    my $t   = sprintf('      case %s: return ',        $NumberToGlyph{$n});     # Draw by glyph number
    push @SymbolDef, "$t draw$P();";                                            # Call draw method
    push @Advance, "$t advance$P();";                                           # Call advance method
   }

  my $space = <<'END' =~ s/\R\Z//r;                                             # Generate code without Java complaining about the size of the code
END

  my $t1 = <<"END" =~ s/\R\Z//r;
//------------------------------------------------------------------------------
// Paths for each letter in DejaVuSans - code generated by GenApp.pm dejaVu
//------------------------------------------------------------------------------
package com.appaapps.dejavu;

abstract public class $font
 {public final float                                                            // Constants from DejaVu Sans
      kern = 36f/200f,                                                          // Approximate kerning gap between letters
      unitsPerEm = 2048,
      ascent=1556,
      descent=-492,
      xHeight=1120,
      capHeight=1493,
      underlineThickness=90,
      underlinePosition=-85;
  abstract protected void M(float x, float y) ;
  abstract protected void h(float x) ;
  abstract protected void H(float x) ;
  abstract protected void v(float y) ;
  abstract protected void V(float y) ;
  abstract protected void l(float x, float y) ;
  abstract protected void L(float x, float y) ;
  abstract protected void q(float x1, float y1, float x2, float y2) ;
  abstract protected void Q(float x1, float y1, float x2, float y2) ;
  abstract protected void t(float x2, float y2) ;
  abstract protected void T(float x2, float y2) ;
  abstract protected void z() ;
  abstract protected void Z() ;
  char c;                                                                       // Current char being typeset
  char C;                                                                       // Last char to kern against or \u00 if no kerning required
  int n;                                                                        // Number of char being typeset

  protected int n()                                                             // Get number of glyph associated with current char so that the switchs in d() and a() work without Java complaining they are too big
   {switch(c) {
END

  my $t2 = <<'END' =~ s/\R\Z//r;
     }
    return -1;
   }
  protected int d(char pc, char pC)                                             // Add path elements for specified character following after a second character, returns advance or -1 if character not found
   {c = pc; C = pC; n = n();
    switch(n) {
END

  my $t3 = <<'END' =~ s/\R\Z//r;
     }
    return -1;
   }
  protected int a(char pc, char pC)                                             // Width of a character following the second character or -1 if character not found
   {c = pc; C = pC; n = n();
    switch(n) {
END
  my $t4 = <<'END' =~ s/\R\Z//r;
     }
    return -1;
   }
END
  my $t5 = <<'END' =~ s/\R\Z//r;
 } // DejaVuSans
END

  &writeFile($fontJava, join "\n", $t1, @GetGlyphNumber, $t2, @SymbolDef, $t3, @Advance, $t4, @DrawSymbol, @AdvanceSymbol, $t5);

  if (1)
   {my $r = execCommand("javac $fontJava");                                     # Compile
    !$r or Confess "Java failed\n$r";
   }
  copyFile($fontClass, $fontForJar =~ s/\|/\//r);                               # Jar file structure
  my $load = $fontForJar =~ s/\|/ /r;                                           # -C keyword of jar command
  if (1)
   {my $r = execCommand("jar cf $fontJar -C $load");                            # Execute jar command
    !$r or Confess "Jar failed\n$r";
   }
  Log execCommand("jar tf $fontJar");                                           # List jar command

  normalFinish "$font written to $fontJava";
  exit;
 }

#-------------------------------------------------------------------------------
# Print facts
#-------------------------------------------------------------------------------

if ($printFacts == 1)
 {byApp("  Print facts", sub
   {my ($app) = @_;
    my $g = $app->group;
    unless($app->facts or $app->titlesInFacts)
     {Log "facts=> not specified for app ", $app->group, " yet translation of facts requested";
      return;
     }
    my @t;
    for my $t($app->things)
     {for($t->facts(1,1))
       {push @t, [$t->title, $_->[0]];
       }
     }
    say for table([@t]);
    1
   });

  normalFinish "Print facts";
 }

#-------------------------------------------------------------------------------
# Install an app from S3 install onto Nook
#-------------------------------------------------------------------------------

if ($send == 4)                                                                 # Fetch an apk from the install area on S3
 {my $c = 0;
  my $installApkFile = $Home."Android/apks/installNook.apk";
  makePath($installApkFile);

  byApp("Install Apps on Nook from S3", sub
   {my ($app) = @_;
    my $group = $app->group;
    for my $subset(0..$app->subsets)
     {for my $genAndroid(@genAndroid)
       {my $gen = Generate($app, $subset, $genAndroid);
        my $vendor = $gen->vendor;
        next if $app->skipSubset($subset, $genAndroid);
        Log "  Download and install $vendor $group $subset to $installApkFile";
        if (getApkFromS3InstallArea($gen, $installApkFile))
         {&installAndroidPackage($gen, $installApkFile);
          ++$c;
         }
        else
         {Carp "  Unable to locate $vendor $group $subset in install area";
         }
       }
     }
   });
  say "  $c apps installed on Nook";
  exit;
 }

#-------------------------------------------------------------------------------
# Print apks that use free instead of 1
#-------------------------------------------------------------------------------

if ($printZZZ == 1)
 {my @s;
  byAllApp("  Apps with Free vs 1", sub
   {my ($app) = @_;
    my $g = $app->group;
    push @s, $g if $app->freeSuffix;
    $app->freeSuffix
   });
  say "  freeSuffix = AppName == ", join(" || AppName == ", map {ucfirst} @s), ';';
 }

#-------------------------------------------------------------------------------
# Print java
#-------------------------------------------------------------------------------

if ($printZZZ == 12)
 {my @s;
  byApp("  GenJava", sub
   {my ($app) = @_;
    my $g = $app->group;
    my $s = $app->genJava;
    writeUnicode($Temp."description/$g.data", $s);
    1
   });
 }

#-------------------------------------------------------------------------------
# Print java
#-------------------------------------------------------------------------------

if ($printZZZ == 13)
 {byAllApp("  GenJava", sub
   {my ($app) = @_;
    my $g = $app->group;
    return unless $g =~ /German/;
    for($app->things)
     {my ($n, $t) = ($_->name, $_->title=~s/ //gr);
      my $c = "curl https://upload.wikimedia.org/wikipedia/commons/b/b8/De-$t.ogg > $Temp./description/$n.ogg";
      say STDERR dump($c);
      #qx($c);
     }
    1
   });
 }

#-------------------------------------------------------------------------------
# File list for ApkFiles
#-------------------------------------------------------------------------------

sub appLink($$)
 {my ($app, $subset) = @_;
  my $G = $app->Group;
  my $g = $app->group;
  my $s = $subset;
  "<a href=\"http://s3.amazonaws.com/AppaApps/Apks/AppLand/$G/$g$s.appdf\">$g $s</a>"
 }

if ($printZZZ == 3)
 {my $s = <<END;
<table cellspacing=10 border=2>
END
  my $n = 0;
  byAllSubset("  ApkFiles list", sub
   {my ($app, $subset) = @_;
    return unless $subset;
    $s .= join("<td>", "<tr>", ++$n, $app->group, $subset, $app->title($subset), appLink($app, $subset), "\n"); # , $subset ? '' : $app->description);
   });
     $s .= <<END;
</table>
END
  my $f = $Temp."apks/ApkFiles/appsList.html";
  writeFile($f, $s);
  normalFinish("App list for ApkFiles written to $f");
 }

#-------------------------------------------------------------------------------
# Number of apks
#-------------------------------------------------------------------------------

if ($printZZZ == 4)
 {my ($C, $c) = (0, 0);
  byAllApp("  Apk counts", sub
   {my ($app) = @_;
    $C++;
    $c += $app->subsets;
   });
  Log "  paid=$C, free=$c";
 }

#-------------------------------------------------------------------------------
# Icons for upload to Games Circle
#-------------------------------------------------------------------------------

if ($printZZZ == 5)
 {byAllApp("  Icons to Game Circle", sub
   {my ($app) = @_;
    my $g = $app->group;
    my $s = "../Android/$g/icon512.png";
    copyFile($s, "z/icons/$g.png");
    1
   });
  normalFinish "copy icons to z/icons/ for Game Circle upload";
 }

#-------------------------------------------------------------------------------
# Achievements for upload to Games Circle
#-------------------------------------------------------------------------------

sub truncateTo50($)
 {my ($s) = @_;
  $s = substr($s, 0, 50) if length($s) > 50;
  $s
 }

if ($printZZZ == 6)
 {my $f = "z/achievements.csv";
  my $s = 'AchievementId,unlockedIconId,lockedIconId,isHidden,DisplayTitle_en_US,UnlockedDescription_en_US,LockedDescription_en_US,DisplayTitle_en_GB,UnlockedDescription_en_GB,LockedDescription_en_GB,DisplayTitle_de_DE,UnlockedDescription_de_DE,LockedDescription_de_DE,DisplayTitle_fr_FR,UnlockedDescription_fr_FR,LockedDescription_fr_FR,DisplayTitle_it_IT,UnlockedDescription_it_IT,LockedDescription_it_IT,DisplayTitle_es_ES,UnlockedDescription_es_ES,LockedDescription_es_ES,DisplayTitle_ja_JP,UnlockedDescription_ja_JP,LockedDescription_ja_JP,DisplayTitle_zh_CN,UnlockedDescription_zh_CN,LockedDescription_zh_CN,DisplayTitle_ko_KR,UnlockedDescription_ko_KR,LockedDescription_ko_KR,DisplayTitle_pt_BR,UnlockedDescription_pt_BR,LockedDescription_pt_BR,DisplayTitle_ru_RU,UnlockedDescription_ru_RU,LockedDescription_ru_RU'."\n";
  byAllApp("  Achievements to Game Circle", sub
   {my ($app) = @_;
    my $g = $app->group;
    next unless $g =~ /\ACount/i;                                               # Only 100 achievements allowed
    my $US = truncateTo50($app->title(0, "en"));
    my $GB = truncateTo50($app->title(0, "en"));
    my $DE = truncateTo50($app->title(0, "de"));
    my $FR = truncateTo50($app->title(0, "fr"));
    my $IT = truncateTo50($app->title(0, "it"));
    my $ES = truncateTo50($app->title(0, "es"));
    my $JP = truncateTo50($app->title(0, "ja"));
    my $CN = truncateTo50($app->title(0, "zh"));
    my $KR = truncateTo50($app->title(0, "ko"));
    my $BR = truncateTo50($app->title(0, "pt"));
    my $RU = truncateTo50($app->title(0, "ru"));

    $s .= "$g,$g,$g,FALSE,\"". join('","', $US,$US,$US,$GB,$GB,$GB,$DE,$DE,$DE,$FR,$FR,$FR,$IT,$IT,$IT,$ES,$ES,$ES,$JP,$JP,$JP,$CN,$CN,$CN,$KR,$KR,$KR,$BR,$BR,$BR,$RU,$RU,$RU). "\"\n";
    1
   });
  writeUnicode($f, $s);
  normalFinish "prepare achievements file in $f for Game Circle upload - remove BOM";
 }

#-------------------------------------------------------------------------------
# Package names for Games circle
#-------------------------------------------------------------------------------

if ($printZZZ == 7)
 {my $s = qw(71:78:32:0B:E4:99:83:23:BE:6A:34:11:52:9B:0F:14)."\n";

  byAllApp("  Package names", sub
   {my ($app) = @_;
    for(0..$app->subsets)
     {$s .= "com.appaapps.".lc($app->apkName($_))."\n";
     }
    1
   });
  my $f = 'z/packageNames.data';
  writeFile($f, $s);
  Log "  Package names in $f";
 }

#-------------------------------------------------------------------------------
# Check keys present for each app
#-------------------------------------------------------------------------------

if ($printZZZ == 8)
 {my $E = 0;
  byAllApp("  Games Circle key Check", sub
   {my ($app) = @_;
    my $g = $app->group;
    my $e = 0;
    next if $g =~ /\ADay\Z/;
    for(0..$app->subsets)
     {my $a = $app->apkName($_);
      my $f = ::keyStore("keys/$a.data");
      next if -e $f;
      Carp "No Games Circles key for app $g $_";
      ++$e; ++$E;
     }
    $e
   });
  Confess "  WARNING $E Games Circle Keys missing" if $E;
  normalFinish "Check Games Circle Keys, all keys present" unless $E;
 }

#-------------------------------------------------------------------------------
# Apps that need to be screenshot
#-------------------------------------------------------------------------------

if ($printZZZ == 9)
 {my $E = 0;
  byAllApp("  Screenshots required", sub
   {my ($app) = @_;
    my $g = $app->group;
    return 0 if $g =~ /\ADay\Z/ or $app->{$zShot};
    ++$E;
    1
   });
  Log "  $E apps need screen shots"       if $E;
  normalFinish "Screenshots check" unless $E;
 }

#-------------------------------------------------------------------------------
# Remove empty screen shot folders
#-------------------------------------------------------------------------------

if ($printZZZ == 10)
 {my $R = 0;
  byAllApp("  Remove empty Screenshots", sub
   {my ($app) = @_;
    my $g = $app->group;
    my $r = 0;
    for(2..4)
     {my $d = $app->screenShotsDir().$_;
      next unless -e $d;
      my @d = glob("$d/*");
      next if @d;
      rmdir $d;
      $r++ unless -e $d;
     }
    $R += $r;
    $r
   });
  Log "  $R directories removed" if $R;
  normalFinish "no empty screenshot directories" unless $R;
 }

#-------------------------------------------------------------------------------
# Generate key words by analyzing descriptions
#-------------------------------------------------------------------------------

if ($printZZZ == 11)
 {my $d = &appDescriptions();
  byAllApp("  Keywords", sub
    {my ($app) = @_;
     my $g = $app->group;
     my $t = lc $app->title;
        $t = $t =~ s/ of | the | a / /gr =~ s/[0-9!"$%^&*()\-_+=:;'~#<,>.?]/ /gr =~ s/\s+/ /gr;
     my $a = substr((' 'x40), length($g), 40);
     say STDERR "  $g$a => qw(english appaapps $t),";
   });
 }

#-------------------------------------------------------------------------------
# Translations
#-------------------------------------------------------------------------------

my $stringTranslations;                                                         # Translations already done in source
my $stringsUntranslated;                                                        # Strings needing translation from source //S

sub sourceCodeString()
 {readFile($sourceCode)
 }

#-------------------------------------------------------------------------------
# Translated Words
#-------------------------------------------------------------------------------

sub translatedWords()
 {my $f = "Translations/Translations.data";
  return retrieve($f) if -e $f;
  undef
 }

#-------------------------------------------------------------------------------
# Returns a unique name for a string (hashes the string contents)
# Loads the string into the english section
#-------------------------------------------------------------------------------

sub stringName($)
 {my ($s) = @_;
  $s and $s !~ /\A\s+/ or ::Confess "String with leading blanks to be translated=$s=" ;
  for my $n(keys %$stringTranslations)                                          # Search for existing version of string
   {next unless my $S = $stringTranslations->{$n}{en};
    return $n if $s eq $S;
   }
  my $t = $stringTranslations;
  my @w = split(/ /, $s);
  my $n = '';
  for(@w)                                                                       # Construct unique name
   {my $l = lc(substr($_, 0, 1));
#      $l =~ s/[@,.:!?]/a/g;
       $l =~ s/[^a-zA-Z]//g;
    $n .= $l;
    if (length($n) >= 3)
     {if (!$stringTranslations->{$n}{en})
       {$stringTranslations->{$n}{en} = $s;
        return $n;
       }
     }
   }
  for my $i(1..1000)                                                            # Try adding a number on the end to get a unique name
   {my $N = "$n$i";
    if (!$stringTranslations->{$N}{en})
     {$stringTranslations->{$N}{en} = $s;
      return $N;
     }
   }
  ::Confess "stringName: Cannot create string for $s";
 }

#-------------------------------------------------------------------------------
# Load all the existing translations from the source
#-------------------------------------------------------------------------------

sub loadOldTranslations()                                                       # Returns old translations taken from source code
 {my ($s) = sourceCodeString() =~ m(//<TRANSLATIONS>(.+?)//</TRANSLATIONS>)s;   # Read translations from Midlet source code

  my $l = 'en';
#  my $t = $stringTranslations;
  for(split(/\n/, $s))
   {if (m(class T(\w\w)\s+extends))                                              # Start a language
     {$l = $1;
     }

    if (my @s = m/String (\w+)\(\) \{return \"([^"]+)\"/)                       # Match a translation
     {$s[0] = lc($s[0]);
      if ($l eq "en")
       {$stringTranslations->{$s[0]}{$l} = $s[1] =~ s/\\u0027/'/gr;             # Save english source
       }
      else
       {$stringTranslations->{$s[0]}{translation}{$l} = $s[1];                  # Save translation
       }
     }
   }
  $stringTranslations
 }

#-------------------------------------------------------------------------------
# Gets all the strings in the source that have been marked up with //S
#-------------------------------------------------------------------------------

sub loadStrings()
 {my $state = 0;
  my @l; my @L;
  my $l = 0;
  for(split(/\n/, sourceCodeString()))
   {++$l;
    if ($state == 0)
     {if    (m(<S>))   {++$state; push @L, $l}
      elsif (m(//S))   {push @l, $_; ::Log "Load Strings on line $l found $_"}
      elsif (m(/</S>)) { ::Confess "Unmatched </S> on line $l"}
     }
    elsif ($state == 1)
     {if    (m(<S>))   { ::Confess "Nested <S> on line $l already started on line ", $L[-1]}
      elsif (m(//S))   {::Confess "//S in <S> </S> on line $l"}
      elsif (m(</S>)) {--$state; pop @L}
      push @l, $_
     }
   }
  $state == 0 or ::Confess "Unmatched <S> on line ", $L[-1];

  my @s = map m/\"([^"]*)\"/g, @l;
  my %s = map {($_, 1)} grep {/[a-zA-Z]/} map {m/\A([0-9a-zA-Z'\,.:@\-!? <>\/]+)\Z/g} @s;
  my %S = map {($_, 1)} @s;
  if (my @i = grep {!$s{$_}} sort keys %S)
   {::Log "getStrings: Ignoring these strings while looking for stuff to translate";
    ::Log "  $_" for @i;
   }

  for(keys %s) # Load strings
   {my $n = stringName($_);
   }
 }

#-------------------------------------------------------------------------------
# Loads a new set of source string translations separated by [language]
#-------------------------------------------------------------------------------

sub loadNewTranslations($$)
 {my ($file, $replace) = @_;                                                    # File containing new translations
  ::Log "loadNewTranslations: file $file";
  my $L;                                                                        # Current language
  my $l;                                                                        # Line number in input file
  my $M;                                                                        # Line number within language which must match
  for (split(/\n/, readUnicode($file)))                                         # Each line
   {++$l;
    if (/\[(\w\w)\]/)
     {$L = $1;
      $M = 0;
      ::Log "Loading Language $L";
      next;
     }
    ++$M;
    s/\x{200B}//g;                                                              # Zero width space
    s/[\x{ff08}(]\s/\(/g;                                                       # Google adding space after bracket
    s/\s[\x{ff09})]/\)/g;                                                       # Google adding space before bracket

    my ($m, $n, $w);
    if    (m/\A\s*[(\x{FF08}]123456789(\d+)abcdefg(\w+)[)\x{FF09}]\s*(.+)\Z/)   # Get bracketed sequence number, word, translation
     {($m, $n, $w) = ($1, lc($2), $3);
     }
    elsif (m/\A\s*(.+)\s*[(\x{FF08}]123456789(\d+)abcdefg(\w+)[)\x{FF09}]\Z/)   # Get bracketed sequence number, word, translation
     {($w, $m, $n) = ($1, lc($2), $3);
     }
    else
     {::Confess "Ignoring bad input line ", dump($l), " in file $file for language $L:\n$_";
     }
    $w =~ s/\"//g;                                                              # Get rid of useful quotes that makes the translation so much better
    $w =~ s/\x{201c}|\x{201d}//g;                                               # Likewise, quotes translated into Chinese
    $n = lc($n);

    my $e = $stringTranslations->{$n}{en};
    unless($e)
     {say ::dump($stringTranslations);
      ::Confess "loadNewTranslations: No english for variable number $m on line $l ", dump($_);
     }
    unless($m == $M)
     {::Confess "loadNewTranslations: m=$m, M=$M does not match on line $l";
     }
    if ($e =~ /\A[A-Z]/) {$w = ucfirst($w)} elsif ($e =~ /\A[a-z]/) {$w = lcfirst($w)}
    $stringTranslations->{$n}{translation}{$L} = &javaU($w) unless $L =~ /en/ or !$replace && $stringTranslations->{$n}{translation}{$L};
   }
 }

sub javaU($)                                                                    # Convert to Java \u notation
 {my ($s) = @_;
  my $t = '';
  $t .= (!/['"]/ && ord($_) < 128 ? $_ : '\u'.sprintf("%04x", ord($_))) for split(//, $s);
  $t
 }

#-------------------------------------------------------------------------------
# Print strings to be translated by language
#-------------------------------------------------------------------------------

sub printTranslateThis($)
 {my ($f) = @_;
  my $t = $stringTranslations;
  my %l;                                                                        # Languages
  for my $n(keys %$t)
   {$l{$_}++ for keys %{$t->{$n}{translation}}
   }
  my %c;                                                                        # Missing words by language
  for   my $n(keys %$t)
   {for my $l(keys %l)
     {$c{$l}++ unless $t->{$n}{translation}{$l};
      ::Log "No translation for $n in $l =", $t->{$n}{en}, "=" unless $t->{$n}{translation}{$l};
     }
   }

  ::Log "[$_] ", $c{$_}, "\n" for sort keys %c;
  ::Log "[en]";
  my $N = 0;

  my $s = "[en]\n";

  for my $n(sort keys %$t)
   {for my $l(sort keys %l)
     {next if $t->{$n}{en} =~ /\A(the|a|an)\Z/i;
      next if $t->{$n}{translation}{$l};
      ++$N;
      $s .= writeStringToTranslate($N, $n, $t->{$n}{en});
      last;
     }
   }
  $s .= join('', map {"[$_]\n\n"} &appLanguagesMinusEnglish);
  writeUnicode($f, $s);
 }

sub writeStringToTranslate($$$)
 {my ($N, $n, $s) = @_;                                                         # Line number, variable, string
  die "N evaluates to false" unless $N;
  die "n evaluates to false" unless $n;
  "(123456789${N}abcdefg$n) \"". $s. "\"\n"
 }

#-------------------------------------------------------------------------------
# Active translations - translations being used in the source code
#-------------------------------------------------------------------------------

sub activeTranslations()
 {my $h = {map {$_=>1} sourceCodeString() =~ /T(?:Local)?\.(\w+)\(\)/g};        # Translations being used
 }

#-------------------------------------------------------------------------------
# Write Java code for translation classes
#-------------------------------------------------------------------------------

sub writeAllEnglishStrings()
 {my $t = $stringTranslations;
  my %s = %{activeTranslations()};
  my $N = 0;
  for(sort keys %$t)
   {my $w = $t->{$_}{en};
    next unless $s{$_};
    ++$N;
    writeStringToTranslate($N, $_, $t->{$_}{en} =~ s/\\u0027/\'/gr)
   }
 }

#-------------------------------------------------------------------------------
# Write Java code for translation classes
#-------------------------------------------------------------------------------

sub writeJavaTranslationClasses($)                                              # Java classes containing translations
 {my ($replace) = @_;
  my $s = $stringTranslations;
  my %active = %{activeTranslations()};
  my %l = map {($_, 1)} map {keys %{$s->{$_}{translation}}} keys %$s;           # Languages
  my $T = '';                                                                   # Concatenated source code
  my $W = "$Temp/jar/";                                                         # Work area for building jar
  my $E = $W."Ten.java";                                                        # English class file name

  if (1)
   {my $t = <<END;                                                              # Write base English class
package com.appaapps.translation;
public class Ten {
END
    for(sort keys %$s)                                                          # For each wod that should be translated
     {next if $replace and !$active{$_};                                        # Only write active translations on replace
      my $w = $s->{$_}{en};
      unless($w)
       {::Log "Missing english string for variable ", dump($_);
        next;
       }
      $t .= sprintf("  public String %s() {return \"%s\";}\n", $_, javaU($w));
     }
    $t .= "}\n";
    Log "Write class Ten";
    writeFile($E, $t);                                                          # Write english class
    Log execCommand("javac $E");                                                # Compile class
    $T .= $t;
   }

  for my $l(sort keys %l)                                                       # Write translation class for each language
   {Log "Write class $l";
    my $t = <<"END";                                                            # Write translation class
package com.appaapps.translation;
public class T$l extends com.appaapps.translation.Ten{
END
    for(sort keys %$s)
     {next if $replace and !$active{$_};                                        # Only write active translations on replace
      my $d = $s->{$_}{translation}{$l};
      my $e = $s->{$_}{en};
         $d = '' if $e eq "the" and !$d;
      unless(defined $d)
       {::Log "Missing $l string for variable ", dump($_);
        next;
       }
      unless($e)
       {::Log "Missing en string for variable ", dump($_);
        next;
       }
      my $s = "  public String ${_}() {return \"$d\";} // $e\n";
      $t .= $s;
     }
    $t .= "}\n";

    my $c = "T$l";                                                              # Class name
    my $f = $W."$c.java";                                                       # Java file
    writeFile($f, $t);                                                          # Write class
    Log execCommand("javac $E $f");                                             # Compile class
    $T .= $t;
   }

  my @languages = ('en', sort keys %languages);                                 # Language codes plus English
  my $p = "com/appaapps/translation/";                                          # Package name in file format
  my $d = $W.$p;                                                                # Create file structure for Jar file
  makePath($d);                                                                 # create path for file structure
  for(@languages)                                                               # Copy class file into file structure for each language
   {my $c = "T$_.class";                                                        # Source class file
    my $s = $W.$c;                                                              # Source class file fully qualified
    my $t = $d.$c;                                                              # Target class file
    unlink $t;                                                                  # Remove target class file
    copyFile($s, $t);                                                           # Copy source class file into target position
   }
  my $J ="$supportingDoc/libs/Translation.jar";                                 # Jar file from wher it will be copied into the android build tree
  unlink $J;                                                                    # Remove old jar file
  my $C = join '', "jar vcf $J ", map {" -C $W ${p}T$_.class"} @languages;      # Jar command
  Log $C;                                                                       # Write jar command
  my $r = execCommand($C);                                                      # Execute jar command
  if ($r =~ /added manifest/)                                                   # Check jar command worked
   {Log "writeJavaTranslationClasses: wrote translations to $J";
    for(@languages)                                                             # Clean up by language
     {my $c = "T$_.class";                                                      # Source class file
      unlink $W."T$_.java", $W.$c, $d.$c;                                       # Clean up
     }
   }
  else
   {Confess "Unable to create $J.jar:\n$r";
   }

  $T                                                                            # Return concatenation of classes
 }

#-------------------------------------------------------------------------------
# Translate source code by substituting variables for strings
# and adding translation classes at end.
#-------------------------------------------------------------------------------

sub translateSource($)
 {my ($replace) = @_;
  my $t = $stringTranslations;                                                  # Translations
  my @n = sort keys %$t;                                                        # String variables
  my $s = sourceCodeString();                                                   # Source
  my @l = split(/\n/, sourceCodeString());                                      # Source lines
  my $state = 0;                                                                # Finite state machine for parsing <S>
  my @L;                                                                        # Line numbers for checking <s>
  my $C = 0;
  for(1..@l)                                                                    # Substitute translations for strings
   {my $l = $_-1+$[;
    my $T = sub                                                                 # Translate current line in place
     {for(@n)
       {#next unless translate('en', my $w = $_);                               # Avoiding alterations
        $t->{$_}{en} or ::Confess "Cannot find english for =", dump($_), "=";
        my $m = '"'.$t->{$_}{en}.'"';
        next unless index($l[$l], $m) > -1;
        my $n = 'T.'.$_.'()';
        my $s = $l[$l];
        ::Log  "Changed $m to $n on line $l";
        $l[$l] =~ s/$m/$n/ge; # Change string
        ++$C;
       }
     };
    if ($state == 0)
     {if    ($l[$l] =~ m(<S>))   {++$state; push @L, $_; $T->()}
      elsif ($l[$l] =~ m(//S))   {$T->()}
      elsif ($l[$l] =~ m(/</S>)) {::Confess "Unmatched </S> on line $l"}
     }
    elsif ($state == 1)
     {if    ($l[$l] =~ m(<S>))   {::Confess "Nested <S> on line $l already started on line ", $L[-1]}
      elsif ($l[$l] =~ m(//S))   {::Confess "//S in <S> </S> on line $l"}
      elsif ($l[$l] =~ m(</S>))  {--$state; pop @L}
      $T->();
     }
   }
  $state == 0 or ::Confess "Unmatched <S> on line ", $L[-1];

  if ($C or $replace)                                                           # Write translated source if changes or new language has been added
   {if (-e (my $f = $sourceCode))
     {for(10..999)
       {my $F = $sourceCode =~ s/\.java\Z/$_.data/r;                            # Numbered version of source file with extension changed to make code look different in editor
        if (1)                                                                  # Backup source code to make way for new translation
         {unless (-e $F)
           {copyFile($f, $F);
            Log "writeTranslations: renamed $f to $F" if -e $F and !-e $f;
            ::Confess "writeTranslations: could not rename $f to $F" if !-e $F;
            last;
           }
         }
       }
      my $s = join("\n", @l);
      my $S = writeJavaTranslationClasses($replace);
      my $t = $s =~ s(//<TRANSLATIONS>.+?//</TRANSLATIONS>)(//<TRANSLATIONS>\n$S//</TRANSLATIONS>\n)sr;
      writeFile($f, $t);
     ::Log "writeTranslations: wrote translation to $f";
     }
    else
     {::Log "Cannot find input file $f";
     }
   }
  else
   {::Log "No changes needed";
   }
 }

#-------------------------------------------------------------------------------
# Extend source to multiple languages
#-------------------------------------------------------------------------------

if (oneOf($translate, 1..4))
 {my $t = $perlDir."unicode/sourceCodeStrings.data";

  if ($translate == 1)                                                          # Get strings for translation
   {loadOldTranslations();                                                      # Translations in class Ten
    loadStrings();                                                              # Load strings needing translations
    printTranslateThis($t);                                                     # Strings that need to be translated
   }
  elsif (oneOf($translate, 2, 4))
   {my $replace = $translate == 4;
    loadOldTranslations();                                                      # Translated strings
    loadStrings();                                                              # Load strings needing translations
    loadNewTranslations($t, $replace);                                          # Translated strings
    translateSource($replace);                                                  # Translate source code
    normalFinish "upgraded source code with translated source strings";
   }
  elsif ($translate == 3)
   {loadOldTranslations();                                                      # Translated strings
    writeAllEnglishStrings();
   }

  if (oneOf($translate, 1,3))
   {normalFinish "Source code strings to be translated are in:\n$t\nPlease translate them with Google Translate then rerun with translate=2";
   }
  exit;
 }

if ($translate == 5)                                                            # Remove translated strings not in use from source code
 {my $s = sourceCodeString();                                                   # Source
  my $r = qr/String (\w+?)\(\) \{return \"/;                                    # RE to find string name
  my @t = $s =~ /\bT(?:Local)?\.(\w+)\(\)/g;
  my %t = map {$_=>1} @t;                                                       # Strings in use
  my $S = $s =~ s/\A.+?<TRANSLATIONS>//sr =~ s/<\/TRANSLATIONS>.+\Z//sr;
  my @T = $S =~ /$r/g;
  my %T = map {$_=>1} grep {!$t{$_}} @T;                                        # Strings not in use
  Log "  ", scalar(keys %T), " translated strings not in use";

  for(split /\n/, $S)
   {if (my ($s) = /$r/)
     {next if $T{$s};                                                           # String not in use - skip
     }
    say STDERR $_;
   }

  normalFinish "Find unused source code strings";
  exit;
 }

#-------------------------------------------------------------------------------
# Print strings English+Foreign for translation checking
#-------------------------------------------------------------------------------

if ($printZZZ == 3)
 {my $T = loadOldTranslations();
  my @t;
  my $s  = "<table cellspacing=10>\n";
     $s .= "<tr><th>Code<td>English<td>Korean\n";
  for (sort keys %$T)
   {my ($e, $k) = ($T->{$_}{en}, $T->{$_}{translation}{ko});
    next unless $k;
    next if $e =~ /\AAvailable/;
    next if /\A(m12|d)\Z/;
    $k =~ s/\\u([a-f0-9]{4})/&#x$1;/gi; # Translate java \u to html &#x
    $e =~ s/\\u0027/\'/gi; # Translate apostrophe
    $s .= "<tr><td>$_<td>$e<td>$k\n";
   }
  $s .= "</table>\n";
  writeFile("unicode/koreanStrings.html", $s);
 }

#-------------------------------------------------------------------------------
# Translate facts
#-------------------------------------------------------------------------------

sub loadFacts($)
 {my ($app) = @_;
  my $g = $app->group;
  unless($app->facts or $app->titlesInFacts)
   {Log "facts=> not specified for app ", $app->group, " yet translation of facts requested";
    next;
   }

  my $f = "${perlDir}unicode/$g.data";
#  my $F = "${perlDir}unicode/$g.txt";
  my $B = "${perlDir}unicode/$g.backup.data";

  ::Confess "Facts for $g already exist in file\n$f\n" if -e $f and fileSize($f) > 200;

  my %t;
  for my $t($app->things)
   {for($t->facts(1,1)) {
      $t{$_->[0]}++
     }
   }

  my $S = ''; $S .= "$_\n" for sort keys %t;
     $S =~ s/\+//g;                                                             # Remove + signs used to mark questionable facts - potentially a bad idea as this should have been done in $t->facts

  my $s = "[en]\n$S";
     $s .= "[$_]\n\n" for &appLanguagesMinusEnglish;

#    $S .= "ENDOFDATA\n";

  writeUnicode($f, $s);
#  writeUnicode($F, $S);
  ::Log "    Facts for $g written to $f, please add translations and then rerun with translateFacts == 2";
 }

sub normalizeTranslatedFacts($)
 {my ($f) = @_;
  $f =~ s/\(abcdefg1/(1/i;                                                      # Temporary fix for Hindi
  $f =~ s/\((\d)\,(\d\d\d)\)/($1$2)/g;                                          # Comma inserted into sequence number
  $f =~ s/\x{200B}//g;                                                          # Zero width space
  $f =~ s/\x{FF08}/\(/g;                                                        # (
  $f =~ s/\x{FF09}/\)/g;                                                        # )
  $f =~ s/\x{5E74}\)/\)\x{5E74}/g;                                              # Date reordered in zh
  $f =~ s/\"//g;                                                                # Get rid of useful quotes that makes the translation so much better
  $f =~ s/\x{201c}|\x{201d}//g;                                                 # Likewise, quotes translated into Chinese
  $f =~ s/(\x{ab}|\x{bb})//g;                                                   # French quotes
  $f =~ s/\+//g;                                                                # Remove carride over plus signs used to mark questionable facts
  $f
 }

sub hexify($)                                                                   # Encode in hex
 {my ($a) = @_;
  my $t = '';
  for(split(//, $a))
   {my $x = sprintf("%06d", ord($_));
    $t .= $x;
   }
  $t
 }

sub saveTranslatedFacts($)                                                      # Write out translated facts into facts directory for use within app
 {my ($app) = @_;
  my $g = $app->group;
  my $f = "unicode/$g.data";

  my $T = readUnicode($f);
  my @F;                                                                        # Facts in English
  my %F;                                                                        # Facts in English index
  my $F;                                                                        # Facts by language
  my $l;                                                                        # Language
  my %L;                                                                        # Languages
  my $n = 0;                                                                    # Line number
  my $N;                                                                        # Number of facts

  for(split(/\n/, $T))                                                          # Load translated facts from file
   {++$n;
    next if /END\s*OF\s*DATA/i;                                                 # Useful for debugging translations
    next if /\A\.\.\.\Z/i;
#   my $t = normalizeTranslatedFacts($_);                                       # Convert brackets and quotes
    if (my ($ll) = /\[(\w\w)\]/)
     {$n  > 1 or $ll =~ /en/     or ::Confess "[en] found on line $n, should only be on line 1 of file $f", # Check file starts with english
      $n == 1 or $languages{$ll} or ::Confess "Unknown language $ll on line $n of file $f";                 # Check validity of non english language
      $l  = $ll;                                                                # Set current language
      $L{$l}++;                                                                 # Current language has been found in translations file
      next;
     }
    $l or ::Confess "Must set a language on line 1";                            # Setting a language immediately is required
    if   ($l =~ /en/) {push @F, $_; $F{$_} = $#F}                               # Save english
    else              {push @{$F->{$l}}, hexify(ucfirst($_))}                   # Save other language as encoded block . originally necessary on Nokia but now a nusciance
   }

  if (1)
   {my @l = grep {!$L{$_}} &appLanguagesPlusEnglish;
    Carp "Missing languages for app $g: ". join(' ', @l) if @l;
   }

  if (1)
   {for(sort keys %$F)
     {my @f = @{$F->{$_}};
      @f == @F or ::Confess "different number of facts for language $_ got ". scalar(@f). " expected ". scalar(@F);
     }
   }

  if (1)                                                                        # Save translated facts
   {for my $t($app->things)
     {for my $l(sort keys %$F)
       {my $s = '';
        for($t->facts(1,1))
         {my ($T) = @$_;                                                        # Text of fact with all punctuation removed

          my $i = $F{$T};                                                       # Index of translated text
          defined($i) or Confess "Text =$T= not presented for transtion. Retranslate!"; # Indicates that the printed text was not presented to the translation process, the entire retranslation should be redone from the start as this should not happen under normal circumstances

          my $f = $F->{$l}[$i];                                                 # Get translation
          if ($g !~ /PuppyDogBreeds/)
           {$f or ::Confess "No translation of fact $T into language $l";
           }
          else {$f //= ''}

          $s .= "$f\n";                                                         # Append translation
         }
        chop($s);
        if (1)
         {my $n = $t->name;
          my $g = $app->group;
          my $f = "../facts/$g/$l/$n.data";
          writeFile($f, $s);
         }
       }
     }
   }
 }

if (oneOf($translateFacts, 1))
 {byApp("  Prepare facts for translation", sub
   {my ($app) = @_;
    loadFacts($app);
    1
   });

  normalFinish "Prepare facts for translation";
 }

if ($translateFacts == 2)
 {byApp("  Save translated facts", sub
   {my ($app) = @_;
    saveTranslatedFacts($app);
    1
   });
  normalFinish "Save translated facts";
 }

#-------------------------------------------------------------------------------
# Translate stuff
#-------------------------------------------------------------------------------


sub translateStuffExit($$)
 {my ($task, $file) = @_;
  normalFinish "Translate $task, please complete translation in $file and rerun with \$translateStuff == 1";
  exit;
 }

if ($translateStuff == 2)
 {my $t = "ago";
  my $f = "Translations/$t.data";
  writeFile($f, join '', <<END, map {"[$_]\n\n"} &appLanguagesMinusEnglish);
[en]
Released 1 day ago
Released 2 days ago
Released 1 week ago
Released 2 weeks ago
Released 1 month ago
Released 2 months ago
END
  translateStuffExit $t, $f;
 }

if ($translateStuff == 4)
 {my $t = "appTypes";
  my $f = "Translations/$t.data";
  writeFile($f, join '', <<END, map {"[$_]\n\n"} &appLanguagesMinusEnglish);
[en]
This app is free and contains no adverts; it does put useful adverts from airPush onto your phone for you to enjoy later.
This app contains very high resolution photos and no advertising. You get 100 minutes for free.
END
  translateStuffExit $t, $f;
 }

if ($translateStuff == 5)
 {my $t = "genres";
  my $f = "Translations/$t.data";
  writeFile($f, join "\n", "[en]", sort values %$genres, map {"[$_]\n"} &appLanguagesMinusEnglish);
  translateStuffExit $t, $f;
 }

sub translatedOneLiners($$$)
 {my ($translations, $sentence, $languages) = @_;
  my @t = keys %$translations;
  my $t = $translations->{$sentence};
  for(@$languages)
   {next if /en/;
    ::Log "Need translation in language $_ for $sentence" unless $t->{$_};
    return 0 unless $t->{$_};
   }
  1
 }

sub fileSequence($$$)
 {my ($directory, $name, $suffix) = @_;
  $directory =~ s/\/+\Z//;
  for(1..999)
   {my $f = "$directory/$name$_.$suffix";
    return $f unless -e $f;
   }
  ::Confess "Cannot create a new file in sequence for $directory$name$suffix";
 }

if ($translateStuff == 3)
 {my $f = fileSequence("Translations", "oneLiners", "data");
  my $T = &loadTranslatedStuff();
  my $o = oneLiners();
  my @O = map {$o->{$_}} sort grep {!translatedOneLiners($T, $o->{$_}, [&appLanguagesPlusEnglish])}  keys %$o;
  my $O = join "\n", "[en]", @O;
  my $P = join("\n", map {"[$_]\n"} &appLanguagesMinusEnglish);
  if (my $n = @O)
   {writeFile($f, "$O\n$P");
    ::Log "Translate $n one liners in file $f and rerun with \$translateStuff==1";
   }
  else
   {::Log "No one liners need to be translated";
   }
  ::Log "Normal Exit from translateStuff $translateStuff";
 }

if ($translateStuff == 1)                                                       # Load all translations into translation cache
 {my @f = glob "Translations/*.data";
  my $s = '';
  my $l;
  my $n = 0;
  my %t;
  for my $f(@f)
   {my @e;                                                                      # Sequence of sentences being translated
    my $N = 1;
    for(split /\n/, readUnicode $f)
     {if (/\[(\w\w)\]/)
       {$languages{$1} or ::Confess "Unknown language code $1 found in file $f";
        $l = $1;
        $n = 0;
        next;
       }
      if ($l =~ /en/)
       {push @e, $_;
       }
      else
       {my $e = $e[$n] or ::Confess "No english for line $N of file $f\n", dump($_);
        $t{$e}{$l} = ucfirst($_);
       }
      ++$n; ++$N;
     }
    ::Log $N-1, " lines read from file $f";
   }
  store \%t, $cacheTranslatedStuff;
  ::Log "Normal Exit from load translated stuff";
  exit;
 }

sub loadTranslatedStuff()
 {my $t = retrieve $cacheTranslatedStuff if -e $cacheTranslatedStuff;
  $t
 }

#-------------------------------------------------------------------------------
# Load texts to be translated
#-------------------------------------------------------------------------------

my $translateText1 = << 'END'; chop($translateText1);
This FREE app contains a selection of the images, spoken words and music available in the full paid version (described in detail below). It is ad supported and may contain ads in the notification tray and/or home screen.
END

my $translateText2 = << 'END'; chop($translateText2);
The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you to play the game without voice prompts.
END

sub loadTexts($)
 {my ($writeFile) = @_;
  my $D;
  my $T = &descriptions();
     $T =~ s/ \n/\n/g;
     $T =~ s/\n /\n/g;
  my @T = split(/====+\s*\n/, $T);
  my $N = 0;
  my $s = '';

  for(@T)
   {my @t = grep {!/\A\s*\Z/} split(/\n/, $_);
    my $name = shift @t; shift @t; unshift @t, ($name, $translateText1);
    my @lines;
    for(0..$#t)
     {my $nn = 'a'; my $n = sub {$nn++};
      $N++;
      my $label = lc(join('', map {(&$n, $_)} split(//, $N)));
      my $text  = $t[$_];

      $s .= "($label)  $text\n";
      push @lines, [$N, $label, $text];
     }
    $D->{apps}{$name} = [@lines];
   }
  if ($writeFile)
   {my $f = "unicode/text2Translate.data";
    writeFile($f, $s);
    ::Log "Wrote text to be translated to $f, please translate it and put it in unicode/translatedtext.data by language";
   }
  if ($writeFile)
   {my $f = "unicode/translatedText.data";
    unless(-e $f)
     {my $s = '';
      $s .= "[$_]\n" for &appLanguagesPlusEnglish;
      writeFile($f, $s);
     }
   }
  return $D if $writeFile;
  &matchTexts($D);
 }

sub matchTexts($)
 {my ($T) = @_;
  my $f = "unicode/translatedText.data";
  ::Log "Reading translated text from file $f";
  my $s = readUnicode($f);
  my $N = 0; my $NN = 0;
  my $L;
  for(split(/\n/, $s))
   {$N++;
    if (/\[(\w\w)\]/)
     {$L = $1;
      ::Log "  language $L";
      $NN = 0;
      next;
     }
    $NN++;
    if (/[(\x{FF08}]((:?\w\d)+)[)\x{FF09}]/)
     {my $l = lc($1);
         $l =~ s/\x{430}/a/g;
         $l =~ s/\x{432}/b/g;
      s/\x{ff08}/(/g;
      s/\x{ff09}/)/g;
      my $n = join('', grep {/\d/} split(//, $l));
      ::Confess "  Line number does not match on line $N, expected line $NN but got $1" unless $n == $NN;
      my $s = s/\(((:?\w\d)+)\)//gr;
      $T->{language}{$L}{$l} = $s;
     }
    else
     {::Confess "  Cannot process line $N, expected line $NN, got ".dump($_);
     }
   }
  $T
 }

sub htmlEscape($) # Convert to Html escape notation
 {my ($s) = @_;
  my $t = '';
  $t .= (!/['"]/ && ord($_) < 128 ? $_ : sprintf("&#%d;", ord($_))) for split( //, $s);
  $t
 }

#D->{apps}{$name} = [[line-number, label, text]];
#  ->{language}{$L}{$label} = text

sub writeDooferage($$$)
 {my ($T, $Title, $Languages) = @_;

  if (1)
   {byApp("$Title Dooferage", sub
     {my ($app) = @_;
      my $name = $app->title;
      my $group = $app->group;
      $T->{apps}{$name} or ::Confess "No translations for =$name=\n";
      my @lines = @{$T->{apps}{$name}};
      my $t = "<h1>$Title - $group</h1>";
      my $s = '<p><table cellspacing=5>';
      my $title = $lines[0]->[2];
      my $e = <<"END";
<p><table cellspacing=5 border=2 width=500>
<tr><td>Title    <td>$title
<tr><td>Title 1  <td>$title 1
<tr><td>Title 2  <td>$title 2
<tr><td>Title 3  <td>$title 3
<tr><td>Title    <td>$title
<tr><td>Version  <td>12.07.05
<tr><td>Copyright<td>Appa-Apps Ltd
<tr><td>Email    <td>support\@appaapps.com
<tr><td>Web      <td>www.appaapps.com
<tr><td>Notes    <td>Please certify this app.
</table>
<p><table cellspacing=5 border=2 width=500>
END
      for my $L(@$Languages)
       {my $lines = $T->{language}{$L};
        if (!$lines)
         {#::Carp "No translations available for language $L in $Title";
          next;
         }
        $s .= "<tr><td>$L<td><table border=2 cellspacing=5  width=500>";
        my $state = 0;
        for(@lines)
         {my ($lineNumber, $label, $text) = @$_;
          my $translation = $lines->{$label};
          $translation or ::Confess "No translation for label $label in language $L";
          if ($state == 0) # Written title or not
           {$s .= "<tr><td>".htmlEscape($translation)."\n<tr><td>";
            $e .= "<tr><td>$text<tr><td>";
            $state = 1;
           }
          else
           {$s .= "<p>".htmlEscape($translation)."\n";
            $e .= "<p>$text";
           }
         }
        my $F = '';
        if (1)
         {my $f = "unicode/translatedTextF$L.data";
          if (-e $f)
           {$F = '<p>'.htmlEscape(readUnicode $f);
           }
         }
        $s .= "$F\n</table>\n";
        $e .= "<p>$translateText2</table>\n";
       }
      $s .= "</table>\n";
      writeFile("../Android/$group/dooferageFor$Title.html", "$t$e$s");
     });
   }
 }

if ($translateText == 1)
 {my $T = loadTexts(1);
  normalFinish "Get texts to be translated";
  exit;
 }

if ($translateText == 2)
 {my $T = loadTexts(0);
  matchTexts($T);
  normalFinish "Translate texts to dooferage report";
  exit;
 }

#-------------------------------------------------------------------------------
# Generate audio files if necessary - makes using Audacity much easier
#-------------------------------------------------------------------------------

=pod

The audio files and audio caption files are held in the same source
directory separated by -Caption as this makes it easier to work with
Audacity. The compile process moves the Captions to the Captions target
directories where they reside with the Captions text separated by file
extension.

=cut

sub createEmptyFile($)                                                          # Create an empty audio file
 {my ($F) = @_;
  return 0 if -e $F;
  return 1 if $test;
  makePath($F);
  open my $f, ">$F" or Confess "Cannot create file $F";
  say    {$f} "";
  close  ($f);
  -e $F or Confess "Unable to create file $F";
  Log "Created empty file ".dump($F) if $debug;
  1
 }

byApp("Remove empty audio files",                                               # Remove empty sound files before recreating just the ones that are currently needed
  sub                                                                           # as the facts are frequently edited during development of an app
   {my ($app) = @_;                                                             # App
    my @f = sort &getAllSoundFiles($app);                                       # All existing audio files in app
    for(@f)                                                                     # Each audio file
     {next if fileSize($_) > 1e3;                                               # Skip files with content
      unlink $_;                                                                # Delete files with no content
     }
   }) if oneOf($printRecordingList,1,2,3);

everyThingBySpeaker($printRecordingList, "Generate audio files for each thing and apply mp3gain to already recorded files if not yet done", sub
 {my ($thing, $speaker) = @_;
  my $s = $speaker // 0;                                                        # Speaker 0 is represented by undef for historical reasons that probably no longer apply
  my $app = $thing->app;
  my $c = 0;
  my $source = $thing->audioSource($s);                                         # Source audio file
  #Log "    Create file $source for speaker $s, ", dump($thing->title);         # Show progress
  $c += createEmptyFile($source);                                               # Create empty file if no audio content available for title
  mp3Gain($app, $source);                                                       # Apply mp3gain to title

  for($thing->factFiles)                                                        # Audio Facts if present
   {my $f = $_->source;                                                         # Source audio file
    $c += createEmptyFile($f) if oneOf($printRecordingList,1,2);                # Source file required
    if (oneOf($printRecordingList,2,3))                                         # Breath files required
     {if (my $B = $_->breath)                                                   # Breath files available
       {for my $b(@$B)                                                          # At each facts file depth
         {for my $d(1..$b->depth)                                               # At each facts file depth
           {my $f = $b->file($d);                                               # Breath file
            $c += createEmptyFile($f);                                          # Create breath file
           }
         }
       }
     }
   }
  $c
 }) if oneOf($printRecordingList,1,2,3);

byApp("Generate Audio Minimax Questions",                                       # Generate any minimax files still needed by the app
  sub
   {my ($app) = @_;
    my $c = 0;
    for my $s($app->speakers)
     {$c += createEmptyFile($_->[0]) for $app->audioMinimaxQuestionFiles($s);   # Minimax questions
     }
    $c
   }
 ) if oneOf($printRecordingList,1,2,3);

everyThingBySpeaker($printRecordingList, "Generate Audio Caption files",        # Generate caption files still needed by the app
  sub
   {my ($thing, $speaker) = @_;
    my $app = $thing->app;
    my $n = 0;
    return 0 unless my $c = $app->captions;
    if ($c == 1)
     {$n += createEmptyFile($thing->audioCaptionsSource(1, $speaker));          # Single captions
     }
    else
     {$n += createEmptyFile($thing->audioCaptionsSource(1, $speaker, $_)) for 1..2; # Split captions per adjectives
     }
    $n
   }
  );

everyThing($printRecordingList, "Generate Caption Text files",                  # Generate caption text files still needded by the app so that they can be manually edited
  sub
   {my ($thing) = @_;
    my $app = $thing->app;
    return 0 unless ($app->captions // 0) == 1;
    createEmptyFile($thing->textCaptionsSource(1));
   }
 );

#-------------------------------------------------------------------------------
# Print recording list
#-------------------------------------------------------------------------------
=pod

Audio files may be constructed either as whole files said directly by the
speaker in one go or assembled from breath segments.  Some times it is
easier to start with the whole files (printRecordingList=1) and then add any
needed breath segments (2) for audio files that the speaker has been unable
to say in one go. Alternatively, with some apps it is obvious that breath
segments should be used right from the start (3) because of the large number
of sound files required with repeated content (e.g. PlusOrMinus).

For all the files that need to be recorded for an app:
  Find the words to be recorded because the corresponding audio file does not exist
  Normalize each existing sound file using mp3gain so that the recordings have the same volume level
  Concatenate breath segments to make complete files
  Perform QA check on each sound file

=cut

sub bold                                                                        # Alternate bolding of lines of words in the HTML output to facilitate reading by speakers during recording
 {my ($t, $n) = @_;
  return "<b>$t</b>" if $n % 2;
  $t
 }

my $mp3Gain = {};                                                               # Details of which files have had mp3Gain applied by app

sub mp3Gain($$)                                                                 # Invoke Mp3Gain command - note: mp3gain will not update files that do not require changes thus preserving the md5 and mod time
 {my ($app, $file) = @_;                                                        # App, file to process
  return 0 if recordFile($file);                                                # Only process files with audio content

  my $s = $app->mp3GainFile;                                                    # File in which we store mp3gain details
  my $g = $app->group;                                                          # Group for app
  my $m = md5File($file);                                                       # md5summ for audio file
  $mp3Gain->{$g} = retrieve $s if !defined $mp3Gain->{$g} and -e $s;            # Lazily load mp3Gain details as needed on an app by app basis
  return 1                     if  defined $mp3Gain->{$g}{$m};                  # Indicate file has already had mp3Gain applied

  my $c = "mp3gain -k -r ".quoteFile($file);                                    # Set sound level non destructively using MP3Gain so that there is no variation in voice volume level
  my $r = execCommand($c);
  if ($r =~ /Can't find any valid MP3 frames in file/)                          # Trap audio files that are not in Mp3 format
   {Confess "mp3Gain detected non audio file $file";
   }
  if ($r =~ /WARNING: with this global gain change, some clipping may occur/)   # Trap clipping
   {Carp "mp3Gain detected clipping on audio file $file";
   }
  my $𝗺 = md5File($file, 1);                                                    # File has just been created so update its md5sum used extensively else where
  my $𝘃 = ++$mp3Gain->{$g}{$𝗺};                                                 # Indicate file has had mp3Gain applied
  makePath($s);                                                                 # Ensure path
  store $mp3Gain, $s;                                                           # Store mp3Gain details
  2                                                                             # Mp3Gain was applied
 }

sub recordFile($)                                                               # Determine whether a file needs to be recorded or not
 {my ($f) = @_;
  return 1 if !-e $f or fileSize($f) < 1e3;                                     # Non existant or small files will need to be recorded
  0
 }

my %md5File;                                                                    # Assume file contents do not change over execution  unless explicitly stated

sub md5File($;$)                                                                # Md5 sum for a file
 {my ($file, $changed) = @_;                                                    # File, known to have changed so update cache
  -e $file or ::Confess "Cannot md5File: $file, as it does not exist";
  return $md5File{$file} if !$changed && $md5File{$file};
  my $c = "md5sum ".quoteFile($file);
  $md5File{$file} = qx($c)
 }

sub parseFileName($)                                                            # Parse a file name into path, file, extension
 {my ($f) = @_;
  Confess "Array context needed" unless wantarray();
  $f =~ /\A(.+)\/(.+)\.(.+)/;
 }

sub checkConformingRecordingRates($)                                            # Convert a sound file to desired rate
 {my ($r) = @_;                                                                 # Report from Sox
  my @r = $r =~ /Sample Rate\s+:\s+(\d+)/g;                                     # Get recording rates
  my %r; $r{$_}++ for @r;                                                       # Number of recordings at each rate
  my $n = my ($f) = keys %r;                                                    # Number of different recording rates
  my $m;
  $m = "Cannot get recording rates from $r" unless $n;                          # Complain if no recording rates found
  $m = "Too many recording rates in $r"     unless $n == 1;                     # Complain if too many recording rates found
  $m = "Too few recording rates in $r"      unless $f && $r{$f} > 2;            # Complain if too few recording rates found
  if ($m)                                                                       # Give user a chance to fix the message
   {::Carp $m;
    ::Log "Manually delete the file with the wrong sample rate, then hit enter to continue";
    readline(STDIN);                                                            # Provides a chance to try and do something about the problem manually
    return 0;                                                                   # Try again
   }
  1                                                                             # OK If we get this far
 }

sub removeFile($)                                                               # Delete a file
 {my ($file) = @_;                                                              # File to delete
  unlink $file;                                                                 # Unlink file
  Log "Removed file $file";
  Confess "Unable to remove file $file" if -e $file;                            # Check removal was successful
 }

=pod

Non composite audio files are checked only once. Audio files that are
comprised of component segments each of which has been checked at least four
times are automatically passed.

Unchecked audio files are played to the user who is given an opportunity to
pass or fail the audio file or one one of its components.

If a non composite audio file is failed, it is deleted.

If a composite audio file is failed the user can select one or more
component segments as failing.  The failing segment is then replayed
separately. If  the segment is failed, the associated file is deleted as are
all composite files that were built with it.  If no segment is rejected, the
composite is passed and the scores of each component segment increased by 1
so that eventually they will be used without question.

An advantage is the ability to delete segments after they have been heard in
situ so that they and the other files that they have been embedded get
removed and then show up in the rerecording list and so get rerecorded or
reconstructed as needed.  While a make like system could have been used this
would have left failed files in position until they were updated allowing an
app build to proceed without complaints which would be dangerous.

However, once a composite file has been built and passed, it will not be
rebuilt if one of its component files is changed as this would require all
the affected composite files to be passed through QA again which could undo
a lot of work.

=cut

sub QaAudioFiles($)                                                             # Manually check the sound quality of each audio file
 {package QaAudioFiles;
  use Data::Dump qw(dump);
  use Storable;
  use Term::ANSIColor;

  my ($app) = @_;                                                               # Sound check this app
  my $q = &load($app);                                                          # Existing object

  return $q;                                                                    # Object

  sub app     :lvalue {my ($q) = @_; $q->{app}}                                 # App
  sub accept  :lvalue {my ($q) = @_; $q->{accept}}                              # Accept a file represented by an md5sum as passing qa
  sub file    :lvalue {my ($q) = @_; $q->{file}}                                # File name from md5 sum
  sub text    :lvalue {my ($q) = @_; $q->{text}}                                # Text associated with a md5sum

  sub register($$$$)                                                            # Record text and file associated with an Md5 sum
   {my ($q, $file, $text) = @_;                                                 # Object, file, text
    my $m = ::md5File($file);                                                   # Md5 sum representing audio and text
    $q->file->{$m} = $file;                                                     # Record file for md5sum
    $q->text->{$m} = $text;                                                     # Record text for md5sum
    $q->save;                                                                   # Save qa
   }

  sub getFile($$) {my ($q, $m) = @_; $q->file->{$m}}                            # File associated with an Md5 sum
  sub getText($$) {my ($q, $m) = @_; $q->text->{$m}}                            # Text associated with an Md5 sum

  sub alreadyPassed($$)                                                         # Already passed or not
   {my ($q, $file) = @_;                                                        # Object, file
    return 0 unless -e $file;                                                   # Not passed if it does not exist
    my $m = ::md5File($file);                                                   # Get md5sum for file known to exist
    $q->accept->{$m} // 0                                                       # Passed if accepted in the past
   }

  sub acceptFile($$)                                                            # Accept a recording represented by its md5sum
   {my ($q, $file) = @_;                                                        # Object, file to accept
    my $m = ::md5File($file);                                                   # Get md5sum for file known to exist
    $q->accept->{$m}++;                                                         # Increment acceptance on composite
    $q->save;                                                                   # Save qa
   }

  sub fail($$)                                                                  # Fail a recording by its md5sum
   {my ($q, $file) = @_;                                                        # Object, file being failed
    my $m = ::md5File($file);                                                   # Get md5sum for file known to exist
    delete $q->accept->{$m};                                                    # Remove acceptance
    delete $q->file->{$m};                                                      # Remove
    delete $q->text->{$m};                                                      # Remove
    unlink $file;                                                               # Delete file
    $q->save;                                                                   # Save qa
   }

  sub getUserResponse($)                                                        # Get response from user
   {my ($prompt) = @_;                                                          # Prompt
    ::Log $prompt;                                                              # Show prompt
    my $r = readline(STDIN);                                                    # Read one line of text
    chomp $r;                                                                   # Remove new line char
    ::Log colored("You said =$r=", 'blue bold');                                # Show what was said
    $r                                                                          # Return result
   }

  sub playFile($)                                                               # Play an audio file using sox
   {my ($file) = @_;
    my $c = "play -q ".::quoteFile($file);
    say STDERR for qx($c);
   }

  sub checkAudioFile($$$;$)                                                     # Check an audio file, return an empty list on success, or an a list of pairs(file, text) of failures so that the caller can update the list of files needed
   {my ($q, $text, $file, $fact) = @_;                                          # Object, text, audio file, fact definition if it is a fact with breath segments
    if ($q->alreadyPassed($file))                                               # Already passed this file
     {::Advise "Passed: $text";                                                 # Advise
      return ()                                                                 # No failure files
     }
    return ([$file, $text]) if ::recordFile($file);                             # Fail if the file has not yet been recorded

    ::mp3Gain($q->app, $file);                                                  # mp3Gain file if it exists and has content
    $q->register($file, $text);                                                 # Register file so that we have its details across invocations
    my $B = $fact ? $fact->breath : [];                                         # Associated breaths

    for(1..99)                                                                  # Play file to check it
     {::Log "Playing file: $file";
      if (@$B)                                                                  # Each breath segment
       {my @t;                                                                  # Table
        for(1..@$B)                                                             # Each breath segment comprising fact
         {my $b = $$B[$_-1];                                                    # Breath segment
           push @t, ["  ", $_, $b->text, $b->chose];                            # Breath segment details
         }
        ::Log $_ for ::table([@t]);                                             # Write table of component details
       }
      ::Log colored($text, 'green bold');                                       # Complete text

      my $msg = 'enter=accept r=replay x=delete  ';                             # Prompt user for processing action
      if (my $n = scalar(@$B))
       {$msg .= "segments: r1..$n = replay, x1..$n = delete";
       }
      playFile($file);
      my $r = getUserResponse(colored($msg, 'red bold'))                        # Get user's opinion
        if $printRecordingList != 5;                                            # or auto accept

      if (!$r)                                                                  # Accept if users hits enter - dangerous, but intuitive
       {$q->acceptFile($file);                                                  # Accept file
        return ();                                                              # Pass
       }

      if (@$B and $r =~ /\Ar(\d+)/i)                                            # Replay segment if requested
       {playFile($$B[$1-1]->chosen);
       }
      next if $r =~ /\Ar/i;                                                     # Replay composite file on retry

      if (@$B and $r =~ /\Ax(\d+)/i)                                            # Reject segment which triggers rejection of all files built with segment
       {my $fail = $1-1;                                                        # Failed component
        my $b = $$B[$fail];                                                     # Breath segment
        my ($s, $t) = ($b->chosen, $b->text);                                   # Failure details
        my $r = getUserResponse(colored("Enter ok to confirm failure of: $t containing: $s", 'red bold'));
        return ([$s, $t]) if $r =~ /\Aok\Z/;                                    # Return failure list
       }
      elsif (!@$B and $r =~ /\Ax/i)                                             # Reject non composite audio file
       {my $r = getUserResponse(colored("Enter ok to delete text: $text, file:\n$file", 'red bold'));
        next unless $r =~ /\Aok\Z/;                                             # Skip fail unless user confirms delete is OK
        $q->fail($file);                                                        # Remove file from QA
        return ([$file, $text]);                                                # Fail non composite
       }
     }
    0
   }

  sub saveDir($)                                                                # Directory to save results
   {my ($app) = @_;                                                             # App name
    $app->recordingListDirectory .'/'                                           # Directory name for recording lists from app name
   }
  sub saveFileName($)                                                           # QA file name from app name
   {my ($app) = @_;                                                             # App name
    saveDir($app)."qa.data"                                                     # QA file for this app
   }
  sub saveFile($)                                                               # Name of QA save file
   {my ($q) = @_;                                                               # Object
    saveFileName($q->app)                                                       # QA file name
   }
  sub load($)                                                                   # Save audio file quality check results
   {my ($app) = @_;                                                             # App name
    my $f = saveFileName($app);                                                 # File name for saved data
    if (!-e $f)                                                                 # There will be nothing to retrieve the first time through
     {::Log "Starting from scratch as no QA details file";
      return bless {app=>$app, accept=>{}, file=>{}, text=>{}, in=>{}}          # Bless initial instance
     }
    my $q = retrieve $f;                                                        # Retrieve from save file
    my $g = $app->group;
#::writeFile($Temp."recordingList/$g/zzzDump.data", dump($q)); # Dump data in readable format
    $q->app = $app;                                                             # Add app, not stored due to size
    $q->cleanUp;
    $q
   }
  sub save($)                                                                   # Save audio file quality check results
   {my ($q) = @_;                                                               # Object
    my $f = $q->saveFile;                                                       # Save file name
    ::makePath($f);                                                             # Create path for save file
    my $app = $q->app;                                                          # Current app
    $q->app = undef;                                                            # Otherwise  the QA file gets too big and takes too long to save/restore
    store $q, $f;                                                               # Store into save file
    $q->app = $app;                                                             # Reconnect app
   }
  sub cleanUp($)                                                                # Clean up indeterminate state
   {my ($q) = @_;                                                               # Object
    my %m = map{$_=>1} keys %{$q->accept}, keys %{$q->file}, keys %{$q->text};
    ::Log scalar(keys %m), " Md5 sums found";
    for(sort keys %m)
     {if (!defined($q->accept->{$_}) or !defined($q->file->{$_}) or !defined($q->text->{$_}))
       {delete $q->accept->{$_};
        delete $q->file  ->{$_};
        delete $q->text  ->{$_};
       }
     }
   }
 } # QaAudioFiles

sub getAllSoundFiles($)                                                         # Get all the existing sound files associated with an app
 {my ($app) = @_ ;                                                              # App
  my $d = $app->audioSourceDirectory;
  my @f = (glob("$d*.mp3"), glob("$d*/*.mp3"),                                  # All existing files
    glob("$d*/*/*.mp3"),    glob("$d*/*/*/*.mp3"));
  @f = sort @f;
  return @f;
 }

=pod

Locate the audio files that still need to be recorded after checking the ones
that have been newly recorded and reconstructing and checking any composite
audio files.

=cut

if ($printRecordingList)                                                        # List of things to record
 {my $files = 0;                                                                # Number of files to record over all selected apps

  byApp("Print recording list", sub                                             # For each app, find the words and files needed, files available,  delete unnecessary files, print recording list, normalize sound files and produce final quality control concatenation
   {my ($app) = @_;
    my %files;                                                                  # Files that should be recorded by speaker and the desired content of each file for this app

    if ($printRecordingList == 6)                                               # Use MP3 check to find resample rate of each file so that we can eliminate mixed segments which sox does not like
     {my @f = getAllSoundFiles($app);                                           # Sound files
      for(grep {!recordFile($_)} @f)                                            # Non empty sound files
       {my $c = "mp3check -c \"$_\"";                                           # mp3Check command
        my $r = execCommand($c);
        my ($l, $s) = (split /\s+/, $r);                                        # Sample rate is second word
        say STDERR "$s $_";                                                     # Print sample rate for each file
       }
      return;
     }

    my $group = $app->group;                                                    # Find words that need to be recorded
    my $recordingList = "<h1>$group</h1>\n";                                    # Html version of recording list
    my %unused = map {$_=>1} getAllSoundFiles($app);                            # Files that are not used by this app
    my $qaAudioFiles = QaAudioFiles($app);                                      # Files that need recording as they failed sound check

    if ($printRecordingList < 4)                                                # Skip breaths if we know they have already been created
     {for my $speaker($app->speakers)                                           # Each speaker
       {for($app->audioMinimaxQuestionFiles($speaker))                          # Sound files need for maxima and minima number questions
         {my ($f, $s) = @$_;                                                    # File details
          delete $unused{$f};                                                   # File is used
          $files{$speaker}{$f} = $s if recordFile($f);                          # Text of numeric question
         }
        for my $thing($app->things)                                             # Sound files for each thing in app
         {Advise("Sound files for speaker: $speaker title: ".dump($thing->title));# Show where we are
          if (my $f = $thing->audioSource($speaker))                            # Sound file for word
           {my $t = $thing->sound;                                              # Words for thing
            delete $unused{$f};                                                 # File is used
            $files{$speaker}{$$_[0]} = $$_[1] for                               # Update files needed with any failures
              $qaAudioFiles->checkAudioFile($t, $f);                            # QA sound file if it exists and mode is all
           }

          if ($app->captions)                                                   # Sound files for captions - untested because facts have replaced captions
           {my $c = $app->captions;
            for(([1], [2,1], [2,2]))                                            # Single caption target file, or the two such files for a split caption as in Adjectives
             {my ($C, $S) = @$_;                                                # Caption type, split
              if ($c == $C)                                                     # Matches caption type?
               {my $f = $thing->audioCaptionsSource(1, $speaker, $S);           # File needed for caption
                my $t = $thing->captionText;                                    # Words for caption - surely dependent on $C?
                delete $unused{$f};                                             # File is used
                $files{$speaker}{$$_[0]} = $$_[1] for                           # Update files needed with any failures
                  $qaAudioFiles->checkAudioFile($t, $f);                        # QA sound file if it exists and mode is all
               }
             }
           }

          if ($app->spokenFacts and !$speaker)                                  # Record facts only once to save storage
           {for my $fact($thing->factFiles)                                     # Sound files for facts
             {delete $unused{$fact->source};                                    # File is used
              delete $unused{$_} for $fact->allBreathFiles;                     # Mark breath files as in use
              if (!$fact->breath)                                               # Not a breath file
               {my @f = $qaAudioFiles->checkAudioFile($fact->text, $fact->source); # QA sound file and get list of failing files
                $files{$speaker}{$$_[0]} = $$_[1] for @f;                       # Update files needed with any failures from QA
               }
              else                                                              # Breath file - check components
               {for my $b(@{$fact->breath})                                     # Breath segments
                 {if (!$b->checkAllDepthsPresent)                               # Create needed breath segments
                   {my $t = $b->text;                                           # Text of breath
                    for my $d(1..$b->depth)                                     # Find breath segments at depth that should be recorded
                     {my $f = $b->file($d);                                     # File name
                      $files{$speaker}{$f} = $t if recordFile($f);              # Record breath segment file if necessary
                     }
                   }
                 }
               }
             }
           }
         }
       }
     }

    if ($app->spokenFacts && !keys %files)                                      # Create composite files if everything has been recorded
     {for my $thing($app->things)                                               # Sound files for each thing in app
       {for my $fact($thing->factFiles)                                         # Sound files for facts
         {next if !$fact->outOfDate                                             # File is not out of date
            && $qaAudioFiles->alreadyPassed($fact->source);                     # and has already passed QA
          my @s = $fact->chosenBreathFiles;                                     # Chosen files to be used
          mp3Gain($app, $_) for @s;                                             # Mp3Gain input files
          my $s = join ' ', @s;                                                 # Stitch together breath segments, over writing the completed file if all segments are present
          my $F = $fact->source;                                                # Unlink target to be built - in fact the audio source file for the fact
          unlink $F if -e $F;                                                   # Remove target
          makePath($F);                                                         # Make path to target because sox will not
          my $c = "sox -V4 --combine sequence $s $F 2>&1";                      # Use sox to concatenate sound files with the same sample rate
          my $x = execCommand($c);                                              # Concatenate sound files
          Log $x if $debug && $x !~ /\A\s*\Z/;                                  # Print debug messages if any available
          checkConformingRecordingRates($x);                                    # Check recording rates are OK as sox produces strange results when joining mixed recorded rates
          if (-e $F)                                                            # Composite file created
           {for($qaAudioFiles->checkAudioFile($fact->text, $F, $fact))          # QA audio file
             {$files{0}{$$_[0]} = $$_[1];                                       # Fact files to be recorded as speaker 0
             }
           }
          else
           {Confess "Failed to create composite file $F";                       # Unable to create composite for some reason
           }
         }
       }
     }

    if (keys %files)                                                            # Html table of words to be spoken by this speaker, collapsed by text to be spoken
     {my $n = 0;                                                                # Used to number words for this speaker
      for my $speaker($app->speakers)                                           # Each speaker
       {my $collapse = 0;                                                       # Used to count collapsed items
        my @t;                                                                  # Text of html table neatly formatted
        my @files = sort keys %{$files{$speaker}};                              # Sort files so they are said alphabetically by speaker by file name which simplifies cutting out

        for my $fileNumber(1..@files)                                           # Process text in file order
         {my $file = $files[$fileNumber-1];                                     # File to be recorded
          my $text = $files{$speaker}{$file};                                   # Text to be said by speaker
          ++$collapse;                                                          # Count rows within collapsed group
          next if $fileNumber < @files && $text eq                              # Collapse row if text is the same in the next row for this speaker
            $files{$speaker}{$files[$fileNumber]};                              # Otherwise write row
          my @T;                                                                # One row in output table for one speaker
          my $type = $file =~ /\/facts\// ? 'f' : $file =~ /\/captions\// ? 'c' : 't'; # Position of audio file in file system
          push @T, "<tr><td>".(++$n)."<td>$type";                               # Number of recording and position in file system
          push @T, "<td>".($collapse > 1 ? $collapse : '');                     # Write depth if other than the default
          push @T, "<td>".bold($text, $n);                                      # Word needed
          push @t, [@T];                                                        # One row of output
          $collapse = 0;                                                        # Reset collapse count to start a new group
         }
        my $t = '';                                                             # Add this speakers report to the previous speakers report if any
        $t .= "<h2>Speaker ".($speaker+1)."</h2>\n";                            # Write speaker number
        $t .= "<p><table cellspacing=10>\n";
        $t .=  "$_\n" for table([@t]);                                          # Format each line of table so it looks good in text format used on nook
        $t .= "</table>\n";
        $recordingList .= $t;                                                   # Extend recording list
       }
     }
    elsif ($printRecordingList < 4)                                             # Report/Clean up unused recordings if all files have been recorded for this app
     {my @r = sort keys %unused;                                                # Unused files
      if (@r)                                                                   # Show files that are not needed
       {Log "    $_" for @r;
        Log "  ", scalar(@r), " unneeded files, type OK to remove them";
        my $r = <>;
        if ($r =~ /ok/i)
         {unlink $_ for @r;                                                     # Remove unused files
         }
       }
     }

    my $filesNeededInThisApp = 0;                                               # Number of files that should be recorded for this app
       $filesNeededInThisApp += keys %{$files{$_}} for $app->speakers;

    if ($printRecordingList < 4)                                                # Write recording list
     {my $O = $app->recordingListDirectory."/$group.html";                      # Html file for app
      my $o = $app->recordingListDirectory."/$group.txt";                       # Text file
      if ($filesNeededInThisApp)                                                # Write recording list for app if files still need to be recorded
       {writeFile($O, $recordingList);                                          # Write html
        my $s = $recordingList =~ s/<td>/\t/gr =~ s/<b>//gr =~ s/<.+?>/ /gr     # Change html to text
          =~ s/\s+[tf]\s+/ /grs;                                               # Remove title or fact indicator to make it easier for Google Translate
        writeFile($o, $s);                                                      # Write text file

        Log sprintf("  %7d recordings needed for $group, see:\n$O\n$o",         # Number of recordings needed for this app
                   $filesNeededInThisApp);
       }
      else                                                                      # Everything all ready recorded
       {Log "  Everything already recorded for app $group.";
        removeFile($_) for ($o, $O);
       }
     }

    $files += $filesNeededInThisApp;                                            # Number of files needed overall
    $filesNeededInThisApp                                                       # Number of files still needed for this app
   });

  if ($files)
   {Advise "$files still needed";
   }
  else
   {Advise "Nothing needs to be recorded";
   }
  normalFinish "printRecordingList=$printRecordingList";                        # Confirm action completed
 }

#-------------------------------------------------------------------------------
# Print jingle file names
#-------------------------------------------------------------------------------

if ($printZZZ == 2)
 {my $t = [];
  for my $d(qw(../jingles/ ../../src/midi/music/))
   {push @$t, [fileSize($_), $_] for filesInAndBelowDir($d);
   }
  ::Log "Jingles";
  say for table([sort {$a->[0] <=> $b->[0]} @$t], "RL");
  exit;
 }

#-------------------------------------------------------------------------------
# Print active groups and set S3 to record progress
#-------------------------------------------------------------------------------

sub setCompileProgress($$)
 {my ($app, $genAndroid) = @_;
  my $c = 0;
  for my $s(0..$app->subsets)
   {my $a = $appSubsets // 0;
    next if $app->skipSubset($s, $genAndroid);
    amazonBucket()->delete_key(completedName($genAndroid, $app, $s));
    $c++
   }
  $c
 }

# No longer needed because of bucket lifecycle rules or manual delete of list of compiled apps
#sub setActive($)
# {my ($genAndroid) = @_;
#  my $v = vendorCode($genAndroid);
#  my $c = 0;
#  byApp("Set active $v", sub
#   {my ($app) = @_;
#    $c += setCompileProgress($app, $genAndroid);
#   });
#  if ($c)
#   {::Log "$c Compiles set active\n";
#   }
#  else
#   {::Log "NO compiles set active";
#   }
#  $c
# }
#
#if ($setActive)
# {my $c = 0;
#
#  $c += setActive($_) for @genAndroid;
#
#  if ($c)
#   {::Log "$c Compiles set active overall\n";
#   }
#  else
#   {::Log "NO compiles set active overall";
#   }
#
#  normalFinish "after setActive=$setActive at line ", __LINE__;
#  exit;
# }

#-------------------------------------------------------------------------------
# Convert photos
#-------------------------------------------------------------------------------

sub convertImage($$$$)
 {my ($app, $source, $target, $size) = @_;                                            # Source, target, longest side maintaining aspect ratio
  ref($app) or Confess "NOt a reference";
  -e $source or Confess "convertImage: Cannot convert image file $source, as file does not exist";
  return 1 if $test;

  makePath($target);
  my $S = quoteFile($source);
  my $T = quoteFile($target);
  my ($x, $y) = imageSize($source);
  my $a = $size * $size;
  my $A = $x * $y;
  my $resize = '';

  $resize = " -resize $a@ " if $a < $A;                                         # Resize if necessary to maintain area
  my $c = "$imConvert $S $resize $T";
  return 0 if -e $target && !mod($source, $target) && $a == $A && $app->debugMode; # Conversion can be skipped during testing if already preent with correct characteristics
  Log "    Convert image $source" if $debug;
  my $r = execCommand($c);
  -e $target or Confess "convertImage: Cannot create $target, ", dump($r);
  1
 }

sub convertImageHalf($$)                                                        # Reduce image size by 50%
 {my ($source, $target) = @_;                                                   # Source, target
  -e $source or Confess "convertImageHalf: Cannot convert image file $source, as file does not exist";

  makePath($target);
  my $S = quoteFile($source);
  my $T = quoteFile($target);
  my $resize = " -resize 50% ";
  my $c = "$imConvert $S $resize $T";
  execCommand($c);
  -e $target or Confess "convertImageHalf: Cannot create $target";
  1
 }

#-------------------------------------------------------------------------------
# Convert an image to home grown jpx format to process large images
# on Android. Rewrite to use one pass with ImageMagick - not hundreds
#-------------------------------------------------------------------------------

sub convertImageJpx($$$)
 {my ($source, $target, $size) = @_;                                            # Source, target image names, size of each tile in Jpx format
  -e $source or Confess "convertImageJpx: cannot convert image file $source, as file does not exist";
  return 1 if $test;

  Log "    Convert $source" if $debug;
  my $file = $target =~ s/\.jpg\Z//ir;
  my $jpx  = "$file.jet";                                                       # The file type is .jet to stop android from compressing the asset file

  makePath($target);
  my ($w, $h) = imageSize($source);
  writeFile($jpx, <<END);
version 1
type    jpx
size    $size
source  $source
width   $w
height  $h
END

  my $W = int($w/$size); ++$W if $w % $size;
  my $H = int($h/$size); ++$H if $h % $size;

  my $t = "$file.jpg";
  my $c = "$imConvert \"$source\" -crop ${size}x${size} \"$t\"";
  my $r = execCommand($c);

  if (1)
   {my $k = 0;
    for   my $Y(1..$H)
     {for my $X(1..$W)
       {my $s = "${file}-$k.jpg";
        my $t = "${file}_${Y}_${X}.jpg";
        rename $s, $t or ::Carp "Cannot rename $s to $t";
        -e $t or ::Carp "Cannot create $t";
        ++$k;
       }
     }
   }
  1
 }

#&convertImageJpx('C:\Phil\vocabulary\supportingDocumentation\images\Trees\Baobab.jpg', 'z\Bridges\aaa.jpg', 1024); exit;

#-------------------------------------------------------------------------------
# Convert icons and screenshots
#-------------------------------------------------------------------------------

my $convertIconDone;                                                            # Avoids duplication in this run

sub convertIcon($$$;$$)                                                         # Convert an icon file, possibly overlaying it with another image for Underground
 {my ($source, $target, $size, $overlay, $mask) = @_;                           # Source, $target, optionally, overlay, mask for icon

  return 0 if $convertIconDone->{$source}{$target}{$size};                      # Possibly already done
  #return 0 if -e $target && !mod($source, $target);                            # Target exists and is newer than source - Android creates a default icon which reventsthis check from working for icons

  makePath($target);                                                            # Ensure path to target

  my $S = quoteFile($source)." -resize ${size}\\\!x${size}\\\! ";               # Resize source
  my $T = quoteFile($target);                                                   # Target
  my $O = quoteFile($overlay) if $overlay;                                      # Overlay to apply on top of the icon
  my $M = quoteFile($mask)    if $mask;                                         # Mask to select part if icon required
  my $c = "$imConvert -alpha Set $S ";                                          # Convert command
  $c .= "$O -channel RGB -fx \"v.a == 0 ? u : v\" " if $overlay;                # Place overlay over the original
  $c .= "$M -channel A -fx v "                      if $mask;                   # Use mask to set opacity of result
  $c .= $T;                                                                     # Target
  -e $source or Confess "Icon source file $source does not exist";
  $overlay && !-e $overlay && Confess "Icon overlay file $overlay does not exist";
  $mask    && !-e $mask    && Confess "Icon mask file $mask does not exist";
  return 1 if $test;

  my $r = execCommand($c);                                                      # Perform conversion
  ::Confess "convertIcon failed: $r" if $r;

  -e $target or ::Confess "convertIcon: cannot create $target";                 # Check results
  $convertIconDone->{$source}{$target}{$size} = 1;                              # Update cache
  1
 }

sub convertIconByVendor($$;$)                                                   # Icons needed by vendors
 {my ($app, $subset, $genAndroid) = @_;                                         # App, subset, optional: genAndroid which means generate icons for a specific vendor
  my $s = $app->iconSource($subset);
  my $t = $genAndroid ? $app->iconTargetTemp($subset) : $app->iconTarget($subset);
  my $n = 0;
  unless($genAndroid)                                                           # Frequently used icons
   {$n += convertIcon($s, "${t}512.png", 512);                                  # Amazon+Google
    $n += convertIcon($s, "${t}300.png", 300) if $app->nook && !$subset;        # Nook
    $n += convertIcon($s, "${t}114.png", 114);                                  # Amazon
    $n += convertIcon($s, "${t}64.png",   64);                                  # Appa Apps
   }
  elsif (oneOfVendor($genAndroid, qw(Xiaomi)))                                  # Icons for Xiaomi
   {for(qw(90 136 168 192))
     {$n += convertIcon($s, "${t}$_.png", $_);
     }
   }
  $n
 }

sub imageMagick($$$;$)                                                          # Perform a conversion using ImageMagick
 {my ($s, $c, $t, $size) = @_;                                                  # Source, command, target, size
  makePath($t);
  my $im = "$imConvert ".quoteFile($s)." $c ".quoteFile($t);                    # Parameter list with quoted file names
  my $r = execCommand($im);
  if (-e $t)                                                                    # Check result
   {if ($size && (my $S = fileSize($t)) > $size)                                # Optional size check
     {Log "imageMagick: file size of $t is $S > $size";
      return 0;
     }
    else {return 1}                                                             # Success
   }
  Confess "imageMagick $s $c $t failed $r";                                     # Failed
  return 0;
 }

sub screenShot($$$$;$)                                                          # Convert a screenshot for vendors like Nook who use non standard screenshots
 {my ($source, $target, $x, $y, $size) = @_;                                    # Source, target, x, y, maximum size - optional
  confess "Cannot convert missing screenshot $source" unless -e $source;
  my @i = my ($X, $Y) = imageSize($source);
  next unless @i;
  if ($X > $Y && $x < $y or $X < $Y && $x > $y) {($x, $y) = ($y, $x)}
  makePath($target);

  if ($amazonEC2 or outOfDate($target, $source) or $size && fileSize($target) > $size)
   {imageMagick($source, "-resize ${x}x${y}!", $target, $size);
    return 1;
   }
  0
 }

sub convertScreenShots($$$$$)
 {my ($app, $vendor, $X, $Y, $ext) = @_;                                        # App, vendor, dimensions, target extension
  my $source = $app->screenShotsDir();                                          # Screenshot directory for app
  my $targetDir = $Temp."screenshots/$vendor";                                  # Converted screenshots temporary directory so that we can delete them easily once uploaded
  my @files = glob("${source}*.jpg");                                           # Screenshots source
  my $n = 0;                                                                    # Number of screenshots processed
  for(@files)                                                                   # Each screenshot
   {my (undef, $file, undef) = &parseFileName($_);                              # File name
    my $target = "$targetDir/$file.$ext";                                       # Target file name
    $n += screenShot($_, $target, $X, $Y);                                      # Convert screenshot
   }
  $n
 }

if ($createAssets == 2)                                                         # Create screenshots for Nook for current apps
 {byApp("Create Screenshots for Nook", sub
   {my ($app) = @_;                                                             # App, vendor, dimensions, target extension
    convertScreenShots($app, 'Nook', 600, 1024, 'png');                         # Convert screenshots for Nook
   });
  normalFinish("Nook screenshots in ${Temp}screenshots/Nook");                  # Advise on location of converted screenshots
 }

if ($createAssets == 3)                                                         # Create icons for Xiaomi
 {bySubset("Create icons for Xiaomi", sub
   {my ($app, $subset) = @_;
    convertIconByVendor($app, $subset, vendorNumber('Xiaomi'));
   });
  normalFinish("Xiaomi icons in ${Temp}icons");                                 # Advise on location of converted icons
 }

#-------------------------------------------------------------------------------
# Clear app data
#-------------------------------------------------------------------------------

sub clearApp($$)
 {my ($apk, $did) = @_;
  my $i = "adb -s $did shell pm clear com.appaapps.$apk";
  say STDERR $i;
  say STDERR execCommand($i);
  Log "Cleared app data for $apk";
 }

if ($adb == 2)
 {byApp("  Clear app data", sub
   {my ($app) = @_;
    for(sort keys %$devices)
     {next unless $devices->{$_}{install};
      my $did = $devices->{$_}{id};
      clearApp($app->apkName($_), $did) for 0..$app->subsets;
     }
    1
   });
  normalFinish "Cleared app data";
  exit;
 }

#-------------------------------------------------------------------------------
# Install a package
#-------------------------------------------------------------------------------

sub installAndroidPackage($$)
 {my ($gen, $source) = @_; $gen->confirmGen;
  my ($app,           $subset,     $genAndroid) =
     ($gen->app, $gen->subset,$gen->genAndroid);
  my $apk = lc $app->apkName($subset, $genAndroid);
  for(sort keys %$devices)
   {next unless $devices->{$_}{install};
    my $did = $devices->{$_}{id};
    if (1)
     {my $r = execCommand("adb -s $did install -r $source 2>&1");
      ::Confess $r unless $r =~ m/\nSuccess/;
     }
    if ($clearApk)
     {clearApp($apk, $did);
     }
    if (1)
     {my $r = execCommand("adb -s $did shell am start com.appaapps.$apk/.VocabularyActivity");
      ::Confess $r unless $r =~ m/Starting/;
     }
    Log "        Installed $_";
   }
 }

#-------------------------------------------------------------------------------
# Compile app
#-------------------------------------------------------------------------------

sub compile($)                                                                  # Compile an app
 {my ($gen) = @_;
  my (     $genAndroid,      $app,      $apk,      $subset,      $comment,      $vendor,      $group) =
     ($gen->genAndroid, $gen->app, $gen->apk, $gen->subset, $gen->comment, $gen->vendor, $gen->group);
  my $dir = $app->androidBuildDir($subset, $genAndroid);
  my $source = "$dir/bin/$apk-release.apk";
  my $compile = ($amazonEC2 or outOfDate($source, $sourceCode, $0) or $app->example);  # Compile, conditionally, or unconditionally on EC2
  my $buildTime;

  if (abs($xlint) == 1)                                                         # Local lint
   {my $jars = join ':', glob($supportingDoc."libs/*.jar"), glob($gameCircleSDK."libs/*.jar");
    my ($dir) = $sourceCode =~ /\A(.+\/)/;                                      # Directory for classes
    my $c = "javac -Xlint -cp $AndroidSDK/platforms/android-21/android.jar:$jars -d ${dir}z ". $sourceCode;
    say STDERR $c;
    say STDERR execCommand($c) if $xlint > 0;
    exit;
   }
  if (abs($xlint) == 2)                                                         # Editted lint
   {my $javaDir = $app->javaDir($subset, $genAndroid);
    my $jars = join ':', glob($app->buildDir($subset, $genAndroid, "libs/*.jar")), glob($gameCircleSDK."libs/*.jar");
    my $c = "javac -Xlint -cp $AndroidSDK/platforms/android-21/android.jar:$javaDir:$jars ". $app->javaBuildFile($subset, $genAndroid);
    say STDERR $c;
    say STDERR execCommand($c) if $xlint > 0;
    exit;
   }

  if ($compile)                                                                 # Compile
   {my $c = "ant -f $dir/build.xml clean release";
    Log "    Start compile $comment" unless $amazonEC2;
    my $l = execCommand($c);
    say STDERR $l if 0;                                                         # All compilation messages - useful when it is the ant compile system that has failed
    if ($l !~ /BUILD SUCCESSFUL/si)
     {Log "    Compile errors on $c";
      my $s = '<table>';
      my $c = 0;
      my @l = split /\n/, $l;
      for(@l)
       {if (/\[javac\]/)                                                        # Java error
         {s/\s+\[javac\]//;
          if (s/.+\.java://)                                                    # Cannot tell which file we are in like this
           {Log s/\d+\K://r;                                                    # Drop line number colon to make copying the line number into geany ctrl+l easier
            $c = 4;                                                             # Number of lines to show beyond error
           }
          elsif ($c)
           {Log $_;
            --$c;
           }
         }
        elsif (/error/) {Log $_}                                                # Non java error
       }
      return 0;                                                                 # Compile failed
     }
    else                                                                        # Compiled OK
     {if ($l =~ /Total (time:.*\Z)/)                                            # Get build time
       {$buildTime = $1;
       }
      else
       {Log "  Cannot extract build time from ", dump($l);
       }
     }
    if (1)                                                                      # Verify jar after successful compile
     {my $l = execCommand("jarsigner -verify -certs $source");
      if ($l !~ /jar verified/si)
       {Confess "    Jar signing errors: \n$l";
        return 0;
       }
     }
   }
  else
   {Log "    Compile skipped as apk up to date";
    $buildTime = '';                                                            # Build skipped as apk up-to-date
   }

  if (my $size = fileSize($source))                                             # Write size comment
   {my $s = megabytes($size);
    Advise "      $apk is $s, $buildTime";

    for(([qw(Google 50)],[qw(Nook 100)]))                                       # Check sizes
     {my ($v, $s) = @$_;
      next unless oneOfVendor($genAndroid, $v);                                 # Matching vendor
      next unless $size >=  $s*1024*1024;                                       # Size for vendor
      Confess "    $group $subset too big for $v at $size";                     # Complain if size is too big
     }
   }

  if (!$send && !$amazonEC2 &&                                                  # Copy to directory from which to upload manually
      !oneOfVendor($genAndroid, qw(test focii Vodafone AppaApps Amazon)))       # These vendors have upload automation
   {my $target = $app->apkManualUploadFileName($subset, $genAndroid);
    copyFile($source, $target);
   }

  if (!$amazonEC2 and ($app->debugModeOrScreenShots($subset, $genAndroid) || $send == 1)) # Install on test device if requested or by default for testing/screenshots
   {installAndroidPackage($gen, $source);
    exit unless $send;                                                          # Exit immediately if test
   }
  my $𝞃;                                                                        # Not transferred
  if ($send == 0)                                                               # Send to vendor directly if possible or save in S3
   {$𝞃 = sendApkS3    ($source, $app, $subset, $genAndroid) if oneOfVendor($genAndroid, qw(Google Nook ApkFiles)) && $amazonEC2;
    $𝞃 = &ftpApkAmazon($source, $app, $subset, $genAndroid) if oneOfVendor($genAndroid, qw(Amazon UnderGround));
    $𝞃 = &sendAppaApps($source, $gen)                       if oneOfVendor($genAndroid, qw(AppaApps AppaAppsNJM));
    $𝞃 = sendVodafone ($source, $app, $subset, $genAndroid) if oneOfVendor($genAndroid, qw(Vodafone));
    $𝞃 = &appDF       ($source, $app, $subset, $genAndroid) if oneOfVendor($genAndroid, qw(AppLand SlideMe));
#   $𝞃 = sendNokia    ($source, $app, $subset, $genAndroid) if oneOfVendor($genAndroid, qw(Nokia));
#   $𝞃 = makeZip      ($source, $app, $subset, $genAndroid) if oneOfVendor($genAndroid, qw(Huawei));
   }
  elsif ($send == 2)                                                            # Place in apk bucket for subsequent load to vendor from AWS - same as $send==0 for some vendors on AWS and so is useful for testing AWS
   {$𝞃 = sendApkS3      ($source, $app, $subset, $genAndroid);
   }
  elsif ($send == 3)                                                            # Place in install bucket for subsequent download and install onto Nook - too big to compile on NoteBook
   {$𝞃 = sendApkToS3InstallArea($gen, $source);                                 # Upload to bucket for later install locally from bucket
    Log "      Uploaded to S3"               if $𝞃;
    Confess "Failed to upload $source to S3" unless $𝞃;
   }

  if ($restartable && $𝞃)                                                       # Write progress to S3 by adding completed record - which will be deleted by lifecycle rules in a few days
   {amazonBucket()->add_key(completedName ($genAndroid, $app, $subset), '', "text/plain", 0, {});
    my $buildDir = $app->androidBuildDir($subset, $genAndroid);                 # Build directory
    if (-e '/home/phil/Amazon/EC2/SyncFilesWithS3')                             # This directory only occurs on the EC2 machine not the local machine where it is too dangerous to do this sort of things
     {execCommand("ls -r $buildDir", 1);                                        # Remove the build directory to save space
      Confess "This should not happen in Pousadouros";
     }
   }
  removePath($dir) if $amazonEC2;                                               # Removes work area if on EC2, otherwise retained to speed up subsequent compiles and lower disk traffic
  1                                                                             # If we get this far there have been no serious errors
 }

#-------------------------------------------------------------------------------
# Progress name
#-------------------------------------------------------------------------------

sub completedName($$$)
 {my ($genAndroid, $app, $subset, $comment) = @_;
  my $v = $vendorCode[$genAndroid];
  my $g = $app->group;

  "Compile/$v/Completed/${g}_${subset}"
 }

sub startedName($$$)
 {my ($genAndroid, $app, $subset, $comment) = @_;
  my $v = $vendorCode[$genAndroid];
  my $g = $app->group;

  "Compile/$v/Started/${g}_${subset}"
 }

#-------------------------------------------------------------------------------
# Parallelization
#-------------------------------------------------------------------------------

sub alreadyCompiled($$$)                                                        # Avoids redoing work already done
 {my ($genAndroid, $app, $subset) = @_;
  return 0 unless amazonBucket()->head_key(completedName($genAndroid, $app, $subset));
  1
 }

sub alreadyStarted($$$)                                                         # Avoids selection of same app to be compiled at the same time in two processes on the same machine
 {my ($genAndroid, $app, $subset) = @_;
  -e $app->androidBuildDir($subset, $genAndroid);                               # Check compile directory - if present then compile is in progress - but this does not work in the unlikely situation that we are compiling one vendor across several machines
 }

#-------------- ----------------------------------------------------------------
# Synchronize with S3
#-------------- ----------------------------------------------------------------

sub syncDir($$)                                                                 # Synchronize with S3 directory
 {my ($source, $target) = @_;
  makePath($target);                                                            # Else sync complains
  my $c = "aws s3 sync $source $target 2>&1";
  my $r = execCommand("aws s3 sync $source $target");
  $r
 }

sub sync($)                                                                     # Synchronize with S3
 {my ($gen) = @_;
  $gen->confirmGen;
  return unless $amazonEC2 && $amazonEC2Sync;
  my $source = "s3://AppaApps/vocabulary/supportingDocumentation/";             # S3 folder
  my $target = $supportingDoc;                                                  # Local folder
  my $group  = $gen->group;
  for(qw(Campaigns Icons images/Animations jingles keystore libs logo midi Music speech)) # Synchronize all
   {syncDir("${source}$_", "${target}$_")
   }
  for(qw(audio captions facts images ScreenShots))                              # Synchronize by app
   {syncDir("${source}$_/$group", "${target}$_/$group")
   }
 }

#-------------- ----------------------------------------------------------------
# Carp or confess depending on whether we are compiling from real or for test
#-------------- ----------------------------------------------------------------

sub carpOrConfess($$)
 {my ($debugMode, $message) = @_;
  Confess "    $message" unless $debugMode;
  Carp    "    $message" if     $debugMode;
 }

#-------------- ----------------------------------------------------------------
# Generate Android project
#-------------- ----------------------------------------------------------------

sub genAndroidApp($)                                                               # Generate an app
 {my ($gen) = @_;
  @_ == 1 && ref($gen) =~ /Generate/ or Confess "genAndroid: one parameter required of type Generate, not ", dump($gen);
  my (     $group,      $genAndroid,      $app,      $apk,      $subset,     $imageQuality,      $pass) =
     ($gen->group, $gen->genAndroid, $gen->app, $gen->apk, $gen->subset, $gen->pictureSize, $gen->pass);

  my $things        = [$app->thingsInSubset($subset, $genAndroid)];             # Directories and things
  my $javaPackage   = lc($apk);
  my $AndroidGroup  = $app->androidBuildDir($subset, $genAndroid);
  my $javaDir       = $app->javaDir  ($subset, $genAndroid);
  my $Assets        = $app->assetsDir($subset, $genAndroid);
  my $res           = $app->resDir   ($subset, $genAndroid);
  my $assets        = sub {my ($d) = @_; "$Assets$d/"};
  my $debugMode     = $app->debugMode($subset, $genAndroid);                    # Facts are often not fully present until app is almost ready

# Reduce number of things if testing a subset - although this is not always possible because of story order
  $#$things = 4 if $app->debugMode($subset, $genAndroid) and @$things > 4 and !$app->full and !$app->noImages;

  if ($redoList && !$app->redo($subset))                                        # Skip stuff not on redo list if redo list active
   {Log "    Skipped subset $subset, not on redo list";
    return 1;
   }

  if ($amazonEC2 or $restartable)                                               # Skip stuff already done or already started if we are restartable or on EC2
   {my $n = $vendorCode[$genAndroid].".".$app->group. ".$subset";
    if ($restartable)
     {if (alreadyCompiled($genAndroid, $app, $subset))
       {Log "    Skipping $n as already compiled";
        return 1;
       }
      if (alreadyStarted($genAndroid, $app, $subset))
       {Log "    Skipping $n as already started";
        return 1;
       }
     }
    Log   "    Compile  $n";
   }

# Create project unless recently recreated or production compile
# Game circle is shipped as a library.  The reference from project to library has to be relative.

  if (!-e $AndroidGroup or -M $AndroidGroup > 7 or !oneOfVendor($genAndroid, qw(test focii Vodafone)) or $app->addAmazonGamesCircle($subset, $genAndroid) or $amazonEC2 or !-e "$AndroidGroup/build.xml")
   {removePath($AndroidGroup);
    Confess "Android app $AndroidGroup still exists" if -e $AndroidGroup;
    makePath($AndroidGroup);

    my $c = -e $AndroidGroup
      ? "android update project --target $androidTargetNumber --name $apk --path $AndroidGroup"
      : "android create project --target $androidTargetNumber --name $apk --path $AndroidGroup --activity VocabularyActivity --package com.appaapps.$apk";

    unless($test)                                                               # Create the project
     {my $C = execCommand("$c 2>&1");
      ConfessAndExit "$c\n$C" if $C =~ /Error/i;

      if ($app->addAmazonGamesCircle($subset, $genAndroid))                     # Add game circle
       {my $L = $gameCircleSDK;                                                 # Relative path from here to GameCircleSDK
        my $G = "$AndroidGroup/GameCircle";                                     # Copy it into a subdirectory of the project so it gets cleaned up at the end
        makePath("$G/src/");                                                    # Game circle will not build from cmd line without this
        copyDir($L, $G);                                                        # Copy in SDK so we can do parallel compiles on EC2

        my $c1 = 'android update lib-project --target '.$androidTargetNumber.' --path '.$L;                        # Update build.xml with relative path from here to library
        my $C1 = execCommand("$c1 2>&1");                                                                          # Tell the library which Android release we are compiling
        ConfessAndExit "$c1\n$C1" if $C1 =~ /Error/;

        my $c2 = "android update project --target $androidTargetNumber --path $AndroidGroup --library GameCircle"; # Update with relative path from project to library
        my $C2 = execCommand("$c2 2>&1");                                                                          # Tell project where its library is
        ConfessAndExit "$c2\n$C2" if $C2 =~ /Error/;

        Log "    Game circle library attached";
       }
     }
   }

  sync($gen);                                                                   # Synchronize with S3 if necessary to get project files

  if (1)                                                                        # Create launcher icons
   {my $is = $app->iconSource($subset);                                         # Icon source
    my @launcherIcons = ('ic_launcher');                                        # Array of icons needed
    my $sd = $perlDir."Amazon/Sash";                                            # Sash file directory
    my $au = oneOfVendor($genAndroid, qw(UnderGround));                         # On UnderGround or not
    for([36, "l"], [48, "m"], [72, "h"], [96, "xh"], [144, "xxh"], [192, "xxxh"]) # Create icons - Launcher icon sizes
     {my ($s, $l) = @$_;
      my ($sash, $mask) = ("$sd/SashOnly-$s.png", "$sd/Back-$s.png");           # Sash and mask for this icon
      for my $i(@launcherIcons)                                                 # Each launcher icon needed
       {my $it = $res."drawable-${l}dpi/$i.png";                                # Target file
        convertIcon($is, $it, $s, ($au ? $sash : undef), $mask);                # Add sash overlay for Underground launcher,  use the mask to round off the edges of the launcher icon just a bit regardless of vendor
       }
     }
   }

  if (1)                                                                        # Icon for AppList
   {my $s = $app->iconSource(0);
    my $t = $app->iconTarget(0)."64.png";
    convertIcon($s, $t, 64);
   }

  if ($app->addAppList($subset, $genAndroid) and !$app->example)                # Icons for AppList capability - check they are all present
   {copyFile($app->iconsSourceDirectory."../pin.png", "$AndroidGroup/assets/icon64/pin.png");
    byAllAppQuiet("Applist Icons", sub
     {my ($app) = @_;
      my $g = $app->group;
      my $source = $app->iconTarget(0)."64.png";
      my $target = "$AndroidGroup/assets/icon64/$g.png";
      if (-e $source)
       {copyFile1($source, $target);
       }
      else
       {Carp "      NO icon64 YET for app $g, it should be in $source";
       }
     });
   }

  if (1)                                                                        # Source code
   {my $s = javaSource($gen);
    Advise "    Translations still outstanding" if $s =~ m/\/\/S/;              # Check whether translations are still outstanding
    $s =~ s/(com\.appaapps)\.vocabulary/$1.$javaPackage/;
    $s =~ s/<VERSION>/$version/;                                                # Add version number
    $s =~ s/<GROUP>/$group/g;
    $s =~ s/<APKNAME>/$apk/g;
#    if (1) {my $S = $app->title($subset);                            $s =~ s/<TITLE>/$S/g}
    if (1) {my $S = $subset;                                          $s =~ s/"<SUBSET>"/$S/g}
    if (1) {my $S = $mp3Fanfares ? 'true' : 'false';                  $s =~ s/"<Mp3Fanfares>"/$S/g}
    if (1) {my $S = $app->on;                                         $s =~ s/"<CREATIONDATE>"/$S/g}
    if (1) {my $S = $app->screenShotsWanted($genAndroid, $subset);    $s =~ s/"<SCREENSHOTS>"/$S/g}
    if (1) {my $S = $app->appIsFree($genAndroid, $subset);            $s =~ s/"<APPISFREE>"/$S/g}
    if (1) {my $S = appNames();                                       $s =~ s/"<APPNAMES>"/$S/g}
    if (1) {my $S = appLanguages();                                   $s =~ s/"<LANGUAGES>"/$S/g}
    if (1) {my $S = vendorCode($genAndroid);                          $s =~ s/<GENANDROID>/$S/g}
    if (1) {my $S = strftime("%A %d %B %Y at %H:%M:%S", localtime()); $s =~ s/<COMPILETIME>/$S/g}
    if (1) {my $S = int time();                                       $s =~ s/"<CompileTime>"/$S/g}
    if (1) {my $S = $app->amazonLongId($subset, oneOfVendor($genAndroid, qw(test screenShots Google))) // 0;             # Allow test apps to compile before an Amazon Long Id has been obtained.
                                                                      $s =~ s/<AmazonID>/$S/g}
    if (1) {my $S = $amazonEC2      ? 'true' : 'false';               $s =~ s/"<AmazonEC2>"/$S/g}
    if (1) {my $S = $app->animation ? 'true' : 'false';               $s =~ s/"<Aninmation>"/$S/g}    # Animation

    writeFile($app->javaBuildFile($subset, $genAndroid), $s);
   }

  if ($app->facts or $app->titlesInFacts)                                       # Android Facts
   {my %factsNeedTranslation;
    my @nofacts;
    for my $language(&appLanguagesPlusEnglish)
     {my $english = $language =~ /en/i;                                         # English
      next if !$english && $app->noTranslation;                                 # Skip translations if noTranslations specified
      for my $t(@$things)
       {my $name = $t->name;
        my $source = $t->factsSource(1, $language);                             # Facts file source in current language to be copied

        if (!$english && !-e $source && $app->debugModeOrScreenShots($subset, $genAndroid)) # Translations can be skipped during testing
         {$factsNeedTranslation{$language}++;
          next;
         }
        if (!-e $source)
         {push @nofacts, [$name, $language, $source];
          next;
         }
        if (my $s = compareNumberOfLinesIn($source, $t->factsSource(1)))        # Unintentionally checks english against itself
         {carpOrConfess($debugMode, "Different number of lines ($s) in english and $language for facts in app $group thing $name");
         }
        if (!$english)                                                          # Time stamp check for foreign fact files against english
         {my $en = $t->factsSource($genAndroid, $subset);
          $factsNeedTranslation{$language}++ if mod($en, $source);              # Retranslate might be necessary if English is newer than translation
         }
        copyFile($source, $t->factsTarget($genAndroid, $subset, $language));    # Copy facts in text form
       }
     }
    if (my @n = @nofacts)
     {for(grep {$_} @n[0..10])
       {my ($n, $l, $s) = @$_;
        Log "No facts file for thing $n in language $l, should be in file: $s";
       }
      carpOrConfess($debugMode, "Missing fact files for app $group");
     }
    if (my @l = sort keys %factsNeedTranslation)
     {if (!$amazonEC2)                                                          # On EC2 the md5sum may be ok for an earlier copy so this check is unreliable as written
       {carpOrConfess($debugMode, "Translations in app $group may need to be updated for languages ". join(', ', grep {$_} @l));
       }
     }
   }

  unless($app->album)                                                           # Audio
   {my @l = $app->captions == 1 ? (0) : (1,2);

    for my $t(@$things)
     {unless($app->audioOnVideo)
       {for my $s($app->speakers)
         {copyFile1($t->audioSource($s),    $t->audioTarget($genAndroid, $subset, $s));
          copyFile1($t->audioSource($s, 1), $t->audioTarget($genAndroid, $subset, $s, 1)) if $app->captions == 2; # Split captions
         }
       }

      if ($app->captions)
       {for my $s($app->speakers)
         {for my $c(@l)
           {copyFile1($t->audioCaptionsSource(1,$s,$c), $t->androidAudioCaptionsTarget($genAndroid, $subset,$s, $c));
           }
         }
        my $T = $t->androidTextCaptionsTarget($subset,$genAndroid);
        if (my $c = $t->caption)
         {writeFile($T, $c);
         }
        else
         {copyFile1($t->textCaptionsSource, $T);
         }
       }

      if ($app->facts == 2)
       {for my $f($t->factFiles($genAndroid, $subset))
         {my $source = $f->source;
          my $target = $f->target;
          if ($f->recordFile)
           {Carp "Missing audio file $source"
           }
          elsif (!$subset and $app->squeezeMain and oneOfVendor($genAndroid, qw(Google)))
           {execCommand("sox $source -r 24k $target");                          # Squeeze audio for PlusOrMinus
           }
          else
           {copyFile1($source, $target);
           }
         }
       }
     }

    if ($app->audioMinimaxQuestions)
     {for my $s($app->speakers)
       {&copyFile1(@$_[0,2]) for $app->audioMinimaxQuestionFiles($s, $gen);
       }
     }
   }

  if (!$app->example)                                                           # Android Speech
   {my $source = $app->speechDir;                                               # Speech source
    my $target = "$AndroidGroup/assets/speech/";                                # Speech target

    my @s = qw(Ruth);                                                           # The original and best
       @s = qw(Phil)        if $app->phil;                                      # English
       @s = qw(Patrick)     if $app->Patrick;                                   # Patrick for French
       @s = qw(Wolfgang)    if $app->Wolfgang;                                  # Wolfgang for German
       @s = qw(Victoria)    if $app->Victoria;                                  # Victoria for Mandarin Chinese
       @s = qw(FongKheiMah) if $app->FongKheiMah;                               # FongKheiMah for Cantonese Chinese

    for(1..@s)                                                                  # Each speaker zero
     {my $S = $source.$s[$_-1];                                                 # Source
      my $T = "$target$_";                                                      # Target
      for my $d(dirList($S))                                                    # List sub directories
       {next unless $d =~ /\Anoth|nein/i;                                       # Select the desired sub directories
        copyDir("$S/$d", "$T/$d");                                              # Copy high fidelity speech files
       }

      checkSpeech("$T/noThats", 0, $app->mandarin || $app->cantonese ? 4 : 7);  # Common to all apps to varying degrees

      unless ($app->french or $app->german or $app->mandarin or $app->cantonese)# English speaking apps have all features, other languages might
       {checkSpeech("$T/noThatsA",   0, 7);
        checkSpeech("$T/noThatsAn",  0, 7);
        checkSpeech("$T/noThatsThe", 0, 7);
        checkSpeech("$T/noThoseAre", 0, 7);
       }
      if ($app->Wolfgang)                                                       # Check Wolfgang's speech has been added
       {checkSpeech("$T/neinDassIstEin",  0, 7);
        checkSpeech("$T/neinDassIstEine", 0, 3);
       }
      if ($app->group =~ /CountEuros/i)                                         # Special speech for essentially defunct Count Euros
       {my $s = $source."Ruth/noThats/pt";
        my $t = $target."Ruth/noThats";
        copyDir($s, $t);
       }
     }

    if (1)                                                                      # Other speech files
     {my $R = $app->speech;                                                     # Additional speech files re
      for my $d(dirList($source))
       {next unless $d =~ /\Asilence|\Ateach/i or $R && $d =~ /$R/;
        copyDir("$source$d", "$target$d");                                      # Copy high fidelity speech files
       }
      checkSpeech("${target}silence",    1);
      checkSpeech("${target}teach",      0, 3);
      checkSpeech("${target}teach/zh",   0);
      checkSpeech("${target}teach/de",   0, 1);
      checkSpeech("${target}teach/fr",   0, 1);
     }
   }

  if (my $N = $app->speechNumbers)                                              # Android Numbers
   {my $S = "../audio/TheNumbersFrom1To100InEnglish";
    for(1..$N)
     {my $d = substr($_, 0, 1);
       {for my $p(0..1)
         {my $P = $p > 0 ? "-Speaker-$p" : '';
          my $s = "$S/$d/$_$P.mp3";
          next unless -e $s;
          my $t = "$AndroidGroup/assets/speech/numbers/$_/$p.mp3";
          copyFile($s, $t);
         }
       }
     }
   }

  sub copyMidi($$$;$)                                                           # Android Midi
   {my ($app, $Assets, $source, $target) = @_;                                  # App midi directory
    $target //= $source;
    my $d = $app->midiDir.$source;
    copyDir($d, "$Assets/midi/$target");
   }

  if (!$app->example)                                                           # Midi
   {copyMidi($app, $Assets, "help");
    copyMidi($app, $Assets, "right");
    copyMidi($app, $Assets, $mp3Fanfares ? "start2" : "start", "start");
   }

  if (-e "../Music/$group")                                                     # Copy in preselected music and renumber
   {my @f = glob("../Music/$group/*.mid");
    for(1..@f)
     {copyFile($f[$_-1], "$Assets/midi/music/$_.mid");
     }
   }
  elsif (!$app->example)
   {copyMidi($app, $Assets, "music");
   }

  unless($app->noImages)                                                        # Android Images
   {my $alreadyDone;
    my $j = $app->jpx($subset, $genAndroid);

    for my $thing(@$things)
     {my $sequence = $thing->sequence;
      for my $i(0..$sequence)
       {next unless $i == 0 && !$sequence or $i > 0 && $sequence;
        my $s = $thing->photoSource($i);
        my $t = $thing->photoTarget($genAndroid, $subset, $i);
        my $q = $imageQuality;
        my ($w, $h) = imageSize($s);
        unless($alreadyDone->{largeVersion}{$s}{$t}{$q}++)                      # ConvertImage() messages, copyFile() does not which can be misleading
         {if ($j && $w > $j && $h > $j)                                         # 2014-10-05: Images smaller than jpx size are too small to be converted
           {convertImageJpx($s, $t, $j);
           }
          elsif ($w < $q && $h < $q)
           {copyFile($s, $t);
           }
          else
           {convertImage($app, $s, $t, $q);
           }
         }

        if ($j || ($w >= 2 * $imageSize2 || $h >= 2 * $imageSize2 and $q >= 2 * $imageSize2) and !$subset) # Include small images if main and it has big images
         {my $q2 = int($q/2);
          my $Q = ($q2 > $imageSize2 ? $q2 : $imageSize2);
          my $T = $t =~ s/\.jpg\Z/smallVersion.jpg/r;                           # Include a smaller version for question display
          convertImage($app, $s, $T, $Q) unless $alreadyDone->{smallVersion}{$s}{$t}{$Q}++;
         }
       }
     }
   }

  for(@$things)                                                                 # Android Videos
   {my $name = $_->name;
    my $Name = lc(squeezeOutBadChars($name));                                   # Incredibly, Android raw files must contain only [a-z0-9_.]
    my $s = $app->imageSourceDirectory."$name.3gp";
    for my $r($_->videoSourcePossibility)
     {if ($r and -e $r)
       {if ($amazonEC2 or outOfDate($s, $r))
         {my ($Vs, $vs) = ($_->videoStart,  ''); $vs = "-ss $Vs" if $Vs;
          my ($Vl, $vl) = ($_->videoLength, ''); $vl = "-t $Vl"  if $Vl;
          my $c = "ffmpeg -y -i \"$r\" -s cif -acodec libvo_aacenc $vs $vl -ab 64k -ac 1 \"$s\"";
          Log "Videos: convert $r to $s\n  $c" if $debug;
          say execCommand($c);
          -e $s or Confess "genAndroid for group $group: Cannot create video file $s";
         }
        $_->videoSource($r);                                                    # Record video source file so that we can reuse this for audio - this linkage means that videos must be processed before audio
        last;
       }
     }
    if (-e $s)
     {my $t = "${res}raw/video_${Name}_3gp.3gp";
      copyFile($s, $t);
      Confess "    Failed to copy video $s to $t" if !$test && !-e $t;
     }
    elsif (!$_->videoIgnore)
     {Log "    Cannot find or create video file $s for app $group";
     }
   }
  if (-e (my $r = "../images/$group/video.avi"))                                # App video
   {my $s = $r =~ s/avi\Z/3gp/r;
    if ($amazonEC2 or outOfDate($s, $r))
     {my $c = "ffmpeg -y -i \"$r\" -s cif -acodec libvo_aacenc -ab 64k -ac 1 \"$s\"";
      Log "Videos: convert $r to $s\n  $c" if $debug;
      say execCommand($c);
      -e $s or Confess "genAndroid for group $group: Cannot create video file $s";
     }
    if (1)
     {my $t = "${res}raw/video_main_3gp.3gp";
      copyFile($s, $t);
      Log "    Copied video $s to $t" unless $debug;
     }
   }

  if (1)                                                                        # Android Strings
   {my $title = $app->title($subset);                                           # English titles
    my $t = << "END";
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">$title</string>
    <string name="versionName">VERSIONNAME</string>
</resources>
END
    $t =~ s/VERSIONNAME/$version/g;
    writeFile("${res}values/strings.xml", $t);
   }

  if (1)                                                                        # Translated titles
   {for my $l(&appLanguagesPlusEnglish)
     {my $T = $app->title($subset, $l);
      next if $app->debugModeOrScreenShots($subset, $genAndroid) && !$T;        # So we can build a new app for testing without translating all the titles
      $T or ::Confess "No translated title for app ".$app->group." in language $l";
         $T =~ s/'/\\'/g; # Quote quotes
      my $t = << "END";
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">$T</string>
</resources>
END
      writeFile("$res/values-$l/strings.xml", $t);
     }
   }

#-------------------------------------------------------------------------------
# Android Manifest
#-------------------------------------------------------------------------------
# android:installLocation="preferExternal"
# android:largeHeap="true"
# android:configChanges="keyboard|keyboardHidden|orientation|screenSize"

  my $manifest    = '';
  my $service     = '';
  my @permissions;
  my @bootReceiver;

  if (1)
   {$manifest .= << 'END';
<?xml version="1.0" encoding="utf-8"?>
  <manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.appaapps.vocabulary"
    android:installLocation="auto"
    android:sharedUserId="com.appaapps"
    android:versionCode="VERSIONCODE"
    android:versionName="@string/versionName" >

  <uses-sdk
    android:minSdkVersion="8"
    android:targetSdkVersion="19"/>
  <application
    android:allowBackup="true"
    android:icon="@drawable/ic_launcher"
    android:largeHeap="true"
    android:debuggable="true"
    android:label="@string/app_name">
    <activity
      android:name=".VocabularyActivity"
      android:theme="@android:style/Theme.NoTitleBar"
      android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
      android:screenOrientation="sensor"
      android:label="@string/app_name" >
      <intent-filter>
        <action android:name="android.intent.action.MAIN"/>
        <category android:name="android.intent.category.LAUNCHER"/>
      </intent-filter>
    </activity>
    <SERVICES>
  </application>
  <PERMISSIONS>
</manifest>
END

    $manifest =~ s/\s*android:sharedUserId="com.appaapps"\n//i;
    $manifest =~ s/\s*android:largeHeap="true"\n//i;
    $manifest =~ s/\s*android:debuggable="true"\n//i unless $app->debugMode($subset, $genAndroid);

    if ($app->addAmazonMobile($subset, $genAndroid))                            # Amazon mobile ads for all subsets
     {if ($app->amazonLongId($subset))
       {push @permissions, qw(INTERNET ACCESS_WIFI_STATE ACCESS_NETWORK_STATE ACCESS_FINE_LOCATION ACCESS_COARSE_LOCATION);

        $service .= << 'END';
    <!-- Amazon -->
    <activity android:name="com.amazon.device.ads.MraidBrowser" android:configChanges="orientation|screenSize"/>
    <activity android:name="com.amazon.device.ads.VideoActionHandler" android:configChanges="orientation|screenSize"/>
END
       }
      else {::Carp "No Amazon key supplied for app $group subset $subset"}
     }

    if (oneOfVendor($genAndroid, "screenShots"))                                # Screenshots
     {push @permissions, qw(WRITE_EXTERNAL_STORAGE);
     }

    if ($app->addAppList($subset, $genAndroid))                                 # App lists - share mode
     {push @permissions, qw(INTERNET WRITE_EXTERNAL_STORAGE READ_EXTERNAL_STORAGE ACCESS_NETWORK_STATE ACCESS_WIFI_STATE);
     }

# Amazon mobile affiliates
    push @permissions, qw(INTERNET) if $app->addAmazonAffiliates($subset, $genAndroid);

    if ($app->addAmazonGamesCircle($subset, $genAndroid))                       # Games circle
     {push @permissions, qw(INTERNET ACCESS_NETWORK_STATE);
      $service .= << 'END';
    <activity android:name="com.amazon.ags.html5.overlay.GameCircleUserInterface"
      android:theme="@style/GCOverlay" android:hardwareAccelerated="false"></activity>
    <activity
      android:name="com.amazon.identity.auth.device.authorization.AuthorizationActivity"
      android:theme="@android:style/Theme.NoDisplay"
      android:allowTaskReparenting="true"
      android:launchMode="singleTask">
      <intent-filter>
         <action android:name="android.intent.action.VIEW" />
         <category android:name="android.intent.category.DEFAULT" />
         <category android:name="android.intent.category.BROWSABLE" />
         <data android:host="com.appaapps.<APK>" android:scheme="amzn" />
      </intent-filter>
    </activity>
    <activity android:name="com.amazon.ags.html5.overlay.GameCircleAlertUserInterface"
    android:theme="@style/GCAlert" android:hardwareAccelerated="false"></activity>
    <receiver
      android:name="com.amazon.identity.auth.device.authorization.PackageIntentReceiver"
      android:enabled="true">
      <intent-filter>
         <action android:name="android.intent.action.PACKAGE_INSTALL" />
         <action android:name="android.intent.action.PACKAGE_ADDED" />
         <data android:scheme="package" />
      </intent-filter>
    </receiver>
END
      $service =~ s/<APK>/$apk/;
     }

    if ($gen->appDaily)                                                         # Daily app download
     {push @permissions, qw(INTERNET ACCESS_WIFI_STATE ACCESS_NETWORK_STATE);
      push @permissions, qw(RECEIVE_BOOT_COMPLETED) if $gen->appDailyBoot;
      $service .= << 'END';

    <service android:name=".DownLoadService"/>
END
     }

    if ($gen->appDailyBoot || @bootReceiver)                                    # Boot receiver if needed
     {$service .= << 'END';

    <receiver android:name=".BootReceiver">
      <intent-filter>
        <action android:name="android.intent.action.BOOT_COMPLETED"/>
        <category android:name="android.intent.category.HOME"/>
      </intent-filter>
    </receiver>
END
     }

    if (1)                                                                      # Edit in permissions
     {my %p = (map {$_=>1} @permissions);
      my $p = "\n";
      for(sort keys %p)
       {my $P = "android.permission";
           $P = "com.android.launcher.permission" if /INSTALL_SHORTCUT/;
        $p .= "  <uses-permission android:name=\"$P.$_\"/>\n";
       }

      $manifest =~ s/\n\s*<PERMISSIONS>/$p/s;
     }

    $manifest =~ s/\n\s*<SERVICES>/$service/s;                                  # Edit in services
    $manifest =~ s/vocabulary/$javaPackage/s;                                   # Edit in package name

    if (1)                                                                      # Edit in version
     {my $v = join('', split /\./, $version).$app->xversion;
      $manifest =~ s/VERSIONCODE/$v/s;
     }

    writeFile("$AndroidGroup/AndroidManifest.xml", $manifest);                  # Save manifest
   }

  if (1)                                                                        # Keystore details
   {my $k = keyStore("release-key.keystore");
    my $s = << "END";
key.store=$k
key.alias=vocabulary
key.store.password=redletterday
key.alias.password=redletterday
dex.force.jumbo=true
END
    $s =~ s#\\perl\\..##;
    $s =~ s#/#\\#g;
    $s =~ s#\\#\\\\#g;
    writeFile("$AndroidGroup/ant.properties", $s);
   }

  if ($app->addAmazonGamesCircle($subset, $genAndroid))                         # Amazon key
   {copyFile($app->keyStore($subset, $genAndroid), "$AndroidGroup/assets/api_key.txt");
   }

  if ($gen->appDaily || @bootReceiver and !$app->example)                       # Boot receiver, used to restart app daily
   {my $imports = join "\n", map {$_->[0]} @bootReceiver;
    my $code    = join "\n", map {$_->[1]} @bootReceiver;

    writeFile("$javaDir/BootReceiver.java", <<"END");
package com.appaapps.$javaPackage;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.util.Log;
$imports

public class BootReceiver extends BroadcastReceiver
 {public void onReceive(Context context, Intent intent)
   {final Intent i = new Intent(context, DownLoadService.class);
    i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startService(i);

$code
   }
 }
END
   }

  if ($gen->appDaily and !$app->example)                                        # App daily download Service
   {my $inTest = $gen->inTest ? 'true' : 'false';
    writeFile("$javaDir/DownLoadService.java", <<"END");
package com.appaapps.$javaPackage;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.IBinder;
import android.text.format.Time;
import android.util.Log;
import java.util.TimeZone;

public class DownLoadService extends Service
 {final boolean inTest = $inTest;
  Thread activity = null;

  public IBinder onBind(Intent intent)
   {return null;
   }
  public int onStartCommand (Intent intent, int flags, int startId)
   {pingActivity();
    return START_STICKY;
   }
  public void onCreate()
   {super.onCreate();
    pingActivity();
   }

  void pingActivity()
   {if (activity != null && activity.isAlive()) return;
    final Intent intent = new Intent(this, VocabularyActivity.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_SINGLE_TOP);
    intent.putExtra(getPackageName()+".command", "ping");
    activity = new Thread()
     {public void run()
       {for(int i = 0;; ++i)
         {hours(1);                                                             // Check every hour
          final Time now = new Time(Time.getCurrentTimezone());
          now.setToNow();
          if (inTest || now.HOUR > 6) continue;                                 // Only Midnight to 6.00am local time unless in test
          Log.e("AppaApps", "Download requested");
          startActivity(intent);
         }
       }
     };
    activity.start();
   }
  public void onDestroy()
   {super.onDestroy();
   }
  void seconds(int s) {try {Thread.sleep(s*1000);} catch(Exception e) {}}       // Sleep a number of seconds
  void minutes(int m) {seconds(60*m);}                                          // Sleep a number of minutes
  void hours  (int h) {minutes(60*h);}                                          // Sleep a number of hours
 }
END
   }

#-------------------------------------------------------------------------------
# Generate assets class to so that we know what assets are available
# The usual problems with Java being unable to handle large methods
#-------------------------------------------------------------------------------

 if (-d $Assets)
  {my @f = filesInAndBelowDirRelative($Assets);                                 # Asset files
   my @s;                                                                       # Asset file strings
   for(1..@f)
    {my $f = $f[$_-1];                                                          # Asset file
     push @s, '' if @s == 0 or length($s[-1])+length($f)+1 >= 2**16;            # Divide into strings short enough for Java to handle
     $s[-1] .= $f.':';                                                          # Add file
    }
   my $s = <<"END";
package com.appaapps.$javaPackage;

import java.util.TreeMap;

public class Assets
 {final TreeMap<String,Boolean> assets = new TreeMap<String,Boolean>();
  void load(String S)
   {for(String s: S.split(":")) assets.put(s, true);
   }
  public Assets() {
END
  for(1..@s)
   {my $t = $s[$_-1]; chop($t);
    $s .= '    load("'.$t.'");'."\n";
   }
  $s .= <<END;
   }
 }
END
   writeFile("$javaDir/Assets.java", $s);
  }
 elsif (!$test)
  {Carp "  Not building assets tree as no assets for this app";
  }

 if (0)
  {my @f = filesInAndBelowDirRelative($Assets);                                 # Asset files
   my $f;
   my $N = 100;
   for(1..@f)
    {my $i = $_-1;
     $f->[int $i / $N][$i % $N] = $f[$i];
    }
   my $s = ''; my $t = '';
   for(1..@$f)
    {my $i = $_-1;
     $s .= "    void s".$_."(){\n";
      for(@{$f->[$i]})
       {$s .= "      assets.put(\"$_\", true);\n"
       }
     $s .= "     }\n";
     $t .= "    s$_();\n";
    }
   writeFile("$javaDir/Assets.java", <<"END");
package com.appaapps.$javaPackage;

import java.util.TreeMap;

public class Assets
 {final TreeMap<String,Boolean> assets = new TreeMap<String,Boolean>();
  public Assets() {
$t
  }
$s
 }
END
   }

#-------------------------------------------------------------------------------
# Copy libraries
#-------------------------------------------------------------------------------

  if (1)                                                                        # Copy libraries
   {my $L = "$supportingDoc/libs/";
    for(glob("${L}*.jar"))
     {my $l = s/\A$L//r;
      next if $app->example && !m/Colours/;
      copyFile($_, "$AndroidGroup/libs/$l");
     }
   }

#-------------------------------------------------------------------------------
# Picture quality comment for imageQuality
#-------------------------------------------------------------------------------

  $gen->comment = "Things=".scalar(@$things).", ".                              # Compile and release
    ($gen->app->noImages ? "no photos" :
      ($gen->jpx         ? "jpx=".         $gen->jpx :
                           "imageQuality=".$imageQuality));
#-------------------------------------------------------------------------------
# Compile app
#-------------------------------------------------------------------------------

  compile($gen) unless $test;
 }

#-------------------------------------------------------------------------------
# Generate Android Apks - compile app
#-------------------------------------------------------------------------------

if (@genAndroid > 0)
 {Log "On Amazon EC2 yet not restartable"   if $amazonEC2 && !$restartable;
  Log "On Amazon EC2 yet install requested" if $amazonEC2 && $send;

  my $passes = $restartable ? 2 : 1;
  my $subsetSelection  = (qw(all main subsets 1st 2nd 3rd))[$appSubsets];
  for my $pass(1..$passes)
   {for my $genAndroid(@genAndroid)
     {my $v = vendorCode($genAndroid);
      my $installSelection =
        $send == 0 ? "send $subsetSelection to $v" :
        $send == 2 ? "send $subsetSelection to S3 for $v" :
        $send == 3 ? "upload $subsetSelection to S3 install area $v" :
        "install $subsetSelection $v on ". join(',', grep {$devices->{$_}{install}} sort keys %$devices);
      my $passSelection = $restartable ? " restartable pass=$pass EC2=$amazonEC2 sync=$amazonEC2Sync" : "";
      byApp("Android=$androidTargetNumber $installSelection $passSelection", sub
       {my ($app) = @_;
        my $count = 0;
        Log "  ", $app->group;

        for my $s(0..$app->subsets)
         {my $gen = Generate($app, $s, $genAndroid, $pass);
          next if $gen->skipSubset;
          $count += &genAndroidApp($gen);
         }
        $count
       });
     }
   }
 }

#-------------------------------------------------------------------------------
# Create icons used by each app if not already created
#-------------------------------------------------------------------------------

if ($createAssets == 1)
 {byApp('Create icons for each app as needed', sub
   {my ($app) = @_;
    my $n = 0;
    for my $subset(0..$app->subsets)
     {$n += convertIconByVendor($app, $subset);
     }
    $n
   });
  normalFinish("Create icons");
 }

#-------------------------------------------------------------------------------
# Send a file to www.appaapps.com on Linode
#-------------------------------------------------------------------------------

=pod

On the client:
ssh-keygen -t rsa -b 2048 -f linode            # Make a key pair
rsync -rb linode.pub root@45.56.108.188:/root  # Put public part on client

On the server:
mv linode.pub ~/.ssh/authorized_keys           # Name the key so that sshd can find the authorized key for this user

On client:                                     # Confirm we can log in without a password
ssh -i /home/phil/vocabulary/supportingDocumentation/keystore/linode root@45.56.108.188

On client:                                     # Transfer a file
rsync -e "ssh -i /home/phil/vocabulary/supportingDocumentation/keystore/linode" -rb /home/phil/vocabularyTemp/apps/Past1/bin/Past1-release.apk root@45.56.108.188:/var/www/html/apps/a

=cut

sub sendFileToAppaApps($$)                                                      # Send to www.appa apps.com
 {my ($source, $target) = @_;                                                   # Local file, target file
  my $p = keyStore("linode");                                                   # Linode private key
  my $c = "rsync -e \"ssh -i $p\" -rb $source root\@${linodeIPAddress}:$target";# Command to send file
  execCommand($c);                                                              # Execute command
 }

#-------------------------------------------------------------------------------
# Send an apk file to www.appaapps.com
#-------------------------------------------------------------------------------

sub sendAppaApps($$)                                                            # Send to www.appa apps.com
 {my ($source, $gen) = @_;                                                      # Apk file, Generate request
  my (     $apk,      $subset,      $genAndroid) =
     ($gen->apk, $gen->subset, $gen->genAndroid);
  my $d = $subset ||::oneOfVendor($genAndroid, qw(AppaAppsNJM)) ? 'a' : 'j';    # Target depends on subset and distributor
  my $p = keyStore("linode");                                                   # Linode private key
  Log "      Transferring apks to www.appaapps.com via rsync";
  my $c = "rsync -e \"ssh -i $p\" -rb $source root\@${linodeIPAddress}:/var/www/html/apps/$d/$apk.apk";
  #Log "Command: $c";
  Log $_ for qx($c);                                                            # Copy file to Linode
 }

#-------------------------------------------------------------------------------
# Send a string to a named zip file on www.appaapps.com
#-------------------------------------------------------------------------------

sub sendStringToAppaAppsZip($$)                                                 # Send a string to www.appa apps.com
 {my ($file, $string) = @_;                                                     # File, string
  my $F = "appsLoad";                                                           # Work directory
  my $f = "$Temp$F/appsList.data";                                              # Uncompressed work file
  my $z = "$Temp$F/appsList.zip";                                               #   Compressed work file
  unlink $f;                                                                    # Remove temporary source file
  writeFile($f, $string);                                                       # Write string to temporary file
  unlink $z;                                                                    # Remove temporary zip file
  Log execCommand("zip -q $z $f");                                              # Zip
  -e $z or Confess "Unable to create zip file $z";                              # Check zip was created
  unlink $f;                                                                    # Remove source file
  sendFileToAppaApps($z, $file);                                                # Perform upload
  unlink $z;                                                                    # Remove temporary zip file
 }

#-------------------------------------------------------------------------------
# Send privacy policy to www.appaapps.com
#-------------------------------------------------------------------------------

if ($sendAppaApps == 7)
 {my $pp     = "privacyPolicy.html";
  my $source = $wwwLocal.$pp;
  my $target = $wwwHtml.$pp;
  Log  "Send privacy policy stored in $source to www.appaapps.com";
  sendFileToAppaApps($source, $target);
  normalFinish "Send privacy policy to www.appaapps.com/$target";
 }

#-------------------------------------------------------------------------------
# Print latest app list
#-------------------------------------------------------------------------------

if ($sendLinode == 1)
 {my @apps;                                                                     # List of all app names
  byAllApp("Send app list to Linode", sub                                       # Create latest apps list so that we can show users apps they are missing
   {my ($app) = @_;                                                             # App description
    my $g = $app->group;                                                        # Name of app
    push @apps, $g;                                                             # List of all app names
    my @s;                                                                      # App details
    for my $s(0)                                                                # Just the main subset details will be sufficient
     {my $t = $app->title($s) or Confess "No title for $g";                     # Subset title in English
      push @s, "en$t";                                                          # App title in English
      for(sort keys %languages)                                                 # Each language
       {my $t = $app->title($s, $_) or Confess "No title for $g in language $_";# Subset title in language
        push @s, "$_$t";                                                        # App title in foreign language
       }
      if (1)                                                                    # Send 64 pixel icon
       {my $S = $app->icon64($s);                                               # Source icon
        my $I = ApplicationDescription::iconSubsetName($s);                     # Icon name
        my $T = $linodeWWWDir."apps/i/${g}${I}64.png";                          # Target icon
        sendFileToAppaApps($S, $T);                                             # Send icon to www.appaapps.com
        Log "Sent $S to $T";
       }
     }
    sendStringToAppaAppsZip($linodeWWWDir."appsList/titles/$g.zip", join "\n", @s);# Send app details to www.appaapps.com
    1
   });
  sendStringToAppaAppsZip($linodeWWWDir."appsList/appsList.zip", join "\n", @apps);# Send list of app names to www.appaapps.com

  normalFinish "Uploaded latest AppList to www.appaapps.com";
 }

#-------------------------------------------------------------------------------
# Convert assets: Screenshots and Icons
#-------------------------------------------------------------------------------

=put

Screenshots are taken on the tablet with a $genAndroid = 3 apk.

The screenshots accumulate in the pictures/$group sub directory

The whole pictures directory can be copied to ../screenshots periodically
and then the following code can be run against it.

=cut


sub assetsOnEC2($$$)                        # Assets are colocated near Apks on EC2 to make uploads easier
 {my ($app, $vendor, $file) = @_;           # App, vendor, file name
  my $group  = $app->group;
  my $Group  = $app->Group;
  my $t = "E:/apks/$vendor/$Group/$group/$file";
  makePath($t);
  $t
 }

sub copyAssets($$$$$)
 {my ($app, $vendor, $X, $Y, $ext) = @_; # App, vendor, dimensions, target extension
  my $group = $app->group;
  my $Group = $app->Group;
  my $source = $app->screenShotsDir();
  my @files = glob("${source}*.jpg");
  my $n = 0;                                 # Screenshots
  for(@files)
   {my $file = s/\A(.+)[\/\\]//ir =~ s/\.jpg\Z//ir;
    my $target = $amazonEC2 ? assetsOnEC2($app, $vendor, "screenShot_$file.$ext") : "$source$vendor/$file.$ext";
    $n += screenShot($_, $target, $X, $Y);
   }
  for(0..$app->subsets)
   {$n += copyFile($app->icon512($_), assetsOnEC2($app, $vendor, "icon_$_.png")) if $amazonEC2;
   }
  $n
 }

sub iconShot($$$$)
 {my ($s, $S, $D, $T) = @_; # Source, size, directory, type
  my $n = 0;
  my $t = "$D$S.$T";
  return 0 unless outOfDate($t, $s);
  say execCommand("$imConvert -extract 512x512+0+0! $s -resize ${S}x${S}! \"$D$S.$t\"");
  1
 }


sub androidAssets($$$$$)
 {my ($app, $v, $X, $Y, $ext) = @_;
  my $group = $app->group;
  my $F = "../android/$group";
  my $n = 0;

# Screen shot conversions

  $n += copyAssets($app, $v, $X, $Y, $ext);

# Icons

#  if (1)
#   {if (-e (my $s = $app->screenShotsDir()."iconShot.png"))
#     {my $t = "$F/icon";
#      $n += &iconShot($s, $_, $t, "png") for qw(512 114);
#      $n += &iconShot($s, $_, $t, "jpg") for qw(142 135 64);
#     }
#    else
     {$n += convertIconByVendor($app, $_) for 0..$app->subsets;
     }
#  }

  $n
 }

if ((my $s = $sendSamsung == 4))
 {byApp("Prepare Android Assets", sub
   {my ($app) = @_;
    my $N = 0;
    $N += androidAssets($app, validVendor("Samsung"), 480, 800, "png") if $s;
    $N
   });
 }

#-------------------------------------------------------------------------------
# Print samsung keys and titles
#-------------------------------------------------------------------------------

if ($sendSamsung == 1)
 {my @t;
  my @m;
  byApp("Samsung Keys", sub
   {my ($app) = @_;
    my $g = $app->group;
    if (my $s = $app->samsung)
     {push @t, [$s, $app->group];
     }
    else
     {push @m, [$app->group];
     }
    scalar(@m);
   });
  say "Keys";
  say for table([sort {$a->[0] cmp $b->[0]} @t]);
  say "Missing";
  say for table([sort {$a->[0] cmp $b->[0]} @m]);
 }

#-------------------------------------------------------------------------------
# Prepare assets for Samsung
#-------------------------------------------------------------------------------

if ($sendSamsung == 2 || $sendSamsung == 3)
 {my $ll = $sendSamsung == 2;
  byApp("ScreenShots for Samsung", sub
   {my ($app) = @_;
    my $g = $app->group;
    my $d = $ll ? $app->screenShotsDir : "E:/Skydrive/ScreenShots/$g/screenShots";
    my $G = substr($g, 0, 1);
    my $T = $ll ? "/zzz/apks/Samsung/$G/$g/" : "E:/apks/Samsung/$G/$g/";
    my $c = 1;
    if (0)
     {for my $s(glob("$d/*.jpg"))
       {my $S = $s =~ s/\A(.+\/)//r;
        my ($w, $h) = imageSize($s);
        my $o = $w < $h;
        my $O = $o ? 'portrait' : 'landscape';
        my $resize = $o ? '480x800!' : '800x480!';
        my $t = $ll ? $T."s$c.jpg" : $T."s$S";
        makePath($t);
        say qq($imConvert $s -resize $resize $t);
        say execCommand("$imConvert $s -resize $resize $t");
        ++$c;
       }
     }
    if (1)
     {my $i = $app->iconsDir;
      for my $s(glob("$i/*512.png"))
       {my $f = $s =~ s/\A(.+)\///r;
        my $t = "$T$f";
#        copyFile($s, $t);
        say qq($imConvert $s -posterize 8 $t);
        say execCommand("$imConvert $s -posterize 8 $t");
        ++$c;
       }
     }
    $c
   });
 }

#-------------------------------------------------------------------------------
# Data entry bookmarklet for Samsung
#-------------------------------------------------------------------------------

if ($sendSamsung == 4)
 {my $D = &appDescriptions;
  my $K = &appKeywords;
  my $J;
  my @L;
  byAllApp("Bookmarklet for Samsung", sub
   {my ($app) = @_;
    my $g = $app->group;
    my $s = $app->samsung;
    if (!$s)
     {Log "No samsung id for $g";
      return 0;
     }
    if (!$D->{$g})
     {Confess "No description for $g";
      return 0;
     }
    if (!$K->{$g})
     {Confess "No description for $g";
      return 0;
     }
    my @k = @{$K->{$g}}; $#k = 4 if @k > 5;
    $J->{$s}{desc}  = $D->{$g} =~ s/\*/\+/gr =~ s/;/,/gr;
    $J->{$s}{group} = $app->group;
    $J->{$s}{title} = $app->title;
    $J->{$s}{keys}  = $K->{$g};

    push @L, <<"END";
<form id="frmSearch" name="frmSearch" method="post" action="/product/summarycontent/list.as" onsubmit="return onEnterSubmit(searchAction)">
  <input type="hidden" id="statusTab" name="statusTab" value="registering">
  <input type="hidden" id="pageNo" name="pageNo" value="1">
  <input type="hidden" id="nextId" name="nextId" value="">
    <input type="hidden" id="prevId" name="prevId" value="">
  <input type="hidden" id="excelName" name="excelName" value="Applications.xls">

<a href="/product/content/inputformFinal.as?contentId=$s">$g</a>
</form>
END
   });
  my $j  = encode_json $J;
  my $nf = encode_json [<< 'END'];
Viewpoint moves automatically from one point of interest to another in
each image giving an immersive movie like quality. If it is too much for
you, there is a gesture to remove this effect.

Images zoom and contract in synch with the speaker to indicate which
image is being described when comparing right and wrong answers.

Compare gesture lets you compare any two images side by side.

Images are laid out with differing sizes and aspect ratios making
identification of the right image harder as the game develops.

Quickly tilt top of your device towards you to go to the bottom of an image,
tilt top away from you to go to top. Quickly turn the device (like a
steering wheel) to move to the left or right of each image.

Images fall into place when you change device orientation while the
app stays on the same question, allowing you to answer
the question from a different perspective.

Every image can be zoomed and panned.
END

  my $setLangs = "function setLangs(){\n";
  for(qw(ARA NLD ENG FRA DEU IND ITA JPN KOR POL POR RUS ZHO SPA THA TUR VIE ))
   {$setLangs .= "  try{document.getElementById('itemAppLanguage_$_').checked = true;} catch(e) {}\n";
   }
  $setLangs .= "}\n";

  my $setTags = <<'END';
function setTags(a)
 {for(i = 0; i < a.length; ++i)
   {try{document.getElementById('etcTag'+i).value = a[i];} catch(e) {}
   }
 }
END

  my $li = encode_json ["<table>\n<tr><td>", join("\n<tr><td>", @L), "\n</table>"];

  my $s = <<"END";
function page2()  {createTempContent('NEXT');}
function page3()  {document.getElementById('nextBtn').onclick();}
function submit() {updateTempContent();}
function setValue(k, v) {try{document.getElementById(k).value = v;} catch(e) {}}

$setLangs
$setTags

var jj = $j;        // Details of apps
var link    = $li;  // Links to open page for app
var newFeat = $nf;  // Features list
var u = document.URL;
var m = u.match(/contentId=(\\d+)/);
if (m)
 {var cid = m[1];
  console.log("cid="+cid);
  var jap = jj[cid];
  if (jap)
   {var group = jap.group;
    var title = jap.title;
    var desc  = jap.desc;
    var keys  = jap.keys;
    try{document.getElementById('contentName').value = title;}      catch(e) {}
    try{document.getElementById('parentCategoryId').value = "0000000332";} catch(e) {}
    try{document.getElementById('ageLimit').selectedIndex = 1;}     catch(e) {}
    try{document.getElementById('isPaid').checked=true;}            catch(e) {} // Possibly forces a recheck on the price which is annoying
    try{document.getElementById('longDesc').value=desc;}            catch(e) {}
    try{document.getElementById('newFeatures').value=newFeat[0];}  catch(e) {}
    try{document.getElementById('copyrightHolder____').value='Appa Apps Ltd Inc';}        catch(e) {}
    try{document.getElementById('supportedEMail').value='support\@appaapps.com';}         catch(e) {}
//  try{document.getElementById('supportedSiteUrl____').value='http://www.appaapps.com';} catch(e) {}  // By name, no id
    try{document.getElementById('appComment____').value='Please certify this app';} catch(e) {}

    setLangs();
    setTags(keys);

//    if (true) // Remove readonly attributes from input fields
//     {var a = document.getElementsByTagName('input');
//      for(i = 0; i < a.length; ++i)
//       {a.item(i).removeAttribute('readonly');
//       }
//     }

    if (false) // Set icon and screenshots - another area in which JS demands a human action
     {var d = 'E:\\\\apks\\\\Samsung\\\\'+group.substring(0,1)+'\\\\'+group+'\\\\';
      setValue('IconImageTxt',    d+'icon512.png');
      setValue('ScreenImage1Txt', d+'a.jpg');
      setValue('ScreenImage2Txt', d+'b.jpg');
      setValue('ScreenImage3Txt', d+'c.jpg');
      setValue('ScreenImage4Txt', d+'d.jpg');
     }

    if (true)  //Show control pane
     {var  pane = document.createElement('div');
      pane.style.position = 'fixed'; pane.style.top = '10px'; pane.style.left = '10px'; pane.style.padding = '20px'; pane.style.backgroundColor = '#fff';
      pane.innerHTML      =
"<h1 style='color:red'>"+title+"</h1>"+
"<p><button type=button onclick='page2()'>goto page 2</button>"+
"<p><button type=button onclick='page3()'>goto page 3</button>"+
"<p><button type=button onclick='submit()'>submit</button>"+
link;
      body = document.getElementsByTagName('body')[0];
      body.appendChild(pane);
     }
   }
  else
   {console.log("No definition for content "+m);
   }
 }
else  // Show initial links in control pane
 {var  pane = document.createElement('div');
  pane.style.position = 'fixed'; pane.style.top = '10px'; pane.style.left = '10px'; pane.style.padding = '20px'; pane.style.backgroundColor = '#fff';
  pane.innerHTML      = link;
  body = document.getElementsByTagName('body')[0];
  body.appendChild(pane);
 }
END
  if (1)
   {my $f = "z/samsung.js";
    writeFile($f, $s);
    &ftpFile("ftp.appaapps.com", 'javascript@appaapps.com', "pwvCqsPFJXe_", "samsung.js", $f, "samsung.js");
   }
 }

#-------------------------------------------------------------------------------
# Java script - enter on console - to move all paid apps to registering
#-------------------------------------------------------------------------------

if ($sendSamsung == 5)
 {byApp("Bookmarklet for Samsung", sub
   {my ($app) = @_;
    my $s = $app->samsung;
    return 0 unless $s;
    say "goUpdatePage('$s', '0017'); void(0); // ".$app->group;
    1
   });
 }

#-------------------------------------------------------------------------------
# Upload to Nokia
#-------------------------------------------------------------------------------

sub sendNokia($$$$)
 {my ($apkSource, $app, $subset, $genAndroid) = @_;
  my $group = $app->group;
  my $gs    = $group.$subset;
  my $td    = $app->makeZipDir($subset, $genAndroid);

  Log "  Build Nokia $group $subset";

  copyFile($apkSource, "$td/$subset.apk") if $apkSource;                        # Makes testing possible

  copyFile($app->iconTarget($subset)."512.png", "$td/icon$subset.png");         # Icon

  my $source = $app->screenShotsDir;                                            # Screenshots directory
  my @files  = $app->screenShots;                                               # Screenshots
  my $n = 0;
  for my $s(@files)
   {my $t = $s =~ s/\A.+\//$td\\/r;
    $n += screenShot($s, $t, 480, 800);
   }
  1
 }

if ($sendNokia == 1)                                                            # Testing only - we need the apkname from compile
 {my $c = 0;
  byApp("Send apps to Nokia", sub
   {my ($app) = @_;
    $c += &sendNokia(undef, $app, 0, 9);
   });
  normalFinish "Send Nokia, now upload $c apps with help from the Nokia bookmarklet";
 }

#-------------------------------------------------------------------------------
# Data entry bookmarklet for Nokia Bookmark
#-------------------------------------------------------------------------------

sub p2j($)                                                                      # Convert Perl to Javascript unicode
 {my ($s) = @_;
  $s =~ s/[-':,.]/ /g;
  for(;$s =~ /\A(.+)&#x(....);(.+)\Z/i;)
   {$s = $1 .chr(hex($2)). $3;
   }
  $s
 }

if ($sendNokia == 2)
 {my $D = &appDescriptions;
  my $K = &appKeywords;
  my $J;
  my @A;                                                              # List of driveable apps
  byAllApp("Bookmarklet for Nokia", sub                               # Data required to drive Nokia pages
   {my ($app) = @_;
    my $g = $app->group;
    return 1 unless $g ge 'T' && $g !~ /Top10TallestRollerCoasters/i;
    if (!$D->{$g})
     {Confess "No description for $g";
      return 0;
     }
    if (!$K->{$g})
     {Confess "No keywords for $g";
      return 0;
     }
    push @A, $g;
    my @k = @{$K->{$g}};
    $J->{$g}{desc}  = $D->{$g};
    $J->{$g}{group} = $app->group;
    $J->{$g}{title} = p2j($app->title(0));
    $J->{$g}{keys}  = $K->{$g};
    1
   });

  my $j = encode_json $J;
  my $t = encode_json({table=>join('', map {"<a onclick='load(\"$_\");'>".substr($_.(' 'x16), 0, 16)."</a><br>"} @A)}); # Write app names
  my $s = <<"END";

var jj = $j;        // Details of apps
var tt = $t;        // App selection
function setValue   (k, v) {try{document.getElementById(k).value = v;} catch(e) {}}
function clickParent1(k)    {try{document.getElementById(k).parentElement.click();} catch(e) {}}
function clickParent2(k, l) {try{document.getElementById(k).parentElement.childNodes[l].click();} catch(e) {}}

function clickParent3(k)
 {try
   {var r = document.getElementById("p-ar-q-"+k+"-a");
    r.parentElement.parentElement.parentElement.childNodes[1].childNodes[1].click()
   }
  catch(e) {}
 }

function clickParent4(k)
 {try
   {var r = document.getElementById("p-ar-q-"+k+"-a");
    r.parentElement.parentElement.parentElement.childNodes[3].childNodes[1].click();
   }
  catch(e) {}
 }

function education()
 {try
   {var a = document.getElementsByClassName("custom dropdown medium blue")[0].childNodes[2].childNodes[5];
    a.className = "selected";
    a.click();
   }
  catch(e) {}
 }

function load(group)
 {var jap = jj[group];
  if (jap)
   {var title = jap.title;
    var desc  = jap.desc;
    var keys  = jap.keys;
    education();
    setValue("p-app-name",        title);
    setValue("p-app-description", desc);
    setValue("p-app-keywords",    keys);
    setValue("p-app-email",      "support\@appaapps.com");
    setValue("p-app-web",        "http://www.appaapps.com");
    clickParent1("p-r-p-info-no");
    clickParent1("p-r-p-data-no");
    clickParent1("p-r-ei-no");
    clickParent2("p-app-encryption-dist", 2);
    for(i = 1; i <= 22; ++i)
     {clickParent3(i);
     }
     clickParent4(21);
   }
  else
   {console.log("No definition for group "+group);
   }
 }
if (true)  //Show control pane
 {var  pane = document.createElement('div');
// pane.style.position = 'fixed'; pane.style.top = '10px'; pane.style.right = '10px'; pane.style.padding = '20px'; pane.style.backgroundColor = '#fff';
  pane.style.position = 'fixed'; pane.style.top = '10px'; pane.style.right = '0px'; pane.style.backgroundColor = '#fff'; pane.style.fontSize = 12; pane.style.lineHeight = '120%';
  pane.innerHTML      =  tt.table;
  body = document.getElementsByTagName('body')[0];
  body.appendChild(pane);
 }
END
  if (1)
   {my $f = "z/samsung.js";
    writeFile($f, $s);
    &ftpFile("ftp.appaapps.com", 'javascript@appaapps.com', "pwvCqsPFJXe_", "samsung.js", $f, "samsung.js");
   }
 }

#-------------------------------------------------------------------------------
# Upload to Nokia
#-------------------------------------------------------------------------------

if ($sendNokia == 3)
 {byApp("Send apps to Nokia", sub
   {my ($app) = @_;
    my $g = $app->group;
    my $t = $app->title(0);
    my $d = $app->longDescription;
    my $k = join ",", @{$app->keywordNames};
    say "$g\n\n$t\n$k\n$d";
   });
 }

#-------------------------------------------------------------------------------
# Data entry bookmarklet for Amazon - does not work
#-------------------------------------------------------------------------------

if ($sendAmazon == 3)
 {my @keys = (qw(
violence_None
cartoon_violence_None
drugs_None
nudity_None
sex_None
intolerance_None
profanity_None
personal_info_No
advertisements_No
child_directed_No
gambling_No
location_No
user_generated_content_No
));
  my @s = '';
  for(@keys)
   {push @s, <<END
if (1)
 {var a = document.getElementById(\"$_\");
  if (!a) {console.log("AAA $_");}
  a.checked = true;
  var A = "data-content-types";
  if (!A) {console.log("BBB $_");}
  var b = a.getAttribute(A);
  if (!b) {console.log("CCC $_");}
  var c = b.substring(1, b.length-1);
  if (!c) {console.log("DDD $_");}
  a.setAttribute(A, c);
 }
END
   }
  push @s, <<END
if (1)
  {var a = document.getElementById("academic_yes");
   var b = document.getElementById("academic_attenuating_element_hidden")
  if (!a) {console.log("EEEE");}
  if (!b) {console.log("FFFF");}
  b.value = a.value;
END
#  if (1)
#   {my $f = "z/samsung.js";
#   writeFile($f, join("\n", @s));
#    &ftpFile("ftp.appaapps.com", 'javascript@appaapps.com', "pwvCqsPFJXe_", "samsung.js", $f, "samsung.js");
#   }
#  say STDERR "Bookmarklet for Amazon Content Rating sent to ftp.appaapps.com/samsung.js";
 }
#-------------------------------------------------------------------------------
# Generate XML for Appia
#-------------------------------------------------------------------------------

sub sendAppia($)
 {my ($file) = @_;
  package Sendappia;
  use LWP::UserAgent;
  use HTTP::Request::Common;

  my $ciServer     = "https://dev.appia.com/content/import";
  my $opt_userId   = 'philiprbrenan@gmail.com';
  my $opt_password = 'appia121212';
  my $opt_xmlFile  = "products2.xml";

  my $agent = LWP::UserAgent->new();
  $agent->timeout(3600);
  $agent->agent();
  my $res = $agent->post($ciServer, Content_Type=>'multipart/form-data',
    Content=>[id=>$opt_userId, password => $opt_password, products=>[$file]]);
  if ($res->code != 200)
   {::Log "$file = ", $res->code, "\n", $res->content();
    ::Confess "Failed to upload XML to Appia";
   }
 }

if ($sendAppia == 6)
 {my $u = "http://www.appaapps.com/apps/";
  my $S = '';
  my $s = sub {$S .= "$_\n" for @_};
  my @devices = &appiaDevices;
  makePath("Appia/apps");
  my %oneLiners = %{&oneLiners};
  byApp("XML for Appia", sub
   {my ($app) = @_;
    my $group = $app->group;
    ::Log "  $group";
    my $G = "../Android/$group";
    my $C = 0; # Count
    my $d = $app->title;
    my $D = $app->descriptionText() // $oneLiners{$group}; $D or ::Confess "No description text for app ". $app->group;
    my $k = "<keyword>".join("</keyword><keyword>", split(/ /, $d), "</keyword>");
    my $i = "$u$group/icon50x72.jpg";
    $S = '';
    &$s("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    &$s("<products xmlns=\"http://dev.appia.com/products/1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
    for my $subset(0..$app->subsets)
     {my $a = $u.($subset ? "a/" : "s/appia/").$app->apkName($subset);
      my $t = $app->title($subset);
      my $p = $subset ? "0.00" : "0.19";
      my $P = $subset ? "OTAFreeware" : "OTACommercial";
      &$s("  <app>");
      &$s("    <devices>");
      &$s("      <device><name>$_</name></device>") for @devices;
      &$s("    </devices>");
      &$s("    <descriptions>");
      &$s("      <description>");
      &$s("        <name>$t</name>");
      &$s("        <keywords>$k</keywords>");
      &$s("        <brief-description>$d</brief-description>");
      &$s("        <detailed-description>$D</detailed-description>");
      &$s("        <wireless-description>$d</wireless-description>");
      &$s("        <language>english</language>");
      &$s("      </description>");
      &$s("    </descriptions>");
      &$s("    <files><file><type>$P</type><url>$a.apk</url></file></files>");
      &$s("    <images>");
      &$s("      <image><type>thumbnail</type><url>${u}s/appia/${group}_icon.gif</url></image>");
      &$s("      <image><type>screenshot</type><url>${u}s/appia/${group}_screenShot_${_}.png</url></image>") for 1..3;
      &$s("    </images>");
      &$s("    <categories><category><name>Language Arts</name></category></categories>");
      &$s("    <platform xsi:type=\"androidPlatform\"><platform-versions><platform-version>Android 2.2</platform-version><platform-version>Android 2.3</platform-version><platform-version>Android 3.0</platform-version><platform-version>Android 3.1</platform-version><platform-version>Android 3.2</platform-version><platform-version>Android 4.0</platform-version></platform-versions></platform>");
      &$s("    <registration-model xsi:type=\"commercialRegistrationModel\">");
      &$s("      <product-code-model xsi:type=\"embeddedProductCodeModel\"/>");
      &$s("    </registration-model>");
      &$s("    <version>$version</version>");
      &$s("    <provider-product-id>$t</provider-product-id>");
      &$s("    <status>active</status>");
      &$s("    <primary-language>english</primary-language>");
      &$s("    <supported-languages><language>english</language><language>german</language><language>spanish</language><language>french</language><language>japanese</language><language>italian</language><language>portuguese</language><language>brazilian_portuguese</language><language>chinese-s</language><language>korean</language><language>russian</language><language>dutch</language><language>french-ca</language><language>english-uk</language><language>polish</language><language>arabic</language></supported-languages>");
      &$s("    <price>$p</price>");
      &$s("    <jvm-required>false</jvm-required>");
      &$s("    <network-aware>false</network-aware>");
      &$s("    <wireless-download>true</wireless-download>");
      &$s("    <receive-notifications>true</receive-notifications>");
      &$s("    <notification-email>support\@appaapps.com</notification-email>");
      &$s("    <customer-support-email>support\@appaapps.com</customer-support-email>");
      &$s("    <email-comment>Appia</email-comment>");
      &$s("  </app>");
     }
    &$s("</products>");

    if (1)
     {my $f = "Appia/$group.xml";
      writeFile($f, $S, __LINE__);
      sendAppia($f);
     }
   });
  normalFinish " Send XML to Appia at ", __LINE__;
  exit;
 }

#-------------------------------------------------------------------------------
# Send Opera
#-------------------------------------------------------------------------------

sub loadOperaHandSets()
 {my $s = '';
  for(split(/\n/, readFile("../Vendors/Opera/handsets.data")))
   {s/\A.//;
    my @w = split(/\s+/, $_, 2);
    $s .= "<handset devicemaker=\"".$w[0]."\" model=\"".$w[1]."\"/>\n";
   }
  $s
 }

if ($sendAppDF == 1 && $amazonEC2)
 {my $targetDir = "E:/Opera/";
  makePath($targetDir);
  byApp("Send Opera", sub
   {my ($app) = @_;
    my $g = $app->group;
    my @screenShots = $app->screenShots;
    my $screenShots = join("\n", map{"<screenshot>s$_.jpg</screenshot>"} 0..$#screenShots)."\n";
    my $languages   = join("\n", map{"<language code=\"$_\"/>"} &appLanguagesPlusEnglish)."\n";
    my $handsets    = loadOperaHandSets();
    my $d = $app->description;
    my $D = $app->longDescription;

    for(1..$app->subsets)
     {my $s = '';
      my $a = $app->apkAlphaTarget($_, vendorNumber(qw(Opera)));
      my $t = $app->title($_);
      my $i = $app->icon512($_);

      my $dir = $targetDir.$g.$_;
      makePath($dir);
      copyFile($a, "$dir/a$_.apk"); # Apk
      copyFile($i, "$dir/i$_.png"); # Icon
      copyFile($screenShots[$_], "$dir/s$_.jpg") for 0..$#screenShots;

      $s = <<"END";
<application id="$a">
  <category oms-id="23"/>
  <descriptions>
    <description language-code="en">
      <title>$t</title>
      <short-description>$d</short-description>
      <full-description>
$D
      </full-description>
      <keywords>$t</keywords>
      <screenshots>$screenShots</screenshots>
    </description>
  </descriptions>
  <icon>i$_.png</icon>
  <status is-active="yes"/>
  <eula href=""></eula>
  <privacy href=""></privacy>
  <contact-email>support\@appaapps.com</contact-email>
  <subscription-distribution allowed="yes"/>
  <!-- free app -->
  <price>0</price>
  <!-- allowed for global distribution -->
  <distribution worldwide="yes"/>
  <compatibility>
  <!-- simple android build -->
  <build title="$version" id="$a">
  <files>
    <file>a$_.apk</file>
  </files>
  <handsets>
    $handsets
  </handsets>
  <localization>
    $languages
  </localization>
</build>
END
      writeFile("$dir/description.xml", $s);
     }
    1
   });
 }

#-------------------------------------------------------------------------------
# Create language specific web pages
#-------------------------------------------------------------------------------

sub iconSubsetSize($;$)
 {my ($subset, $size) = (@_, 64);
  return "-${subset}-${size}" if $subset;
  $size
 }

#-------------------------------------------------------------------------------
# Text and colour to indicate how recent an app is
#-------------------------------------------------------------------------------

sub timeAgo($$$)
 {my ($app, $language, $translations)  = @_;
  my $g = $app->group;
  my $D = $app->getReleaseDate();
  return () unless $D;
  my $d = int((time() - $D) /60/60/24); # days since compiled
  my $w = int($d / 7);
  my $m = int($d / 30);
  my ($C, $S, $T);
  if    ($m  > 1) {$C = "#520277"; $S = "Released 2 months ago"; $T = $m}
  elsif ($m == 1) {$C = "#4061ac"; $S = "Released 1 month ago"}
  elsif ($w  > 2) {$C = "#5ea61f"; $S = "Released 2 weeks ago";  $T = $w}
  elsif ($w  > 1) {$C = "#d20bda"; $S = "Released 2 weeks ago";  $T = $w}
  elsif ($w == 1) {$C = "#34f408"; $S = "Released 1 week ago"}
  elsif ($d  > 3) {$C = "#f9910b"; $S = "Released 2 days ago";   $T = $d}
  elsif ($d  > 2) {$C = "#f47108"; $S = "Released 2 days ago"}
  else            {$C = "#d50000"; $S = "Released 1 day ago"}

  $language =~ /en/ or $translations->{$S}{$language} or ::Confess "unable to translate $S into language $language";

  my $s = ($language and $language !~ /en/ ? htmlU($translations->{$S}{$language}) : $S);
  $s =~ s/2/$T/ if $s && $T;
  $s = "<span style=\"color: $C\">$s</span>";
  ($s, $C)
 }

#-------------------------------------------------------------------------------
# Apk size in megabytes
#-------------------------------------------------------------------------------

sub formatDecimal($$)
 {my ($s, $d) = @_;
  my $n = int(100*$s/$d)/100;
  sprintf("%6.2f", $n) =~ s/\A(0|\s)+//r =~ s/(0|\s)+\Z//r =~ s/\.\Z//r =~ s/\A\./0./r;
 }

sub megabytes($)
 {my ($s) = @_;
  return $s unless $s;
  return formatDecimal($s, 1024*1024)." megabytes" if $s > 1024*1024/10;
  return formatDecimal($s, 1024)     ." kilobytes" if $s >      1024/10;
  "$s bytes"
 }

sub apkSize($$$)
 {my ($app, $subset, $genAndroid) = @_;
  state $S = retrieve '../../../Skydrive/apkSizes.data'; # Retrieve apk sizes
$genAndroid or Confess "GenAndroid needed here!";
  my $a = $app->apkName($subset, $genAndroid);

  megabytes($S->{$a}) // ''
 }

#-------------------------------------------------------------------------------
# Web page in each language
#-------------------------------------------------------------------------------

sub appHtmlByLanguage($;$)
 {my ($language, $translations) = @_;
  my %oneLiners = %{&oneLiners};
  my $webTranslations = retrieve "unicode/webTranslations.data" or ::Confess "Cannot load web translations file: webTranslations.data";

  my $piwik = << 'END';
<!-- Piwik -->
<script type="text/javascript">
var pkBaseURL = (("https:" == document.location.protocol) ? "https://appaapps.com/piwik/" : "http://appaapps.com/piwik/");
document.write(unescape("%3Cscript src='" + pkBaseURL + "piwik.js' type='text/javascript'%3E%3C/script%3E"));
</script><script type="text/javascript">
try {
var piwikTracker = Piwik.getTracker(pkBaseURL + "piwik.php", 1);
piwikTracker.trackPageView();
piwikTracker.enableLinkTracking();
} catch( err ) {}
</script><noscript><p><img src="http://appaapps.com/piwik/piwik.php?idsite=1" style="border:0" alt="" /></p></noscript>
<!-- End Piwik Tracking Code -->
END

  my $s = << 'END';
<!-- Floating sidebar start -->
<style type="text/css">
#floating_sidebar_text
 {color: red;
  padding:5;
  font-family: Verdana;
  font-weight: bold;
  background-color: darkblue;
  text-align:center;
  line-height:150%;
  }

#floating_sidebar {
 position:fixed;
 width:200;
 right: 0;
 top: 100px; /* change to adjust height from the top of the page */
}
</style>
<div id="floating_sidebar">
<table border=1>
<tr><td><p id="floating_sidebar_text"><DOWNLOAD>
</table>
</div>
<!-- Floating sidebar end -->

<table border=1 cellspacing=0 cellpadding=5>
END

  my $amazonAd = << 'END';
<!-- Amazon adverts -->
<p><OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://fpdownload.macromedia.com/get/flashplayer/current/swflash.cab" id="Player_b576830a-bcfb-4d2b-8c40-04042feebabb"  WIDTH="468px" HEIGHT="60px"> <PARAM NAME="movie" VALUE="http://ws.amazon.com/widgets/q?ServiceVersion=20070822&MarketPlace=US&ID=V20070822%2FUS%2Fappa041-20%2F8009%2Fb576830a-bcfb-4d2b-8c40-04042feebabb&Operation=GetDisplayTemplate"><PARAM NAME="quality" VALUE="high"><PARAM NAME="bgcolor" VALUE="#FFFFFF"><PARAM NAME="allowscriptaccess" VALUE="always"><embed src="http://ws.amazon.com/widgets/q?ServiceVersion=20070822&MarketPlace=US&ID=V20070822%2FUS%2Fappa041-20%2F8009%2Fb576830a-bcfb-4d2b-8c40-04042feebabb&Operation=GetDisplayTemplate" id="Player_b576830a-bcfb-4d2b-8c40-04042feebabb" quality="high" bgcolor="#ffffff" name="Player_b576830a-bcfb-4d2b-8c40-04042feebabb" allowscriptaccess="always"  type="application/x-shockwave-flash" align="middle" height="60px" width="468px"></embed></OBJECT> <NOSCRIPT><A HREF="http://ws.amazon.com/widgets/q?ServiceVersion=20070822&MarketPlace=US&ID=V20070822%2FUS%2Fappa041-20%2F8009%2Fb576830a-bcfb-4d2b-8c40-04042feebabb&Operation=NoScript">Amazon.com Widgets</A></NOSCRIPT>
<!-- Amazon adverts end -->
END

  my $row = 0;

  for my $app(sort {$a->title(0, $language) cmp $b->title(0, $language)} grep {!$_->ignore} @app)
   {my $g = $app->group;
    $s .= "  <tr id=\"$g\">\n";
    my ($ago, $colour) = $app->timeAgo($language, $translations);
    my $Colour = $colour ? " style=\"color: $colour\" " : '';
    my $Border = " style=\"border:5px ".(rand() > 1 ? "groove" : "ridge")." ".($colour ? $colour : "#808080")."\"";

    my $N = $app->subsets+1; my $N1 = 2*$N-1; $N1 +=2 if $ago;

    my $eC = "<td style=\"border-style: hidden;\">";
    my $eR = "    <tr>".("<td style=\"border-bottom-style: hidden; border-top-style: hidden;\">$eC"x$N)."<tr>";
    my $ER = "    <tr><td style=\"border-style: hidden;\" colspan=$N1><tr>";

    for(0..$N-1) # Icon
     {my $i = iconSubsetSize($_);
      my $A = $app->apkName($_);
      my $a = "../a/$A.apk";

      $s .= "    <td style=\"border-bottom-style: hidden; padding: 10px\"><center><a href=\"$a\" class=\"piwik_download\"><img src=\"../i/$g$i.png\" $Border></a></center>$eC\n";
     }

    $s .= "<td style=\"font-size: 2em; font-weight: 900\" rowspan=5><center>$ago</center>" if $ago;

    $s .= $eR;
    for(0..$N-1) # Title
     {my $t = $app->title($_, $language);
         $t or ::Confess "No title for app $g subset $_ language $language";
         $t =~ s/FREE|GRATIS|KOSTENLOS|LIVRE//i;
      $s .= "    <td style=\"border-top-style: hidden; border-bottom-style: hidden;\"><center><p $Colour><b>$t</center>$eC\n";
     }
    $s .= $eR;
    for(0..$N-1) # Size
     {my $n = $app->apkSize($_);
      $s .= "    <td style=\"border-top-style: hidden;\"><center><p $Colour>$n</center>$eC\n";
     }
    $s .= $ER;
    my $O = $oneLiners{$g}; $O or ::Confess "No one liner for $g";
    if ($language =~ /en/)
     {$s .= "    <tr><td colspan=$N1 $Colour>$O\n";
     }
    else
     {my $o = $translations->{$O}{$language};
      $o or ::Confess "No translation for one liner in language $language, text=$O";
      $s .= "    <tr><td colspan=$N1 $Colour>$o\n";
     }
    $s .=  "    <tr><td style=\"border-style: hidden; color: #FF00FF; font-weight: 700;\" colspan=$N1><DOWNLOAD>\n";
    if (0) # Amazon ad
     {if ($row++ % 4 == 0)
       {$s .=  "    <tr><td style=\"border-style: hidden; color: #FF00FF; font-weight: 700;\" colspan=$N1>$amazonAd\n";
       }
     }
    $s .= ($ER x 4)."\n";
   }
  $s .= "</table>\n";

  if (1) # Translate tags
   {my $t = "Touch an icon to download the app for free!";
    my $T = $webTranslations->{$language}{$t};
    $T or ::Confess "No translation in language $language for $t. Use unicode/web.pm to provide one";
    $s =~ s/<DOWNLOAD>/$T/g;
   }

  $s
 }

if ($printHtml or oneOf($sendAppaApps, 1, 5))
 {makePath("unicode/titles");
  my $translations = loadTranslatedStuff();
  for my $l(&appLanguagesPlusEnglish)
   {my $s = appHtmlByLanguage($l, $translations);
    writeUnicode("../website/language/$l.html", &htmlU($s), __LINE__);
   }

  if (1)
   {my $s = appHtmlByLanguage('en');
       $s =~ s/64\.png/114.png/g;
       $s =~ s/\.\.\/i/apps\/i/g;
       $s =~ s/\.\.\/a/apps\/a/g;
    writeFile("../website/appsList.html", $s, __LINE__);
   }

  unless($sendAppaApps)
   {normalFinish " after printHtml=$printHtml at line ", __LINE__;
    exit;
   }
 }

#-------------------------------------------------------------------------------
# AppaAppsTest Listing
#-------------------------------------------------------------------------------

sub appaAppsTestHtml
 {my $s = << 'END';
<table border=1 cellspacing=0 cellpadding=5>
END

  for my $app(sort {$a->group cmp $b->group} grep {!$_->ignore} @app)
   {my $g = $app->group;
    $s .= "<tr id=\"$g\"><td>$g\n";
    for my $j(0..$app->subsets)
     {my $A = $app->apkName($j);
      my $a = "a/$A.apk";
      $s .= "<td><a download href=\"$a\"><button><h1>&nbsp;&nbsp;&nbsp;$j</h1></button></a>\n";
     }
   }
  $s .= << 'END';
</table>
END
  my $S = "../website/AppaAppsTest/index.html";
  writeUnicode($S, &htmlU($s), __LINE__);
  my $a = ftpAccounts(vendorNumber("AppaAppsTest"));
  ftpFile("ftp.appaapps.com", $a->{account}, $a->{password}, "AppaAppstest index", $S, "index.html");
 }

#-------------------------------------------------------------------------------
# Send stuff to AppaApps.com
#-------------------------------------------------------------------------------

sub ftpFile($$$$$$)
 {my ($address, $userid, $password, $n, $s, $t) = @_;
  ::Log "      ftp $n   $s   $t";
  $s or ::Confess "No source file specified for ftpFile" ;
  $t or ::Confess "No target file specified";
  -e $s or ::Confess "file $s does not exist";
  if ($test != 1)
   {my $f = Net::FTP->new($address, Debug=>0) or ::Confess "Cannot connect to $address $@";
    $f->login($userid, $password) or ::Confess "Cannot login ".$f->message;
    $f->binary() or ::Confess "Cannot change to binary ".$f->message;
    $f->put($s, $t); ::Log my $r = $f->message;
    $f->quit;
    return 1 if $r =~ /File successfully transferred/s;
   }
  0
 }

sub ftpAccounts($)
 {my ($genAndroid) = @_;
  return {account=>'download@appaapps.com', password=>'@4]Ds#882(aD'} if 0;
  return {account=>'akitsugu@appaapps.com', password=>'}wf#S{hu4*-a'} if oneOfVendor($genAndroid, qw(Huawei));
  return {account=>'upload1@appaapps.com',  password=>'T;T9R5Egz~2K'} if oneOfVendor($genAndroid, qw(AppaApps)); # apps1 = AppaApps
  return {account=>'upload@appaapps.com',   password=>'I=J8cA+-~Z];'};                                           # apps2 = AppaAppsPaid
 }

sub sendApkAppaApps($$$$)
 {my ($source, $app, $subset, $genAndroid) = @_;
  my $g = $app->group;
  my $t = "a/".$app->apkName($subset, $genAndroid).".apk";
  my $a = ftpAccounts($genAndroid);
  $app->setReleaseDate(); # as we are updating Appa Apps
  ftpFile("ftp.appaapps.com", $a->{account}, $a->{password}, "apk $g $subset", $source, $t);
 }

sub sendFileAppaApps($$$)
 {my ($n, $s, $t) = @_;
  my $a = ftpAccounts(vendorNumber("AppaApps"));
  ftpFile("ftp.appaapps.com", $a->{account}, $a->{password}, $n, $s, $t);
 }

if ($sendAppaApps)
 {byApp("FTP AppaApps", sub
   {my ($app) = @_;
    my $group = $app->group;
    my $N = 0;
    if (oneOf($sendAppaApps, 2, 3, 5))
     {for(0..$app->subsets)
       {for my $size(64, 114)
         {my $S = iconSubsetSize($_, $size);
          my $s = "../Android/$group/icon$S.png";
          my $t = "i/$group$S.png";
          $N += sendFileAppaApps("icon $group $_", $s, $t);
         }
       }
     }
    if    (oneOf($sendAppaApps, 3, 4, 5))
     {Confess "Need source parameter for sendApskApppaApps"; # $N += sendApkAppaApps($app, $_, $vendorCode{AppaApps}) for 0..$app->subsets;
     }
    $N
   });
  if (oneOf($sendAppaApps, 1, 5))
   {for my $l(&appLanguagesPlusEnglish)
     {sendFileAppaApps("html $l", "../website/language/$l.html", "l/$l.html");
     }
    sendFileAppaApps("Index Page", "../website/index.shtml",     "index.shtml");
    sendFileAppaApps("apps list",  "../website/appsList.html", "appsList.html");
    ::Log "Don't forget to move index.shtml and appsList.html into position in public_html";
   }
 }

if ($sendAppaApps == 6)
 {&appaAppsTestHtml;
 }

#-------------------------------------------------------------------------------
# Collect apk and assets into one directory. Optionally ($zip)
# create a zip file from the directory and upload to distributors
# bucket on S3
#-------------------------------------------------------------------------------

sub makeZip($$$$;$)
 {my ($source, $app, $subset, $genAndroid, $zip) = @_;

  my $group  = $app->group;
  my $G      = $app->groupDir;
  my $vendor = vendorCode($genAndroid);
  my $targetDir = $app->makeZipDir($subset, $genAndroid);
  removePath($targetDir);
  makePath($targetDir);
  my @t;
  my $save = sub {my ($f) = @_; push @t, $f; $f};                      # To tell 7z to zip

  if (1)  # Put icons
   {my $s = $app->icon512($subset);
    my $t = "$targetDir/icon.png";
    copyFile($s, $save->($t));
   }

  if (1)  # Put screenshots
   {my $i = 1;
    for my $s($app->screenShots)
     {my $t = $save->("$targetDir/screenShot/$i.jpg");
      if (oneOfVendor($genAndroid, qw(Nokia)))
       {screenShot($s, $t, 480, 800);
       }
      else
       {copyFile($s, $save->("$targetDir/screenShot$i.jpg"));
       }
      ++$i;
     }
   }

  if (1)  # Put descriptions
   {for(&appLanguagesPlusEnglish)
     {writeUnicode($save->("$targetDir/description_$_.txt"), $app->description($_));
      writeUnicode($save->("$targetDir/title_$_.txt"),       &editTitle($app->title($subset, $_)));
     }
   }

  if (1)  # Copy apk
   {my $t = "$targetDir/a$group$subset.apk";
    copyFile($source, $save->($t));
   }

  if ($zip)
   {my $z = "$group$subset.zip";
    my $a = "$targetDir/$z";
    my $c = "/Phil/7z/7z.exe a -tzip $a ".join(' ', @t);
    my $l = execCommand($c);
    if ($l =~ /Everything is Ok/)
     {my $f = "$vendor/$z";
       amazonBucket("AppaApps.Distributors")->add_key_filename($f, $a, $mimeApk, 1, {})
        or ::Confess "Unable to upload $a to $f on Amazon S3";
     }
    else
     {::Confess "Unable to create zip file for $group $subset";
     }
   }
 }

sub editTitle($)
 {my ($s) = @_;
  while($s =~ m/\A(.+)\&#x(....);(.+)\Z/i)
   {$s = $1.chr(hex($2)).$3;
   }
  return $s;
 }

#-------------------------------------------------------------------------------
# Create a spreadsheet for all the apps for Huawei
#-------------------------------------------------------------------------------

sub createSpreadSheet()
 {my $sheet  = '../Vendors/XL/Spreadsheet.csv'; # Spread sheet output file
  my $language = 'id';
  my $csv = Text::CSV->new ({binary => 1});
  my @T = ("No.", "Name(MAIN LANGUAGE)", "Name(SUB LANGUAGE)", "Description(MAIN LANGUAGE)", "Description(SUB LANGUAGE)", "Screenshot", "Application Type", "Keyword", "Icon");
  my @t;
  if (my $r = $csv->combine(@T))
   {push @t, $csv->string;
   }
  else
   {say dump([@T]);
    die "Csv failed ". $csv->error_input;
   }
  byAllApp("Spreedsheet", sub
   {my ($app) = @_;
    my $group = $app->group;
    for my $s(1..$app->subsets)   # Subsets
     {my @w;
      push @w, "$group$s";
      push @w, editTitle($app->title($s));
      push @w, editTitle($app->title($s, $language));
      push @w, $app->description();
      push @w, $app->description($language);
      push @w, "screenShot/*";
      push @w, "Android 2.2+";
      push @w, "";
      push @w, "icon.png";
      if (my $r = $csv->combine(@w))
       {push @t, $csv->string;
       }
      else
       {say dump([@w]);
        die "Csv failed ". $csv->error_input;
       }
     }
   });
  writeUnicode($sheet, join("\n", @t));
 }

createSpreadSheet() if $sendHuawei;

#-------------------------------------------------------------------------------
# Send stuff to Huawei for Mexico
#-------------------------------------------------------------------------------

if (0 && $sendHuawei)
 {my $screenShotCount = 10;

   if ($sendHuawei == 1) # Generate spreadsheet by copying approved sample
    {my $dir  = '../Vendors/Huawei/Spreadsheet'; # Spread sheet output file

     my $csv = Text::CSV->new ({binary => 1});
     my @T = ("No", "Content Name", "Content Provider", "Provider Country", "Category", "Supported languages", "Game introduction",
              "Supported System", "Remark", "Title-es", "Description-es");
     my @t;
     if (my $r = $csv->combine(@T))
      {push @t, $csv->string;
      }
     byAllApp("Huawei Spreedsheet", sub
      {my ($app) = @_;
       for my $s(0..$app->subsets)   # Subsets
        {my @w;
         push @w, scalar(@t);
         push @w, $app->group       unless $s;
         push @w, $app->group." $s" if     $s;
         push @w, "Appa Apps", "US", "Educational Game", join(' ', &appLanguagesPlusEnglish);
         push @w, $app->description();
         push @w, "Android 2.2+";
         push @w, &editTitle($app->title($s));
         push @w, &editTitle($app->title($s, 'es'));
         push @w, $app->description('es');
         if (my $r = $csv->combine(@w))
          {push @t, $csv->string;
          }
         else
          {say dump([@w]);
           die "Csv failed ". $csv->error_input;
          }
        }
      });
     writeUnicode("$dir/mexico.csv", join("\n", @t));
    }

  if ($sendHuawei == 2) # Upload icons and screenshots
   {byApp("Send screenshots and icons to Huawei", sub
     {my ($app) = @_;
      my $g = $app->group;

      for my $s(1..$app->subsets)
       {my $d = "$g$s";
        my $T = <<"END";
cd AppaApps
mkdir $d
cd    $d
mkdir supporting
cd    supporting
END

        if (1)  # Put icons
         {my $i = "../Android/$g/icon-$s-512.png"; -e $i or ::Confess "Icon file $i does not exist";
          my $t = "icon.png";
          $T .= "put $i $t\n";
         }

        if (1)  # Put screenshots
         {my $i = 1;
          for($app->screenShots($s))
           {my $t = "screenShot$i.jpg";
            $T .= "put $_ $t\n";
            ++$i;
           }
         }

        $T .=  <<"END";
exit
END
        writeFile("z/sftp.data", $T);
        writeFile("z/sftpAnswers.data", "Y\n");

        if (1)
         {say "  $d";
          my $l = execCommand("psftp -v -bc -be -b z/sftp.data -l windra -P 22 -pw Huawei\@123 117.102.127.35 < z/sftpAnswers.data 2>&1");
          if ($l =~ /Server sent command exit status 0/)
           {Log "    Icons and screen shots for app $d transferred to Huawei ";
           }
          else
           {Confess("      Unable to transfer icons and screen shots for app $d  to Huawei\n", $l);
            return 0;
           }
         }
       }
      1
     });
   }
 }

if ($sendHuawei == 4) # Restructure directory
 {my $f = Net::FTP->new("ftp.appaapps.com", Debug=>1)   or ::Confess "Cannot connect to ftp.apppaapps.com $@";
  $f->login('akitsugu@appaapps.com', '}wf#S{hu4*-a') or ::Confess "Cannot login ".$f->message;
  $f->cwd("a") or ::Confess "Cannot change to directory a". $f->message;
  $f->binary() or ::Confess "Cannot change to binary ".$f->message;

  byAllApp("  Restructure Apks slightly", sub
   {my ($app) = @_;
    my $g = $app->group;
    next if $g lt "Cliffs";
    for my $s(1..$app->subsets)
     {my $d = "$g$s/supporting";

      if (0) # Icons
       {my $i = "../Android/$g/icon-$s-512.png"; -e $i or ::Confess "Icon file $i does not exist";
        my $t = "$d/icon.png";
        $f->put($i, $t); ::Log my $r = $f->message;
       }
      if (1)
       {my $i = 1;
        for($app->screenShots($s))
         {my $t = "$d/screenShot$i.jpg";
          $f->put($_, $t); ::Log my $r = $f->message;
          ++$i
         }
       }
     }
   });
  $f->quit;
 }

#-------------------------------------------------------------------------------
# Send a file to Huawei
#-------------------------------------------------------------------------------

sub ftpHuawei($$$)
 {my ($app, $subset, $genAndroid) = @_;
  my  $source = $app->apkManualUploadFile($genAndroid, $subset);
  my  $g      = $app->group;
  my  $d      = "$g$subset";
  my  $file   = "$d.apk";

  -e $source or Confess "Source file $source to send to Huawei does not exist";

  writeFile("z/sftp.data", <<"END");
cd AppaApps
mkdir $d
cd    $d
put $source $file
exit
END
  writeFile("z/sftpAnswers.data", "Y\n");
  my $l = execCommand("psftp -v -bc -be -b z/sftp.data -l windra -P 22 -pw Huawei\@123 117.102.127.35 < z/sftpAnswers.data 2>&1");
  if ($l =~ /Server sent command exit status 0/)
   {Log "    Transferred $source to AppaApps/$d/$file on Huawei";
    return 1;
   }
  ::Confess "          Failed to transfer $source to AppaApps/$d/$file on Huawei because:\n$l";
  0
 }

#-------------------------------------------------------------------------------
# Send stuff to Appia directory at AppaApps.com
#-------------------------------------------------------------------------------

if ($sendAppia)
 {byApp("FTP AppaApps", sub
   {my ($app) = @_;
    my $group = $app->group;
    my $N = 0;
    if (oneOf($sendAppia, 1, 2, 5))
     {my $s = "../Android/$group/icon50x75.gif";
      my $t = "s/appia/${group}_icon.gif";
      $N += ftpAppaApps("appia $group icon", $s, $t);
     }
    if (oneOf($sendAppia, 2, 5))
     {my $f = $app->screenShotsDir()."/Appia/screenShot*.png";
      my $S = [glob($f)];
      shuffle($S);
      for(1..3)
       {my $s = $S->[$_-1];
        my $t = "s/appia/${group}_screenShot_$_.png";
        $N += ftpAppaApps("appia $group screenshot $_", $s, $t);
       }
     }
    if (oneOf($sendAppia, 3, 4, 5))
     {for my $subset(0..$app->subsets)
       {next if !$subset and $sendAppia == 3; # Only subsets for 3
        my $a = $app->apkName($subset);
        my $s = "../Android/$group/apps/$a.apk";
        my $t = ($subset ? "a" : "s/appia")."/$a.apk";
        $N += ftpAppaApps("appia $group $subset apk", $s, $t);
        last if $sendAppia == 4;              # Only main apk for 4
       }
     }
    $N
   });
 }

#-------------------------------------------------------------------------------
# Copy in Guinness Cake
#-------------------------------------------------------------------------------

=pod
if ($zGuinnessCake)
 {my $app = findAppByName("ChocolateGuinnessCake");
  my $sourceDir = "G:\\Chocolate Guinness Cake";
  my $targetDir = $app->imageSourceDirectory;
  for my $d(dirList($sourceDir))
   {next unless $d =~ /\s(\w)\w+\Z/;
    my $prefix = $1; # Use this letter to distinguish ingredients, utensils etc.
    for my $f(filesInDir("$sourceDir/$d"))
     {next unless $f =~ /\.jpg\Z/i;
      ::Carp "Non standard file $f ignored" and next unless $f =~ /\A(\d+)(.*)\Z/;
      my $n = $1+0;
      my $N = sprintf("%02d", $n);
      if ($prefix eq 'u' or $prefix eq 'i' or $prefix eq 'p' && $n < 48)
       {my $targetFile = "$targetDir$prefix$N$2";
        #::Log "BBB $prefix n=$n N=$N";
        copyFile("$sourceDir/$d/$f", "$targetFile");
       }
      elsif ($prefix eq 'p' && $n >= 48)
       {my $N = sprintf("%02d", $n - 47);
        my $prefix = 'd';
        my $targetFile = "$targetDir$prefix$N$2";
        #::Log "CCC $prefix n=$n N=$N";
        copyFile("$sourceDir/$d/$f", "$targetFile");
       }
      elsif ($prefix eq 'd')
       {my $N = sprintf("%02d", $n + 20);
        my $targetFile = "$targetDir$prefix$N$2";
        #::Log "DDD $prefix n=$n N=$N";
        copyFile("$sourceDir/$d/$f", "$targetFile");
       }
     }
   }
  exit;
 }
=cut

#-------------------------------------------------------------------------------
# Convert a video
#-------------------------------------------------------------------------------

if (0)
 {my @m = glob("makingMovies/Teddy/*.MOV");
  my @p = glob("makingMovies/Teddy/*.JPG");
  for(@m)
   {if (/(.+)\/(.+)\.MOV\Z/)
     {my ($path, $file) = ($1, $2);
      my $t = "$path/$file.3gp";
      say execCommand("ffmpeg -y -i $_ -s 128x96 -acodec libvo_aacenc $t");
      say execCommand("adb push $t /sdcard/pictures/$file.3gp");
     }
   }
  for(@p)
   {if (/(.+)\/(.+)\.JPG\Z/)
     {my ($path, $file) = ($1, $2);
      my $t = "$path/$file"."a.jpg";
      my $c = "$imConvert $_ -resize x256 $t";
      say execCommand($c);
      say execCommand("adb push $t /sdcard/pictures/$file.jpg");
     }
   }
  exit;
 }

#-------------------------------------------------------------------------------
# Print description suitable for use on Google Play and Amazon App Store
#-------------------------------------------------------------------------------

if ($printDescriptions == 1)
 {byApp("Description", sub
   {my ($app) = @_;
    my  $g    = $app->group;
    my  $t    = $app->title          or Confess "Please provide a title for app $g";
    my  $o    = $app->oneLiner       or Confess "Please provide a one liner for app $g";
    my  $d    = $app->appDescription or Confess "Please provide a description for app $g";
    my  $𝗸    = $app->keywordNames   or Confess "Please provide keywords for app $g";
    my  $k    = join(' ', @{$app->keywordNames});
    my $s = "$t\n\n$d\n\n$k\n\n$o\n";

    $s .= join '', map {"[$_]\n"} qw(Chinese French German Italian Japanese Portuguese Spanish );

    my $f = $Temp."descriptions/$g.data";
    writeUnicode($f, $s);
    Log "  $f";
   });
  normalFinish " after printOneliners=$printDescriptions";
  exit;
 }

sub printMissing($$)
 {my ($table, $title) = @_;
  if (@$table)
   {say "Missing $title for:";
    say for table($table);
   }
  else
   {say "NO MISSING ", uc($title), "!";
   }
 }

if ($printDescriptions == 2)
 {my $t = [];                                                                   # Missing one liners
  my $T = [];                                                                   # Missing app descriptions
  my $D = [];                                                                   # Apps with different app descriptions and one liners
  byAllApp("One liners", sub
   {my ($app) = @_;
    my  $g    = $app->group;
    my  $o    = $app->oneLiner;
    my  $a    = $app->appDescription;
    my ($A)   = split(/\n/, $a) if $a;

    push @$t, ["  ", $g] if !$o;
    push @$T, ["  ", $g] if !$a;

    if ($o && $a && $A && $o ne $A)
     {push @$D, ["  ", $g, $A];
      push @$D, ["  ", $g, $o];
     }
    0
   });
  printMissing($t, "One liners");
  printMissing($T, "App descriptions");
  printMissing($D, "Differences between app descriptions and one liners");

  normalFinish " after printOneliners=$printDescriptions";
  exit;
 }

#-------------------------------------------------------------------------------
# Create web pages to show images in each app which can be clicked to
# provide the details of the most important part of the photo
# usually the face.
#-------------------------------------------------------------------------------

if ($getAppaApps == 1)
 {my $W = 400;                                                                  # Scaled width of displayed photo
  my $N = 20;                                                                   # Number of photos per block - avoids browser collapse
  my $A = 'http://www.appaapps.com/cgi-bin/coordinatesServer.pl';               # Address of web server
  my $CF = "${Temp}imageCoordinates/coordinates.data";                          # Image coordinates file

  byApp("  Image coordinates", sub                                              # Image coordinates files for each app
   {my ($app) = @_;
    my $S = $app->imageSourceDirectory();                                       # Images directory for this app
    my $g = $app->group;
    my $B = 0;                                                                  # Actual number of blocks in app
    for my $n(0..100)                                                           # Upto 100 blocks - unlikely to have more than 10
     {my @t;                                                                    # Generated html
      my $c = 0;                                                                # Count of things
      my $R = 0;                                                                # Row in layout of block
      for my $t($app->things)                                                   # Each thing
       {for my $s(0..$t->sequence)                                              # Each image for thing
         {++$c;                                                                 # Image index
          next unless $c >= $N*$n and $c < $N*($n+1);
          my $p = $t->photoName($s);                                            # Source photo name
          my $q = $t->photoTargetName($s);                                      # Target photo name
          my $f = "$S$p.jpg";                                                   # File containing source photo
          unless(-e $f)                                                         # Sequence shots will have s>0, others s==0
           {Log "Cannot find image: $f";
            next;
           }
          my ($w, $h) = imageSize($f);                                          # Source image dimensions
          my $s = int(100*$w/$W)/100;                                           # Scale
          my $H = int($h/$s);                                                   # Scaled height
          push @t, "<tr>" if $R++ % 6 == 0;                                     # Start a new row
          push @t, "<td>";
          push @t, '<form method="get"   action="'.$A.'">';
          push @t, '<input name="app"    value="'.$g.'" type="hidden">';
          push @t, '<input name="image"  value="'.$q.'" type="hidden">';
          push @t, '<input name="width"  value="'.$w.'" type="hidden">';
          push @t, '<input name="height" value="'.$h.'" type="hidden">';
          push @t, '<input name="scale"  value="'.$s.'" type="hidden">';
          push @t, '<input name="coordinates" type="image" height='.$H.' width='.$W.' src="file:///'.$f.'">';
          push @t, '</form>'
         }
       }
      if (@t > 0)                                                               # Write html if there is any
       {unshift @t, "<table cellspacing=5>";
        push    @t, "</table>";
        my $f = $Temp.'imageCoordinates/'.$g.'/'.$n.'.html';                   # Output file
        writeFile($f, join " \n", @t);
        Log "Images html written to $f";
        ++$B;
       }
      else {last}                                                               # Otherwise no more blocks
     }
    $B
   });

  Log "NORMAL FINISH create coordinates map. Click on images then retrieve file: www.appaapps.com/var/www/cgi-bin/coordinates.data";
# Log "sudo rm /var/www/cgi-bin/coordinates.data to remove old coordinates file on www.appaapps.com";
  Log "If you use chrome, clicking with the mousewheel will open a new tab and leave the existing page untouched";
  Log "Fetching and deleting coordinates file ...";
  say STDERR for qx(rsync --remove-source-files --max-delete=1 root\@106.185.48.155:/var/www/cgi-bin/coordinates.data $CF);

  if (1)                                                                        # Convert clicks to focii
   {my $s = readFile($CF);                                                      # Read coordinates file
    my $d;                                                                      # Data tree

    for(split /\n/, $s)                                                         # Parse coordinates file
     {next if /\A\s*\Z/;                                                        # Ignore blank lines
      my %h = %{eval $_};                                                       # Load dumped data
      if ($@)                                                                   # Check for errors
       {say $@;                                                                 # Show error
        next;                                                                   # Carry on
       }
      $h{image} =~ s/%20/ /g;
      push @{$d->{$h{app}}{$h{image}}}, \%h;
     }

    my $images;                                                                 # Images processed
    for my $app(sort keys %$d)                                                  # Sort by app
     {my %I = %{$d->{$app}};
      my @s;                                                                    # Output lines
      my $start = '        ';
      my $s = $start;
      for my $image(sort keys %I)                                               # Sort by image within app
       {my $S = '';
        for my $i(@{$I{$image}})                                                # Each click
         {my $x = $i->{'coordinates.x'}*$i->{scale}/$i->{width};
          my $y = $i->{'coordinates.y'}*$i->{scale}/$i->{height};
          $S .= 'new Vector2D('.r2($x).', '.r2($y).'),';
         }
        chop($S);
        $s .= "add(\"$app\", \"$image\", new Vector2D[]{$S}); ";
        $images->{$image}++;                                                    # Images with coordinates

        if (length($s) > 10e3)                                                  # Break excessively long lines
         {push @s, $s;
          $s = $start;
         }
       }
      my $f = $Temp.'imageCoordinates/'.$app.'/coords.data';                    # Output file
      writeFile($f, join "\n", @s, $s);                                         # Write coordinates for app
      normalFinish "Coordinates for app $app written to file $f";
     }
   }
  exit;
 }

#-------------------------------------------------------------------------------
# Read email
#-------------------------------------------------------------------------------

if ($getAppaApps == 2)
 {my $p = keyStore("linode");                                                   # Linode private key
  Log "  Reading email via rsync";
  my $s = "root\@${linodeIPAddress}:/var/log/qmail/received/mail.data";
  my $t = "/home/phil/vocabularyTemp/email.html";
  my $c = "rsync -e \"ssh -i $p\" --remove-source-files --max-delete=1 $s $t";  # Transfer file
  Log "  Command: $c";
  Log $_ for qx($c);                                                            # Copy file to Linode
  qx(firefox file://$t);                                                        # Show results in web browser
  normalFinish "Get Email from AppaApps.com, results stored in $t";
  exit;
 }

#-------------------------------------------------------------------------------
# Back up AppaApps to S3 - /var/www/* except apks
#-------------------------------------------------------------------------------

if ($getAppaApps == 3)
 {my $p = keyStore("linode");                                                   # Linode private key
  my $a = "www.AppaApps.com to S3";
  Log "  Backing up $a";
  my $C = "/var/www/backupAppaAppsToS3.sh";
  my $c = "ssh -i $p root\@${linodeIPAddress} $C";                              # Ssh to back up command
  Log "  Command: $c";
  Log $_ for qx($c);
  normalFinish "Backed up $a";
  exit;
 }

#-------------------------------------------------------------------------------
# Back up web site to TOSHIBA
#-------------------------------------------------------------------------------

if ($getAppaApps == 4)
 {my $p = keyStore("linode");                                                   # Linode private key
  my @d = qw(/etc/apache2/ /var/www/);                                          # Source directories
  my $a = "Backing up website to TOSHIBA via rsync";                            # Action
  Log "  $a";                                                                   # Log action
  for my $d(@d)                                                                 # Source directory
   {my $s = "root\@${linodeIPAddress}:$d";                                      # - on Linode New Jersey
    my $t = "/media/phil/TOSHIBA/newJersey$d";                                  # Target directory
    makePath($t);                                                               # - Pousadorous
    my $c = "rsync -ir -e \"ssh -i $p\" $s $t";                                 # Command
    Log "  Command: $c";                                                        # Show
    open my $F, "$c|" or die "Cannot open";                                     # Receive command output
    Log $_ while <$F>;                                                          # Write command output in real time
   }
  normalFinish $a;                                                              # Finish message
  exit;
 }

#-------------------------------------------------------------------------------
# Print titles of active projects
#-------------------------------------------------------------------------------

if ($printTitles == 1)
 {my $t = [];
  byApp("Titles of Active Apps", sub
   {my ($app) = @_;

    if ($app->subsets)
     {my $f = $app->facts;
      my $F = $f == 0 ? 'NO facts' : $f == 1 ? 'Just written facts' : 'Spoken andd written facts';
      push @$t, [$app->title($_), $genres->{$app->genre}, $F] for 0..$app->subsets;
     }
    1
   });
  my @x = table $t;
  say for sort @x;
 }

if ($printTitles == 2)
 {my $t = [];
  byApp("Titles of Active Apps", sub
   {my ($app) = @_;
    for(1..$app->subsets)
     {my $u = "http://www.appaapps.com/apps/a/".$app->apkName($_).".apk";
      push @$t, ["<tr><td>", $app->title($_), "<td>", "<a href=\"$u\">$u</a>"];
     }
    1
   });

  if (@$t)
   {my $s = '';
    $s = "<h1>Titles of active projects</h1>\n";
    $s = "<table cellspacing=5 cellpadding=10>\n";
    $s .= $_ for table $t;
    $s .= "</table>\n";
    writeFile("../Vendors/Flypp/missing.html", $s);
   }
  else
   {::Log "NO active projects";
   }
 }

if ($printTitles == 4)
 {my $t; my $n = 0;
  byApp("Titles of Active Apps", sub
   {my ($app) = @_;
    push @$t, [++$n, "com.appaapps.".$app->group, $app->title];
    for(1..$app->subsets)
     {push @$t, [++$n, "com.appaapps.".$app->apkName($_), $app->title($_)];
     }
   });
  Log($_) for table($t, "R");
 }

if ($printTitles == 5)
 {my $t = [];
  byApp("FTP Amazon", sub
   {my ($app) = @_;
    for(0..$app->subsets)
     {push @$t, [$app->group, $app->title($_), $app->amazonLongId($_)//'none', $app->amazonId($_)//'none', $_ ? '' : $app->group];
     }
    1
   });
  my @x = table $t;
  ::Log for sort @x;
 }

if ($printTitles == 6)
 {my $t = "<table>\n";
  byApp("Apks on S3", sub
   {my ($app) = @_;
    my $g = $app->group;
    $t .= "<tr><td><a download=\"$g.apk\" href=\"http://s3.amazonaws.com/AppaApps/Apps/Apks/$g/0.apk\"><h2>$g</h2></a>";
    1
   });
  writeFile("web/download/screenShots.html", $t);
 }

# Nook apps

if ($printTitles == 7)
 {my $t = [];
  byApp("Titles of Active Nook Apps", sub
   {my ($app) = @_;

    if ($app->nook)
     {push @$t, [$app->title, $genres->{$app->genre}];
     }
    1
   });
  my @x = table $t;
  say for sort @x;
  say scalar(@x), " Nook Apps";
 }

if ($printTitles == 8)
 {byAllApp("Description markers", sub
   {my ($app) = @_;
    say $app->group,"=>\'END\',";
    1
   });
 }

if ($printTitles == 9)
 {my $s = '';
  my $n = 0;
  byAllApp("Test marks zip file", sub
   {my ($app) = @_;
    my $g = $app->group;
    my $i = ++$n % 100;
    $s .= sprintf("$g $_ $i $n $n $n\n") for 0..1;                              # 0-Main,1-subset
    1
   });
  sendStringToAppaAppsZip($linodeWWWDir."scores/testScores.zip", $s);           # Send test scores to www.appaapps.com
 }

# Underground

if ($printTitles == 11)
 {my $t = [];
  byApp("App+Titles for Underground", sub
   {my ($app) = @_;
    push @$t, $app->title."\n".$app->group."\n";
    1
   });
  my $s = ''; $s.= "$_\n" for @$t;
  writeFile($Temp."underground.data", $s);
 }

if ($printTitles)
 {normalFinish "PrintTitles=$printTitles line ", __LINE__;
  exit;
 }

#-------------------------------------------------------------------------------
# Print web page links to simplify Google Developer Console usage
#-------------------------------------------------------------------------------

if ($printGoogle && $printGoogle > 0)
 {my @a;
  byAllApp("Links to pages on Google Play", sub
   {my ($app) = @_;
    my $g = $app->group;
    for(0..$app->subsets)
     {next if $appSubsets == 1 && $_ or $appSubsets == 2 && !$_;
      my $a = $app->apkName($_, vendorNumber(qw(Google)));
      my $p = [qw(QuestionnairePlace ApkPlace MarketListingPlace PricingPlace)]->[$printGoogle-1];
      my $s = '';
      $s .= "<td><a href=". dump("https://play.google.com/apps/publish/?dev_acc=17067988956223558975#$p:p=com.appaapps.".lc($a)).">$g $_</a>\n";
      push @a, $s;
     }
   });
  my $N = 7;
  my $n = 1 + int @a / $N;
  my $a;
  my $i = 0;
  for my $i(1..$N)
   {for(my $j = 1; $j <= $n && @a; ++$j)
     {$a->{$j}{$i} = shift(@a);
     }
   }

  my $s = "<table cellspacing=5>\n";
  for my $i(1..$n)
   {$s .= "<tr>";
    for my $j(1..$N)
     {my $A = $a->{$i}{$j};
      next unless $A;
      $s .= "<td>$A\n";
     }
   }
  $s .= "</table>\n";
  my $f = $Temp."Google/googlePlay.html";
  writeFile($f, $s);
  normalFinish "\$printGoogle == $printGoogle, links in $f";
 }

#-------------------------------------------------------------------------------
# Print web page links to simplify Google Developer Console usage
#-------------------------------------------------------------------------------

if ($printGoogle && $printGoogle < 0)
 {my @a;
  my $vendor = vendorNumber(qw(Google));
  byApp("Links to Google Play for Ebay", sub
   {my ($app) = @_;
    my $g = $app->group;
    for(0..$app->subsets)
     {next if $app->skipSubset($_, $vendor);
      my $p = $app->packageName($_, $vendor);
      my $a = $app->apkName    ($_, $vendor);
      my $s = "<a href=\"https://play.google.com/store/apps/details?id=$p\">$a</a>\n";
      push @a, $s;
     }
     1
   });

  my $s  = "<table cellspacing=5>\n";
     $s .= "<tr><td>$_" for @a;
     $s .= "</table>\n";
  my $f = "${perlDir}/z/googlePlayEbay.html";
  writeFile($f, $s);
  normalFinish " links to pages on Google Play in in $f";
 }

#-------------------------------------------------------------------------------
# Print web page links to simplify Amazon app submission
#-------------------------------------------------------------------------------

sub createAmazonPages($)
 {my ($printAmazon) = @_;
  my @a;
  byAllApp("Links to Amazon binary details page", sub                           # Each app
   {my ($app) = @_;
    my $g = $app->group;
    my $c = 0;
    for my $s(0..$app->subsets)
     {next if $app->skipSubset($s, vendorNumber($printAmazon < 4 ? "Amazon" : "UnderGround"));
      my $ai = $app->amazonId($s);                                              # Id not on underground
      my $ag = $app->amazonIdUnderGround($s);                                   # Id on underground
#     next  if $printAmazon == 7 && $app->undergroundLive;                      # Skip apps that have been submitted to Underground
      my $a = $printAmazon =~ /1|2|3|7/ ? $ai : $ag;                            # Id
      my $t = '';
      $t .= "<a href=\"https://developer.amazon.com/application/general/$ag/detail.html\">XXX</a> "    if $printAmazon =~ /7/;
      $t .= "<a href=\"https://developer.amazon.com/application/general/$a/detail.html\">$g $s</a>"    if $printAmazon =~ /1|4|7/;
      $t .= "<a href=\"https://developer.amazon.com/application/availability/$a/edit.html\">$g $s</a>" if $printAmazon =~ /2|5/;
      $t .= "<a href=\"https://developer.amazon.com/application/rating/$a/edit.html\">$g $s</a>"       if $printAmazon =~ /3|6/;
      push @a, $t;
      ++$c;
     }
    $c
   });

  my $N = 7;
  my $n = 1 + int @a / $N;
  my $a;
  my $i = 0;
  for my $i(1..$N)
   {for(my $j = 1; $j <= $n && @a; ++$j)
     {$a->{$j}{$i} = shift(@a);                                                 # Destroys @a
     }
   }

  my $s = "<table cellspacing=5>\n";
  for my $i(1..$n)
   {$s .= "<tr>";
    for my $j(1..$N)
     {my $A = $a->{$i}{$j};
      next unless $A;
      $s .= "<td>$A\n";
     }
   }
  $s .= "</table>\n";
  my $f = $Temp."Amazon/AmazonBinary.html";
  writeFile($f, $s);
  $f
 }

if ($printAmazon)
 {my $f = createAmazonPages($printAmazon);

  normalFinish "\$printAmazon=$printAmazon, links in:\n  $f";
 }

#-------------------------------------------------------------------------------
# Get amazon Ids
# 1 - table of apps which is used to create new versions of each app
# 2 - list of index pages, which should be downloaded to $Temp.'Amazon/apps'
# 3 - convert index pages to build code for this file to load amazon Ids
# 4 - check results
# Finally all amazon=> and amazonId=> can be reste top [qw()]
#-------------------------------------------------------------------------------

if ($printAmazonIds == 1)
 {my $f = createAmazonPages($printAmazon);
  qx(google-chrome file://$f);
  normalFinish "\$printAmazonIds=$printAmazonIds, links in:\n  $f";
 }

#-------------------------------------------------------------------------------
# Index pages list
#-------------------------------------------------------------------------------

sub downloadAmazonIds {$Temp."Amazon/apps/"}

if ($printAmazonIds == 2)
 {my $s = <<END;
<table cellspacing=10>
END
  for(1..20)
   {$s .= "<tr><td><a href=\"https://developer.amazon.com/myapps.html?searchid=&page=$_\">Page $_</a>\n";
    my $f = &downloadAmazonIds.$_.".html";
    writeFile($f, '') unless -e $f;
   }
  $s .= "</table>\n";
  my $f = $Temp."Amazon/AmazonIndex.html";
  writeFile($f, $s);
  qx(google-chrome file://$f);
  normalFinish "\$printAmazonIds=$printAmazonIds, links in:\n  $f\n  download index pages to ".&downloadAmazonIds;
 }

#-------------------------------------------------------------------------------
# Parse index pages html to build the latest Amazon app key to Amazon app id hash.
# These pages should be saved (html only) to: downloadAmazonIds() 1.html..20.html
#-------------------------------------------------------------------------------

if ($printAmazonIds == 3)
 {my %aa;
  my @f = glob(&downloadAmazonIds."*");
  for(@f)
   {my $s  = readFile($_);
    unless($s)
     {Carp "Empty file $_ ignored";
      next;
     }
    my @s = $s =~ m(<td><span class="status">\s*<a href="/application/general/(\w+)/detail.html">Live</a>\s*</span>\s*</td>\s*<td><span class="status">\s*<a href="/application/general/(\w+)/detail.html">Not Submitted</a>\s*</span>\s*</td>)gsi;
    die "Uneven result from $_ " if @s % 2;
    %aa = (%aa, @s);
   }
  my $s =  <<END;
sub amazonKeysToIds()
{{
END

  for my $app(@app)
   {next if $app->ignore;
    for my $subset(0..$app->subsets)
     {my $i = $app->amazonId($subset);
      my $k = $app->amazonLongId($subset);
      my $g = $app->group;
      my $I = $aa{$i} // $i;
      my $Is = ' ' x (16 - length($I));
      my $gs = ' ' x (40 - length($g));
      $s .= " \"$k\" => {id=>\"$I\"$Is, group=>\"$g\"$gs, subset=>$subset},\n";
     }
   }
  $s .= <<END;
 }}
END

  if (1)
   {my $o = (&downloadAmazonIds =~ s/apps\/\Z//r)."ids.pl";
    writeFile($o, $s);
    qx(gedit $o);
    normalFinish "\$printAmazonIds=$printAmazonIds, results in:\n  $o";
   }
 }

#-------------------------------------------------------------------------------
# Print results of upgrade AmazonIds
#-------------------------------------------------------------------------------

if ($printAmazonIds == 4)
 {my $K;                                                                        # Keys check
  my $I;                                                                        # Ids check
  my $c = 0;
  my $newIds = &amazonKeysToIds;                                                # New Ids
  byAllApp("  Print Amazon Keys for each app", sub
   {my ($app) = @_;
    my $g = $app->group;
    for my $s(0..$app->subsets)
     {if (my $k = $app->amazonLongId($s))                                             # Check for duplicate/missing key - the long one
       {my $group  = $newIds->{$k}{group};
        my $subset = $newIds->{$k}{subset};
        defined($group)  or Confess "No group  for key: $k, should be $g";
        defined($subset) or Confess "No subset for key: $k, should be $s";
        if ($K->{$k})
         {Confess "Duplicate key $k in app $g and app ". $K->{$k};
          ++$c;
         }
        elsif ($group ne $g)
         {Confess "Wrong group for key: $k, old: $g vs new: $group";
          ++$c;
         }
        elsif ($subset != $s)
         {Confess "Wrong subset for key: $k, app $g, old subset: $s, new: $subset";
          ++$c;
         }
        $K->{$k} = $g;
       }
      else
       {Confess "Missing key for app $g subset $s";
       }

      if (my $i = $app->amazonLongId($s))                                           # Check for duplicate/missing id - the short one
       {if ($I->{$i})
         {Confess "Duplicate id $i in app $g and app ". $I->{$i};
          ++$c;
         }
        $I->{$i} = $g;
       }
      else
       {Confess "Missing id for app $g subset $s";
       }
     }
    $c
   });
  normalFinish "\$printAmazonIds=$printAmazonIds check amazon keys and ids";
 }

#-------------------------------------------------------------------------------
# Print underground ids taken from $Temp/underground/ids.data to a hash that can
# be installed in this perl.
#-------------------------------------------------------------------------------
# Does not handle: The Numbers from 1 to 100 in English
if ($printAmazonIds == 11)
 {my $r = readFile($Temp."underground/ids.data");
  my @o = $r =~ m(<option.+?value=\"(.+?)\">\s*(.+?)</option>)gs;               # One per app
  my @a;
  while(@o)
   {my @i = split /:/, (shift @o);
    my $t = (shift @o) =~ s/&nbsp.*//r;
    push @a, {id=>$i[0], apk=>$i[1], title=>$t};
   }
  my %t;                                                                        # Title to apk
  for(@a)
   {next if $_->{apk};
    $t{$_->{title}} = $_->{id};
   }
  my $s = "sub undergroundId {+{\n";                                            # Write translation hash
  byAllAppQuiet("  Underground ids", sub
   {my ($app) = @_;
    return if $app->example;                                                      # Skip example apps as they do noit get shipped
    my $g = $app->group;
    my $t = $app->title;
    my $i = $app->amazonIdUnderGround || $t{$t};
    Confess "No id for title $t" unless $i;
    next unless $i;
    $s.= "$g=>". dump($i). ",\n";
   });
  $s .= '}}';
  my $f = $Temp."underground/underground.pl";
  writeFile($f, $s);                                                            # Write translation hash
  Log "  Wrote underground file to\n$f";
 }

#-------------------------------------------------------------------------------
# Translate titles
#-------------------------------------------------------------------------------

=pod

Two cases appertain:

1 - we are adding a new language, in which case all titles must be translated to that language
2 - we have added a new title and the titles database needs to be brought up to date

or some combination of the two.

=cut

sub htmlU($) # Convert to Html \u notation
 {my ($s) = @_;
  my $t = '';
  $t .= (ord($_) < 128 ? $_ : sprintf("&#x%04x;", ord($_))) for split(//, $s);
  $t
 }

if ($translateTitles == 1)
 {my $t = [];
  my %L; # Languages requiring translations
  for my $app(@app)
   {next if $app->ignore;
    for(0..$app->subsets)
     {my %l; # Languages required
      for my $l(&appLanguagesPlusEnglish)
       {$l{$l}++ unless $app->title($_, $l);
       }
      %L = (%L, %l);
      push @$t, [$app->title($_)] if keys %l;
     }
   }

  if (@$t)
   {my $s = "[en]\n";
    $s .= "$_\n" for table($t);
    $s .= join '', map {"[$_]\n\n"} sort keys %L;
    writeFile($titlesToTranslateFile, $s);
    ::Log "The titles to be translated are in file:\n$titlesToTranslateFile\nPlease translate them with Google Translate then rerun with translateTitles = 2";
   }
  else
   {::Log "All apps have titles translated into all languages";
   }

  normalFinish " after translateTitles=$translateTitles at line ", __LINE__;
  exit;
 }

if ($translateTitles == 2)
 {my @t;
  for my $app(@app)
   {next if $app->ignore;
    for(0..$app->subsets())
     {for my $l(&appLanguagesPlusEnglish)
       {unless($app->title($_, $l))
         {push @t, [$app, $_];
          last;
         }
       }
     }
   }

  if (1)
   {my ($l, $n) = (0,0);
    my $t = &translatedTitles();
    my @l = split(/\n/, readUnicode($titlesToTranslateFile));
    for(@l)
     {#chop();                                                                   # Remove \r from Google Translate
      if (/\[(\w\w)\]/)
       {$l = $1;
        ::Log "Load language $l";
        $n = 0;
        next;
       }
      if (1)
       {
         $t[$n] or ::Confess "More input lines than titles needing translation for language $l - check $translatedTitlesFile";
        my ($app, $subset) = @{$t[$n++]};
        $t->{$app->group.$subset.$l} = htmlU($_);
       }
     }
    if (1)
     {my $s = "sub translatedTitles\n {+{\n";
      $s .= "$_=>".dump($t->{$_}).",\n" for sort keys %$t;
      $s .= " }}\n1\n";
      writeFile($translatedTitlesFile, $s);
     }
   }

  normalFinish "TranslateTitles=$translateTitles at line ", __LINE__;
  exit;
 }

#-------------------------------------------------------------------------------
# Translate the names of things
#-------------------------------------------------------------------------------

if (oneOf($translateThings, 1, 3))
 {byApp("  Translate Things - Prepare", sub
   {my ($app) = @_;
    my $f = "Translations/".$app->group.".data";
    if (-e $f and $translateThings == 1)
     {::Carp "Translate Things = $translateThings, NOT over writing file $f";
      return 0;
     }
#    writeFile $f, join '', (map {$_->title."\n"} $app->things), (map {"[$_]\n"} &appLanguagesMinusEnglish);
    1
   });

  normalFinish " after translateThings=$translateThings at line ", __LINE__;
  exit;
 }

sub loadTranslationFile($$)
 {my ($store, $file) = @_;
  my @t = split /\n/, readUnicode $file;
  my $s = 1;
  my $l = '';
  my @e = grep {if ($s) {$s = !/\[\w\w\]/} $s} @t;
  splice @t, 0, scalar @e;
  for(@t)
   {if (/\[(\w\w)\]/)
     {$l = $1;
      $s = 0;
      next;
     }
    ::Confess "No language defined" unless $l;
    $store->{$e[$s]}{$l} = $_;
    ++$s;
   }
 }

if (oneOf($translateThings, 2))
 {my $s = {};
  loadTranslationFile($s, $_) for glob("Translations/*.data");
  store $s, "Translations/Translations.data";
  normalFinish " after translateThings=$translateThings at line ", __LINE__;
  exit;
 }

#-------------------------------------------------------------------------------
# Generate key
#-------------------------------------------------------------------------------

if ($genKey)
 {my $keyStore = keyStore("release-key.keystore");
  if (-e $keyStore)
   {Log "$keyStore already exists";
   }
  else
   {make_path($keyStore);
    my $c = << "END";
keytool
  -genkey -v
  -keystore ${keyStore}
  -alias vocabulary
  -dname "cn=com.appaapps"
  -keyalg RSA -keysize 2048 -validity 10000
  -keypass redletterday
  -storepass redletterday
END
    $c =~ s/\n//gs; ::Log $c;
    say execCommand($c);
   }
  normalFinish "Generate key";
 }

#-------------------------------------------------------------------------------
# Get our bucket on Amazon
#-------------------------------------------------------------------------------

sub amazonBucket(;$)
 {my ($bucket) = @_; $bucket //= "AppaApps";
  package S3;                                                                   # Use comand line utilities if on notebook or linux
  use Data::Dump qw(dump);
  use JSON;
  return bless {bucket=>$bucket};                                               # Construct - userid and password supplied externally via aws configure command

  sub error  :lvalue {$_[0]->{error}}                                           # Error message if not json
  sub bucket :lvalue {$_[0]->{bucket}}

  sub exec($$)                                                                  # Execute command and process response
   {my ($s, $c) = @_;
    my $r = qx($c 2>&1);
    ::Log "$c\n", dump($r) if $debug;
    $s->error = undef;
    if    ($c =~ /aws\s+s3api\s+put-object-acl/)                                # Commands that produce no output on success
     {return 1 if !$r;
     }
    elsif ($c =~ /aws\s+s3api\s+head-object/ && $r && $r =~ /client error \(Unknown\) occurred when calling the HeadObject operation/)
     {return undef;                                                             # Error response means object not found
     }
    else
     {return decode_json $r if $r && $r =~ /\{/;                                # Commands that produces JSON On success
     }
    my $m = "Error executing S3 command $c\n". dump($r);                        # Otherwise error
    $s->error = $m;
    ::Log "  $m";                                                               # Describe problem with S3
    undef
   }

  sub head_key($$)                                                              # Get file details
   {my ($s, $key) = @_;
    my $b = $s->bucket;
    $s->exec("aws s3api head-object --bucket $b --key $key")
   }

  sub add_key_filename($$$$$$)                                                  # Upload a file to a key on S3: bucket, key, file, mimeType, public, parms
   {@_ == 6 or ::Confess "S3::add_key_filename: Wrong number of parameters ", dump(@_);
    my ($s, $key, $file, $type, $public, $parms) = @_;
    my $b = $s->bucket;
    defined($type)         or ::Confess "S3::add_key_filename: no mime type specified for the content of $key";
    defined($public)       or ::Confess "S3::add_key_filename: no public/private specified for the content of $key";
    $mimeTypes{$type}      or ::Confess "S3::add_key_filename: bad type ", dump(@_), " should be one of ", dump([@mimeTypes]);
    $public =~ /\A(0|1)\Z/ or ::Confess "S3::add_key_filename: bad public specification, should be 0 or 1", dump(@_);

    my $m = keys %$parms ? '--metadata '.dump(encode_json({%$parms})) : '';
       $m =~ s/\\":(\d+)/\\":\\"$1\\"/g;                                        # Quote numbers otherwise amazon complains with a very strange message - this is unsatisafctory

    my $r = $s->exec("aws s3api put-object     --bucket $b --key $key --body $file --storage-class REDUCED_REDUNDANCY $m --content-type $type");
    $r or ::Confess "Unable to upload file $file to $key, ", dump($r);
    if ($public)
     {$s->exec("aws s3api put-object-acl --bucket $b --key $key --acl public-read"); # No useful response from this call
     }
    $r
   }

  sub add_key($$$$$$)                                                           # Upload a value to a key
   {my ($s, $key, $value, $type, $public, $parms) = @_;
    my $f = "/tmp/genAppWriteToS3$$.data";                                      # Write the value to a temporary file
    writeFile($f, $value);
    my $r = add_key_filename($s, $key, $f, $type, $public, $parms);
    unlink $f;
    $r
   }

  sub delete_key($$)                                                            # Delete a key
   {my ($s, $key) = @_;
    my $b = $s->bucket;
    my $r = qx(aws s3api delete-object --bucket $b --key $key);                 # No responses seems to mean no errors
    $s->error = undef;
    return {} unless $r;
    $s->error = $r;
    undef
   }

  sub get_key_filename($$;$)                                                    # Get/save file
   {my ($s, $key, $file) = @_;
    my $b = $s->bucket;
    my $f = $file//$key;
    $s->exec("aws s3api get-object --bucket $b --key $key $f")
   }

  sub writeFile($$)                                                             # Write data to a file
   {my ($f, $s) = @_; # File, string
    open my $F, ">$f" or die "writeFile: cannot open $f for write";
    say {$F} $s;
   }
 }

#-------------------------------------------------------------------------------
# Send content to S3
#-------------------------------------------------------------------------------

sub sendS3PublicRead($$$)
 {my ($b, $f, $d) = @_;
  amazonBucket($b)->add_key($f, $d, "text/plain", 1,{});                        # Needs to be tested to see if acl works like this
 }

sub sendFileS3($$$)                                                             # Send source code to S3
 {my ($b, $f, $d) = @_;                                                         # Bucket, file name on S3, local file name
  Log "Upload starting $d to $b/$f";
  my $t = int time();
  my $D = dateTimeStamp();
  amazonBucket($b)->add_key_filename($f, $d, "text/plain", 0, {time=>$t, date=>$D});
  Log "Upload finished $d to $b/$f";
 }

sub sendToAmazonS3($$$$;$)                                                      # Save a file to Amazon S3, reduced redundancy and public read
 {my ($source, $target, $mime, $public, $bucket) = @_;                          # Source, target, mimeType, public, optional: bucket.
  -e $source or ::Confess "File to upload to S3 bucket AppaApps does not exist, file=$source";

  amazonBucket($bucket)->add_key_filename($target, $source, $mimeApk, $public, {version=>$version})
    or ::Confess "Unable to upload $source to $target on Amazon S3";
 }

sub sendApkS3($$$$)                                                             # Send apk to vendor bucket on S3 for upload to vendor
 {my ($source, $app, $subset, $genAndroid) = @_;
  my $g = $app->group;
  -e $source or ::Confess "cannot find apk $source";
  my $v = vendorCode($genAndroid);
  my $s = "Apks/$v/$g/$subset.apk";
  my $r = sendToAmazonS3($source, $s, $mimeApk, 0);                             # Not public
  Log "      Sent to s3://AppaApps/$s";
  $r
 }

sub S3InstallFile($)                                                            # Name of the S3 key for an apk to be installed on the Nook
 {my ($gen) = @_;
  my $group = $gen->group;
  my $subset = $gen->subset;
  my $vendor = $gen->vendor;
  "Apks/$vendor/$group/$subset.apk"
 }

sub sendApkToS3InstallArea($$)                                                  # Send an apk to the install area on S3 so that we can prepare it on Ec2 and then test it on the Nook
 {my ($gen, $source) = @_;
  $gen->confirmGen;
  -e $source or ::Confess "cannot find apk $source";

  amazonBucket()->add_key_filename(S3InstallFile($gen), $source, $mimeApk, 0, {});
 }

sub getApkFromS3InstallArea($$)                                                 # Get an apk from the install area on S3 so that we can prepare it on Ec2 and then test it on the Nook
 {my ($gen, $target) = @_;
  $gen->confirmGen;
  my $f = S3InstallFile($gen);
  amazonBucket()->get_key_filename($f, $target);
 }

sub sendJsonToAmazonS3($$;$)
 {my ($source, $target, $bucket) = @_;                                          # Data structure, file on Amazon S3
  my $j = encode_json $source;
  my $f = 'z/temporary/list.json';
  writeUnicode($f, $j);
  sendToAmazonS3($f, $target, $bucket // "AppaApps.Share", $mimeText, 1);       # Public so apps can read it
 }

#-------------------------------------------------------------------------------
# Send app details to S3
#-------------------------------------------------------------------------------

if ($sendS3 == 1)                                                               # Send Titles and Genres
 {my $T = loadTranslatedStuff();
  my $B = amazonBucket("AppaApps");

  my $D;
  for my $app(@app)                                                             # Load apps titles
   {next if $app->ignore;
    my $g = $app->group;
#   next unless $app->active;
    for my $s(0..$app->subsets)
     {my $j = $B->get_key_filename("Apps/Apks/$g/$s");
      my $v = $j->{"x-amz-meta-version"};
      my $z = $j->{"content_length"};
      my $a = $app->apkName($s);
      $D->{$g}{$s} = {version=>$v, size=>$z, apk=>$a};
     }
#   last if keys %$D > 20;
   }

  for my $l(&appLanguagesPlusEnglish)
   {my @t;
    say "  Language $l";
    for my $app(@app)                    # Load apps titles
     {next if $app->ignore;
      my $g = $app->group;
#     next unless exists $D->{$g};
      for my $s(0..$app->subsets)
       {my $t = $app->title($s, $l) =~ s/"//gr;
        $t or Confess "No title in language $l for app $g subset $s";

        if (1) # Get size and version from S3
         {my $v = $D->{$g}{$s}{version};
          my $z = $D->{$g}{$s}{size};
          my $a = $D->{$g}{$s}{apk};

          push @t, [$g, $s, $a, $t, $v, $z, $app->genre];
         }
        last if $s >= 1;
       }
     }
    my @g;
    for(keys %$genres)                   # Load genres
     {my $g = $genres->{$_};
      push @g, [$_, $l =~ /en/ ? $g : $T->{$g}{$l}];
     }

    my @T = sort {$a->[3] cmp $b->[3]} @t;
    my @G = sort {$a->[1] cmp $b->[1]} @g;
    my $j = {titles=>[@T], genres=>[@G]};
    sendJsonToAmazonS3($j, "Apps/List/$l", "AppaApps");
#   say encode_json $j; exit;
   }
  normalFinish "Send details of all apps to S3";
 }

#-------------------------------------------------------------------------------
# Send icons to S3
#-------------------------------------------------------------------------------

byApp("  Send Icons to S3", sub
 {my ($app) = @_;
  for(0..$app->subsets)
   {my $s = $app->iconFile($_);
    my $S = 'z/temporary/icon.jpg';
    convertIcon($s, $S, 64);
    my $t = "Apps/Icons/".$app->group."/$_.jpg";
    sendToAmazonS3($S, $t, $mimeJpg, 1);                                        # Public so apps can read it
   }
 }) if $sendS3 == 2; # Send icons

#-------------------------------------------------------------------------------
# Send Mirrors to S3
#-------------------------------------------------------------------------------

if ($sendS3 == 7)
 {sendS3PublicRead("AppaApps.Share", "Mirrors2/free.data", << 'END');
http://s3.amazonaws.com/AppaApps/Apps/Apks/
END
  sendS3PublicRead("AppaApps.Share", "Mirrors2/paid.data", << 'END');
http://s3.amazonaws.com/AppaApps/Apps/Apks/
END
  Log "Mirrors loaded";
 }

if (0)
 {sendS3PublicRead("AppaApps.Share", "Mirrors/free.data", << 'END');
Europe/London http://www.appaapp.com/apps2
END
  sendS3PublicRead("AppaApps.Share", "Mirrors/paid.data", << 'END');
Europe/London http://www.appaapps.com/apps2/
END
  Log "Mirrors loaded";
 }

#-------------------------------------------------------------------------------
# Send click distribution to S3
#-------------------------------------------------------------------------------

if ($sendS3 == 8)
 {byApp("  Load clicks distribution", sub
   {my ($app) = @_;
    my $group = $app->group;

    if (my $d = $app->clicks)
     {#my $a = {map {$_=>1} @Affiliates};
      my $s = '';
      for(sort keys %$d)
       {Confess "App $group specified unknown affiliate $_" unless $a->{$_};
        $s .= $d->{$_}. " $_\n";
       }

      sendS3PublicRead("AppaApps.Share", "Clicks/$group.data", $s);
      Log $s;
     }
    else {Carp "No clicks distribution provided for $group"}
   });
  Log "Clicks distributions loaded";
 }

#-------------------------------------------------------------------------------
# Down loads with Curl
#-------------------------------------------------------------------------------

if ($xload == 1)
 {#qx(curl -o Sounds/NeilArmstrong.ogg   http://upload.wikimedia.org/wikipedia/commons/4/48/Frase_de_Neil_Armstrong.ogg);
  #qx(curl -o Sounds/RobertKennedy.ogg   http://upload.wikimedia.org/wikipedia/commons/8/8d/Discurso_de_Kennedy.ogg);
  #qx(curl -o Sounds/countdown_launch.wav http://www.nasa.gov/62282main_countdown_launch.wav);
  execCommand("curl -o Sounds/main_landing.wav      http://www.nasa.gov/62283main_landing.wav");
 }

#-------------------------------------------------------------------------------
# Print class contents
#-------------------------------------------------------------------------------

sub javaP($$)
 {my ($d, $c) = @_;
  my $file = "$d\\$c.class";
  ::Confess "Class $file does not exists" unless -e $file;
  my $x = "javap -p -s -classpath $d $c";
  ::Log "\nDecode class: $x";
  say execCommand($x);
 }

if ($xjavap == 1)
 {&javaP(qw(\Phil\Android\zSendDroid\SendDroid\SendDroid\com\senddroid InterstitialAd));
  &javaP(qw(\Phil\Android\zAppInKorea\lib\a\net\daum\adam\publisher    AdInterstitial));
 }

#-------------------------------------------------------------------------------
# Application
#-------------------------------------------------------------------------------

 {package Application;
  use base qw(ApplicationDescription);
  use Data::Dump qw(dump);

  sub add($$;$$)
   {my ($h, $group, $name, $title) = @_;
    if (@_ == 2)
     {($h, $name) = @_;
      $group = 1;
      $title = $name;
     }

    $h->{$name} = {group=>$group, name=>$name, title=>$title, order=>$name};
   }

  sub genJava($)
   {my ($s, $app) = ('', @_);
    $s .= '`  add('.$_->name.");\n" for $app->things;
    $s
   }

  sub genFacts()    {undef}
  sub videoIgnore() {1}

  sub addUrls($$)
   {my ($h, $u) = @_; # Things, url hash
    $h->{$_}{url} = $u->{$_} for keys %$h;
    $h
   }

#-------------------------------------------------------------------------------
# Add extended attributes which give more game variations
#-------------------------------------------------------------------------------
  sub addX($@)
   {my ($h, %p) = @_;

    my (   $name, $questionTitle, $title, $question, $response, $photo, $order) =
     @p{qw(name    questionTitle   title   question   response   photo   order)};

    my $t = bless {}, "ApplicationThingDescription";

    if (0)
     {$t->setName($name);
      $t->setQuestionTitle($questionTitle);
      $t->setResponseTitle($title);
      $t->setQuestion($question);
      $t->setResponse($response);
      $t->setPhoto($photo);
      $t->setOrder($order // $name);
     }

    $t->setName($name);
    $t->setTitle($title);
    $t->setPhoto($photo);
    $t->setOrder($order // $name);
    $h->{$t->name} = $t;
   }

=pod

addx is unnecessarily complex due to excessive duplication of titles and sound files

=cut

  sub addX2($@)
   {my ($h, %p) = @_;

    my (   $name, $title, $photo, $order) =
     @p{qw(name    title   photo   order)};

   $title //= $name;
   $photo //= $name;
   $order //= $name;

    my $t = bless {}, "ApplicationThingDescription";

    $t->setName ($name);
    $t->setTitle($title);
    $t->setPhoto($photo);
    $t->setOrder($order);
    $h->{$t->name} = $t;
   }

#-------------------------------------------------------------------------------
# Exclude things which have common facts
#-------------------------------------------------------------------------------
  sub excludeFactsInCommon($$)
   {my ($h, $group, %options) = @_;          # Things, group, options
    my @h = sort keys %$h;                   # Names of things
    my %h = map {$h[$_-1]=>$_} 1..@h;        # Numbers of things
    my ($F, $f);                             # Facts for each thing
    for my $t(@h)                            # Questionable facts for each thing
     {$F->{$t}{$_} = $f->{$_}{$t} = 1 for grep {/\A\+/} split /\n/, ::readFile "../facts/$group/$t.data";
     }
    my $r; # Output report
    for my $t(@h)                            # Each thing
     {my $x = ' ' x @h;
      substr($x, $h{$t}, 1) = '+';           # Mark self
      for my $fact(keys %{$F->{$t}})         # Questionable facts for each thing
       {for my $T(keys %{$f->{$fact}})       # Things that share this fact and so must be excluded
         {next if $t eq $T;
          substr($x, $h{$T}, 1) = 'X';       # Exclude thing with same fact
         }
       }
      if (0 and $options{excludeCommonBaseName})   # Exclude items with the same last word in the name
       {my @t = split / /, $t;
        for my $T(@h)
         {my @T = split / /, $T;
          next unless $t ne $T and $t[-1] eq $T[-1];
          substr($x, $h{$T}, 1) = 'X';       # Exclude thing with same  base name
         }
       }
      push @$r, [$t, $x];                    # Report exclusions
      $h->{$t}{relation} = $x unless $x =~ /\A\s*\+\s*\z/;                      # Save exclusions with each thing
     }
   }
#-------------------------------------------------------------------------------
# Generate Java with question, response, exclusions
#-------------------------------------------------------------------------------
  sub genJavaExtended($)
   {my ($app) = (@_);
    my $group = $app->group;
    my @raceOrder = $app->raceOrder if $app->can("raceOrder");
    my $T;
    for($app->things)
     {my $n = dump($_->name).",";
      my $t = dump($_->title).",";
      my $s = dump($_->sound).",";
      my $q = dump($_->questionTitle).",";
      my $r = dump($_->response).",";
      my $u = ($_->url ? dump($_->url) : '(String)null').',';
      my $p = dump($_->photoName).",";
      my $x = ($_->relation ? dump($_->relation) : "(String)null").");";
      push @$T, ["`  addX($n", $q, $t, $s, $r, $p, $u, $x];
     }

    my $R = '';
       $R = "        setRaceOrder(new String[]{". join(",", map {dump($_)} @raceOrder). "});\n" if @raceOrder;

    join("\n", ::table($T))."\n$R";
   }
 }

#-------------------------------------------------------------------------------
# Application with URLS - typically a photo app
#-------------------------------------------------------------------------------

 {package ApplicationUrl;
  use base qw(Application);
  use Data::Dump qw(dump);

  sub genJava($$)
   {my ($data, $app) = @_;
    my $s = '';
    for($app->things)
     {my $group = $_->group;
      my $name  = $_->name;
      my $title = $_->title;
      my $url   = $_->{url} ? dump($_->{url}) : 'null';

      $s .= <<"END";
`  add("$name", "$title", $url);
END
     }
    $s
   }

  sub add($$$;$)
   {my ($h, $u, $n, $t) = @_; # Thing, url hash, name, title
    $t //= $n; # If title not specified it is the same as name
    $h->SUPER::add(1, $n, $t);
    $h->{$n}{url} = $u->{$n};
   }
 }

#-------------------------------------------------------------------------------
# Colour Application
#-------------------------------------------------------------------------------

 {package ColourApplication;
  use base qw(Application);

  sub vividColour()
   {my ($C, $L, $H) = (int(rand(256)), int(rand(64)), 192+int(rand(64)));
    my @c = ($H, $L, $C);
    my $s = int(rand(6));

    @c = ($C, $L, $H) if $s == 0;
    @c = ($C, $H, $L) if $s == 1;
    @c = ($L, $C, $H) if $s == 2;
    @c = ($H, $C, $L) if $s == 3;
    @c = ($L, $H, $C) if $s == 4;
    sprintf("%02x%02x%02x", @c);
   }

  sub genJava($$)
   {my ($data, $app) = @_;
    my $s = '';
    for($app->things)
     {my $group  = $_->group;
      my $name   = $_->name;
      my $title  = $_->title;
      my $colour = $_->colour;
      my $prefix = $_->prefix;

      $s .= <<"END" if $title eq $name;
`  add($prefix, 0x$colour, "$title");
END
      $s .= <<"END" if $title ne $name;
`  add($prefix, 0x$colour, "$name", "$title");
END
     }
    $s
   }
 }

#-------------------------------------------------------------------------------
# Counting Application
#-------------------------------------------------------------------------------

 {package CountingApplication;
  use base qw(ColourApplication);

  sub add($$$$)
   {my ($h, $group, $number, $title) = @_;
    my $order = sprintf "%08d", $number;
    $h->{$number} = {colour=>ColourApplication::vividColour(), name=>$number, prefix=>$number, group=>$group, title=>$title, order=>$order};
   }

  sub add2($$$)
   {my ($h, $number) = @_;
    my $numbers = {qw(1 One 2 Two 3 Three 4 Four 5 Five 6 Six 7 Seven 8 Eight 9 Nine 10 Ten 11 Eleven 12 Twelve 13 Thirteen 14 Fourteen 15 Fifteen 16 Sixteen 17 Seventeen 18 Eighteen 19 Nineteen 20 Twenty)};
    my $name = $numbers->{$number};
    my $order = sprintf "%08d", $number;
    $h->{$name} = {name=>$name, title=>$name, order=>$order};
   }
 }

#-------------------------------------------------------------------------------
# Alphabet Application
#-------------------------------------------------------------------------------

 {package AlphabetApplication;
  use base qw(ColourApplication);

  sub add($$)
   {my ($h, $name) = @_;
    my $prefix = 1;
       $prefix = 2 if $name =~ /\A(Ch|Sh|Qu)/i;
    my $group = 1;
       $group = 2 if $name =~ /\A[efgh]/i;
       $group = 3 if $name =~ /\A[ijkl]/i;
       $group = 4 if $name =~ /\A[mnop]/i;
       $group = 5 if $name =~ /\A[qrst]/i;
       $group = 6 if $name =~ /\A[uvwx]/i;
       $group = 7 if $name =~ /\A[yz]/i;
    $h->{$name} = {colour=>ColourApplication::vividColour(), name=>$name, order=>$name, prefix=>$prefix, group=>$group};
   }
 }

#-------------------------------------------------------------------------------
# Sequence Application
#-------------------------------------------------------------------------------

 {package SequenceApplication;
  use base qw(ColourApplication);

  sub add($$$)
   {my ($h, $name, $sequence) = @_;
    if ($name =~ /\A\d+\Z/) {($name, $sequence) = ($sequence, $name)}
    $h->{$name} = {group=>1, name=>$name, sequence=>$sequence, order=>$name};
   }

  sub genJava($$)
   {my ($data, $app) = @_;
    my $s = '';
    for($app->things)
     {my $group = $_->group;
      my $name  = $_->name;
      my $title = $_->title;
      my $sequence = $_->sequence;

      $s .= <<"END";
`  Add($sequence, "$name");
END
     }

    $s
   }
 }

#-------------------------------------------------------------------------------
# Video Application
#-------------------------------------------------------------------------------

 {package VideoApplication;
  use base qw(Application);

  sub videoIgnore() {undef}
 }

#-------------------------------------------------------------------------------
# Video Sequence Application
#-------------------------------------------------------------------------------

 {package VideoSequenceApplication;
  use base qw(SequenceApplication);

  sub add
   {my ($h, $sequence, $name, $start, $end, $videoIgnore) = @_;
    $h->{$name} = {group=>1, name=>$name, sequence=>$sequence, order=>$name, start=>$start, end=>$end, videoIgnore=>$videoIgnore};
   }
  sub videoIgnore() {undef}
 }

#-------------------------------------------------------------------------------
# Addition
#-------------------------------------------------------------------------------

 {package Addition;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

#   for   my $i(1..10)
#    {$h->addX2(name=>"$i+$_") for 0..$i;
#    }
    $h  ->addX2(name=>"$_")    for 1..20;
    $h  ->addX2(name=>"is");
    $h  ->addX2(name=>"plus");
    $h
   }
 }
#-------------------------------------------------------------------------------
# Adjectives
#-------------------------------------------------------------------------------

 {package Adjectives;
  use base qw(Application);
  use Data::Dump qw(dump);

#-------------------------------------------------------------------------------
# Similar photos described with adjectives
#-------------------------------------------------------------------------------

sub classify($) # Produce a hash that specifies whether two items are in the same class.
 {my ($class) = @_;
  my %class;
  for(@$class)
   {for   my $a(@$_)
     {for my $b(@$_)
       {next if $a eq $b;
        $class{$a}{$b} = 1;
       }
     }
   }
  %class
 }

  sub similarPhotosDescribedWithAdjectives
   {my ($dir, $Photos, $similar, $same) = @_; # Ref array of strings of photograph names: "adjective1 adjective2 base", ref array of similar adjectives [qw(white red black)],[qw(big small)],[qw(big large)]

    my $captions = &captions2;

# Similar/Same
#   my %similar = classify($similar);
    my %same    = classify($same);

# Photos
    my $photos;
    for my $p(0..$#$Photos)               # Each photo
     {my @p = split /\s+/, $Photos->[$p];
      my $p = join(' ', @p[0..2]);        # Photo name
      # -e $_ or ::Confess("Cannot find Photo file $_") for map {"../images/$dir/$_.jpg"} ($p); # 2014/10/28 check is done later fpr all apps and this test here prevents use of S3 as storage for assets
      push @$photos,
       {photo=>$p[2],                     # Save photo base name
        Photo=>$p,                        # Save photo name
        adjectives=>[@p[0..1]],           # Save spoken adjectives for photo
        Adjectives=>{map{$p[$_]=>1} grep{$_ != 2} 0..$#p}, # Adjectives hash
       }
     }

# Check each photo has a caption for each spoken adjective and vice versa

    if (1)
     {my %Captions = %{$captions};
      for my $P(@$photos)                 # Each photo
       {my $p = $P->{photo};
        for my $a(@{$P->{adjectives}})
         {next if $a =~ /very/i;
          my $c = "$a $p";
          $captions->{$c} or ::Carp "No caption for $c, photo ". $P->{Photo};
          delete $Captions{$c};
         }
       }
      if (0 && keys %Captions)
       {::Log "Captions without photos:";
        ::Log "  $_" for sort keys %Captions;
        exit;
       }
     }

# Words
    my $words;
    for my $p(@$photos)
     {for my $a(@{$p->{adjectives}})
       {next if $a =~ /very/i;
        my $c = "$a ".$p->{photo};
        push @$words, {photo=>$p, adjective=>$a, number=>scalar(@$words), caption=>$captions->{$c}};
       }
     }

# Exclusions and opposites
    for   my $w(@$words)                  # Each word
     {my ($n, $a, $p) = @$w{qw(number adjective photo)};
      my $t = $p->{Photo};
      for my $W(@$words)                  # Each word
       {my ($N, $P) = @$W{qw(number photo)};
        my ($T, $A) = @$P{qw(Photo Adjectives)};
#       $W->{relation}[$n] = 'X' if $w->{photo} == $W->{photo} || $W->{photo}{Adjectives}{$a}; # Exclude words which have the same photo or the same adjective
#       $W->{relation}[$n] = 'O' if $w != $W && $similar{$a}{$A} && ($W->{relation}[$n]//'') ne 'X'; # Opposites for those that have then and are not excluded
        $W->{relation}[$n] = 'X' if $p == $P or $A->{$a} or $same{$a}{$A} or $p->{photo} eq $P->{photo};
       }
      $w->{relation}[$w->{number}] = '+'; # Mark self
     }

# Exclusions and opposites as strings
    if (1)
     {my ($e, $n) = (' ' x @$words, scalar(@$words));
      for(@$words)
       {$_->{relation}  = substr(join('', map {$_ // ' '} @{$_->{relation}}).$e, 0, $n);
       }
     }

    $words
   }

  sub words()
   {similarPhotosDescribedWithAdjectives("Adjectives", [split /\n/, <<'END'],
Beautiful White Swan
Big Fat Walrus
Big Furry Ears
Big Gold Statue
Big Male Lion
Big Old Building
Big Orange Dumper
Black Plastic Flippers
Blue Plastic Clog
Blue Webbed Feet
Bright Orange Eye
Bright Sunny Day
Bright Yellow Moon
Brown Female Bird
Brown Wooden Stool
Clean Glass Dishes
Clean Green Basin
Clean Leather Shoe
Clean Pink Feet
Clear Bright Night
Clear Bright Day
Closed Black Door
Closed Wooden Gate
Cloudy Blue Sky
Cloudy Grey Sky
Cold Icy Weather
Cold Snowy Walk
Curved Glass Building
Curved Metal Hook
Curved Yellow Beak
Dark Chocolate Cake
Dark Foggy Day
Dark Wet Tunnel
Dry Narrow Canyon
Dry Red Sand
Dry Sandy Valley
Empty Glass Jar
Empty Plastic Jug
Empty Square Box
Fast Female Skater
Fast Male Runner
Five Grey Cats
Five Orange Flowers
Five Tiny Toes
Fluffy Curly Tail
Tall Adult Penguins
Four White Chimneys
Very Full Box
Full Red Boat
Full Round Cup
Furry Black Dog
Green Plastic Peg
Grey Foggy Weather Cloudy Dark
Grey Leather Boots
Happy Grey Dog
Happy Little Boy
Happy Little Girl
Happy Wet Dog
High Fast Rollercoaster
High Snowy Mountain
High Stone Arch
High White Cliff
Hot Chocolate Drink
Hot Sunny Day
Hot Yellow Fire
Huge High Rock
Huge Stone Pyramid
Juicy Green Lime
Juicy Orange Melon
Large Adult Bear
Large Brick Cathedral
Large Brown Bird
Large Round Eyes
Long Curved Horns
Long Narrow Wings
Long Pink Beak
Long Thin Nose
Long Thin Legs
Long White Mane
Long White Truck
Low Dark Tunnel
Low Stone Bridge
Low Wet Cave
Low White Bridge
Muddy Fat Pig
Old Blue Bus
Old Wooden Wagon
Open Red Door
Open Wooden Gate
Orange Webbed Feet
Pink Baby Nose
Pink Big Toe
Quiet Sandy Beach
Quiet Straight Road
Red Stone Wall
Round Black Wheel
Round Blue Planet
Round Metal Coin
Round Yellow Yolk
Scaly Brown Lizard
Sharp Curved Claws
Sharp Steel Knives
Shiny Black Tins
Shiny Glass Building
Shiny Gold Tap
Shiny Metal Bin
Shiny Old Car
Short Fat Penguin
Six Beautiful Flowers
Six Cuddly Bears
Six Tasty Sweets
Sleepy White Seal
Small Brown Mouse
Small Fluffy Bear
Small Green Frog
Small Red Chair
Small Wet Plant
Soft Furry Nose
Soft Grey Jacket
Soft Pink Towel
Square Glass Scales
Steep High Climb
Steep Icy Cliff
Steep Narrow Street
Tall Glass Building
Tall Green Palm
Tall High Statue
Tall Steel Pylon
Tall Steel Crane
Tall Thin Tree
Tasty Chocolate Cake
Thin Brown Legs
Three Cuddly Penguins
Three Pink Pigs
Three Yellow Flowers
Three Scaly Toes
Three Young Cats
Tiny Yellow Cars
Two Baby Elephants
Two Black Boots
Two Curly Tails
Two Grey Elephants
Two Square Towers
Two Straight Oars
Very Busy Market
Very Fast Car
Very Big Rhino
Wet Muddy Ground
White Plastic Fan
Wide Busy Road
Wide Glass Roof
Wide Grey Dam
Wide Open Mouth
Wide Sharp Horns
Wooly White Sheep
Yellow Wooden Clogs
Young Fluffy Dog
Young Sleepy Baby
END
[map {[split]} split /\n/, <<'END'],
Brown Pink White Black Blue Red Green Yellow Orange Grey Gold Silver Purple
Wooden Plastic Metal Ceramic Glass Leather Brick Steel Stone Marble
Wooly Scaly Spiny Furry Shiny Fluffy Curly Webbed
Round Square Straight Curved
Open Closed Full Empty
High Low Steep Long Tall Short
Huge Large Big Little Small Tiny Heavy Fat Wide Thin Narrow
Baby Adult Young Old
Male Female
Wet Dry Clean
Soft Sharp
Juicy Tasty Chocolate
Beautiful Pretty Ugly
Strong Fast
Happy Sleepy Cuddly
Quiet Busy
Dark Bright
Hot Cold
Clear Foggy Snowy Icy Cloudy Sunny
Muddy Sandy
One Two Three Four Five Six Seven
END
[map {[split]} split /\n/, <<'END']);
Huge Large Big
Little Small Tiny
Heavy Fat Wide
Thin Narrow
Juicy Tasty Chocolate
Beautiful Pretty
Strong Fast
Foggy Dark Cloudy
Furry Fluffy
END
   }

  sub captions2
   {my $s = [split /\n/, &captionText2];
    my %c;
    for(@$s)
     {my @w = split;
      my $w = join " ", splice @w, 0, 2;
      $c{$w} = join " ", @w;
     }
    \%c
   }

  sub captionText2
   {<<'END'
Adult Bear           Once it was not so very rare, to see an adult polar bear.
Adult Penguins       There are no scales or fins, on these adult penguins.
Baby Elephants       They do such clever stunts, these baby elephants
Baby Nose            I like to pose, my baby nose.
Beautiful Flowers    Spend some hours, with beautiful flowers.
Beautiful Swan       Live life full on, beautiful swan.
Big Building         Buy many things, in big buildings.
Big Dumper           To survive wear your jumper, when you drive this big dumper.
Big Ears             It takes many years, to grow such big ears.
Big Lion             Don't lie upon, a big lion.
Big Rhino            You cannot tow, a big rhino.
Big Statue           Where can I view, this big statue?
Big Toe              Get to know, your big toe.
Big Walrus           Did he smile at us, that great big Walrus?
Black Boots          Smart suits, black boots.
Black Dog            Out for a jog, with my black dog.
Black Door           No mud on the floor, behind this black door.
Black Flippers       Daily dippers, need black flippers.
Black Glove          I would just love, a new black glove.
Black Tins           No need for bins, with these black tins.
Black Wheel          There is nothing to feel, on this black wheel.
Blue Bus             Ride home with us, on the blue bus.
Blue Clog            Found in the fog, a new blue clog.
Blue Feet            It's nice and neat, to have blue feet.
Blue Planet          What would you like to do, on a planet that is blue?
Blue Sky             Tell me how high, is the blue sky?
Brick Cathedral      Very celebral, a brick cathedral.
Bright Day           Come out to play, on this bright day.
Bright Eye           See as you fly, with a bright eye.
Bright Moon          Never seen at noon, a very bright moon.
Bright Night         No need for fright, on this bright night.
Brown Bird           Have you not heard, of this brown bird?
Brown Legs           You can even walk down town, with these legs that are so brown.
Brown Lizard         Not found in every town, a lizard that is brown.
Brown Mouse          It hides in our house, this little brown mouse.
Brown Stool          I think you should sit down, on the stool which is brown.
Busy Market          I would get dizzy, in a market so busy.
Busy Road            It cannot be towed, down this busy road.
Chocolate Box        What do they do down at the docks? They try our new chocolate box.
Chocolate Cake       What do they do, down by the lake? They eat our new, chocolate cake.
Chocolate Drink      What I will do is sit and think, about our new chocolate drink.
Clean Basin          Wash your face in, a clean basin.
Clean Dishes         One of my wishes, is for clean dishes.
Clean Feet           Keep it neat, with clean feet.
Clean Shoe           Do you know who, owns that clean shoe?
Clear Day            Please come and play, on a clear day.
Clear Night          Walk by moonlight, on this clear night.
Closed Door          There is a wooden floor, behind this closed door.
Closed Gate          If you are late, use the closed gate.
Cloudy Sky           Now I can fly, through cloudy sky.
Cold Walk            I've been told I can talk, when it's cold and we walk.
Cold Weather         Can you wear leather, during cold weather?
Cuddly Bears         At home upstairs, six cuddly bears.
Cuddly Penguins      Now: The first prize wins, three cuddly penguins.
Curly Tail           Is it for sale, that curly tail?
Curly Tails          They work like sails, these curly tails.
Curved Beak          You cannot speak, with a curved beak.
Curved Building      The phone went ding then I swerved, round that building which is curved.
Curved Claws         Curved claws, scratch floors.
Curved Hook          The new look: a curved hook.
Curved Horns         Better than thorns, pairs of curved horns.
Dark Cake            Can you bake, a dark cake?
Dark Day             They went away, on a dark day.
Dark Tunnel          I nearly fell and left a mark, in the tunnel that is so dark.
Dry Canyon           Life tries to hang on, in this dry canyon.
Dry Sand             Bury your hand, in this dry sand.
Dry Valley           There is no alley, in this dry valley.
Empty Box            I will put my socks, in this empty box.
Empty Jar            I have searched far, for an empty jar.
Empty Jug            Put your mug, by the empty jug.
Fast Car             You can go far, in a fast car
Fast Rollercoaster   Now in the past my new toaster, went like a fast roller coaster.
Fast Runner          I want to say that in my past, I was a runner who ran fast.
Fast Skater          I'll see you later, very fast skater.
Fat Fish             I do not wish, for this fat fish.
Fat Penguin          Well that should win, a fat penguin.
Fat Pig              That big, fat pig.
Fat Walrus           Smile at us, fat walrus!
Female Bird          You should have heard, that female bird.
Female Dog           I think you should jog, with a female dog.
Female Skater        She's not a waiter, that female skater?
Five Cats            I need five mats, for five grey cats.
Five Flowers         Enjoy the hours, with five flowers.
Five Toes            Two feet ten toes, one foot five toes.
Fluffy Bear          What will you wear, white fluffy bear?
Fluffy Dog           Surely its not so very stuffy, to like a dog that is so fluffy?
Fluffy Tail          Aloft like a sail, that dog's fluffy tail.
Foggy Day            Do not lose your way, on this foggy day.
Foggy Weather        Can you wear leather, in foggy weather?
Four Chimneys        He said he sees, four white chimneys.
Four Dolls           These four dolls, need parasols.
Full Boat            A full boat, stays afloat.
Full Box             No room for socks, in this full box.
Full Cup             Drink it right up, from this full cup.
Furry Dog            It's so nice to jog, with this furry dog.
Furry Ears           How well one hears, with furry ears.
Furry Nose           It never froze, my furry nose.
Glass Building       There's a park full of grass, near those buildings of glass.
Glass Dishes         I have made wishes, for clean glass dishes.
Glass Jar            You can see far, through a glass jar.
Glass Roof           Is it fire proof, that high glass roof?
Glass Scales         You cannot weigh whales, using glass scales.
Gold Statue          I want to view, that gold statue.
Gold Tap             You might need a map, to find a gold tap.
Green Basin          Wash your hands in, that green basin.
Green Frog           The small green frog, lives near a log.
Green Lime           To make a drink just in time, use a slice of that green lime.
Green Palm           You can be calm, by this green palm.
Green Peg            I am sure that it must be clean, it is a peg and it is green.
Grey Boots           Please wear grey boots, with your grey suits.
Grey Cats            Hats and spats, for grey cats.
Grey Dam             Hold the water at bay, with a dam that is grey.
Grey Dog             It's not so often that I say, there is a dog and it is grey.
Grey Elephants       To really do some clever stunts, you need a pair of grey elephants
Grey Jacket          Perfect on a sunny day, is a jacket coloured grey.
Grey Sky             I can fly, through grey sky.
Grey Weather         Do not wear leather, during grey weather.
Happy Boy            Give you joy, happy boy.
Happy Dog            It jumped off a log, that happy wet dog!
Happy Girl           She likes to live life in a great whirl, never-the-less she's a happy girl.
High Arch            I like to march, through this high arch.
High Cliff           Singing a song but feeling stiff, walking along this high steep cliff.
High Climb           This long high climb, will take some time.
High Mountain        Much much higher than a fountain, is the top of this high mountain.
High Rock            If you need to look at a clock, then watch the sun on this high rock.
High Rollercoaster   You cannot buy my new toaster, upon this high roller coaster.
High Statue          We must review, that high statue.
Hot Day              Please do not play, on a hot day.
Hot Drink            You know what I think? We need a hot drink.
Hot Fire             Surely I will never tire, of looking at this hot fire.
Huge Pyramid         I am lost amid, this huge pyramid
Huge Rock            There it stands over the dock, just below that huge rock.
Icy Cliff            I think you'll get very stiff, if you climb this icy cliff.
Icy Weather          Surely you cannot wear leather, during such cold icy weather?
Juicy Lime           You are just in time, for some juicy lime.
Juicy Melon          If you've run out of lemon, you could try a juicy melon.
Large Bear           Do not barge it's not fair, to the large adult bear.
Large Bird           Have you ever heard, of such a large bird?
Large Cathedral      It's phenomenal, this large cathedral.
Large Eyes           You cannot tell lies, with such large round eyes.
Leather Boots        When the day and weather suits, I like to wear leather boots.
Leather Shoe         The south west weather blew, right through my leather shoe.
Little Boy           He was always full of joy, when he was a little boy.
Little Girl          This little girl, lives in a whirl.
Long Beak            You cannot speak, with a long beak.
Long Horns           I think you must be very strong, to carry horns that are so long.
Long Legs            Every-one begs, for long thin legs.
Long Mane            Do you think I'm vain, with my long white mane?
Long Nose            I'd like you to smell a rose, with my very long thin nose.
Long Tongue          It should be sung, with a long tounge.
Long Truck           You're never stuck, with a long truck.
Long Wings           Marvellous things, lovely long wings.
Low Bridge           Descend from the ridge, then cross that low bridge.
Low Cave             He gave me a slow wave, then went in the low cave.
Low Tunnel           Light began to funnel, down the low dark tunnel.
Male Lion            Don't sit upon, this male lion.
Male Runner          He doesn't drink ale, that runner who's male.
Metal Bin            Don't put that petal in, the shiny metal bin.
Metal Coin           I cannot see the join, around that metal coin.
Metal Hook           Let us take a look, at that metal hook.
Muddy Ground         Now don't play around, in that muddy ground.
Muddy Pig            That muddy pig, is really big.
Narrow Canyon        There's a path you can rely on, it follows that narrow canyon.
Narrow Street        I think we should meet, in that narrow street.
Narrow Wings         The fastest things, have narrow wings.
Old Building         I think that it must have been sold, because that building is so old.
Old Bus              If I were a bride I'd make a fuss, if I had to ride on that old bus.
Old Car              You must be brave and very bold, to drive a car that is so old.
Old Wagon            To move a cold dragon, you use an old wagon.
Open Door            There is a golden floor, behind that open door.
Open Gate            To avoid being late, go through the open gate.
Open Mouth           He speaks up when, his mouth's open.
Orange Dumper        It's not a high jumper, that big orange dumper.
Orange Eye           Fly high, orange eye.
Orange Feet          Walk on wet peat, with orange feet.
Orange Flowers       Feel the strange powers, of these orange flowers.
Orange Melon         Not a free range lemon, just an orange melon.
Pink Beak            You cannot speak, with a pink beak.
Pink Feet            Would you like to meet and greet, a person with two pink feet?
Pink Flower          Feel the power, in a pink flower.
Pink Nose            Smell a red rose, with a pink nose.
Pink Pigs            Pink pigs, like figs.
Pink Toe             Wherever you go, you'll have that pink toe.
Pink Towel           He slid and fell foul, on that pink towel.
Plastic Clog         You should never jog, with a plastic clog.
Plastic Fan          A fantastic van, needs a plastic fan.
Plastic Flippers     Fantastic swimmers, use plastic flippers.
Plastic Jug          Fill a fantastic mug, from a large plastic jug.
Plastic Peg          I think they're fantastic, these pegs made of plastic.
Quiet Beach          I'd like to eat a peach, standing on a quiet beach
Quiet Road           It could be towed, down this quiet road.
Red Boat             What could you float, in a red boat?
Red Chair            Look ahead, there, it's a red chair.
Red Door             If you want to see more, please go through the red door.
Red Sand             Then he said hand, me that red sand.
Red Wall             You must not fall, off a red wall.
Round Coin           I enjoy the sound, of coins that are round
Round Cup            Please fill up, my round cup
Round Eyes           What a nice surprise, a pair of round eyes.
Round Planet         When you're standing on the ground, our planet doesn't seem so round.
Round Wheel          I like the feel, of a round wheel.
Round Yolk           I think a thousand folk, like to eat a round yolk.
Sandy Beach          You could eat a handy peach, standing on this sandy beach.
Sandy Valley         There is no handy alley, in this long sandy valley.
Scaly Leg            Please try not to beg, for a scaly leg.
Scaly Lizard         Can you see daily, lizards so scaly?
Scaly Toes           The highs and lows, of scaly toes.
Sharp Claws          I always pause, for long sharp claws.
Sharp Horns          Sharp as thorns, these long horns.
Sharp Knives         You cannot hope to build a harp, using knives that are not sharp.
Shiny Bin            My tiny sin, a shiny bin.
Shiny Building       Enjoy a brief fling, in a shiny building.
Shiny Car            You can be a star, in this shiny car.
Shiny Forks          Even most storks, like shiny forks.
Shiny Tap            You will need a tiny map, to locate this shiny tap.
Shiny Tins           Shiny tins, are not bins.
Short Penguin        What is that - did you win? A short fat king penguin?
Six Bears            To fix the stairs, you need six bears.
Six Flowers          Enjoy each of the hours, with one of six flowers.
Six Spoons           You can play many tunes, using just these six spoons.
Six Sweets           When he completes, give him six sweets.
Sleepy Baby          I think that may be, a sleepy baby.
Sleepy Seal          I think that this sleepy seal, has just eaten a big meal.
Small Bear           Please do not stare, at that small bear.
Small Chair          Sit if you dare, on that small chair.
Small Frog           Would you sit on a log, with a very green frog?
Small Mouse          Unless you live in a tall house, you will never need a small mouse.
Small Plant          Surely you can't, pick that small plant.
Snowy Mountain       Its windy and blowy, on mountains so snowy.
Snowy Walk           I think we should talk, about this snowy walk.
Soft Jacket          This jacket stays soft, by keeping its loft.
Soft Nose            I think this photo shows, I've got a soft nose.
Soft Towel           Even an ancient owl, needs a soft towel.
Square Box           Can you put socks, in a square box?
Square Scales        You cannot weigh whales, on pairs of square scales.
Square Towers        All the ancient powers, liked to have square towers.
Steel Crane          Even in the snow and rain, you can use a steel crane.
Steel Knives         Chop up chives, with steel knives.
Steel Pylon          The wires are carried on, a mighty steel pylon.
Steep Cliff          About V. Diff, that high steep cliff.
Steep Climb          It will take a long time, to complete this steep climb.
Steep Street         Please watch your feet, on this steep street.
Stone Arch           I want to march, through that stone arch.
Stone Bridge         It's like being in a fridge, underneath that old stone bridge.
Stone Pyramid        I went and slipped and slid, down this old stone pyramid.
Stone Wall           It is easy to fall, from a long stone wall.
Straight Oars        You can clean lots of floors, with a pair of straight oars.
Straight Road        It could be towed, down this straight road.
Sunny Day            I often say in a funny way, that I should pray for a sunny day.
Tall Building        I like to shout "ding", by this tall building.
Tall Crane           It must take a great brain, to design a tall crane.
Tall Palm            You can stay cool and calm, under this nice tall palm.
Tall Penguins        You will probably fall, over penguins so tall.
Tall Pylon           Made from nylon, this tall pylon?
Tall Statue          What would you do, with that tall statue?
Tall Tree            You cannot see me, behind this tall tree.
Tasty Cake           I'd like to bake, a tasty cake.
Tasty Sweets         If you like treats, eat tasty sweets.
Thin Legs            Every-one begs, for long thin legs.
Thin Nose            Do you suppose, that's a thin nose?
Thin Tree            You cannot see, such a thin tree.
Three Arches         He often marches, through these three arches.
Three Cats           You need three mats, to seat three cats.
Three Flowers        Tall as towers, these three flowers.
Three Penguins       First prize wins, three penguins.
Three Pigs           These three pigs, like green figs.
Three Toes           I am looking for the nose, that belongs to these three toes.
Tiny Cars            Do movie stars, like tiny cars?
Tiny Toes            Nobody really knows, who owns these tiny toes.
Two Boots            To climb up shutes, wear two boots.
Two Elephants        For really really clever stunts, you need at least two elephants.
Two Oars             I open doors, with my two oars.
Two Tails            They can work like sails, these two useful tails.
Two Towers           There are no showers, in these two towers.
Webbed Feet          Webbed feet, are so neat.
Wet Cave             Its hard to wave, in a wet cave.
Wet Dog              If a dog's wet, then it's a pet.
Wet Ground           Let's look around, for some wet ground.
Wet Plant            From your aunt, a wet plant.
Wet Tunnel           See the water funnel, through the long wet tunnel.
White Bridge         Its the colour of my fridge, that beautiful white bridge.
White Chimneys       Here one sees, white chimneys.
White Cliff          Climbing up this white cliff, my knees got very stiff.
White Fan            I think you can, have a white fan.
White Jug            Please fill your mug, from that white jug.
White Mane           There's that brown horse again, that one with the white mane.
White Seal           Enjoyed your meal, sleepy white seal?
White Sheep          Do they count in their sleep, these wet and white sheep?
White Swan           Swim on, white swan.
White Truck          Do not put muck, on my white truck!
Wide Dam             See the white water slide, over the dam that is wide.
Wide Horns           No one scorns, those wide horns.
Wide Mouth           Ride south, wide mouth.
Wide Road            It could be towed, on a wide road.
Wide Roof            I often like to slip and slide, down a roof that is really wide.
Wooden Clogs         He often jogs, in wooden clogs.
Wooden Gate          If you are going to be late, would you please shut the wooden gate.
Wooden Stool         You really have to be a fool, to burn a useful wooden stool.
Wooden Wagon         Can you move a golden dragon, in an old wooden wagon?
Wooly Sheep          When do they sleep, these wooly sheep?
Yellow Beak          I'm going to speak, with my yellow beak.
Yellow Cars          Most movie stars, like yellow cars.
Yellow Clogs         For people not dogs, we make yellow clogs.
Yellow Fire          You'll have your desire, near that yellow fire.
Yellow Flowers       On top of those towers, are three yellow flowers.
Yellow Moon          Not seen in June, that yellow moon.
Yellow Yolk          Most of my folk, like yellow yolk.
Young Baby           There is no maybe, it's a young baby.
Young Cats           To chase rats over slats, you will need some young cats.
Young Dog            Do you walk or do you jog, when you're training a young dog?
END
   }

  sub Load()
   {my $h = bless {};
    my $w = words();
    for(@$w) {
      my $p = $_->{photo};
      my $n = (my $a = $_->{adjective})." ".$p->{photo};
      $h->{$n} = {name=>$n, title=>$n, questionTitle=>$a, sound=>$a, response=>$n, photo=>$p->{Photo}, order=>$n, relation=>$_->{relation}, caption=>$_->{caption}};
     }

    $h
   }

  sub genJava($)
   {my ($app) = (@_);
    Application::genJavaExtended($app);
   }

  sub Description() {<< 'END'}
Adjectives
END
 }

#-------------------------------------------------------------------------------
# 3 Letter Words
#-------------------------------------------------------------------------------

 {package A3LetterWords;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Ant");
    $h->add("Ape");
    $h->add("Arm");
    $h->add("Bag");
    $h->add("Bat");
    $h->add("Bay");
    $h->add("Bed");
    $h->add("Bee");
    $h->add("Bin");
    $h->add("Bog");
    $h->add("Bow");
    $h->add("Box");
    $h->add("Boy");
    $h->add("Bug");
    $h->add("Bun");
    $h->add("Bus");
    $h->add("Can");
    $h->add("Cap");
    $h->add("Car");
    $h->add("Cat");
    $h->add("Cow");
    $h->add("Cup");
    $h->add("Dam");
    $h->add("Dog");
    $h->add("Ear");
    $h->add("Egg");
    $h->add("Emu");
    $h->add("Eye");
    $h->add("Fan");
    $h->add("Fin");
    $h->add("Fox");
    $h->add("Hat");
    $h->add("Hoe");
    $h->add("Ice");
    $h->add("Jar");
    $h->add("Jug");
    $h->add("Key");
    $h->add("Leg");
    $h->add("Lid");
    $h->add("Map");
    $h->add("Men");
    $h->add("Mug");
    $h->add("Oar");
    $h->add("Owl");
    $h->add("Pan");
    $h->add("Peg");
    $h->add("Pen");
    $h->add("Pig");
    $h->add("Pin");
    $h->add("Rug");
    $h->add("Sea");
    $h->add("Sow");
    $h->add("Sun");
    $h->add("Tap");
    $h->add("Toe");
    $h->add("Van");
    $h->add("Wok");
    $h->add("Yak");
    $h->add("Zip");
    $h
   }
 }

#-------------------------------------------------------------------------------
# 4 Letter Words
#-------------------------------------------------------------------------------

 {package A4LetterWords;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Baby");
    $h->add("Ball");
    $h->add("Bath");
    $h->add("Bear");
    $h->add("Bike");
    $h->add("Bird");
    $h->add("Boat");
    $h->add("Book");
    $h->add("Bowl");
    $h->add("Bulb");
    $h->add("Bull");
    $h->add("Cake");
    $h->add("Calf");
    $h->add("Card");
    $h->add("Cart");
    $h->add("Cave");
    $h->add("City");
    $h->add("Clog");
    $h->add("Coin");
    $h->add("Comb");
    $h->add("Dish");
    $h->add("Doll");
    $h->add("Door");
    $h->add("Dove");
    $h->add("Duck");
    $h->add("Fish");
    $h->add("Flag");
    $h->add("Foal");
    $h->add("Foot");
    $h->add("Fork");
    $h->add("Frog");
    $h->add("Gate");
    $h->add("Girl");
    $h->add("Goal");
    $h->add("Goat");
    $h->add("Gull");
    $h->add("Half");
    $h->add("Hand");
    $h->add("Head");
    $h->add("Hook");
    $h->add("Hose");
    $h->add("Iris");
    $h->add("Iron");
    $h->add("Jeep");
    $h->add("Lake");
    $h->add("Lamb");
    $h->add("Lamp");
    $h->add("Leaf");
    $h->add("Lily");
    $h->add("Lion");
    $h->add("Mini");
    $h->add("Moon");
    $h->add("Moth");
    $h->add("Nail");
    $h->add("Nest");
    $h->add("Note");
    $h->add("Oven");
    $h->add("Oxen");
    $h->add("Palm");
    $h->add("Path");
    $h->add("Plug");
    $h->add("Pool");
    $h->add("Port");
    $h->add("Pump");
    $h->add("Ramp");
    $h->add("Road");
    $h->add("Rock");
    $h->add("Rope");
    $h->add("Rose");
    $h->add("Sail");
    $h->add("Sand");
    $h->add("Seal");
    $h->add("Shed");
    $h->add("Ship");
    $h->add("Shoe");
    $h->add("Skis");
    $h->add("Snow");
    $h->add("Swan");
    $h->add("Tent");
    $h->add("Toad");
    $h->add("Town");
    $h->add("Tram");
    $h->add("Tray");
    $h->add("Tree");
    $h->add("Vase");
    $h->add("Vent");
    $h->add("Wall");
    $h->add("Wave");
    $h->add("Yarn");
    $h->add("Yolk");
    $h
   }
 }

#-------------------------------------------------------------------------------
# 5 Letter Words
#-------------------------------------------------------------------------------

 {package A5LetterWords;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Apple");
    $h->add("Arrow");
    $h->add("Basin");
    $h->add("Beach");
    $h->add("Bread");
    $h->add("Brush");
    $h->add("Camel");
    $h->add("Canal");
    $h->add("Canoe");
    $h->add("Chart");
    $h->add("Chick");
    $h->add("Cliff");
    $h->add("Clock");
    $h->add("Cloth");
    $h->add("Cloud");
    $h->add("Crane");
    $h->add("Cross");
    $h->add("Daisy");
    $h->add("Eagle");
    $h->add("Earth");
    $h->add("Ferry");
    $h->add("Floor");
    $h->add("Glass");
    $h->add("Glove");
    $h->add("Goose");
    $h->add("Grape");
    $h->add("Hippo");
    $h->add("Horse");
    $h->add("Hotel");
    $h->add("House");
    $h->add("Hyena");
    $h->add("Kayak");
    $h->add("Knife");
    $h->add("Koala");
    $h->add("Ladle");
    $h->add("Light");
    $h->add("Lilac");
    $h->add("Llama");
    $h->add("Lorry");
    $h->add("Lupin");
    $h->add("Mouse");
    $h->add("Panda");
    $h->add("Pansy");
    $h->add("Plane");
    $h->add("Plate");
    $h->add("Poppy");
    $h->add("Raven");
    $h->add("Rhino");
    $h->add("Ridge");
    $h->add("River");
    $h->add("Robin");
    $h->add("Sheep");
    $h->add("Snake");
    $h->add("Spoon");
    $h->add("Stool");
    $h->add("Stork");
    $h->add("Table");
    $h->add("Teddy");
    $h->add("Tiger");
    $h->add("Towel");
    $h->add("Train");
    $h->add("Truck");
    $h->add("Wagon");
    $h->add("Whale");
    $h->add("Wheel");
    $h->add("Yacht");
    $h->add("Zebra");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Alphabet
#-------------------------------------------------------------------------------

 {package Alphabet;
  use base qw(AlphabetApplication);

  my %h;
  sub add($$$$$$)
   {my ($group, $S40, $free, $colour, $name, $prefix) = @_;
    my  $p = substr($name, 0, $prefix);
    $h{$name} = {group=>$group, colour=>$colour, name=>$name, prefix=>$prefix, order=>$name};
   }

  sub Load()
   {add( 1, 1, 0, "f60603", "Airplane", 1);
    add( 1, 1, 0, "e72693", "Bus", 1);
    add( 1, 1, 0, "126bff", "Car", 1);
    add( 2, 1, 0, "5e80ff", "Door", 1);
    add( 2, 1, 0, "ae1c09", "Egg", 1);
    add( 2, 1, 0, "ed77d5", "Flag", 1);
    add( 3, 1, 0, "0581ff", "Grape", 1);
    add( 3, 1, 0, "b212e7", "Hat", 1);
    add( 3, 1, 0, "ff2f7d", "Ice", 1);
    add( 4, 1, 0, "53e21e", "Jar", 1);
    add( 4, 1, 0, "ff1ba1", "Key", 1);
    add( 4, 1, 0, "65c617", "Lamp", 1);
    add( 5, 1, 0, "b50015", "Map", 1);
    add( 5, 1, 0, "ff7d00", "Nest", 1);
    add( 5, 1, 0, "0ae5ff", "Oar", 1);
    add( 6, 1, 0, "ff57fa", "Plate", 1);
    add( 6, 1, 0, "239b0f", "Quilt", 2);
    add( 6, 1, 0, "83d900", "Rose", 1);
    add( 7, 1, 0, "ff2929", "Sea", 1);
    add( 7, 1, 0, "ffa53a", "Train", 1);
    add( 7, 1, 1, "00e4ff", "Umbrella", 1);
    add( 8, 1, 0, "e010bb", "Van", 1);
    add( 8, 1, 0, "56b3fb", "Wheel", 1);
    add( 8, 1, 1, "15cc11", "X-ray", 1);
    add( 9, 1, 0, "d9091d", "Yolk", 1);
    add( 9, 1, 1, "ffda00", "Zip", 1);
    add(10, 0, 0, "f7c003", "Apple", 1);
    add(10, 0, 0, "91d50f", "Arm", 1);
    add(10, 0, 0, "e5409d", "Baby", 1);
    add(10, 0, 0, "f9a726", "Boat", 1);
    add(10, 0, 0, "ffa800", "Bridge", 1);
    add(10, 0, 0, "ff7725", "Cannon", 1);
    add(10, 0, 0, "db00d8", "Church",2);
    add(10, 0, 0, "f7a803", "Clouds", 1);
    add(12, 0, 0, "ff0000", "Daisy", 1);
    add(12, 0, 0, "c96141", "Dish", 1);
    add(13, 0, 0, "6b230a", "Ear", 1);
    add(13, 0, 0, "ffd303", "Eight", 1);
    add(13, 0, 0, "aae803", "Flower", 1);
    add(13, 0, 0, "ff06c3", "Fork", 1);
    add(14, 0, 0, "f4b046", "Gate", 1);
    add(14, 0, 0, "19e803", "Glass", 1);
    add(14, 0, 0, "ff4d35", "Glasses", 1);
    add(14, 0, 0, "e712c1", "Hand", 1);
    add(14, 0, 0, "81dc00", "House", 1);
    add(14, 0, 0, "ed1064", "Iris", 1);
    add(14, 0, 0, "fff200", "Island", 1);
    add(15, 0, 0, "ba1582", "Jeep", 1);
    add(15, 0, 0, "17ead4", "Jug", 1);
    add(15, 0, 0, "ffcf2a", "Kayak", 1);
    add(15, 0, 0, "f62f88", "Kettle", 1);
    add(15, 0, 0, "00e31b", "Leaf", 1);
    add(15, 0, 0, "ff0090", "Lily", 1);
    add(16, 0, 0, "ef0006", "Moon", 1);
    add(16, 0, 0, "ec00cd", "Mosque", 1);
    add(16, 0, 0, "ff0500", "Mountain", 1);
    add(16, 0, 0, "ff4d00", "Mushroom", 1);
    add(16, 0, 0, "0068f6", "Nail", 1);
    add(16, 0, 0, "1298f9", "Needle", 1);
    add(16, 0, 0, "c81717", "Note", 1);
    add(16, 0, 0, "9cb10e", "Orange", 1);
    add(17, 0, 0, "ffe500", "Palm", 1);
    add(17, 0, 0, "cf3e21", "Pansy", 1);
    add(17, 0, 0, "7de162", "Quarter", 2);
    add(17, 0, 0, "c64100", "Road", 1);
    add(17, 0, 0, "ff00ae", "Rope", 1);
    add(17, 0, 0, "c41553", "Sail", 1);
    add(17, 0, 1, "b53a4f", "Snowman", 1);
    add(17, 0, 0, "ff0090", "Sun", 1);
    add(18, 0, 0, "e25f27", "Teddy", 1);
    add(18, 0, 1, "d20c4a", "Tent", 1);
    add(18, 0, 0, "ff7c00", "Tree", 1);
    add(18, 0, 1, "d22a71", "Vase", 1);
    add(18, 0, 0, "d300dc", "Violet", 1);
    add(18, 0, 0, "9e34ef", "Wall", 1);
    add(18, 0, 1, "ffd800", "Windmill", 1);
    add(19, 0, 1, "e5a918", "Yacht", 1);
    add(19, 0, 0, "a6c34c", "Yarn", 1);
    add(19, 0, 0, "00fffc", "Zero", 1);
    add(19, 0, 0, "ff4d16", "Zigzag", 1);
    return bless \%h;
   }
 }
#-------------------------------------------------------------------------------
# AlpineFlowers
#-------------------------------------------------------------------------------

 {package AlpineFlowers;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Aconite-leaved Buttercup",      title=>"Aconite-leaved Buttercup",      photo=>"Aconite-leaved Buttercup",      order=>"Aconite-leaved Buttercup", );
    $h->addX2(  name=>"Alpenrose",                     title=>"Alpenrose",                     photo=>"Alpenrose",                     order=>"Alpenrose", );
    $h->addX2(  name=>"Alpine Aster",                  title=>"Alpine Aster",                  photo=>"Alpine Aster",                  order=>"Alpine Aster", );
    $h->addX2(  name=>"Alpine Avens",                  title=>"Alpine Avens",                  photo=>"Alpine Avens",                  order=>"Alpine Avens", );
    $h->addX2(  name=>"Alpine Bartsia",                title=>"Alpine Bartsia",                photo=>"Alpine Bartsia",                order=>"Alpine Bartsia", );
    $h->addX2(  name=>"Alpine Bistort",                title=>"Alpine Bistort",                photo=>"Alpine Bistort",                order=>"Alpine Bistort", );
    $h->addX2(  name=>"Alpine Buttercup",              title=>"Alpine Buttercup",              photo=>"Alpine Buttercup",              order=>"Alpine Buttercup", );
    $h->addX2(  name=>"Alpine Butterwort",             title=>"Alpine Butterwort",             photo=>"Alpine Butterwort",             order=>"Alpine Butterwort", );
    $h->addX2(  name=>"Alpine Calamint",               title=>"Alpine Calamint",               photo=>"Alpine Calamint",               order=>"Alpine Calamint", );
    $h->addX2(  name=>"Alpine Catchfly",               title=>"Alpine Catchfly",               photo=>"Alpine Catchfly",               order=>"Alpine Catchfly", );
    $h->addX2(  name=>"Alpine Clematis",               title=>"Alpine Clematis",               photo=>"Alpine Clematis",               order=>"Alpine Clematis", );
    $h->addX2(  name=>"Alpine Clover",                 title=>"Alpine Clover",                 photo=>"Alpine Clover",                 order=>"Alpine Clover", );
    $h->addX2(  name=>"Alpine Fleabane",               title=>"Alpine Fleabane",               photo=>"Alpine Fleabane",               order=>"Alpine Fleabane", );
    $h->addX2(  name=>"Alpine Forget-Me-Not",          title=>"Alpine Forget-Me-Not",          photo=>"Alpine Forget-Me-Not",          order=>"Alpine Forget-Me-Not", );
    $h->addX2(  name=>"Alpine Milk-vetch",             title=>"Alpine Milk-vetch",             photo=>"Alpine Milk-vetch",             order=>"Alpine Milk-vetch", );
    $h->addX2(  name=>"Alpine Mouse-Ear",              title=>"Alpine Mouse-Ear",              photo=>"Alpine Mouse-Ear",              order=>"Alpine Mouse-Ear", );
    $h->addX2(  name=>"Alpine Pasque Flower",          title=>"Alpine Pasque Flower",          photo=>"Alpine Pasque Flower",          order=>"Alpine Pasque Flower", );
    $h->addX2(  name=>"Alpine Pennycress",             title=>"Alpine Pennycress",             photo=>"Alpine Pennycress",             order=>"Alpine Pennycress", );
    $h->addX2(  name=>"Alpine Rock- Jasmine",          title=>"Alpine Rock- Jasmine",          photo=>"Alpine Rock- Jasmine",          order=>"Alpine Rock- Jasmine", );
    $h->addX2(  name=>"Alpine Rose",                   title=>"Alpine Rose",                   photo=>"Alpine Rose",                   order=>"Alpine Rose", );
    $h->addX2(  name=>"Alpine Sainfoin",               title=>"Alpine Sainfoin",               photo=>"Alpine Sainfoin",               order=>"Alpine Sainfoin", );
    $h->addX2(  name=>"Alpine Sneezewort",             title=>"Alpine Sneezewort",             photo=>"Alpine Sneezewort",             order=>"Alpine Sneezewort", );
    $h->addX2(  name=>"Alpine Snowbell",               title=>"Alpine Snowbell",               photo=>"Alpine Snowbell",               order=>"Alpine Snowbell", );
    $h->addX2(  name=>"Alpine St. John's Wort",        title=>"Alpine St. John's Wort",        photo=>"Alpine St. John's Wort",        order=>"Alpine St. John's Wort", );
    $h->addX2(  name=>"Alpine Toadflax",               title=>"Alpine Toadflax",               photo=>"Alpine Toadflax",               order=>"Alpine Toadflax", );
    $h->addX2(  name=>"Arnica",                        title=>"Arnica",                        photo=>"Arnica",                        order=>"Arnica", );
    $h->addX2(  name=>"Ascending Lousewort",           title=>"Ascending Lousewort",           photo=>"Ascending Lousewort",           order=>"Ascending Lousewort", );
    $h->addX2(  name=>"Barberry",                      title=>"Barberry",                      photo=>"Barberry",                      order=>"Barberry", );
    $h->addX2(  name=>"Beaked Lousewort",              title=>"Beaked Lousewort",              photo=>"Beaked Lousewort",              order=>"Beaked Lousewort", );
    $h->addX2(  name=>"Bear's Ear",                    title=>"Bear's Ear",                    photo=>"Bear's Ear",                    order=>"Bear's Ear", );
    $h->addX2(  name=>"Bearberry",                     title=>"Bearberry",                     photo=>"Bearberry",                     order=>"Bearberry", );
    $h->addX2(  name=>"Bearded Bellflower",            title=>"Bearded Bellflower",            photo=>"Bearded Bellflower",            order=>"Bearded Bellflower", );
    $h->addX2(  name=>"Bilberry",                      title=>"Bilberry",                      photo=>"Bilberry",                      order=>"Bilberry", );
    $h->addX2(  name=>"Bird's-eye Primrose",           title=>"Bird's-eye Primrose",           photo=>"Bird's-eye Primrose",           order=>"Bird's-eye Primrose", );
    $h->addX2(  name=>"Bistort",                       title=>"Bistort",                       photo=>"Bistort",                       order=>"Bistort", );
    $h->addX2(  name=>"Black Vanilla Orchid",          title=>"Black Vanilla Orchid",          photo=>"Black Vanilla Orchid",          order=>"Black Vanilla Orchid", );
    $h->addX2(  name=>"Bladder Campion",               title=>"Bladder Campion",               photo=>"Bladder Campion",               order=>"Bladder Campion", );
    $h->addX2(  name=>"Bladder Gentian",               title=>"Bladder Gentian",               photo=>"Bladder Gentian",               order=>"Bladder Gentian", );
    $h->addX2(  name=>"Blue Saxifrage",                title=>"Blue Saxifrage",                photo=>"Blue Saxifrage",                order=>"Blue Saxifrage", );
    $h->addX2(  name=>"Blue-Berried Honeysuckle",      title=>"Blue-Berried Honeysuckle",      photo=>"Blue-Berried Honeysuckle",      order=>"Blue-Berried Honeysuckle", );
    $h->addX2(  name=>"Bluish Paederota",              title=>"Bluish Paederota",              photo=>"Bluish Paederota",              order=>"Bluish Paederota", );
    $h->addX2(  name=>"Brooklime",                     title=>"Brooklime",                     photo=>"Brooklime",                     order=>"Brooklime", );
    $h->addX2(  name=>"Brown Clover",                  title=>"Brown Clover",                  photo=>"Brown Clover",                  order=>"Brown Clover", );
    $h->addX2(  name=>"Burnt Orchid",                  title=>"Burnt Orchid",                  photo=>"Burnt Orchid",                  order=>"Burnt Orchid", );
    $h->addX2(  name=>"Carline-leaved Thistle",        title=>"Carline-leaved Thistle",        photo=>"Carline-leaved Thistle",        order=>"Carline-leaved Thistle", );
    $h->addX2(  name=>"Carpathian Catsfoot",           title=>"Carpathian Catsfoot",           photo=>"Carpathian Catsfoot",           order=>"Carpathian Catsfoot", );
    $h->addX2(  name=>"Catsfoot",                      title=>"Catsfoot",                      photo=>"Catsfoot",                      order=>"Catsfoot", );
    $h->addX2(  name=>"Chamois Cress",                 title=>"Chamois Cress",                 photo=>"Chamois Cress",                 order=>"Chamois Cress", );
    $h->addX2(  name=>"Ciliate Rock Jasmine",          title=>"Ciliate Rock Jasmine",          photo=>"Ciliate Rock Jasmine",          order=>"Ciliate Rock Jasmine", );
    $h->addX2(  name=>"Coltsfoot",                     title=>"Coltsfoot",                     photo=>"Coltsfoot",                     order=>"Coltsfoot", );
    $h->addX2(  name=>"Common Butterwort",             title=>"Common Butterwort",             photo=>"Common Butterwort",             order=>"Common Butterwort", );
    $h->addX2(  name=>"Common Cow-wheat",              title=>"Common Cow-wheat",              photo=>"Common Cow-wheat",              order=>"Common Cow-wheat", );
    $h->addX2(  name=>"Common Eyebright",              title=>"Common Eyebright",              photo=>"Common Eyebright",              order=>"Common Eyebright", );
    $h->addX2(  name=>"Common Kidney Vetch",           title=>"Common Kidney Vetch",           photo=>"Common Kidney Vetch",           order=>"Common Kidney Vetch", );
    $h->addX2(  name=>"Common Rockrose",               title=>"Common Rockrose",               photo=>"Common Rockrose",               order=>"Common Rockrose", );
    $h->addX2(  name=>"Cowberry",                      title=>"Cowberry",                      photo=>"Cowberry",                      order=>"Cowberry", );
    $h->addX2(  name=>"Creeping Avens",                title=>"Creeping Avens",                photo=>"Creeping Avens",                order=>"Creeping Avens", );
    $h->addX2(  name=>"Creeping Azalea",               title=>"Creeping Azalea",               photo=>"Creeping Azalea",               order=>"Creeping Azalea", );
    $h->addX2(  name=>"Dandelion",                     title=>"Dandelion",                     photo=>"Dandelion",                     order=>"Dandelion", );
    $h->addX2(  name=>"Dark Columbine",                title=>"Dark Columbine",                photo=>"Dark Columbine",                order=>"Dark Columbine", );
    $h->addX2(  name=>"Dark Stonecrop",                title=>"Dark Stonecrop",                photo=>"Dark Stonecrop",                order=>"Dark Stonecrop", );
    $h->addX2(  name=>"Dragonmouth",                   title=>"Dragonmouth",                   photo=>"Dragonmouth",                   order=>"Dragonmouth", );
    $h->addX2(  name=>"Dusky Cranesbill",              title=>"Dusky Cranesbill",              photo=>"Dusky Cranesbill",              order=>"Dusky Cranesbill", );
    $h->addX2(  name=>"Dwarf Alpenrose",               title=>"Dwarf Alpenrose",               photo=>"Dwarf Alpenrose",               order=>"Dwarf Alpenrose", );
    $h->addX2(  name=>"Dwarf Valerian",                title=>"Dwarf Valerian",                photo=>"Dwarf Valerian",                order=>"Dwarf Valerian", );
    $h->addX2(  name=>"Edelweiss",                     title=>"Edelweiss",                     photo=>"Edelweiss",                     order=>"Edelweiss", );
    $h->addX2(  name=>"Fairy's Thimble",               title=>"Fairy's Thimble",               photo=>"Fairy's Thimble",               order=>"Fairy's Thimble", );
    $h->addX2(  name=>"Flesh-Pink Lousewort",          title=>"Flesh-Pink Lousewort",          photo=>"Flesh-Pink Lousewort",          order=>"Flesh-Pink Lousewort", );
    $h->addX2(  name=>"Fragrant Orchid",               title=>"Fragrant Orchid",               photo=>"Fragrant Orchid",               order=>"Fragrant Orchid", );
    $h->addX2(  name=>"Frog Orchid",                   title=>"Frog Orchid",                   photo=>"Frog Orchid",                   order=>"Frog Orchid", );
    $h->addX2(  name=>"Garland Flower",                title=>"Garland Flower",                photo=>"Garland Flower",                order=>"Garland Flower", );
    $h->addX2(  name=>"German Gentian",                title=>"German Gentian",                photo=>"German Gentian",                order=>"German Gentian", );
    $h->addX2(  name=>"Germander Speedwell",           title=>"Germander Speedwell",           photo=>"Germander Speedwell",           order=>"Germander Speedwell", );
    $h->addX2(  name=>"Giant Catsear",                 title=>"Giant Catsear",                 photo=>"Giant Catsear",                 order=>"Giant Catsear", );
    $h->addX2(  name=>"Glacier Crowfoot",              title=>"Glacier Crowfoot",              photo=>"Glacier Crowfoot",              order=>"Glacier Crowfoot", );
    $h->addX2(  name=>"Globeflower",                   title=>"Globeflower",                   photo=>"Globeflower",                   order=>"Globeflower", );
    $h->addX2(  name=>"Goatsbeard",                    title=>"Goatsbeard",                    photo=>"Goatsbeard",                    order=>"Goatsbeard", );
    $h->addX2(  name=>"Golden Cinquefoil",             title=>"Golden Cinquefoil",             photo=>"Golden Cinquefoil",             order=>"Golden Cinquefoil", );
    $h->addX2(  name=>"Golden Hawk's Beard",           title=>"Golden Hawk's Beard",           photo=>"Golden Hawk's Beard",           order=>"Golden Hawk's Beard", );
    $h->addX2(  name=>"Goldenrod",                     title=>"Goldenrod",                     photo=>"Goldenrod",                     order=>"Goldenrod", );
    $h->addX2(  name=>"Grass of Parnassus",            title=>"Grass of Parnassus",            photo=>"Grass of Parnassus",            order=>"Grass of Parnassus", );
    $h->addX2(  name=>"Grey Alpine Groundsel",         title=>"Grey Alpine Groundsel",         photo=>"Grey Alpine Groundsel",         order=>"Grey Alpine Groundsel", );
    $h->addX2(  name=>"Hairy Alpenrose",               title=>"Hairy Alpenrose",               photo=>"Hairy Alpenrose",               order=>"Hairy Alpenrose", );
    $h->addX2(  name=>"Harebell",                      title=>"Harebell",                      photo=>"Harebell",                      order=>"Harebell", );
    $h->addX2(  name=>"Heart-Leaved Leopardsbane",     title=>"Heart-Leaved Leopardsbane",     photo=>"Heart-Leaved Leopardsbane",     order=>"Heart-Leaved Leopardsbane", );
    $h->addX2(  name=>"Hoary Plantain",                title=>"Hoary Plantain",                photo=>"Hoary Plantain",                order=>"Hoary Plantain", );
    $h->addX2(  name=>"Horseshoe Vetch",               title=>"Horseshoe Vetch",               photo=>"Horseshoe Vetch",               order=>"Horseshoe Vetch", );
    $h->addX2(  name=>"Hybrid Buttercup",              title=>"Hybrid Buttercup",              photo=>"Hybrid Buttercup",              order=>"Hybrid Buttercup", );
    $h->addX2(  name=>"Jacquin's Rush",                title=>"Jacquin's Rush",                photo=>"Jacquin's Rush",                order=>"Jacquin's Rush", );
    $h->addX2(  name=>"King of the Alps",              title=>"King of the Alps",              photo=>"King of the Alps",              order=>"King of the Alps", );
    $h->addX2(  name=>"Lady's Slipper Orchid",         title=>"Lady's Slipper Orchid",         photo=>"Lady's Slipper Orchid",         order=>"Lady's Slipper Orchid", );
    $h->addX2(  name=>"Large Flowered Leopardsbane",   title=>"Large Flowered Leopardsbane",   photo=>"Large Flowered Leopardsbane",   order=>"Large Flowered Leopardsbane", );
    $h->addX2(  name=>"Large Pink",                    title=>"Large Pink",                    photo=>"Large Pink",                    order=>"Large Pink", );
    $h->addX2(  name=>"Least Primrose",                title=>"Least Primrose",                photo=>"Least Primrose",                order=>"Least Primrose", );
    $h->addX2(  name=>"Least Snowbell",                title=>"Least Snowbell",                photo=>"Least Snowbell",                order=>"Least Snowbell", );
    $h->addX2(  name=>"Lesser Butterfly Orchid",       title=>"Lesser Butterfly Orchid",       photo=>"Lesser Butterfly Orchid",       order=>"Lesser Butterfly Orchid", );
    $h->addX2(  name=>"Livelong Saxifrage",            title=>"Livelong Saxifrage",            photo=>"Livelong Saxifrage",            order=>"Livelong Saxifrage", );
    $h->addX2(  name=>"Marsh Marigold",                title=>"Marsh Marigold",                photo=>"Marsh Marigold",                order=>"Marsh Marigold", );
    $h->addX2(  name=>"Martagon Lily",                 title=>"Martagon Lily",                 photo=>"Martagon Lily",                 order=>"Martagon Lily", );
    $h->addX2(  name=>"Matted Globularia",             title=>"Matted Globularia",             photo=>"Matted Globularia",             order=>"Matted Globularia", );
    $h->addX2(  name=>"May Lily",                      title=>"May Lily",                      photo=>"May Lily",                      order=>"May Lily", );
    $h->addX2(  name=>"Meadow Clary",                  title=>"Meadow Clary",                  photo=>"Meadow Clary",                  order=>"Meadow Clary", );
    $h->addX2(  name=>"Monte Baldo Anemone",           title=>"Monte Baldo Anemone",           photo=>"Monte Baldo Anemone",           order=>"Monte Baldo Anemone", );
    $h->addX2(  name=>"Moon Daisy, Alpine",            title=>"Moon Daisy, Alpine",            photo=>"Moon Daisy, Alpine",            order=>"Moon Daisy, Alpine", );
    $h->addX2(  name=>"Moss Campion",                  title=>"Moss Campion",                  photo=>"Moss Campion",                  order=>"Moss Campion", );
    $h->addX2(  name=>"Mossy Cyphel",                  title=>"Mossy Cyphel",                  photo=>"Mossy Cyphel",                  order=>"Mossy Cyphel", );
    $h->addX2(  name=>"Mountain Avens",                title=>"Mountain Avens",                photo=>"Mountain Avens",                order=>"Mountain Avens", );
    $h->addX2(  name=>"Mountain Buttercup",            title=>"Mountain Buttercup",            photo=>"Mountain Buttercup",            order=>"Mountain Buttercup", );
    $h->addX2(  name=>"Mountain Clover",               title=>"Mountain Clover",               photo=>"Mountain Clover",               order=>"Mountain Clover", );
    $h->addX2(  name=>"Mountain Cornflower",           title=>"Mountain Cornflower",           photo=>"Mountain Cornflower",           order=>"Mountain Cornflower", );
    $h->addX2(  name=>"Mountain Germander",            title=>"Mountain Germander",            photo=>"Mountain Germander",            order=>"Mountain Germander", );
    $h->addX2(  name=>"Mountain Milk-vetch",           title=>"Mountain Milk-vetch",           photo=>"Mountain Milk-vetch",           order=>"Mountain Milk-vetch", );
    $h->addX2(  name=>"Mountain Milkwort",             title=>"Mountain Milkwort",             photo=>"Mountain Milkwort",             order=>"Mountain Milkwort", );
    $h->addX2(  name=>"Mountain Sainfoin",             title=>"Mountain Sainfoin",             photo=>"Mountain Sainfoin",             order=>"Mountain Sainfoin", );
    $h->addX2(  name=>"Mountain Thrift",               title=>"Mountain Thrift",               photo=>"Mountain Thrift",               order=>"Mountain Thrift", );
    $h->addX2(  name=>"Mountain Valerian",             title=>"Mountain Valerian",             photo=>"Mountain Valerian",             order=>"Mountain Valerian", );
    $h->addX2(  name=>"Musky Saxifrage",               title=>"Musky Saxifrage",               photo=>"Musky Saxifrage",               order=>"Musky Saxifrage", );
    $h->addX2(  name=>"Netted Willow",                 title=>"Netted Willow",                 photo=>"Netted Willow",                 order=>"Netted Willow", );
    $h->addX2(  name=>"Nottingham Catchfly",           title=>"Nottingham Catchfly",           photo=>"Nottingham Catchfly",           order=>"Nottingham Catchfly", );
    $h->addX2(  name=>"One-flowered Wintergreen",      title=>"One-flowered Wintergreen",      photo=>"One-flowered Wintergreen",      order=>"One-flowered Wintergreen", );
    $h->addX2(  name=>"Orange Lily",                   title=>"Orange Lily",                   photo=>"Orange Lily",                   order=>"Orange Lily", );
    $h->addX2(  name=>"Oxlip",                         title=>"Oxlip",                         photo=>"Oxlip",                         order=>"Oxlip", );
    $h->addX2(  name=>"Pink Cinquefoil",               title=>"Pink Cinquefoil",               photo=>"Pink Cinquefoil",               order=>"Pink Cinquefoil", );
    $h->addX2(  name=>"Pinnate-Leaved Ragwort",        title=>"Pinnate-Leaved Ragwort",        photo=>"Pinnate-Leaved Ragwort",        order=>"Pinnate-Leaved Ragwort", );
    $h->addX2(  name=>"Purple Oxytropis",              title=>"Purple Oxytropis",              photo=>"Purple Oxytropis",              order=>"Purple Oxytropis", );
    $h->addX2(  name=>"Purple Saxifrage",              title=>"Purple Saxifrage",              photo=>"Purple Saxifrage",              order=>"Purple Saxifrage", );
    $h->addX2(  name=>"Pyramidal Bugle",               title=>"Pyramidal Bugle",               photo=>"Pyramidal Bugle",               order=>"Pyramidal Bugle", );
    $h->addX2(  name=>"Pyrenean Buttercup",            title=>"Pyrenean Buttercup",            photo=>"Pyrenean Buttercup",            order=>"Pyrenean Buttercup", );
    $h->addX2(  name=>"Rhaetian Poppy",                title=>"Rhaetian Poppy",                photo=>"Rhaetian Poppy",                order=>"Rhaetian Poppy", );
    $h->addX2(  name=>"Rock Campion",                  title=>"Rock Campion",                  photo=>"Rock Campion",                  order=>"Rock Campion", );
    $h->addX2(  name=>"Rock Soapwort",                 title=>"Rock Soapwort",                 photo=>"Rock Soapwort",                 order=>"Rock Soapwort", );
    $h->addX2(  name=>"Rock Speedwell",                title=>"Rock Speedwell",                photo=>"Rock Speedwell",                order=>"Rock Speedwell", );
    $h->addX2(  name=>"Rosebay Willowherb",            title=>"Rosebay Willowherb",            photo=>"Rosebay Willowherb",            order=>"Rosebay Willowherb", );
    $h->addX2(  name=>"Roseroot",                      title=>"Roseroot",                      photo=>"Roseroot",                      order=>"Roseroot", );
    $h->addX2(  name=>"Rosette-Leaved Rampion",        title=>"Rosette-Leaved Rampion",        photo=>"Rosette-Leaved Rampion",        order=>"Rosette-Leaved Rampion", );
    $h->addX2(  name=>"Rosy Vanilla Orchid",           title=>"Rosy Vanilla Orchid",           photo=>"Rosy Vanilla Orchid",           order=>"Rosy Vanilla Orchid", );
    $h->addX2(  name=>"Round-Headed Orchid",           title=>"Round-Headed Orchid",           photo=>"Round-Headed Orchid",           order=>"Round-Headed Orchid", );
    $h->addX2(  name=>"Round-headed Rampion",          title=>"Round-headed Rampion",          photo=>"Round-headed Rampion",          order=>"Round-headed Rampion", );
    $h->addX2(  name=>"Round-leaved Pennycress",       title=>"Round-leaved Pennycress",       photo=>"Round-leaved Pennycress",       order=>"Round-leaved Pennycress", );
    $h->addX2(  name=>"Round-leaved Saxifrage",        title=>"Round-leaved Saxifrage",        photo=>"Round-leaved Saxifrage",        order=>"Round-leaved Saxifrage", );
    $h->addX2(  name=>"Scented Solomon's Seal",        title=>"Scented Solomon's Seal",        photo=>"Scented Solomon's Seal",        order=>"Scented Solomon's Seal", );
    $h->addX2(  name=>"Scree Saxifrage",               title=>"Scree Saxifrage",               photo=>"Scree Saxifrage",               order=>"Scree Saxifrage", );
    $h->addX2(  name=>"Shining Scabious",              title=>"Shining Scabious",              photo=>"Shining Scabious",              order=>"Shining Scabious", );
    $h->addX2(  name=>"Shrubby Milkwort",              title=>"Shrubby Milkwort",              photo=>"Shrubby Milkwort",              order=>"Shrubby Milkwort", );
    $h->addX2(  name=>"Small White Orchid",            title=>"Small White Orchid",            photo=>"Small White Orchid",            order=>"Small White Orchid", );
    $h->addX2(  name=>"Smooth Honeywort",              title=>"Smooth Honeywort",              photo=>"Smooth Honeywort",              order=>"Smooth Honeywort", );
    $h->addX2(  name=>"Snowdon Lily",                  title=>"Snowdon Lily",                  photo=>"Snowdon Lily",                  order=>"Snowdon Lily", );
    $h->addX2(  name=>"Spotted Gentian",               title=>"Spotted Gentian",               photo=>"Spotted Gentian",               order=>"Spotted Gentian", );
    $h->addX2(  name=>"Spring Gentian",                title=>"Spring Gentian",                photo=>"Spring Gentian",                order=>"Spring Gentian", );
    $h->addX2(  name=>"Spring Heath",                  title=>"Spring Heath",                  photo=>"Spring Heath",                  order=>"Spring Heath", );
    $h->addX2(  name=>"Spring Pasque Flower",          title=>"Spring Pasque Flower",          photo=>"Spring Pasque Flower",          order=>"Spring Pasque Flower", );
    $h->addX2(  name=>"St. Bruno's Lily",              title=>"St. Bruno's Lily",              photo=>"St. Bruno's Lily",              order=>"St. Bruno's Lily", );
    $h->addX2(  name=>"Stemless Carline Thistle",      title=>"Stemless Carline Thistle",      photo=>"Stemless Carline Thistle",      order=>"Stemless Carline Thistle", );
    $h->addX2(  name=>"Thyme-leaved Speedwell",        title=>"Thyme-leaved Speedwell",        photo=>"Thyme-leaved Speedwell",        order=>"Thyme-leaved Speedwell", );
    $h->addX2(  name=>"Trumpet Gentian",               title=>"Trumpet Gentian",               photo=>"Trumpet Gentian",               order=>"Trumpet Gentian", );
    $h->addX2(  name=>"Tufted Vetch",                  title=>"Tufted Vetch",                  photo=>"Tufted Vetch",                  order=>"Tufted Vetch", );
    $h->addX2(  name=>"Verticillate Lousewort",        title=>"Verticillate Lousewort",        photo=>"Verticillate Lousewort",        order=>"Verticillate Lousewort", );
    $h->addX2(  name=>"Violet Speedwell",              title=>"Violet Speedwell",              photo=>"Violet Speedwell",              order=>"Violet Speedwell", );
    $h->addX2(  name=>"Vitaliana",                     title=>"Vitaliana",                     photo=>"Vitaliana",                     order=>"Vitaliana", );
    $h->addX2(  name=>"White Crocus",                  title=>"White Crocus",                  photo=>"White Crocus",                  order=>"White Crocus", );
    $h->addX2(  name=>"White False Helleborine",       title=>"White False Helleborine",       photo=>"White False Helleborine",       order=>"White False Helleborine", );
    $h->addX2(  name=>"Whorled Solomon's Seal",        title=>"Whorled Solomon's Seal",        photo=>"Whorled Solomon's Seal",        order=>"Whorled Solomon's Seal", );
    $h->addX2(  name=>"Wig Knapweed",                  title=>"Wig Knapweed",                  photo=>"Wig Knapweed",                  order=>"Wig Knapweed", );
    $h->addX2(  name=>"Wood Cranesbill",               title=>"Wood Cranesbill",               photo=>"Wood Cranesbill",               order=>"Wood Cranesbill", );
    $h->addX2(  name=>"Wood Pink",                     title=>"Wood Pink",                     photo=>"Wood Pink",                     order=>"Wood Pink", );
    $h->addX2(  name=>"Wood Vetch",                    title=>"Wood Vetch",                    photo=>"Wood Vetch",                    order=>"Wood Vetch", );
    $h->addX2(  name=>"Woolly Hawkweed",               title=>"Woolly Hawkweed",               photo=>"Woolly Hawkweed",               order=>"Woolly Hawkweed", );
    $h->addX2(  name=>"Yellow Gagea",                  title=>"Yellow Gagea",                  photo=>"Yellow Gagea",                  order=>"Yellow Gagea", );
    $h->addX2(  name=>"Yellow Milk-vetch",             title=>"Yellow Milk-vetch",             photo=>"Yellow Milk-vetch",             order=>"Yellow Milk-vetch", );
    $h->addX2(  name=>"Yellow Mountain Saxifrage",     title=>"Yellow Mountain Saxifrage",     photo=>"Yellow Mountain Saxifrage",     order=>"Yellow Mountain Saxifrage", );
    $h->addX2(  name=>"Yellow Ox-eye Daisy",           title=>"Yellow Ox-eye Daisy",           photo=>"Yellow Ox-eye Daisy",           order=>"Yellow Ox-eye Daisy", );
    $h->addX2(  name=>"Yellow Whitlow-Grass",          title=>"Yellow Whitlow-Grass",          photo=>"Yellow Whitlow-Grass",          order=>"Yellow Whitlow-Grass", );
    $h->addX2(  name=>"Yellow Wood Violet",            title=>"Yellow Wood Violet",            photo=>"Yellow Wood Violet",            order=>"Yellow Wood Violet", );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Animal Alphabet
#-------------------------------------------------------------------------------

 {package AnimalAlphabet;
  use base qw(ColourApplication);

  my %h;
  sub add($$$$$$)
   {my ($group, $S40, $free, $colour, $name, $prefix) = @_;
    my  $p = substr($name, 0, $prefix);
    $h{$name} = {group=>$group, S40=>$S40, free=>$free, colour=>$colour, name=>$name, prefix=>$prefix, order=>$name};
   }

  sub Load()
   {add( 1, 1,  1, "948c44", "Alpaca",    1);
    add(10, 0,  0, "c69552", "Antelope",  1);
    add(10, 0,  0, "e2bb76", "Baboon",    1);
    add( 1, 1,  1, "467ee5", "Bat",     1);
    add(10, 0,  0, "98d227", "Bull",    1);
    add(10, 0,  0, "f1f469", "Calf",    1);
    add(10, 0,  0, "e38f60", "Camel",     1);
    add( 1, 1,  1, "bd725f", "Cat",     1);
    add(10, 0,  0, "c2305f", "Chicken",   2);
    add( 2, 1,  1, "7f5992", "Dog",     1);
    add(11, 0,  0, "ee7564", "Dove",    1);
    add(11, 0,  0, "aa79be", "Eagle",     1);
    add( 2, 1,  1, "6289ce", "Elephant",  1);
    add(11, 1,  0, "88a7d6", "Emu",     1);
    add( 2, 1,  1, "ff5b31", "Fish",    1);
    add(11, 0,  0, "f7c003", "Frog",    1);
    add( 3, 1,  0, "8da3ca", "Goat",    1);
    add(12, 0,  0, "dc7b2a", "Goose",     1);
    add( 3, 1,  0, "89db13", "Horse",     1);
    add(12, 0,  0, "e3891f", "Hyena",     1);
    add( 3, 1,  0, "ea842a", "Ibex",    1);
    add(12, 0,  0, "d94060", "Insect",    1);
    add( 4, 1,  0, "87c3f5", "Jackdaw",   1);
    add(13, 0,  0, "febc5c", "Jellyfish",   1);
    add(13, 0,  0, "a1bf5b", "Kangaroo",  1);
    add( 4, 1,  0, "b55c95", "Koala",     1);
    add(13, 0,  0, "d0924f", "Lamb",    1);
    add( 4, 1,  0, "8e9b53", "Lion",    1);
    add(13, 0,  0, "eda471", "Lizard",    1);
    add(14, 0,  0, "f1ad84", "Marmot",    1);
    add(14, 0,  0, "df2258", "Moth",    1);
    add( 5, 1,  0, "f3b465", "Mouse",     1);
    add(14, 0,  0, "d9a447", "Nest of bees",  1);
    add( 5, 1,  0, "ff9a72", "Nest of birds",   1);
    add(14, 0,  0, "e55a7e", "Ostrich",   1);
    add( 5, 1,  0, "f6b3a1", "Oxen",    1);
    add( 6, 1,  0, "ffe470", "Pelican",   1);
    add(15, 0,  0, "7498ff", "Pig",     1);
    add( 6, 1,  0, "b37465", "Quail",     2);
    add( 6, 1,  0, "e2878e", "Raven",     1);
    add(15, 0,  0, "f6b07c", "Rhinoceros",  1);
    add(16, 0,  0, "f6b536", "Seagull",   1);
    add(16, 0,  0, "507bb2", "Sheep",     2);
    add( 7, 1,  0, "d95521", "Swan",    1);
    add( 7, 1,  0, "ed8648", "Tiger",     1);
    add(16, 0,  0, "f7c003", "Toad",    1);
    add( 7, 1,  0, "e892af", "Urchin",    1);
    add(17, 0,  0, "96a9d4", "Vervet Monkey", 1);
    add( 8, 1,  0, "8e9d3e", "Vulture",   1);
    add( 8, 1,  0, "acc05f", "Wallaby",   1);
    add(17, 0,  0, "c45b36", "Warthog",   1);
    add(18, 0,  0, "ec6689", "Yak",     1);
    add( 9, 1,  0, "ffeb21", "Yellow bird", 1);
    add( 9, 1,  0, "d4b19c", "Zebra",   1);
    bless \%h
   }
 }

#-------------------------------------------------------------------------------
# Antarctica
#-------------------------------------------------------------------------------

 {package Antarctica;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Adelie Penguin 1",            title=>"Adelie Penguin",                );
    $h->addX2(  name=>"Adelie Penguin 2",            title=>"Adelie Penguin",                );
    $h->addX2(  name=>"Adelie Penguin 3",            title=>"Adelie Penguin",                );
    $h->addX2(  name=>"Antarctic Fur Seal 1",        title=>"Antarctic Fur Seal",            );
    $h->addX2(  name=>"Antarctic Fur Seal 2",        title=>"Antarctic Fur Seal",            );
    $h->addX2(  name=>"Antarctic Fur Seal 3",        title=>"Antarctic Fur Seal",            );
    $h->addX2(  name=>"Antarctic Petrel 1",          title=>"Antarctic Petrel",              );
    $h->addX2(  name=>"Antarctic Petrel 2",          title=>"Antarctic Petrel",              );
    $h->addX2(  name=>"Antarctic Petrel 3",          title=>"Antarctic Petrel",              );
    $h->addX2(  name=>"Antarctic Shag 1",            title=>"Antarctic Shag",                );
    $h->addX2(  name=>"Antarctic Shag 2",            title=>"Antarctic Shag",                );
    $h->addX2(  name=>"Antarctic Shag 3",            title=>"Antarctic Shag",                );
    $h->addX2(  name=>"Antarctic Tern 1",            title=>"Antarctic Tern",                );
    $h->addX2(  name=>"Antarctic Tern 2",            title=>"Antarctic Tern",                );
    $h->addX2(  name=>"Antarctic Tern 3",            title=>"Antarctic Tern",                );
    $h->addX2(  name=>"Arctic Tern 1",               title=>"Arctic Tern",                   );
    $h->addX2(  name=>"Arctic Tern 2",               title=>"Arctic Tern",                   );
    $h->addX2(  name=>"Arctic Tern 3",               title=>"Arctic Tern",                   );
    $h->addX2(  name=>"Black-browed Albatross 1",    title=>"Black-browed Albatross",        );
    $h->addX2(  name=>"Black-browed Albatross 2",    title=>"Black-browed Albatross",        );
    $h->addX2(  name=>"Black-browed Albatross 3",    title=>"Black-browed Albatross",        );
    $h->addX2(  name=>"Blue Whale 1",                title=>"Blue Whale",                    );
    $h->addX2(  name=>"Blue Whale 2",                title=>"Blue Whale",                    );
    $h->addX2(  name=>"Blue Whale 3",                title=>"Blue Whale",                    );
    $h->addX2(  name=>"Brown Skua 1",                title=>"Brown Skua",                    );
    $h->addX2(  name=>"Brown Skua 2",                title=>"Brown Skua",                    );
    $h->addX2(  name=>"Brown Skua 3",                title=>"Brown Skua",                    );
    $h->addX2(  name=>"Cape Petrel 1",               title=>"Cape Petrel",                   );
    $h->addX2(  name=>"Cape Petrel 2",               title=>"Cape Petrel",                   );
    $h->addX2(  name=>"Cape Petrel 3",               title=>"Cape Petrel",                   );
    $h->addX2(  name=>"Chinstrap Penguin 1",         title=>"Chinstrap Penguin",             );
    $h->addX2(  name=>"Chinstrap Penguin 2",         title=>"Chinstrap Penguin",             );
    $h->addX2(  name=>"Chinstrap Penguin 3",         title=>"Chinstrap Penguin",             );
    $h->addX2(  name=>"Crabeater Seal 1",            title=>"Crabeater Seal",                );
    $h->addX2(  name=>"Crabeater Seal 2",            title=>"Crabeater Seal",                );
    $h->addX2(  name=>"Crabeater Seal 3",            title=>"Crabeater Seal",                );
    $h->addX2(  name=>"Emperor Penguin 1",           title=>"Emperor Penguin",               );
    $h->addX2(  name=>"Emperor Penguin 2",           title=>"Emperor Penguin",               );
    $h->addX2(  name=>"Emperor Penguin 3",           title=>"Emperor Penguin",               );
    $h->addX2(  name=>"Gentoo Penguin 1",            title=>"Gentoo Penguin",                );
    $h->addX2(  name=>"Gentoo Penguin 2",            title=>"Gentoo Penguin",                );
    $h->addX2(  name=>"Gentoo Penguin 3",            title=>"Gentoo Penguin",                );
    $h->addX2(  name=>"Grey-Headed Albatross 1",     title=>"Grey-Headed Albatross",         );
    $h->addX2(  name=>"Grey-Headed Albatross 2",     title=>"Grey-Headed Albatross",         );
    $h->addX2(  name=>"Grey-Headed Albatross 3",     title=>"Grey-Headed Albatross",         );
    $h->addX2(  name=>"Humpback Whale 1",            title=>"Humpback Whale",                );
    $h->addX2(  name=>"Humpback Whale 2",            title=>"Humpback Whale",                );
    $h->addX2(  name=>"Humpback Whale 3",            title=>"Humpback Whale",                );
    $h->addX2(  name=>"Kelp Gull 1",                 title=>"Kelp Gull",                     );
    $h->addX2(  name=>"Kelp Gull 2",                 title=>"Kelp Gull",                     );
    $h->addX2(  name=>"Kelp Gull 3",                 title=>"Kelp Gull",                     );
    $h->addX2(  name=>"Killer Whale 1",              title=>"Killer Whale",                  );
    $h->addX2(  name=>"Killer Whale 2",              title=>"Killer Whale",                  );
    $h->addX2(  name=>"Killer Whale 3",              title=>"Killer Whale",                  );
    $h->addX2(  name=>"King Penguin 1",              title=>"King Penguin",                  );
    $h->addX2(  name=>"King Penguin 2",              title=>"King Penguin",                  );
    $h->addX2(  name=>"King Penguin 3",              title=>"King Penguin",                  );
    $h->addX2(  name=>"Krill 1",                     title=>"Krill",                         );
    $h->addX2(  name=>"Krill 2",                     title=>"Krill",                         );
    $h->addX2(  name=>"Leopard Seal 1",              title=>"Leopard Seal",                  );
    $h->addX2(  name=>"Leopard Seal 2",              title=>"Leopard Seal",                  );
    $h->addX2(  name=>"Leopard Seal 3",              title=>"Leopard Seal",                  );
    $h->addX2(  name=>"Light-mantled Albatross 1",   title=>"Light-mantled Albatross",       );
    $h->addX2(  name=>"Light-mantled Albatross 2",   title=>"Light-mantled Albatross",       );
    $h->addX2(  name=>"Light-mantled Albatross 3",   title=>"Light-mantled Albatross",       );
    $h->addX2(  name=>"Macaroni Penguin 1",          title=>"Macaroni Penguin",              );
    $h->addX2(  name=>"Macaroni Penguin 2",          title=>"Macaroni Penguin",              );
    $h->addX2(  name=>"Macaroni Penguin 3",          title=>"Macaroni Penguin",              );
    $h->addX2(  name=>"Minke Whale 1",               title=>"Minke Whale",                   );
    $h->addX2(  name=>"Minke Whale 2",               title=>"Minke Whale",                   );
    $h->addX2(  name=>"Minke Whale 3",               title=>"Minke Whale",                   );
    $h->addX2(  name=>"Snow Petrel 1",               title=>"Snow Petrel",                   );
    $h->addX2(  name=>"Snow Petrel 2",               title=>"Snow Petrel",                   );
    $h->addX2(  name=>"Snow Petrel 3",               title=>"Snow Petrel",                   );
    $h->addX2(  name=>"Snowy Sheathbill 1",          title=>"Snowy Sheathbill",              );
    $h->addX2(  name=>"Snowy Sheathbill 2",          title=>"Snowy Sheathbill",              );
    $h->addX2(  name=>"Snowy Sheathbill 3",          title=>"Snowy Sheathbill",              );
    $h->addX2(  name=>"South Polar Skua 1",          title=>"South Polar Skua",              );
    $h->addX2(  name=>"South Polar Skua 2",          title=>"South Polar Skua",              );
    $h->addX2(  name=>"South Polar Skua 3",          title=>"South Polar Skua",              );
    $h->addX2(  name=>"Southern Elephant Seal 1",    title=>"Southern Elephant Seal",        );
    $h->addX2(  name=>"Southern Elephant Seal 2",    title=>"Southern Elephant Seal",        );
    $h->addX2(  name=>"Southern Elephant Seal 3",    title=>"Southern Elephant Seal",        );
    $h->addX2(  name=>"Southern Fulmar 1",           title=>"Southern Fulmar",               );
    $h->addX2(  name=>"Southern Fulmar 2",           title=>"Southern Fulmar",               );
    $h->addX2(  name=>"Southern Fulmar 3",           title=>"Southern Fulmar",               );
    $h->addX2(  name=>"Southern Giant Petrel 1",     title=>"Southern Giant Petrel",         );
    $h->addX2(  name=>"Southern Giant Petrel 2",     title=>"Southern Giant Petrel",         );
    $h->addX2(  name=>"Southern Giant Petrel 3",     title=>"Southern Giant Petrel",         );
    $h->addX2(  name=>"Southern Right Whale 1",      title=>"Southern Right Whale",          );
    $h->addX2(  name=>"Southern Right Whale 2",      title=>"Southern Right Whale",          );
    $h->addX2(  name=>"Southern Right Whale 3",      title=>"Southern Right Whale",          );
    $h->addX2(  name=>"Sperm Whale 1",               title=>"Sperm Whale",                   );
    $h->addX2(  name=>"Sperm Whale 2",               title=>"Sperm Whale",                   );
    $h->addX2(  name=>"Sperm Whale 3",               title=>"Sperm Whale",                   );
    $h->addX2(  name=>"Wandering Albatross 1",       title=>"Wandering Albatross",           );
    $h->addX2(  name=>"Wandering Albatross 2",       title=>"Wandering Albatross",           );
    $h->addX2(  name=>"Wandering Albatross 3",       title=>"Wandering Albatross",           );
    $h->addX2(  name=>"Weddell Seal 1",              title=>"Weddell Seal",                  );
    $h->addX2(  name=>"Weddell Seal 2",              title=>"Weddell Seal",                  );
    $h->addX2(  name=>"Weddell Seal 3",              title=>"Weddell Seal",                  );
    $h->addX2(  name=>"Wilson's Storm Petrel 1",     title=>"Wilson's Storm Petrel",         );
    $h->addX2(  name=>"Wilson's Storm Petrel 2",     title=>"Wilson's Storm Petrel",         );
    $h->addX2(  name=>"Wilson's Storm Petrel 3",     title=>"Wilson's Storm Petrel",         );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Apes
#-------------------------------------------------------------------------------

 {package Apes;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Agile Gibbon");
    $h->add("Black Crested Gibbon");
    $h->add("Bonobo (female)");
    $h->add("Bonobo (juvenile)");
    $h->add("Bonobo (male)");
    $h->add("Bornean Orangutan (female)");
    $h->add("Bornean Orangutan (juvenile)");
    $h->add("Bornean Orangutan (male)");
    $h->add("Boy and Girl");
    $h->add("Chimpanzee (female)");
    $h->add("Chimpanzee (juvenile)");
    $h->add("Chimpanzee (male)");
    $h->add("Eastern Gorilla (female)");
    $h->add("Eastern Gorilla (juvenile)");
    $h->add("Eastern Gorilla (male)");
    $h->add("Lar Gibbon");
    $h->add("Man and Woman");
    $h->add("Muller's Bornean Gibbon");
    $h->add("Northern white-cheeked gibbon");
    $h->add("Pileated Gibbon");
    $h->add("Siamang");
    $h->add("Silvery Gibbon");
    $h->add("Sumatran Orangutan (female)");
    $h->add("Sumatran Orangutan (juvenile)");
    $h->add("Sumatran Orangutan (male)");
    $h->add("Western Gorilla (female)");
    $h->add("Western Gorilla (juvenile)");
    $h->add("Western Gorilla (male)");
    $h->add("Western Hoolock Gibbon");
    $h->add("Yellow-cheeked Gibbon");

    use Facts::Apes_urls;
    $h->addUrls(urls());

    $h
   }

  sub genJava($) {my ($app) = (@_); Application::genJavaExtended($app)}
 }
#-------------------------------------------------------------------------------
# Arches
#-------------------------------------------------------------------------------

 {package Arches;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"American Spadefoot Toad",         );
    $h->addX2(  name=>"Arches National Park",            );
    $h->addX2(  name=>"Balanced Rock",                   );
    $h->addX2(  name=>"Broken Arch",                     );
    $h->addX2(  name=>"Collared Lizard",                 );
    $h->addX2(  name=>"Dark Angel",                      );
    $h->addX2(  name=>"Delicate Arch",                   );
    $h->addX2(  name=>"Desert Bighorn Sheep",            );
    $h->addX2(  name=>"Devil's Garden",                  );
    $h->addX2(  name=>"Double Arch",                     );
    $h->addX2(  name=>"Double O Arch",                   );
    $h->addX2(  name=>"Entrance View",                   );
    $h->addX2(  name=>"Evening Primrose",                );
    $h->addX2(  name=>"Fiery Furnace",                   );
    $h->addX2(  name=>"Landscape Arch",                  );
    $h->addX2(  name=>"Mountain Lion",                   );
    $h->addX2(  name=>"Mule Deer",                       );
    $h->addX2(  name=>"Navajo Arch",                     );
    $h->addX2(  name=>"Park Avenue",                     );
    $h->addX2(  name=>"Partition Arch",                  );
    $h->addX2(  name=>"Peregrine Falcon",                );
    $h->addX2(  name=>"Petrified Dunes",                 );
    $h->addX2(  name=>"Petroglyphs",                     );
    $h->addX2(  name=>"Pine Tree Arch",                  );
    $h->addX2(  name=>"Pinyon Pine",                     );
    $h->addX2(  name=>"Prickly Pear Cactus",             );
    $h->addX2(  name=>"Queen Nefertiti Rock",            );
    $h->addX2(  name=>"Sacred Datura",                   );
    $h->addX2(  name=>"Sand Dune Arch",                  );
    $h->addX2(  name=>"Skull Arch",                      );
    $h->addX2(  name=>"Skyline Arch",                    );
    $h->addX2(  name=>"Surprise Arch",                   );
    $h->addX2(  name=>"The Organ",                       );
    $h->addX2(  name=>"The Three Gossips",               );
    $h->addX2(  name=>"Tower of Babel",                  );
    $h->addX2(  name=>"Tunnel Arch",                     );
    $h->addX2(  name=>"Turret Arch",                     );
    $h->addX2(  name=>"Utah Juniper",                    );
    $h->addX2(  name=>"Western Rattlesnake",             );
    $h->addX2(  name=>"Wolfe Ranch",                     );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Arctic
#-------------------------------------------------------------------------------

 {package Arctic;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Arctic Fox 1",               title=>"Arctic Fox",               photo=>"Arctic Fox 1",               order=>"Arctic Fox 1", );
    $h->addX2(  name=>"Arctic Fox 2",               title=>"Arctic Fox",               photo=>"Arctic Fox 2",               order=>"Arctic Fox 2", );
    $h->addX2(  name=>"Arctic Fox 3",               title=>"Arctic Fox",               photo=>"Arctic Fox 3",               order=>"Arctic Fox 3", );
    $h->addX2(  name=>"Arctic Ground Squirrel 1",   title=>"Arctic Ground Squirrel",   photo=>"Arctic Ground Squirrel 1",   order=>"Arctic Ground Squirrel 1", );
    $h->addX2(  name=>"Arctic Ground Squirrel 2",   title=>"Arctic Ground Squirrel",   photo=>"Arctic Ground Squirrel 2",   order=>"Arctic Ground Squirrel 2", );
    $h->addX2(  name=>"Arctic Ground Squirrel 3",   title=>"Arctic Ground Squirrel",   photo=>"Arctic Ground Squirrel 3",   order=>"Arctic Ground Squirrel 3", );
    $h->addX2(  name=>"Arctic Hare 1",              title=>"Arctic Hare",              photo=>"Arctic Hare 1",              order=>"Arctic Hare 1", );
    $h->addX2(  name=>"Arctic Hare 2",              title=>"Arctic Hare",              photo=>"Arctic Hare 2",              order=>"Arctic Hare 2", );
    $h->addX2(  name=>"Arctic Hare 3",              title=>"Arctic Hare",              photo=>"Arctic Hare 3",              order=>"Arctic Hare 3", );
    $h->addX2(  name=>"Arctic Skua 1",              title=>"Arctic Skua",              photo=>"Arctic Skua 1",              order=>"Arctic Skua 1", );
    $h->addX2(  name=>"Arctic Skua 2",              title=>"Arctic Skua",              photo=>"Arctic Skua 2",              order=>"Arctic Skua 2", );
    $h->addX2(  name=>"Arctic Skua 3",              title=>"Arctic Skua",              photo=>"Arctic Skua 3",              order=>"Arctic Skua 3", );
    $h->addX2(  name=>"Arctic Tern 1",              title=>"Arctic Tern",              photo=>"Arctic Tern 1",              order=>"Arctic Tern 1", );
    $h->addX2(  name=>"Arctic Tern 2",              title=>"Arctic Tern",              photo=>"Arctic Tern 2",              order=>"Arctic Tern 2", );
    $h->addX2(  name=>"Arctic Tern 3",              title=>"Arctic Tern",              photo=>"Arctic Tern 3",              order=>"Arctic Tern 3", );
    $h->addX2(  name=>"Arctic Wolf 1",              title=>"Arctic Wolf",              photo=>"Arctic Wolf 1",              order=>"Arctic Wolf 1", );
    $h->addX2(  name=>"Arctic Wolf 2",              title=>"Arctic Wolf",              photo=>"Arctic Wolf 2",              order=>"Arctic Wolf 2", );
    $h->addX2(  name=>"Arctic Wolf 3",              title=>"Arctic Wolf",              photo=>"Arctic Wolf 3",              order=>"Arctic Wolf 3", );
    $h->addX2(  name=>"Atlantic Puffin 1",          title=>"Atlantic Puffin",          photo=>"Atlantic Puffin 1",          order=>"Atlantic Puffin 1", );
    $h->addX2(  name=>"Atlantic Puffin 2",          title=>"Atlantic Puffin",          photo=>"Atlantic Puffin 2",          order=>"Atlantic Puffin 2", );
    $h->addX2(  name=>"Atlantic Puffin 3",          title=>"Atlantic Puffin",          photo=>"Atlantic Puffin 3",          order=>"Atlantic Puffin 3", );
    $h->addX2(  name=>"Bearded Seal 1",             title=>"Bearded Seal",             photo=>"Bearded Seal 1",             order=>"Bearded Seal 1", );
    $h->addX2(  name=>"Bearded Seal 2",             title=>"Bearded Seal",             photo=>"Bearded Seal 2",             order=>"Bearded Seal 2", );
    $h->addX2(  name=>"Bearded Seal 3",             title=>"Bearded Seal",             photo=>"Bearded Seal 3",             order=>"Bearded Seal 3", );
    $h->addX2(  name=>"Beluga Whale 1",             title=>"Beluga Whale",             photo=>"Beluga Whale 1",             order=>"Beluga Whale 1", );
    $h->addX2(  name=>"Beluga Whale 2",             title=>"Beluga Whale",             photo=>"Beluga Whale 2",             order=>"Beluga Whale 2", );
    $h->addX2(  name=>"Beluga Whale 3",             title=>"Beluga Whale",             photo=>"Beluga Whale 3",             order=>"Beluga Whale 3", );
    $h->addX2(  name=>"Black-legged Kittiwake 1",   title=>"Black-legged Kittiwake",   photo=>"Black-legged Kittiwake 1",   order=>"Black-legged Kittiwake 1", );
    $h->addX2(  name=>"Black-legged Kittiwake 2",   title=>"Black-legged Kittiwake",   photo=>"Black-legged Kittiwake 2",   order=>"Black-legged Kittiwake 2", );
    $h->addX2(  name=>"Black-legged Kittiwake 3",   title=>"Black-legged Kittiwake",   photo=>"Black-legged Kittiwake 3",   order=>"Black-legged Kittiwake 3", );
    $h->addX2(  name=>"Bowhead Whale 1",            title=>"Bowhead Whale",            photo=>"Bowhead Whale 1",            order=>"Bowhead Whale 1", );
    $h->addX2(  name=>"Bowhead Whale 2",            title=>"Bowhead Whale",            photo=>"Bowhead Whale 2",            order=>"Bowhead Whale 2", );
    $h->addX2(  name=>"Bowhead Whale 3",            title=>"Bowhead Whale",            photo=>"Bowhead Whale 3",            order=>"Bowhead Whale 3", );
    $h->addX2(  name=>"Brunnich's Guillemot 1",     title=>"Brunnich's Guillemot",     photo=>"Brunnich's Guillemot 1",     order=>"Brunnich's Guillemot 1", );
    $h->addX2(  name=>"Brunnich's Guillemot 2",     title=>"Brunnich's Guillemot",     photo=>"Brunnich's Guillemot 2",     order=>"Brunnich's Guillemot 2", );
    $h->addX2(  name=>"Brunnich's Guillemot 3",     title=>"Brunnich's Guillemot",     photo=>"Brunnich's Guillemot 3",     order=>"Brunnich's Guillemot 3", );
    $h->addX2(  name=>"Common Eider 1",             title=>"Common Eider",             photo=>"Common Eider 1",             order=>"Common Eider 1", );
    $h->addX2(  name=>"Common Eider 2",             title=>"Common Eider",             photo=>"Common Eider 2",             order=>"Common Eider 2", );
    $h->addX2(  name=>"Common Eider 3",             title=>"Common Eider",             photo=>"Common Eider 3",             order=>"Common Eider 3", );
    $h->addX2(  name=>"Dall Sheep 1",               title=>"Dall Sheep",               photo=>"Dall Sheep 1",               order=>"Dall Sheep 1", );
    $h->addX2(  name=>"Dall Sheep 2",               title=>"Dall Sheep",               photo=>"Dall Sheep 2",               order=>"Dall Sheep 2", );
    $h->addX2(  name=>"Dall Sheep 3",               title=>"Dall Sheep",               photo=>"Dall Sheep 3",               order=>"Dall Sheep 3", );
    $h->addX2(  name=>"Glaucous Gull 1",            title=>"Glaucous Gull",            photo=>"Glaucous Gull 1",            order=>"Glaucous Gull 1", );
    $h->addX2(  name=>"Glaucous Gull 2",            title=>"Glaucous Gull",            photo=>"Glaucous Gull 2",            order=>"Glaucous Gull 2", );
    $h->addX2(  name=>"Glaucous Gull 3",            title=>"Glaucous Gull",            photo=>"Glaucous Gull 3",            order=>"Glaucous Gull 3", );
    $h->addX2(  name=>"Golden Eagle 1",             title=>"Golden Eagle",             photo=>"Golden Eagle 1",             order=>"Golden Eagle 1", );
    $h->addX2(  name=>"Golden Eagle 2",             title=>"Golden Eagle",             photo=>"Golden Eagle 2",             order=>"Golden Eagle 2", );
    $h->addX2(  name=>"Golden Eagle 3",             title=>"Golden Eagle",             photo=>"Golden Eagle 3",             order=>"Golden Eagle 3", );
    $h->addX2(  name=>"Grizzly Bear 1",             title=>"Grizzly Bear",             photo=>"Grizzly Bear 1",             order=>"Grizzly Bear 1", );
    $h->addX2(  name=>"Grizzly Bear 2",             title=>"Grizzly Bear",             photo=>"Grizzly Bear 2",             order=>"Grizzly Bear 2", );
    $h->addX2(  name=>"Grizzly Bear 3",             title=>"Grizzly Bear",             photo=>"Grizzly Bear 3",             order=>"Grizzly Bear 3", );
    $h->addX2(  name=>"Harbour Seal 1",             title=>"Harbour Seal",             photo=>"Harbour Seal 1",             order=>"Harbour Seal 1", );
    $h->addX2(  name=>"Harbour Seal 2",             title=>"Harbour Seal",             photo=>"Harbour Seal 2",             order=>"Harbour Seal 2", );
    $h->addX2(  name=>"Harbour Seal 3",             title=>"Harbour Seal",             photo=>"Harbour Seal 3",             order=>"Harbour Seal 3", );
    $h->addX2(  name=>"Harp Seal 1",                title=>"Harp Seal",                photo=>"Harp Seal 1",                order=>"Harp Seal 1", );
    $h->addX2(  name=>"Harp Seal 2",                title=>"Harp Seal",                photo=>"Harp Seal 2",                order=>"Harp Seal 2", );
    $h->addX2(  name=>"Harp Seal 3",                title=>"Harp Seal",                photo=>"Harp Seal 3",                order=>"Harp Seal 3", );
    $h->addX2(  name=>"Humpback Whale 1",           title=>"Humpback Whale",           photo=>"Humpback Whale 1",           order=>"Humpback Whale 1", );
    $h->addX2(  name=>"Humpback Whale 2",           title=>"Humpback Whale",           photo=>"Humpback Whale 2",           order=>"Humpback Whale 2", );
    $h->addX2(  name=>"Humpback Whale 3",           title=>"Humpback Whale",           photo=>"Humpback Whale 3",           order=>"Humpback Whale 3", );
    $h->addX2(  name=>"Killer Whale 1",             title=>"Killer Whale",             photo=>"Killer Whale 1",             order=>"Killer Whale 1", );
    $h->addX2(  name=>"Killer Whale 2",             title=>"Killer Whale",             photo=>"Killer Whale 2",             order=>"Killer Whale 2", );
    $h->addX2(  name=>"Killer Whale 3",             title=>"Killer Whale",             photo=>"Killer Whale 3",             order=>"Killer Whale 3", );
    $h->addX2(  name=>"Lemming 1",                  title=>"Lemming",                  photo=>"Lemming 1",                  order=>"Lemming 1", );
    $h->addX2(  name=>"Lemming 2",                  title=>"Lemming",                  photo=>"Lemming 2",                  order=>"Lemming 2", );
    $h->addX2(  name=>"Lemming 3",                  title=>"Lemming",                  photo=>"Lemming 3",                  order=>"Lemming 3", );
    $h->addX2(  name=>"Little Auk 1",               title=>"Little Auk",               photo=>"Little Auk 1",               order=>"Little Auk 1", );
    $h->addX2(  name=>"Little Auk 2",               title=>"Little Auk",               photo=>"Little Auk 2",               order=>"Little Auk 2", );
    $h->addX2(  name=>"Little Auk 3",               title=>"Little Auk",               photo=>"Little Auk 3",               order=>"Little Auk 3", );
    $h->addX2(  name=>"Minke Whale 1",              title=>"Minke Whale",              photo=>"Minke Whale 1",              order=>"Minke Whale 1", );
    $h->addX2(  name=>"Minke Whale 2",              title=>"Minke Whale",              photo=>"Minke Whale 2",              order=>"Minke Whale 2", );
    $h->addX2(  name=>"Minke Whale 3",              title=>"Minke Whale",              photo=>"Minke Whale 3",              order=>"Minke Whale 3", );
    $h->addX2(  name=>"Muskox 1",                   title=>"Muskox",                   photo=>"Muskox 1",                   order=>"Muskox 1", );
    $h->addX2(  name=>"Muskox 2",                   title=>"Muskox",                   photo=>"Muskox 2",                   order=>"Muskox 2", );
    $h->addX2(  name=>"Muskox 3",                   title=>"Muskox",                   photo=>"Muskox 3",                   order=>"Muskox 3", );
    $h->addX2(  name=>"Narwhal 1",                  title=>"Narwhal",                  photo=>"Narwhal 1",                  order=>"Narwhal 1", );
    $h->addX2(  name=>"Narwhal 2",                  title=>"Narwhal",                  photo=>"Narwhal 2",                  order=>"Narwhal 2", );
    $h->addX2(  name=>"Narwhal 3",                  title=>"Narwhal",                  photo=>"Narwhal 3",                  order=>"Narwhal 3", );
    $h->addX2(  name=>"Northern Fulmar 1",          title=>"Northern Fulmar",          photo=>"Northern Fulmar 1",          order=>"Northern Fulmar 1", );
    $h->addX2(  name=>"Northern Fulmar 2",          title=>"Northern Fulmar",          photo=>"Northern Fulmar 2",          order=>"Northern Fulmar 2", );
    $h->addX2(  name=>"Northern Fulmar 3",          title=>"Northern Fulmar",          photo=>"Northern Fulmar 3",          order=>"Northern Fulmar 3", );
    $h->addX2(  name=>"Pink Footed Goose 1",        title=>"Pink Footed Goose",        photo=>"Pink Footed Goose 1",        order=>"Pink Footed Goose 1", );
    $h->addX2(  name=>"Pink Footed Goose 2",        title=>"Pink Footed Goose",        photo=>"Pink Footed Goose 2",        order=>"Pink Footed Goose 2", );
    $h->addX2(  name=>"Pink Footed Goose 3",        title=>"Pink Footed Goose",        photo=>"Pink Footed Goose 3",        order=>"Pink Footed Goose 3", );
    $h->addX2(  name=>"Polar Bear 1",               title=>"Polar Bear",               photo=>"Polar Bear 1",               order=>"Polar Bear 1", );
    $h->addX2(  name=>"Polar Bear 2",               title=>"Polar Bear",               photo=>"Polar Bear 2",               order=>"Polar Bear 2", );
    $h->addX2(  name=>"Polar Bear 3",               title=>"Polar Bear",               photo=>"Polar Bear 3",               order=>"Polar Bear 3", );
    $h->addX2(  name=>"Purple Sandpiper 1",         title=>"Purple Sandpiper",         photo=>"Purple Sandpiper 1",         order=>"Purple Sandpiper 1", );
    $h->addX2(  name=>"Purple Sandpiper 2",         title=>"Purple Sandpiper",         photo=>"Purple Sandpiper 2",         order=>"Purple Sandpiper 2", );
    $h->addX2(  name=>"Purple Sandpiper 3",         title=>"Purple Sandpiper",         photo=>"Purple Sandpiper 3",         order=>"Purple Sandpiper 3", );
    $h->addX2(  name=>"Red-throated Diver 1",       title=>"Red-throated Diver",       photo=>"Red-throated Diver 1",       order=>"Red-throated Diver 1", );
    $h->addX2(  name=>"Red-throated Diver 2",       title=>"Red-throated Diver",       photo=>"Red-throated Diver 2",       order=>"Red-throated Diver 2", );
    $h->addX2(  name=>"Red-throated Diver 3",       title=>"Red-throated Diver",       photo=>"Red-throated Diver 3",       order=>"Red-throated Diver 3", );
    $h->addX2(  name=>"Reindeer 1",                 title=>"Reindeer",                 photo=>"Reindeer 1",                 order=>"Reindeer 1", );
    $h->addX2(  name=>"Reindeer 2",                 title=>"Reindeer",                 photo=>"Reindeer 2",                 order=>"Reindeer 2", );
    $h->addX2(  name=>"Reindeer 3",                 title=>"Reindeer",                 photo=>"Reindeer 3",                 order=>"Reindeer 3", );
    $h->addX2(  name=>"Ringed Seal 1",              title=>"Ringed Seal",              photo=>"Ringed Seal 1",              order=>"Ringed Seal 1", );
    $h->addX2(  name=>"Ringed Seal 2",              title=>"Ringed Seal",              photo=>"Ringed Seal 2",              order=>"Ringed Seal 2", );
    $h->addX2(  name=>"Ringed Seal 3",              title=>"Ringed Seal",              photo=>"Ringed Seal 3",              order=>"Ringed Seal 3", );
    $h->addX2(  name=>"Rock Ptarmigan 1",           title=>"Rock Ptarmigan",           photo=>"Rock Ptarmigan 1",           order=>"Rock Ptarmigan 1", );
    $h->addX2(  name=>"Rock Ptarmigan 2",           title=>"Rock Ptarmigan",           photo=>"Rock Ptarmigan 2",           order=>"Rock Ptarmigan 2", );
    $h->addX2(  name=>"Rock Ptarmigan 3",           title=>"Rock Ptarmigan",           photo=>"Rock Ptarmigan 3",           order=>"Rock Ptarmigan 3", );
    $h->addX2(  name=>"Snow Bunting 1",             title=>"Snow Bunting",             photo=>"Snow Bunting 1",             order=>"Snow Bunting 1", );
    $h->addX2(  name=>"Snow Bunting 2",             title=>"Snow Bunting",             photo=>"Snow Bunting 2",             order=>"Snow Bunting 2", );
    $h->addX2(  name=>"Snow Bunting 3",             title=>"Snow Bunting",             photo=>"Snow Bunting 3",             order=>"Snow Bunting 3", );
    $h->addX2(  name=>"Snow Goose 1",               title=>"Snow Goose",               photo=>"Snow Goose 1",               order=>"Snow Goose 1", );
    $h->addX2(  name=>"Snow Goose 2",               title=>"Snow Goose",               photo=>"Snow Goose 2",               order=>"Snow Goose 2", );
    $h->addX2(  name=>"Snow Goose 3",               title=>"Snow Goose",               photo=>"Snow Goose 3",               order=>"Snow Goose 3", );
    $h->addX2(  name=>"Snowy Owl 1",                title=>"Snowy Owl",                photo=>"Snowy Owl 1",                order=>"Snowy Owl 1", );
    $h->addX2(  name=>"Snowy Owl 2",                title=>"Snowy Owl",                photo=>"Snowy Owl 2",                order=>"Snowy Owl 2", );
    $h->addX2(  name=>"Snowy Owl 3",                title=>"Snowy Owl",                photo=>"Snowy Owl 3",                order=>"Snowy Owl 3", );
    $h->addX2(  name=>"Sperm Whale 1",              title=>"Sperm Whale",              photo=>"Sperm Whale 1",              order=>"Sperm Whale 1", );
    $h->addX2(  name=>"Sperm Whale 2",              title=>"Sperm Whale",              photo=>"Sperm Whale 2",              order=>"Sperm Whale 2", );
    $h->addX2(  name=>"Sperm Whale 3",              title=>"Sperm Whale",              photo=>"Sperm Whale 3",              order=>"Sperm Whale 3", );
    $h->addX2(  name=>"Walrus 1",                   title=>"Walrus",                   photo=>"Walrus 1",                   order=>"Walrus 1", );
    $h->addX2(  name=>"Walrus 2",                   title=>"Walrus",                   photo=>"Walrus 2",                   order=>"Walrus 2", );
    $h->addX2(  name=>"Walrus 3",                   title=>"Walrus",                   photo=>"Walrus 3",                   order=>"Walrus 3", );
    $h->addX2(  name=>"Wolverine 1",                title=>"Wolverine",                photo=>"Wolverine 1",                order=>"Wolverine 1", );
    $h->addX2(  name=>"Wolverine 2",                title=>"Wolverine",                photo=>"Wolverine 2",                order=>"Wolverine 2", );
    $h->addX2(  name=>"Wolverine 3",                title=>"Wolverine",                photo=>"Wolverine 3",                order=>"Wolverine 3", );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Baby Animals
#-------------------------------------------------------------------------------

 {package BabyAnimals;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Calf");
    $h->add("Camel and calf");
    $h->add("Camel calf");
    $h->add("Cat and kitten");
    $h->add("Chick");
    $h->add("Chicken and chick");
    $h->add("Chimpanzee and infant");
    $h->add("Chimpanzee infant");
    $h->add("Cow and calf");
    $h->add("Cygnets");
    $h->add("Deer and fawn");
    $h->add("Dog and puppy");
    $h->add("Dolphin and calf");
    $h->add("Dolphin calf");
    $h->add("Duck and ducklings");
    $h->add("Duckling");
    $h->add("Eagle and nest");
    $h->add("Eaglet");
    $h->add("Elephant and calf");
    $h->add("Elephant calf");
    $h->add("Emperor Penguin and chick");
    $h->add("Emperor Penguin chick");
    $h->add("Fawn");
    $h->add("Foal");
    $h->add("Giraffe and calf");
    $h->add("Giraffe calf");
    $h->add("Goat and kids");
    $h->add("Goat kids");
    $h->add("Goose and goslings");
    $h->add("Gorilla and infant");
    $h->add("Gorilla infant");
    $h->add("Goslings");
    $h->add("Hedgehog and hoglet");
    $h->add("Hoglet");
    $h->add("Horse and foal");
    $h->add("Hyena and cubs");
    $h->add("Hyena cubs");
    $h->add("Kangaroo and joey");
    $h->add("Kangaroo joey");
    $h->add("Kitten");
    $h->add("Koala and joey");
    $h->add("Koala joey");
    $h->add("Lambs and sheep");
    $h->add("Lambs");
    $h->add("Lion and lion cub");
    $h->add("Lion cub");
    $h->add("Owl and owlets");
    $h->add("Owlets");
    $h->add("Pig and piglet");
    $h->add("Piglet");
    $h->add("Polar Bear and cub");
    $h->add("Polar Bear cub");
    $h->add("Puppy");
    $h->add("Red Panda and cub");
    $h->add("Red Panda cub");
    $h->add("Sea Lion and pup");
    $h->add("Sea Lion pup");
    $h->add("Swan and cygnets");
    $h->add("Zebra and colt");
    $h->add("Zebra colt");

    use Facts::BabyAnimals_urls;
    $h->addUrls(urls());

    $h
   }

  sub genJava($) {my ($app) = (@_); Application::genJavaExtended($app);}
 }

#-------------------------------------------------------------------------------
# Bathroom in English
#-------------------------------------------------------------------------------

 {package Bathroom;
  use base qw(Application);
  use Data::Dump qw(dump);

  my %h;
  sub add($)
   {my ($name) = @_;
    $h{$name} = {name=>$name, order=>$name};
   }

  sub genJava($$)
   {my ($data, $app) = @_;
    my $s = '';
    for($app->things)
     {my $name  = $_->name;
      my $title = $_->title;

      $s .= <<"END";
`  add("$name", "$title");
END
     }
    $s
   }

  sub Load()
   {add("Air Freshner");
    add("Bar of Soap");
    add("Basin");
    add("Bath");
    add("Bath Mat");
    add("Bath Towel");
    add("Bathroom Scale");
    add("Bidet");
    add("Ceramic Wall Tiles");
    add("Cistern");
    add("Clothes Airer");
    add("Cold Tap");
    add("Comb");
    add("Cotton Buds");
    add("Dental Floss");
    add("Electric Razor");
    add("Electric Shower");
    add("Fan Heater");
    add("Flannel");
    add("Hair Dryer");
    add("Hairbrush");
    add("Hand Cream");
    add("Hand Towel");
    add("Heated Towel Rail");
    add("Hot Tap");
    add("Laundry Basket");
    add("Lever");
    add("Light");
    add("Liquid Soap");
    add("Mirror");
    add("Mixer Tap");
    add("Mouthwash");
    add("Nail Brush");
    add("Nail Clippers");
    add("Nail Files");
    add("Plug");
    add("Plug Hole");
    add("Radiator");
    add("Razors");
    add("Roller Blind");
    add("Scissors");
    add("Shampoo");
    add("Shaver Socket");
    add("Shower Cubicle");
    add("Shower Curtain");
    add("Shower Head");
    add("Shower Hose");
    add("Shower Rail");
    add("Shower Seat");
    add("Shower Tray");
    add("Sponge");
    add("Sponge Bag");
    add("Stool");
    add("Tap");
    add("Temperature Control");
    add("Tissues");
    add("Toenail Clippers");
    add("Toilet");
    add("Toilet Brush");
    add("Toilet Lid");
    add("Toilet Roll");
    add("Toilet Roll Holder");
    add("Toilet Seat");
    add("Toothbrush");
    add("Toothpaste");
    add("Towel Rail");
    add("Towels");
    add("Vanity Mirror");
    add("Water Flow Control");
    return bless \%h;
   }
 }


#-------------------------------------------------------------------------------
# Birds
#-------------------------------------------------------------------------------

 {package Birds;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Atlantic_Puffin",               title=>"Atlantic Puffin",                 );
    $h->addX2(  name=>"Azure_Kingfisher",              title=>"Azure Kingfisher",                );
    $h->addX2(  name=>"Black-capped_Lory_1",           title=>"Black-capped Lory",               );
    $h->addX2(  name=>"Black-naped_Oriole",            title=>"Black-naped Oriole",              );
    $h->addX2(  name=>"Blue-and-yellow_Macaw_1",       title=>"Blue-and-yellow Macaw",           );
    $h->addX2(  name=>"Blue-crowned_Motmot",           title=>"Blue-crowned Motmot",             );
    $h->addX2(  name=>"Blue_Tit_2",                    title=>"Blue Tit",                        );
    $h->addX2(  name=>"Crimson_Rosella",               title=>"Crimson Rosella",                 );
    $h->addX2(  name=>"Fisher's_Lovebird",             title=>"Fischer's Lovebird",              );
    $h->addX2(  name=>"Golden-Mantled_Rosella_2",      title=>"Golden-Mantled Rosella",          );
    $h->addX2(  name=>"Golden_Pheasant_1",             title=>"Golden Pheasant",                 );
    $h->addX2(  name=>"Golden_headed_Quetzal_1",       title=>"Golden-headed Quetzal",           );
    $h->addX2(  name=>"Gouldian_Finch_1",              title=>"Gouldian Finch",                  );
    $h->addX2(  name=>"Greater_Bird-of-paradise_1",    title=>"Greater Bird-of-paradise",        );
    $h->addX2(  name=>"Green-and-Gold_Tanager",        title=>"Green-and-gold Tanager",          );
    $h->addX2(  name=>"Green-headed_tanager_2",        title=>"Green-headed Tanager",            );
    $h->addX2(  name=>"Green_Aracari",                 title=>"Green Aracari",                   );
    $h->addX2(  name=>"Green_Honeycreeper_2",          title=>"Green Honeycreeper",              );
    $h->addX2(  name=>"Green_Jay_1",                   title=>"Green Jay",                       );
    $h->addX2(  name=>"Hoopoe_1",                      title=>"Hoopoe",                          );
    $h->addX2(  name=>"Hummingbird_2",                 title=>"Costa's Hummingbird",             );
    $h->addX2(  name=>"Jamaican_Tody_2",               title=>"Jamaican Tody",                   );
    $h->addX2(  name=>"Lesser_Striped_Swallow",        title=>"Lesser Striped Swallow",          );
    $h->addX2(  name=>"Narrow_billed_tody",            title=>"Narrow-billed Tody",              );
    $h->addX2(  name=>"Northern_Cardinal_1",           title=>"Northern Cardinal",               );
    $h->addX2(  name=>"Oriental_Dwarf_Kingfisher",     title=>"Oriental Dwarf Kingfisher",       );
    $h->addX2(  name=>"Painted_Bunting_2",             title=>"Painted Bunting",                 );
    $h->addX2(  name=>"PallasRosefinch",               title=>"Pallas Rosefinch",                );
    $h->addX2(  name=>"Peafowl_4",                     title=>"Peafowl",                         );
    $h->addX2(  name=>"Plush-crested_Jay_2",           title=>"Plush-crested Jay",               );
    $h->addX2(  name=>"Puerto_Rican_Tody",             title=>"Puerto Rican Tody",               );
    $h->addX2(  name=>"Rainbow_Lorikeet_4",            title=>"Rainbow Lorikeet",                );
    $h->addX2(  name=>"Red-fan_Parrot",                title=>"Red-fan Parrot",                  );
    $h->addX2(  name=>"Red-headed_Trogon",             title=>"Red-headed Trogon",               );
    $h->addX2(  name=>"Red_Lory_1",                    title=>"Red Lory",                        );
    $h->addX2(  name=>"Resplendent_Quetzal",           title=>"Resplendent Quetzal",             );
    $h->addX2(  name=>"Scarlet_Macaw_3",               title=>"Scarlet Macaw",                   );
    $h->addX2(  name=>"Southern_Red_Bishop_1",         title=>"Southern Red Bishop",             );
    $h->addX2(  name=>"Vestiaria_coccinea",            title=>"Iiwi",                            );
    $h->addX2(  name=>"Violaceous_Euphonia_1",         title=>"Violaceous Euphonia",             );
    $h->addX2(  name=>"Western_Tanager",               title=>"Western Tanager",                 );
    $h->addX2(  name=>"White-throated_Kingfisher_1",   title=>"White-throated Kingfisher",       );
    $h->addX2(  name=>"Wilson's_Bird_of_Paradise",     title=>"Wilson's Bird-of-paradise",       );
    $h->addX2(  name=>"Woodland_Kingfisher_3",         title=>"Woodland Kingfisher",             );
    $h->addX2(  name=>"Yellow-crowned_Gonolek",        title=>"Yellow-crowned Gonolek",          );
    $h->addX2(  name=>"Yellow-headed_Amazon_2",        title=>"Yellow-headed Amazon",            );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Boats
#-------------------------------------------------------------------------------

 {package Boats;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Anchor",                                  );
    $h->addX2(  name=>"Canadian canoe",                          );
    $h->addX2(  name=>"Canal boat",                              );
    $h->addX2(  name=>"Canal",                                   );
    $h->addX2(  name=>"Car ferry",                               );
    $h->addX2(  name=>"Catamaran sailboat",                      );
    $h->addX2(  name=>"Coastguard tug",                          );
    $h->addX2(  name=>"Container ship",                          );
    $h->addX2(  name=>"Cornish fishing boat",                    );
    $h->addX2(  name=>"Cornish lugger",                          );
    $h->addX2(  name=>"Cruise Ship",                             );
    $h->addX2(  name=>"Double Kayak",                            );
    $h->addX2(  name=>"Estuary",                                 );
    $h->addX2(  name=>"Fishing trawler",                         );
    $h->addX2(  name=>"Frigate",                                 );
    $h->addX2(  name=>"Galleon",                                 );
    $h->addX2(  name=>"Gondola",                                 );
    $h->addX2(  name=>"Harbour",                                 );
    $h->addX2(  name=>"Heavy Lift Vessel with oil rig",          );
    $h->addX2(  name=>"High speed Rib",                          );
    $h->addX2(  name=>"House boat",                              );
    $h->addX2(  name=>"Inflatable Dinghy",                       );
    $h->addX2(  name=>"Inter-island passenger ferry",            );
    $h->addX2(  name=>"Jet propelled sight-seeing boat",         );
    $h->addX2(  name=>"Lifeboat and tractor",                    );
    $h->addX2(  name=>"Lifeboat",                                );
    $h->addX2(  name=>"Lock gates",                              );
    $h->addX2(  name=>"Luxury Motor Yacht",                      );
    $h->addX2(  name=>"Marina",                                  );
    $h->addX2(  name=>"Moving a canal boat",                     );
    $h->addX2(  name=>"Moving a yacht",                          );
    $h->addX2(  name=>"Ocean-going ferry",                       );
    $h->addX2(  name=>"Passenger ferry",                         );
    $h->addX2(  name=>"Peruvian reed boat",                      );
    $h->addX2(  name=>"RIB",                                     );
    $h->addX2(  name=>"Rigid Inflatable lifeboat",               );
    $h->addX2(  name=>"River cruiser",                           );
    $h->addX2(  name=>"Rowing boat",                             );
    $h->addX2(  name=>"Sailing dinghy",                          );
    $h->addX2(  name=>"Sailing yacht",                           );
    $h->addX2(  name=>"Scenic cruise boat",                      );
    $h->addX2(  name=>"Schooner",                                );
    $h->addX2(  name=>"Single kayak",                            );
    $h->addX2(  name=>"Small passenger ferry",                   );
    $h->addX2(  name=>"Tall ship",                               );
    $h->addX2(  name=>"Tanker",                                  );
    $h->addX2(  name=>"Tourist reed boat",                       );
    $h->addX2(  name=>"Wooden dinghy",                           );
    $h->addX2(  name=>"Wooden sailing yacht",                    );
    $h->addX2(  name=>"Zanzibar dhow",                           );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Body
#-------------------------------------------------------------------------------

 {package Body;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Arm - Arm");
    $h->add("Arm - Armpit");
    $h->add("Arm - Biceps muscle");
    $h->add("Arm - Elbow 1");
    $h->add("Arm - Elbow 2");
    $h->add("Arm - Forearm");
    $h->add("Arm - Upper arm");
    $h->add("Back - Back");
    $h->add("Back - Bottom");
    $h->add("Back - Shoulder blade");
    $h->add("Back - Shoulder");
    $h->add("Back -Waist 2");
    $h->add("Eye - Eye");
    $h->add("Eye - Eyebrow");
    $h->add("Eye - Eyelashes");
    $h->add("Eye - Eyelid");
    $h->add("Fingers - Finger Nails");
    $h->add("Fingers - Index finger");
    $h->add("Fingers - Ring finger");
    $h->add("Fingers - Thumb");
    $h->add("Fingers -Little finger");
    $h->add("Fingers -Middle finger");
    $h->add("Foot - Ankle");
    $h->add("Foot - Arch");
    $h->add("Foot - Foot");
    $h->add("Foot - Heel");
    $h->add("Foot - Instep");
    $h->add("Front - Abdomen");
    $h->add("Front - Chest");
    $h->add("Front - Collarbones");
    $h->add("Front - Ribs");
    $h->add("Front -Shoulders");
    $h->add("Front -Tummy Button");
    $h->add("Front -Waist 1");
    $h->add("Hand - Back of the hand");
    $h->add("Hand - Fist");
    $h->add("Hand - Hand 1");
    $h->add("Hand - Knuckles");
    $h->add("Hand - Wrist");
    $h->add("Hand -Palm");
    $h->add("Head - Cheek");
    $h->add("Head - Chin");
    $h->add("Head - Ear");
    $h->add("Head - Face");
    $h->add("Head - Forehead");
    $h->add("Head - Hair");
    $h->add("Head - Head");
    $h->add("Head - Jaw");
    $h->add("Leg - Calf 1");
    $h->add("Leg - Calf 2");
    $h->add("Leg - Hip");
    $h->add("Leg - Knees");
    $h->add("Leg - Leg");
    $h->add("Leg - Shin");
    $h->add("Leg - Thigh 1");
    $h->add("Leg - Thigh 2");
    $h->add("Mouth - Lower lip 2");
    $h->add("Mouth - Mouth");
    $h->add("Mouth - Upper Lip");
    $h->add("Mouth -Teeth");
    $h->add("Neck - Adam's Apple");
    $h->add("Neck - Neck");
    $h->add("Nose - Nose");
    $h->add("Nose - Nostril");
    $h->add("Toes - Big Toe");
    $h->add("Toes - Fourth toe");
    $h->add("Toes - Little toe");
    $h->add("Toes - Second toe");
    $h->add("Toes - Third toe");
    $h->add("Toes - Toes");
    $h
   }
 }
#-------------------------------------------------------------------------------
# Bollywood
#-------------------------------------------------------------------------------

 {package Bollywood;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Aftab Shivdasani",                                       );
    $h->addX2(  name=>"Aishwarya Rai 1",       title=>"Aishwarya Rai",          );
    $h->addX2(  name=>"Aishwarya Rai 2",       title=>"Aishwarya Rai",          );
    $h->addX2(  name=>"Aishwarya Rai 3",       title=>"Aishwarya Rai",          );
    $h->addX2(  name=>"Ajay Devgan",                                            );
    $h->addX2(  name=>"Akshay Kumar",                                           );
    $h->addX2(  name=>"Ameesha Patel",                                          );
    $h->addX2(  name=>"Amitabh Bachchan 1",    title=>"Amitabh Bachchan",       );
    $h->addX2(  name=>"Amitabh Bachchan 2",    title=>"Amitabh Bachchan",       );
    $h->addX2(  name=>"Amrita Rao 1",          title=>"Amrita Rao",             );
    $h->addX2(  name=>"Amrita Rao 2",          title=>"Amrita Rao",             );
    $h->addX2(  name=>"Arjun Rampal",                                           );
    $h->addX2(  name=>"Asin Thottumkal 1",     title=>"Asin Thottumkal",        );
    $h->addX2(  name=>"Asin Thottumkal 2",     title=>"Asin Thottumkal",        );
    $h->addX2(  name=>"Asin Thottumkal 3",     title=>"Asin Thottumkal",        );
    $h->addX2(  name=>"Ayesha Takia",                                           );
    $h->addX2(  name=>"Bhagyashree",                                            );
    $h->addX2(  name=>"Bipasha Basu",                                           );
    $h->addX2(  name=>"Deepika Padukone",                                       );
    $h->addX2(  name=>"Govinda",                                                );
    $h->addX2(  name=>"Gracy Singh",                                            );
    $h->addX2(  name=>"Hrithik Roshan 1",      title=>"Hrithik Roshan",         );
    $h->addX2(  name=>"Hrithik Roshan 2",      title=>"Hrithik Roshan",         );
    $h->addX2(  name=>"Irrfan Khan",                                            );
    $h->addX2(  name=>"John Abraham",                                           );
    $h->addX2(  name=>"Juhi Chawla",                                            );
    $h->addX2(  name=>"Kabir Bedi 1",          title=>"Kabir Bedi",             );
    $h->addX2(  name=>"Kabir Bedi 2",          title=>"Kabir Bedi",             );
    $h->addX2(  name=>"Kader Khan",                                             );
    $h->addX2(  name=>"Kamal Haasan 1",        title=>"Kamal Haasan",           );
    $h->addX2(  name=>"Kamal Haasan 2",        title=>"Kamal Haasan",           );
    $h->addX2(  name=>"Kangana Ranaut",                                         );
    $h->addX2(  name=>"Kareena Kapoor 1",      title=>"Kareena Kapoor",         );
    $h->addX2(  name=>"Kareena Kapoor 2",      title=>"Kareena Kapoor",         );
    $h->addX2(  name=>"Karisma Kapoor",                                         );
    $h->addX2(  name=>"Katrina Kaif",                                           );
    $h->addX2(  name=>"Kay Kay Menon",                                          );
    $h->addX2(  name=>"Lara Dutta Bhupathi",                                    );
    $h->addX2(  name=>"Madhuri Dixit",                                          );
    $h->addX2(  name=>"Mallika Sherawat",                                       );
    $h->addX2(  name=>"Minissha Lamba",                                         );
    $h->addX2(  name=>"Mithun Chakraborty",                                     );
    $h->addX2(  name=>"Nandita Das",                                            );
    $h->addX2(  name=>"Neetu Singh",                                            );
    $h->addX2(  name=>"Preity Zinta",                                           );
    $h->addX2(  name=>"Priyanka Chopra 1",     title=>"Priyanka Chopra",        );
    $h->addX2(  name=>"Priyanka Chopra 2",     title=>"Priyanka Chopra",        );
    $h->addX2(  name=>"Rakesh Roshan",                                          );
    $h->addX2(  name=>"Ranbir Kapoor",                                          );
    $h->addX2(  name=>"Rani Mukherji",                                          );
    $h->addX2(  name=>"Raveena Tandon",                                         );
    $h->addX2(  name=>"Rekha",                                                  );
    $h->addX2(  name=>"Riteish Deshmukh",                                       );
    $h->addX2(  name=>"Sagarika Ghatge",                                        );
    $h->addX2(  name=>"Saif Ali Khan",                                          );
    $h->addX2(  name=>"Salman Khan",                                            );
    $h->addX2(  name=>"Sanjay Dutt",                                            );
    $h->addX2(  name=>"Shabana Azmi",                                           );
    $h->addX2(  name=>"Shah Rukh Khan 1",      title=>"Shah Rukh Khan",         );
    $h->addX2(  name=>"Shah Rukh Khan 2",      title=>"Shah Rukh Khan",         );
    $h->addX2(  name=>"Sharman Joshi",                                          );
    $h->addX2(  name=>"Shilpa Shetty",                                          );
    $h->addX2(  name=>"Sonakshi Sinha",                                         );
    $h->addX2(  name=>"Sonu Nigam",                                             );
    $h->addX2(  name=>"Sridevi Kapoor",                                         );
    $h->addX2(  name=>"Sushmita Sen",                                           );
    $h->addX2(  name=>"Tabu 1",                title=>"Tabu",                   );
    $h->addX2(  name=>"Tabu 2",                title=>"Tabu",                   );
    $h->addX2(  name=>"Udita Goswami",                                          );
    $h->addX2(  name=>"Urmila Matondkar",                                       );
    $h->addX2(  name=>"Vidya Balan 1",         title=>"Vidya Balan",            );
    $h->addX2(  name=>"Vidya Balan 3",         title=>"Vidya Balan",            );
    $h->addX2(  name=>"Vivek Oberoi",                                           );
    $h->addX2(  name=>"Yami Gautam 1",         title=>"Yami Gautam",            );
    $h->addX2(  name=>"Yami Gautam 2",         title=>"Yami Gautam",            );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Boots
#-------------------------------------------------------------------------------

 {package Boots;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Ankle Boots",                  );
    $h->addX2(  name=>"Ballet Shoes",                 );
    $h->addX2(  name=>"Boat Shoes",                   );
    $h->addX2(  name=>"Brogues",                      );
    $h->addX2(  name=>"Brothel Creepers",             );
    $h->addX2(  name=>"Bunny Boots",                  );
    $h->addX2(  name=>"Calf-length Boots",            );
    $h->addX2(  name=>"Chelsea Boots",                );
    $h->addX2(  name=>"Climbing Shoes",               );
    $h->addX2(  name=>"Clogs",                        );
    $h->addX2(  name=>"Court Shoes",                  );
    $h->addX2(  name=>"Cowboy Boots",                 );
    $h->addX2(  name=>"Croc-offs",                    );
    $h->addX2(  name=>"Cycling Shoes",                );
    $h->addX2(  name=>"Derby Shoes",                  );
    $h->addX2(  name=>"Desert Boots",                 );
    $h->addX2(  name=>"Espadrilles",                  );
    $h->addX2(  name=>"Figure Skating Boots",         );
    $h->addX2(  name=>"Flip-Flops",                   );
    $h->addX2(  name=>"Flippers",                     );
    $h->addX2(  name=>"Football Boots",               );
    $h->addX2(  name=>"Ghillies",                     );
    $h->addX2(  name=>"Golf Shoes",                   );
    $h->addX2(  name=>"High-Heeled Shoes",            );
    $h->addX2(  name=>"Hiking Boots",                 );
    $h->addX2(  name=>"Hiking Shoes",                 );
    $h->addX2(  name=>"Inline Skating Boots",         );
    $h->addX2(  name=>"Jazz Shoes",                   );
    $h->addX2(  name=>"Jump Boots",                   );
    $h->addX2(  name=>"Knee-length Boots",            );
    $h->addX2(  name=>"Moccasins",                    );
    $h->addX2(  name=>"Monk Shoes",                   );
    $h->addX2(  name=>"Motorcycle Boots",             );
    $h->addX2(  name=>"Mountaineering Boots",         );
    $h->addX2(  name=>"Mules",                        );
    $h->addX2(  name=>"Over-the Knee Boots",          );
    $h->addX2(  name=>"Oxford Shoes",                 );
    $h->addX2(  name=>"Platform Shoes",               );
    $h->addX2(  name=>"Plimsolls",                    );
    $h->addX2(  name=>"Pointe Shoes",                 );
    $h->addX2(  name=>"Riding Boots",                 );
    $h->addX2(  name=>"Running Shoes",                );
    $h->addX2(  name=>"Sandals",                      );
    $h->addX2(  name=>"Ski Boots",                    );
    $h->addX2(  name=>"Slingbacks",                   );
    $h->addX2(  name=>"Slip-Ons",                     );
    $h->addX2(  name=>"Slippers",                     );
    $h->addX2(  name=>"Sneakers",                     );
    $h->addX2(  name=>"Snow Boots",                   );
    $h->addX2(  name=>"Steel-toe Boots",              );
    $h->addX2(  name=>"Tap Shoes",                    );
    $h->addX2(  name=>"Tennis Shoes",                 );
    $h->addX2(  name=>"Track Shoes",                  );
    $h->addX2(  name=>"Trail Running Shoes",          );
    $h->addX2(  name=>"Trekking Sandals",             );
    $h->addX2(  name=>"Ugg Boots",                    );
    $h->addX2(  name=>"Waders",                       );
    $h->addX2(  name=>"Wellington Boots",             );
    $h->addX2(  name=>"Wetsuit Boots",                );
    $h->addX2(  name=>"Wrestling Shoes",              );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Bridges
#-------------------------------------------------------------------------------

 {package Bridges;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Bhumibol_Bridge",                            title=>"Bhumibol Bridge",                   );
    $h->addX2(  name=>"Bloukrans_Bridge",                           title=>"Bloukrans Bridge",                  );
    $h->addX2(  name=>"Brooklyn_Bridge_1",                          title=>"Brooklyn Bridge",                   );
    $h->addX2(  name=>"Brusio_spiral_viaduct_1",                    title=>"Brusio spiral viaduct",             );
    $h->addX2(  name=>"Chesapeake_Bay_Bridge",                      title=>"Chesapeake Bay bridge",             );
    $h->addX2(  name=>"Coronadobaybridgethorton",                   title=>"Coronado Bridge",                   );
    $h->addX2(  name=>"Eads_Bridge",                                title=>"Eads Bridge",                       );
    $h->addX2(  name=>"Erasmusbrug_Bridge",                         title=>"Erasmusbrug Bridge",                );
    $h->addX2(  name=>"Forth_bridge_1",                             title=>"Forth Rail Bridge",                 );
    $h->addX2(  name=>"Gateshead_Millennium_Bridge",                title=>"Gateshead Millennium Bridge",       );
    $h->addX2(  name=>"Golden_Gate_Bridge_1",                       title=>"Golden Gate Bridge",                );
    $h->addX2(  name=>"Howrah_bridge",                              title=>"Howrah bridge",                     );
    $h->addX2(  name=>"Kiev_Metro_Bridge",                          title=>"Kiev Metro Bridge",                 );
    $h->addX2(  name=>"NavahoBridges",                              title=>"Navajo Bridge",                     );
    $h->addX2(  name=>"New_River_Gorge_Bridge",                     title=>"New River Gorge Bridge",            );
    $h->addX2(  name=>"Oresund_Bridge_1",                           title=>"Oresund Bridge",                    );
    $h->addX2(  name=>"Royal_Gorge_Bridge",                         title=>"Royal Gorge Bridge",                );
    $h->addX2(  name=>"Seven_Mile_Bridge",                          title=>"Seven Mile Bridge",                 );
    $h->addX2(  name=>"Sydney_Harbour_Bridge_from_Circular_Quay",   title=>"Sydney Harbour Bridge",             );
    $h->addX2(  name=>"Tara_Bridge",                                title=>"Tara Bridge",                       );

    $h
   }
 }

#-------------------------------------------------------------------------------
# British Royal Family
#-------------------------------------------------------------------------------

 {package BritishRoyalFamily;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Anne, Princess Royal");
    $h->add("Camilla, Duchess of Cornwall");
    $h->add("Catherine, Duchess of Cambridge");
    $h->add("Charles, Prince of Wales");
    $h->add("Diana, Princess of Wales");
    $h->add("King Edward VIII");
    $h->add("King George V");
    $h->add("King George VI");
    $h->add("Prince Andrew, Duke of York");
    $h->add("Prince Edward, Earl of Wessex");
    $h->add("Prince Harry of Wales");
    $h->add("Prince Philip, Duke of Edinburgh");
    $h->add("Prince William, Duke of Cambridge");
    $h->add("Princess Beatrice of York");
    $h->add("Princess Eugenie of York");
    $h->add("Princess Margaret, Countess of Snowdon");
    $h->add("Queen Elizabeth II");
    $h->add("Queen Elizabeth The Queen Mother");
    $h->add("Queen Mary");
    $h->add("Sarah, Duchess of York");
    $h->add("Sophie, Countess of Wessex");
    $h->add("Wedding of Prince William and Catherine Middleton");
    $h->add("Zara Phillips");

    use Facts::BritishRoyalFamily_urls;
    $h->addUrls(urls());

    $h
   }

  sub genJava($) {my ($app) = (@_); Application::genJavaExtended($app);}
 }

#-------------------------------------------------------------------------------
# Buildings
#-------------------------------------------------------------------------------

 {package Buildings;
  use base qw(Application);

  my %h;
  sub add($)
   {my ($name) = @_;
    $h{$name} = {group=>1, name=>$name, order=>$name};
   }

  sub Load()
   {add("Alpine chalet");
    add("Bandstand");
    add("Bank");
    add("Beach huts");
    add("Block of flats");
    add("Butanese farmhouse");
    add("Cablecar station");
    add("Castle");
    add("Cathedral");
    add("Chapel");
    add("Church");
    add("Cinema");
    add("Country house");
    add("Detached house");
    add("English pub");
    add("Factory");
    add("Farm");
    add("Fire Station");
    add("Football stadium");
    add("Half-timbered house");
    add("Hospital");
    add("Hotel");
    add("Indoor Market");
    add("Library");
    add("Lighthouse");
    add("Monastery");
    add("Mosque");
    add("Mountain hut");
    add("Museum");
    add("Nuclear Power Station");
    add("Petrol station");
    add("Pier");
    add("Police Station");
    add("Railway station");
    add("Ruined church");
    add("School");
    add("Semi-detached house");
    add("Shepherd's hut");
    add("Shopping Mall");
    add("Skyscraper");
    add("Stately Home");
    add("Static caravan");
    add("Storage Warehouse");
    add("Terrace");
    add("Thatched cottage");
    add("Theatre");
    add("Triumphal arch");
    add("Victorian parade");
    add("Windmill");
    add("Wooden house");
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# CarsCranesTrucksTrains
#-------------------------------------------------------------------------------

 {package CarsCranesTrucksTrains;
  use base qw(Application);

  sub Load {&load}
  sub load(;$)
   {my $language = $_[0] // "en";
    my $h = bless {};
    $h->addX2(  name=>"Airplane",                   );
    $h->addX2(  name=>"Ambulance",                  );
    $h->addX2(  name=>"Amphibious vehicle",         );
    $h->addX2(  name=>"Auto rickshaw",              );
    $h->addX2(  name=>"Caravan",                    );
    $h->addX2(  name=>"Cement mixer",               );
    $h->addX2(  name=>"Combine Harvester",          );
    $h->addX2(  name=>"Crane",                      );
    $h->addX2(  name=>"Cycle rickshaw",             );
    $h->addX2(  name=>"Digger",                     );
    $h->addX2(  name=>"Double-decker bus",          );
    $h->addX2(  name=>"Dumper truck",               );
    $h->addX2(  name=>"Dustcart",                   );
    $h->addX2(  name=>"Electric tram",              );
    $h->addX2(  name=>"Estate car",                 );
    $h->addX2(  name=>"Fire engine",                );
    $h->addX2(  name=>"Flatbed truck",              );
    $h->addX2(  name=>"Forklift truck",             );
    $h->addX2(  name=>"Hatchback",                  ) unless $language eq qw/de/;
    $h->addX2(  name=>"Helicopter",                 );
    $h->addX2(  name=>"Horse and cart",             );
    $h->addX2(  name=>"Ice-cream van",              );
    $h->addX2(  name=>"Jeep",                       );
    $h->addX2(  name=>"Land Rover",                 );
    $h->addX2(  name=>"Large van",                  ) unless $language eq qw/de/;
    $h->addX2(  name=>"Lorry",                      );
    $h->addX2(  name=>"Minibus",                    );
    $h->addX2(  name=>"Motorbike",                  );
    $h->addX2(  name=>"Motorhome",                  );
    $h->addX2(  name=>"Mountain bike",              );
    $h->addX2(  name=>"Open-top bus",               );
    $h->addX2(  name=>"Pakistani lorry",            );
    $h->addX2(  name=>"Pickup truck",               );
    $h->addX2(  name=>"Police car",                 );
    $h->addX2(  name=>"Quad bike",                  );
    $h->addX2(  name=>"Racing bike",                );
    $h->addX2(  name=>"Road bike",                  );
    $h->addX2(  name=>"Road sweeper",               );
    $h->addX2(  name=>"Road train",                 );
    $h->addX2(  name=>"Scooter",                    );
    $h->addX2(  name=>"Single-decker bus",          );
    $h->addX2(  name=>"Small van",                  ) unless $language eq qw/de/;
    $h->addX2(  name=>"Sports car",                 );
    $h->addX2(  name=>"Tanker",                     );
    $h->addX2(  name=>"Taxi",                       );
    $h->addX2(  name=>"Tipper lorry",               );
    $h->addX2(  name=>"Tractor",                    );
    $h->addX2(  name=>"Train",                      );
    $h->addX2(  name=>"Vintage bus",                );
    $h->addX2(  name=>"Vintage car",                );
    $h
   }
 }

#-------------------------------------------------------------------------------
# CarsCranesTrucksTrainsGerman
#-------------------------------------------------------------------------------

 {package CarsCranesTrucksTrainsGerman;
  use base qw(Application);

  sub Load {bless &CarsCranesTrucksTrains::load("de")}
 }

#-------------------------------------------------------------------------------
# Chocolate
#-------------------------------------------------------------------------------

 {package Chocolate;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Black Forest Gateau",              );
    $h->addX2(  name=>"Boston Cream Pie",                 );
    $h->addX2(  name=>"Bourbon Biscuit",                  );
    $h->addX2(  name=>"Box of Chocolates",                );
    $h->addX2(  name=>"Cadbury Caramel Egg",              );
    $h->addX2(  name=>"Cadbury Creme Egg",                );
    $h->addX2(  name=>"Chocolate Brownie",                );
    $h->addX2(  name=>"Chocolate Bundt Cake",             );
    $h->addX2(  name=>"Chocolate Chip Cookie",            );
    $h->addX2(  name=>"Chocolate Cupcakes",               );
    $h->addX2(  name=>"Chocolate Eclair",                 );
    $h->addX2(  name=>"Chocolate Fondue",                 );
    $h->addX2(  name=>"Chocolate Fudge Cake",             );
    $h->addX2(  name=>"Chocolate Fudge",                  );
    $h->addX2(  name=>"Chocolate Gold Coins",             );
    $h->addX2(  name=>"Chocolate Guinness Cake",          );
    $h->addX2(  name=>"Chocolate Ice-Cream",              );
    $h->addX2(  name=>"Chocolate Milk",                   );
    $h->addX2(  name=>"Chocolate Milkshake",              );
    $h->addX2(  name=>"Chocolate Mousse Cake",            );
    $h->addX2(  name=>"Chocolate Mousse",                 );
    $h->addX2(  name=>"Chocolate Muffins",                );
    $h->addX2(  name=>"Chocolate Orange",                 );
    $h->addX2(  name=>"Chocolate Santa Claus",            );
    $h->addX2(  name=>"Chocolate Spread",                 );
    $h->addX2(  name=>"Chocolate Sundae",                 );
    $h->addX2(  name=>"Chocolate Syrup",                  );
    $h->addX2(  name=>"Chocolate Truffles",               );
    $h->addX2(  name=>"Dark Chocolate",                   );
    $h->addX2(  name=>"Easter Eggs",                      );
    $h->addX2(  name=>"Flourless Chocolate Cake",         );
    $h->addX2(  name=>"Frys Turkish Delight",             );
    $h->addX2(  name=>"German Chocolate Cake",            );
    $h->addX2(  name=>"Hot Chocolate",                    );
    $h->addX2(  name=>"Kit Kat",                          );
    $h->addX2(  name=>"Lindt Golden Bunny",               );
    $h->addX2(  name=>"Maltesers",                        );
    $h->addX2(  name=>"Mars Bar",                         );
    $h->addX2(  name=>"Milk Chocolate Digestive",         );
    $h->addX2(  name=>"Milk Chocolate",                   );
    $h->addX2(  name=>"Millionaire's Shortbread",         );
    $h->addX2(  name=>"Molten Chocolate Cake",            );
    $h->addX2(  name=>"Nanaimo Bar",                      );
    $h->addX2(  name=>"Oreos",                            );
    $h->addX2(  name=>"Pain au Chocolat",                 );
    $h->addX2(  name=>"Prinzregententorte",               );
    $h->addX2(  name=>"Profiterole",                      );
    $h->addX2(  name=>"Sachertorte",                      );
    $h->addX2(  name=>"Walnut Whip",                      );
    $h->addX2(  name=>"White Chocolate",                  );
    $h
   }
 }


#-------------------------------------------------------------------------------
# Cats
#-------------------------------------------------------------------------------

 {package Cats;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Abyssinian - Cat");
    $h->add("Abyssinian - Kitten");
    $h->add("American Shorthair - Cat");
    $h->add("American Shorthair - Kitten");
    $h->add("Bengal - Cat");
    $h->add("Bengal - Kitten");
    $h->add("Birman - Cat");
    $h->add("Birman - Kitten");
    $h->add("British Shorthair - Cat");
    $h->add("British Shorthair - Kitten");
    $h->add("Burmese - Cat");
    $h->add("Burmese - Kitten");
    $h->add("Cornish Rex - Cat");
    $h->add("Cornish Rex - Kitten");
    $h->add("Exotic Shorthair - Cat");
    $h->add("Exotic Shorthair - Kitten");
    $h->add("Maine Coon - Cat");
    $h->add("Maine Coon - Kitten");
    $h->add("Manx - Cat");
    $h->add("Manx - Kitten");
    $h->add("Norwegian Forest - Cat");
    $h->add("Norwegian Forest - Kitten");
    $h->add("Oriental Shorthair - Cat");
    $h->add("Oriental Shorthair - Kitten");
    $h->add("Persian - Cat");
    $h->add("Persian - Kitten");
    $h->add("Ragdoll - Cat");
    $h->add("Ragdoll - Kitten");
    $h->add("Russian Blue - Cat");
    $h->add("Russian Blue - Kitten");
    $h->add("Savannah - Cat");
    $h->add("Savannah - Kitten");
    $h->add("Siamese - Cat");
    $h->add("Siamese - Kitten");
    $h->add("Siberian - Cat");
    $h->add("Siberian - Kitten");
    $h->add("Somali - Cat");
    $h->add("Somali - Kitten");
    $h->add("Sphynx - Cat");
    $h->add("Sphynx - Kitten");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Cereals
#-------------------------------------------------------------------------------

 {package Cereals;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Barley 1 - Field",                            title=>"Barley field",                            photo=>"Barley 1 - Field",                            order=>"Barley 1 - Field", );
    $h->addX2(  name=>"Barley 2 - Close-up",                         title=>"Barley close-up",                         photo=>"Barley 2 - Close-up",                         order=>"Barley 2 - Close-up", );
    $h->addX2(  name=>"Barley 3 - Barley grains",                    title=>"Barley grains",                           photo=>"Barley 3 - Barley grains",                    order=>"Barley 3 - Barley grains", );
    $h->addX2(  name=>"Barley 4 - Malted barley",                    title=>"Malted barley",                           photo=>"Barley 4 - Malted barley",                    order=>"Barley 4 - Malted barley", );
    $h->addX2(  name=>"Barley 5 - Vegetable beef barley soup",       title=>"Vegetable beef barley soup",              photo=>"Barley 5 - Vegetable beef barley soup",       order=>"Barley 5 - Vegetable beef barley soup", );
    $h->addX2(  name=>"Buckwheat 1 - Field",                         title=>"Buckwheat field",                         photo=>"Buckwheat 1 - Field",                         order=>"Buckwheat 1 - Field", );
    $h->addX2(  name=>"Buckwheat 2 - Flowers",                       title=>"Buckwheat flowers",                       photo=>"Buckwheat 2 - Flowers",                       order=>"Buckwheat 2 - Flowers", );
    $h->addX2(  name=>"Buckwheat 3 - Seeds",                         title=>"Buckwheat seeds",                         photo=>"Buckwheat 3 - Seeds",                         order=>"Buckwheat 3 - Seeds", );
    $h->addX2(  name=>"Buckwheat 4 - Grains",                        title=>"Buckwheat grains",                        photo=>"Buckwheat 4 - Grains",                        order=>"Buckwheat 4 - Grains", );
    $h->addX2(  name=>"Buckwheat 5 - Buckwheat porridge",            title=>"Buckwheat porridge",                      photo=>"Buckwheat 5 - Buckwheat porridge",            order=>"Buckwheat 5 - Buckwheat porridge", );
    $h->addX2(  name=>"Maize 1 - Field",                             title=>"Maize field",                             photo=>"Maize 1 - Field",                             order=>"Maize 1 - Field", );
    $h->addX2(  name=>"Maize 2 - Mature maize plant",                title=>"Mature maize plant",                      photo=>"Maize 2 - Mature maize plant",                order=>"Maize 2 - Mature maize plant", );
    $h->addX2(  name=>"Maize 3 - Maize cobs",                        title=>"Maize cobs",                              photo=>"Maize 3 - Maize cobs",                        order=>"Maize 3 - Maize cobs", );
    $h->addX2(  name=>"Maize 4 - Maize grains",                      title=>"Maize grains",                            photo=>"Maize 4 - Maize grains",                      order=>"Maize 4 - Maize grains", );
    $h->addX2(  name=>"Maize 5 - Cornflakes",                        title=>"Maize cornflakes",                        photo=>"Maize 5 - Cornflakes",                        order=>"Maize 5 - Cornflakes", );
    $h->addX2(  name=>"Millet 1 - Field of Pearl Millet",            title=>"Field of Pearl Millet",                   photo=>"Millet 1 - Field of Pearl Millet",            order=>"Millet 1 - Field of Pearl Millet", );
    $h->addX2(  name=>"Millet 2 - Field of Finger Millet",           title=>"Field of Finger Millet",                  photo=>"Millet 2 - Field of Finger Millet",           order=>"Millet 2 - Field of Finger Millet", );
    $h->addX2(  name=>"Millet 3 - Finger Millet close-up",           title=>"Finger Millet close-up",                  photo=>"Millet 3 - Finger Millet close-up",           order=>"Millet 3 - Finger Millet close-up", );
    $h->addX2(  name=>"Millet 4 - Millet grains",                    title=>"Millet grains",                           photo=>"Millet 4 - Millet grains",                    order=>"Millet 4 - Millet grains", );
    $h->addX2(  name=>"Millet 5 - Nettle and millet fritters",       title=>"Nettle and millet fritters",              photo=>"Millet 5 - Nettle and millet fritters",       order=>"Millet 5 - Nettle and millet fritters", );
    $h->addX2(  name=>"Oats 1 - Field",                              title=>"Oats field",                              photo=>"Oats 1 - Field",                              order=>"Oats 1 - Field", );
    $h->addX2(  name=>"Oats 2 - Close-up",                           title=>"Oats close-up",                           photo=>"Oats 2 - Close-up",                           order=>"Oats 2 - Close-up", );
    $h->addX2(  name=>"Oats 3 - Oat grains",                         title=>"Oat grains",                              photo=>"Oats 3 - Oat grains",                         order=>"Oats 3 - Oat grains", );
    $h->addX2(  name=>"Oats 4 - Rolled oats for porridge",           title=>"Rolled oats for porridge",                photo=>"Oats 4 - Rolled oats for porridge",           order=>"Oats 4 - Rolled oats for porridge", );
    $h->addX2(  name=>"Oats 5 - Oat flapjacks",                      title=>"Oat flapjacks",                           photo=>"Oats 5 - Oat flapjacks",                      order=>"Oats 5 - Oat flapjacks", );
    $h->addX2(  name=>"Rice 1 - being replanted in paddies",         title=>"Rice being replanted in paddies",         photo=>"Rice 1 - being replanted in paddies",         order=>"Rice 1 - being replanted in paddies", );
    $h->addX2(  name=>"Rice 2 - Long grain rice from the USA",       title=>"Long grain rice from the USA",            photo=>"Rice 2 - Long grain rice from the USA",       order=>"Rice 2 - Long grain rice from the USA", );
    $h->addX2(  name=>"Rice 3 - Rice being dried",                   title=>"Rice being dried",                        photo=>"Rice 3 - Rice being dried",                   order=>"Rice 3 - Rice being dried", );
    $h->addX2(  name=>"Rice 4 - Brown rice",                         title=>"Brown rice",                              photo=>"Rice 4 - Brown rice",                         order=>"Rice 4 - Brown rice", );
    $h->addX2(  name=>"Rice 5 - Fried rice",                         title=>"Fried rice",                              photo=>"Rice 5 - Fried rice",                         order=>"Rice 5 - Fried rice", );
    $h->addX2(  name=>"Rye 1 - Field",                               title=>"Rye field",                               photo=>"Rye 1 - Field",                               order=>"Rye 1 - Field", );
    $h->addX2(  name=>"Rye 2 - Close-up",                            title=>"Rye close-up",                            photo=>"Rye 2 - Close-up",                            order=>"Rye 2 - Close-up", );
    $h->addX2(  name=>"Rye 3 - Rye grain with husk",                 title=>"Rye grain with husk",                     photo=>"Rye 3 - Rye grain with husk",                 order=>"Rye 3 - Rye grain with husk", );
    $h->addX2(  name=>"Rye 4 - Rye grains",                          title=>"Rye grains",                              photo=>"Rye 4 - Rye grains",                          order=>"Rye 4 - Rye grains", );
    $h->addX2(  name=>"Rye 5 - Rye Bread",                           title=>"Rye Bread",                               photo=>"Rye 5 - Rye Bread",                           order=>"Rye 5 - Rye Bread", );
    $h->addX2(  name=>"Sorghum 1 - Field",                           title=>"Sorghum field",                           photo=>"Sorghum 1 - Field",                           order=>"Sorghum 1 - Field", );
    $h->addX2(  name=>"Sorghum 2 - Close-up",                        title=>"Sorghum close-up",                        photo=>"Sorghum 2 - Close-up",                        order=>"Sorghum 2 - Close-up", );
    $h->addX2(  name=>"Sorghum 3 - Sorghum, Blue Nile, Sudan",       title=>"Sorghum, Blue Nile, Sudan",               photo=>"Sorghum 3 - Sorghum, Blue Nile, Sudan",       order=>"Sorghum 3 - Sorghum, Blue Nile, Sudan", );
    $h->addX2(  name=>"Sorghum 4 - Sorghum grains",                  title=>"Sorghum grains",                          photo=>"Sorghum 4 - Sorghum grains",                  order=>"Sorghum 4 - Sorghum grains", );
    $h->addX2(  name=>"Sorghum 5 - Sorghum cane molasses syrup",     title=>"Sorghum cane molasses syrup",             photo=>"Sorghum 5 - Sorghum cane molasses syrup",     order=>"Sorghum 5 - Sorghum cane molasses syrup", );
    $h->addX2(  name=>"Triticale 1 - Field",                         title=>"Triticale field",                         photo=>"Triticale 1 - Field",                         order=>"Triticale 1 - Field", );
    $h->addX2(  name=>"Triticale 2 - Close-up",                      title=>"Triticale close-up",                      photo=>"Triticale 2 - Close-up",                      order=>"Triticale 2 - Close-up", );
    $h->addX2(  name=>"Triticale 3 - Cutting stems for thatching",   title=>"Triticale cutting stems for thatching",   photo=>"Triticale 3 - Cutting stems for thatching",   order=>"Triticale 3 - Cutting stems for thatching", );
    $h->addX2(  name=>"Triticale 4 - Drying stems for thatching",    title=>"Triticale drying stems for thatching",    photo=>"Triticale 4 - Drying stems for thatching",    order=>"Triticale 4 - Drying stems for thatching", );
    $h->addX2(  name=>"Triticale 5 - Triticale grains",              title=>"Triticale grains",                        photo=>"Triticale 5 - Triticale grains",              order=>"Triticale 5 - Triticale grains", );
    $h->addX2(  name=>"Wheat 1 - Field",                             title=>"Wheat field",                             photo=>"Wheat 1 - Field",                             order=>"Wheat 1 - Field", );
    $h->addX2(  name=>"Wheat 2 - Close-up",                          title=>"Wheat close-up",                          photo=>"Wheat 2 - Close-up",                          order=>"Wheat 2 - Close-up", );
    $h->addX2(  name=>"Wheat 3 - Combine harvesting wheat",          title=>"Combine harvesting wheat",                photo=>"Wheat 3 - Combine harvesting wheat",          order=>"Wheat 3 - Combine harvesting wheat", );
    $h->addX2(  name=>"Wheat 4 - Wheat grains",                      title=>"Wheat grains",                            photo=>"Wheat 4 - Wheat grains",                      order=>"Wheat 4 - Wheat grains", );
    $h->addX2(  name=>"Wheat 5 - Foods made from wheat",             title=>"Foods made from wheat",                   photo=>"Wheat 5 - Foods made from wheat",             order=>"Wheat 5 - Foods made from wheat", );
    $h
   }
 }

#-------------------------------------------------------------------------------
# China
#-------------------------------------------------------------------------------

 {package China;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Beijing_Ancient_Observatory_1",            title=>"Beijing Ancient Observatory",                  );
    $h->addX2(  name=>"Beijing_National_Stadium_1",               title=>"Beijing National Stadium",                     );
    $h->addX2(  name=>"Beipanjiang_Railway_Bridge",               title=>"Beipanjiang River Railway Bridge",             );
    $h->addX2(  name=>"Canton_tower_1",                           title=>"Canton Tower",                                 );
    $h->addX2(  name=>"Cenotaph_Hong_Kong_1",                     title=>"The Cenotaph",                                 );
    $h->addX2(  name=>"Chiang_Kai-shek_Memorial_Hall_2",          title=>"National Chiang Kai-shek Memorial Hall",       );
    $h->addX2(  name=>"China_Pavilion_2",                         title=>"China pavilion",                               );
    $h->addX2(  name=>"Forbidden_City_1",                         title=>"Forbidden City",                               );
    $h->addX2(  name=>"Great_Hall_Of_The_People_1",               title=>"Great Hall of the People",                     );
    $h->addX2(  name=>"Great_Wall_1",                             title=>"Great Wall of China",                          );
    $h->addX2(  name=>"Guangzhou_International_Finance_Centre",   title=>"Guangzhou International Finance Centre",       );
    $h->addX2(  name=>"Guanyin_Statue_2",                         title=>"Guanyin Statue",                               );
    $h->addX2(  name=>"Heaven_Lake",                              title=>"Heaven Lake",                                  );
    $h->addX2(  name=>"HuangguoshuFall_1",                        title=>"Huangguoshu Waterfall",                        );
    $h->addX2(  name=>"Hukou_Waterfall_1",                        title=>"Hukou Waterfall",                              );
    $h->addX2(  name=>"International_Commerce_Centre_2",          title=>"International Commerce Centre",                );
    $h->addX2(  name=>"JinMao_Tower_1",                           title=>"Jin Mao Tower",                                );
    $h->addX2(  name=>"Karakul_Lake_1",                           title=>"Karakul Lake",                                 );
    $h->addX2(  name=>"Kingkey_100_1",                            title=>"Kingkey 100",                                  );
    $h->addX2(  name=>"Leshan_Buddha_Statue_View",                title=>"Leshan Giant Buddha",                          );
    $h->addX2(  name=>"Lijiang_River_2",                          title=>"Li River",                                     );
    $h->addX2(  name=>"LongshengRiceTerrace",                     title=>"Longsheng Rice Terrace",                       );
    $h->addX2(  name=>"Macau_Tower_4",                            title=>"Macau Tower",                                  );
    $h->addX2(  name=>"Mount_Everest_North_Face",                 title=>"Mount Everest",                                );
    $h->addX2(  name=>"Mount_tai_1",                              title=>"Mount Tai",                                    );
    $h->addX2(  name=>"NamTso_1",                                 title=>"Lake Nam",                                     );
    $h->addX2(  name=>"Nanjing_Road_1",                           title=>"Nanjing Road",                                 );
    $h->addX2(  name=>"Oriental_Pearl_Tower_1",                   title=>"Oriental Pearl Tower",                         );
    $h->addX2(  name=>"Pearl_river_1",                            title=>"Pearl River",                                  );
    $h->addX2(  name=>"Potala_Palace_1",                          title=>"Potala Palace",                                );
    $h->addX2(  name=>"Putuo_Zongcheng_Temple_1",                 title=>"Putuo Zongcheng Temple",                       );
    $h->addX2(  name=>"Sacred_Heart_Cathedral_5",                 title=>"Sacred Heart Cathedral",                       );
    $h->addX2(  name=>"Saint_Sophia_Cathedral_2",                 title=>"Saint Sophia Cathedral",                       );
    $h->addX2(  name=>"Sidu_River_Bridge_2",                      title=>"Sidu River Bridge",                            );
    $h->addX2(  name=>"Temple_of_Heaven_outside",                 title=>"Temple of Heaven",                             );
    $h->addX2(  name=>"Terracotta_3",                             title=>"Terracotta Army",                              );
    $h->addX2(  name=>"The_Bund_1",                               title=>"The Bund",                                     );
    $h->addX2(  name=>"ThreeGorgesDam",                           title=>"Three Gorges Dam",                             );
    $h->addX2(  name=>"Three_Pagodas_1",                          title=>"Three Pagodas",                                );
    $h->addX2(  name=>"Tiananmen_1",                              title=>"Tiananmen",                                    );
    $h->addX2(  name=>"Tianjin_Eye_2",                            title=>"Tianjin Eye",                                  );
    $h->addX2(  name=>"TigerLeapingGorge",                        title=>"Tiger Leaping Gorge",                          );
    $h->addX2(  name=>"Victoria_Harbour_1",                       title=>"Victoria Harbour",                             );
    $h->addX2(  name=>"White_Horse_Temple_1",                     title=>"White Horse Temple",                           );
    $h->addX2(  name=>"Wuyi_Mountains_1",                         title=>"Mount Wuyi",                                   );
    $h->addX2(  name=>"Wuzhen_3",                                 title=>"Wuzhen Water Town",                            );
    $h->addX2(  name=>"Xihoumen_Bridge_in_Zhoushan",              title=>"Xihoumen Bridge",                              );
    $h->addX2(  name=>"Yangtze_River_2",                          title=>"Yangtze River",                                );
    $h->addX2(  name=>"Yu_Garden_3",                              title=>"Yuyuan Garden",                                );
    $h->addX2(  name=>"grandCanal",                               title=>"Grand Canal",                                  );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Collective Nouns in English
#-------------------------------------------------------------------------------

 {package CollectiveNounsInEnglish;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add( 1, "Bed of roses");
    $h->add( 4, "Bouquet of flowers");
    $h->add( 3, "Bunch of bananas");
    $h->add( 2, "Bunch of grapes");
    $h->add( 3, "Cache of jewels");
    $h->add( 2, "Clump of trees");
    $h->add( 2, "Fleet of cars");
    $h->add( 2, "Flock of birds");
    $h->add( 3, "Flotilla of ships");
    $h->add( 2, "Galaxy of stars");
    $h->add( 1, "Hand of cards");
    $h->add( 3, "Herd of seahorses");
    $h->add( 2, "Host of angels");
    $h->add( 3, "Library of books");
    $h->add( 1, "Nest of eggs");
    $h->add( 1, "Peal of bells");
    $h->add( 2, "Pile of bricks");
    $h->add( 1, "Pile of logs");
    $h->add( 1, "Pod of peas");
    $h->add( 3, "Quiver of arrows");
    $h->add( 4, "Range of mountains");
    $h->add( 1, "Ring of keys");
    $h->add( 1, "Round of beer");
    $h->add( 3, "Squadron of aircraft");
    $h->add( 2, "Stack of plates");
    $h->add( 3, "String of Pearls");
    $h
   }
 }
#-------------------------------------------------------------------------------
# Collective Nouns in German
#-------------------------------------------------------------------------------

 {package CollectiveNounsInGerman;
  use base qw(Application);

  sub Load() {CollectiveNounsInEnglish::Load()}
 }

#-------------------------------------------------------------------------------
# Colours
#-------------------------------------------------------------------------------

 {package Colours;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add(10, "Black");
    $h->add(10, "Blue");
    $h->add(10, "Brown");
    $h->add(10, "Cream");
    $h->add(10, "Gold");
    $h->add(10, "Green");
    $h->add(10, "Grey");
    $h->add(10, "Orange");
    $h->add(10, "Pink");
    $h->add(10, "Purple");
    $h->add(10, "Red");
    $h->add(10, "Silver");
    $h->add(10, "White");
    $h->add(10, "Yellow");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Another day another sunset
#-------------------------------------------------------------------------------

 {package AnotherDayAnotherSunset;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add(113, "Carrauntoohil");
    $h->add(114, "A Winter's Day");
    $h->add(115, "Beach Siesta");
    $h->add(116, "Going Somewhere");
    $h->add(117, "Nostalgia");
    $h->add(118, "Happy Days");
    $h->add(119, "Memories");
    $h->add(120, "Love is Everything");
    $h->add(122, "Adios Amigos");
    $h->add(121, "Another Day, Another Sunset");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Christmas
#-------------------------------------------------------------------------------

 {package Christmas;
  use base qw(ApplicationUrl);

  sub Load()
   {my $h = bless {};
    use Facts::Christmas_urls;
    my $u = urls();
    $h->add($u, "Advent Calendar");
    $h->add($u, "Advent Candle");
    $h->add($u, "Artificial Christmas Tree");
    $h->add($u, "Bauble");
    $h->add($u, "Candlelit Church Service");
    $h->add($u, "Candy Canes");
    $h->add($u, "Chocolate Gold Coins");
    $h->add($u, "Chocolate Liqueurs");
    $h->add($u, "Chocolate Santa Claus");
    $h->add($u, "Chocolate Yule Log");
    $h->add($u, "Christingle");
    $h->add($u, "Christmas Cactus");
    $h->add($u, "Christmas Cake");
    $h->add($u, "Christmas Candle");
    $h->add($u, "Christmas Cards");
    $h->add($u, "Christmas Carol");
    $h->add($u, "Christmas Market");
    $h->add($u, "Christmas Music");
    $h->add($u, "Christmas Pudding");
    $h->add($u, "Christmas Stamps");
    $h->add($u, "Christmas Stockings");
    $h->add($u, "Christmas Tree Decoration");
    $h->add($u, "Christmas Tree Fairy");
    $h->add($u, "Christmas Tree");
    $h->add($u, "Christmas Truce");
    $h->add($u, "Christstollen");
    $h->add($u, "Cookies");
    $h->add($u, "Crackers");
    $h->add($u, "Cranberry Sauce");
    $h->add($u, "Department Store Decorations");
    $h->add($u, "Eggnog");
    $h->add($u, "Fairy Lights");
    $h->add($u, "Famous Christmas Poem");
    $h->add($u, "Famous Christmas Story");
    $h->add($u, "Gingerbread");
    $h->add($u, "Holly");
    $h->add($u, "House Decorations");
    $h->add($u, "Inflatable Santa Claus");
    $h->add($u, "Log Fire");
    $h->add($u, "Mince Pies");
    $h->add($u, "Mistletoe");
    $h->add($u, "Mixed Nuts");
    $h->add($u, "Mulled Wine");
    $h->add($u, "Nativity Play");
    $h->add($u, "Nativity Scene");
    $h->add($u, "Nutcracker Ballet");
    $h->add($u, "Pantomime");
    $h->add($u, "Poinsettia");
    $h->add($u, "Presents");
    $h->add($u, "Public Christmas Tree");
    $h->add($u, "Reindeer Antlers");
    $h->add($u, "Reindeer");
    $h->add($u, "Rudolph the Red-Nosed Reindeer");
    $h->add($u, "Santa Claus Parade");
    $h->add($u, "Santa Claus");
    $h->add($u, "Santa Hat");
    $h->add($u, "Santa's Elves");
    $h->add($u, "Santa's Grotto");
    $h->add($u, "Snow Globe");
    $h->add($u, "Snowman");
    $h->add($u, "Star of Bethlehem");
    $h->add($u, "Street Lights");
    $h->add($u, "Sugar Mice");
    $h->add($u, "Sweets");
    $h->add($u, "Table Decoration");
    $h->add($u, "Tinsel");
    $h->add($u, "Tobogganing");
    $h->add($u, "Traditional Nutcrackers");
    $h->add($u, "Turkey");
    $h->add($u, "Wreath");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Chocolate Guinness Cake
#-------------------------------------------------------------------------------

 {package ChocolateGoodnessCake;
  use base qw(Application);

  sub add($$;$$)
   {my ($h, $order, $name, $group) = @_;
                           $group //= 0;
    my $title = substr($name, 5); $title = 'Chocolate Goodness Cake' if $group;
    my $c = substr($name, 0, 1);
#   my $group = ($c eq 'u' ? 1 : $c eq 'i' ? 2 : $c eq 'p' ? 3 : 4);
    $h->{$name} = {group=>$group, order=>sprintf("%03d", $order), name=>$name, title=>$title, order=>$name};
   }

  sub genJava($$)
   {my ($data, $app) = @_;
    my $s = '';
    for(sort {$a->order <=> $b->order} $app->things)
     {my $group = $_->group;
      my $name  = $_->name;
      my $title  = $_->title;

      $s .= <<"END";
`  add($group, "$name", "$title");
END
     }
    $s
   }
  sub Load()
   {my $h = bless {};
    my $n = 0;
    $h->add(++$n, "title", 1);
    $h->add(++$n, "utensils", 1);
    $h->add(++$n, "u01. Weighing scales");
    $h->add(++$n, "u02. Mixing bowl");
    $h->add(++$n, "u03. Knife and spoons");
    $h->add(++$n, "u04. Sieve");
    $h->add(++$n, "u05. Spatula");
    $h->add(++$n, "u06. Two cake tins with removeable bases");
    $h->add(++$n, "u07. Greaseproof paper");
    $h->add(++$n, "u08. Hand blender");
    $h->add(++$n, "u09. Plate");
    $h->add(++$n, "u10. Grater");
    $h->add(++$n, "u11. Utensils");
    $h->add(++$n, "ingredients", 1);
    $h->add(++$n, "i01. Butter");
    $h->add(++$n, "i02. 8oz or 220g  butter");
    $h->add(++$n, "i03. Soft brown sugar");
    $h->add(++$n, "i04. 12oz or 340g soft brown sugar");
    $h->add(++$n, "i05. Four eggs");
    $h->add(++$n, "i06. Plain flour");
    $h->add(++$n, "i07. 8oz or 220g plain flour");
    $h->add(++$n, "i08. Baking powder");
    $h->add(++$n, "i09. Half a teaspoon of baking powder");
    $h->add(++$n, "i10. Bicarbonate of soda");
    $h->add(++$n, "i11. Two teaspoons of bicarbonate of soda");
    $h->add(++$n, "i12. Cocoa powder");
    $h->add(++$n, "i13. 4oz or 110g cocoa powder");
    $h->add(++$n, "i14. 14 fl. oz or 400ml Goodness");
    $h->add(++$n, "i15. Icing sugar");
    $h->add(++$n, "i16. 6oz or 170g icing sugar");
    $h->add(++$n, "i17. One teaspoon cocoa powder");
    $h->add(++$n, "i18. Dark chocolate");
    $h->add(++$n, "i19. Grate several chunks of dark chocolate");
    $h->add(++$n, "preparation", 1);
    $h->add(++$n, "p01. Butter");
    $h->add(++$n, "p02. Weigh 8oz or 220g butter");
    $h->add(++$n, "p03. 8oz or 220g  butter");
    $h->add(++$n, "p04. Cut the butter into pieces");
    $h->add(++$n, "p05. Place the butter in a microwave oven");
    $h->add(++$n, "p06. Soften the  butter for one minute");
    $h->add(++$n, "p07. Soften the butter on a low heat setting");
    $h->add(++$n, "p08. Soft brown sugar");
    $h->add(++$n, "p09. 12oz or 340g soft brown sugar");
    $h->add(++$n, "p10. Add the sugar to the softened butter");
    $h->add(++$n, "p11. Blend the sugar and butter");
    $h->add(++$n, "p12. Four eggs");
    $h->add(++$n, "p13. Break the eggs into a mixing bowl");
    $h->add(++$n, "p14. Eggs in mixing bowl");
    $h->add(++$n, "p15. Whisk the eggs with a blender");
    $h->add(++$n, "p16. Whisked eggs");
    $h->add(++$n, "p17. Add the whisked eggs to the sugar and butter");
    $h->add(++$n, "p18. Plain flour");
    $h->add(++$n, "p19. Weigh 8oz or 220g plain flour");
    $h->add(++$n, "p20. 8oz or 220g plain flour");
    $h->add(++$n, "p21. Baking powder");
    $h->add(++$n, "p22. Measure half a teaspoon of baking powder");
    $h->add(++$n, "p23. Bicarbonate of soda");
    $h->add(++$n, "p24. Measure two teaspoons of bicarbonate of soda");
    $h->add(++$n, "p25. Sift the flour, baking powder and bicarbonate of soda onto the eggs, sugar and butter mixture");
    $h->add(++$n, "p26. Cocoa powder");
    $h->add(++$n, "p27. Measure 4oz or 110g cocoa powder");
    $h->add(++$n, "p28. 4oz or 110g cocoa powder");
    $h->add(++$n, "p29. Sift the cocoa powder onto the flour, eggs, sugar and butter mixture");
    $h->add(++$n, "p30. Take one can of Goodness");
    $h->add(++$n, "p31. 14 fl.oz or 400ml Goodness");
    $h->add(++$n, "p32. Add the Goodness to the cocoa powder, flour, eggs, sugar and butter mixture");
    $h->add(++$n, "p33. Whisk the mixture with a hand blender");
    $h->add(++$n, "p34. Whisk the mixture until smooth");
    $h->add(++$n, "p35. Take two cake tins with removeable bases");
    $h->add(++$n, "p36. Cake tin with removable base");
    $h->add(++$n, "p37. Tighten cake tin with catch");
    $h->add(++$n, "p38. Cut a circle of greaseproof paper a little larger than the base of the cake tin");
    $h->add(++$n, "p39. Press the greaseproof paper into the base of the cake tin");
    $h->add(++$n, "p40. Cut a second circle of greaseproof paper and add to the base of the second cake tin");
    $h->add(++$n, "p41. Pour half of the mixture into one cake tin");
    $h->add(++$n, "p42. Pour the remaining mixture into the other cake tin");
    $h->add(++$n, "p43. Heat the oven to 180C, 350F or Gas Mark 4");
    $h->add(++$n, "p44. Place the cake tins in the centre of the oven and cook for 30-40 minutes");
    $h->add(++$n, "p45. If the oven is not fan assisted, rotate the cakes after 20 minutes to enable even cooking");
    $h->add(++$n, "p46. Test the cakes with a fork. When the cake is cooked, the fork will come away cleanly");
    $h->add(++$n, "p47. When cooked, remove the cakes from the oven and leave to cool");
    $h->add(++$n, "decoration", 1);
    $h->add(++$n, "d01. When cool, remove the cakes from the tins");
    $h->add(++$n, "d02. Remove the base of the tin and gently peel away the greaseproof paper with a knife");
    $h->add(++$n, "d03. Place the cake on a large plate");
    $h->add(++$n, "d04. Icing sugar");
    $h->add(++$n, "d05. Weigh  6oz or 170g icing sugar");
    $h->add(++$n, "d06. Place the icing sugar into a bowl");
    $h->add(++$n, "d07. Cocoa powder");
    $h->add(++$n, "d08. Add one teaspoon of cocoa powder to the icing sugar");
    $h->add(++$n, "d09. Mix the cocoa powder and icing sugar together");
    $h->add(++$n, "d10. Warm water");
    $h->add(++$n, "d11. 3 tablespoons of warm water");
    $h->add(++$n, "d12. Add 3 tablespoons of warm water to the icing sugar");
    $h->add(++$n, "d13. Mix until smooth");
    $h->add(++$n, "d14. Spread half the icing sugar onto the top of one cake");
    $h->add(++$n, "d15. Spread smoothly and evenly to cover the top of the cake");
    $h->add(++$n, "d16. Gently remove the greaseproof paper  from the base of the second cake");
    $h->add(++$n, "d17. Place the second cake on top of the first");
    $h->add(++$n, "d18. Spread the remaining icing sugar on top of the cake");
    $h->add(++$n, "d19. Spread smoothly and evenly to cover the top of the cake and allow to set");
    $h->add(++$n, "d21. Use icing sugar to decorate the top of the cake");
    $h->add(++$n, "d22. Sift enough icing sugar to cover the top of the cake with a light dusting");
    $h->add(++$n, "d23. Light dusting of icing sugar");
    $h->add(++$n, "d24. Dark chocolate");
    $h->add(++$n, "d25. Grate several chunks of dark chocolate");
    $h->add(++$n, "d26. Grated chocolate");
    $h->add(++$n, "d27. Cover the top of the cake with grated chocolate");
    $h->add(++$n, "eating", 1);
    $h->add(++$n, "d28. Cut into wedges and enjoy!  This cake tastes better if stored for a few days before eating");
    $h
   }

   sub Description() {<< 'END'}

Have fun baking - and eating - this delicious chocolate goodness cake.
It's easy when you follow the simple steps in this app. From the
ingredients and kitchen utensils to the preparation, baking, and
decoration, our 80 photos guide you every step of the way. This
mouth-watering cake is great for all occasions, and tastes better the
longer it is kept - if you can resist eating it!

END
 }

#-------------------------------------------------------------------------------
# Cliffs, Stacks and Monoliths
#-------------------------------------------------------------------------------

 {package Cliffs;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(name=>"AiguilleDuDru",            title=>"Aiguille du Dru, North Face", );
    $h->addX2(name=>"Auyantepui",                                                     );
    $h->addX2(name=>"Ball's Pyramid",                                                 );
    $h->addX2(name=>"Beachy Head",                                                    );
    $h->addX2(name=>"Beinisvoro",                                                     );
    $h->addX2(name=>"BenNevis2",                title=>"Ben Nevis, North Face",       );
    $h->addX2(name=>"Cabo Girao",                                                     );
    $h->addX2(name=>"Cap Canaille",                                                   );
    $h->addX2(name=>"Cape Enniberg",                                                  );
    $h->addX2(name=>"Cerro Torre",                                                    );
    $h->addX2(name=>"Cliffs of Moher",                                                );
    $h->addX2(name=>"DevilsTower2",             title=>"Devils Tower",                );
    $h->addX2(name=>"Drakensberg Amphitheatre",                                       );
    $h->addX2(name=>"Eiger2",                   title=>"Eiger North Face",            );
    $h->addX2(name=>"El Capitan",                                                     );
    $h->addX2(name=>"Grand Teton",                                                    );
    $h->addX2(name=>"GrandCanyon",              title=>"Grand Canyon",                );
    $h->addX2(name=>"Grandes Jorasses",         title=>"Grandes Jorasses North Face", );
    $h->addX2(name=>"Great Australian Bight",                                         );
    $h->addX2(name=>"HalfDome2",                title=>"Half Dome",                   );
    $h->addX2(name=>"Lhotse",                   title=>"Lhotse South Face",           );
    $h->addX2(name=>"Matterhorn (North face)",  title=>"Matterhorn North Face",       );
    $h->addX2(name=>"Mitre Peak",                                                     );
    $h->addX2(name=>"Mons Klint",                                                     );
    $h->addX2(name=>"MonteFitzRoy2",            title=>"Monte Fitz Roy",              );
    $h->addX2(name=>"Mount Thor",                                                     );
    $h->addX2(name=>"Nanga Parbat",             title=>"Nanga Parbat Rupal Face",     );
    $h->addX2(name=>"Notch Peak",                                                     );
    $h->addX2(name=>"Old Harry Rocks",                                                );
    $h->addX2(name=>"OldManOfHoy3",             title=>"Old Man of Hoy",              );
    $h->addX2(name=>"PaintedWall",              title=>"Painted Wall",                );
    $h->addX2(name=>"Piz Badile",                                                     );
    $h->addX2(name=>"Preikestolen2",            title=>"Preikestolen",                );
    $h->addX2(name=>"SgurrAlasdair2",           title=>"Sgurr Alasdair",              );
    $h->addX2(name=>"ShipRock2",                title=>"Shiprock",                    );
    $h->addX2(name=>"Stawamus Chief",                                                 );
    $h->addX2(name=>"Sugarloaf Mountain",                                             );
    $h->addX2(name=>"Table Mountain",                                                 );
    $h->addX2(name=>"The Latok Group",                                                );
    $h->addX2(name=>"TorreDelPaine2",           title=>"Torres del Paine",            );
    $h->addX2(name=>"Trango Towers",                                                  );
    $h->addX2(name=>"TreCime",                  title=>"Tre Cime di Lavaredo",        );
    $h->addX2(name=>"Troll Wall",                                                     );
    $h->addX2(name=>"TwelveApostles",           title=>"The Twelve Apostles",         );
    $h->addX2(name=>"WhiteCliffsOfDover2",      title=>"White Cliffs of Dover",       );
    $h
   }
 }


#-------------------------------------------------------------------------------
# Coral Reef Fish
#-------------------------------------------------------------------------------

 {package CoralReefFish;
  use base qw(ApplicationUrl);

  sub Load()
   {my $h = bless {};
    use Facts::CoralReefFish_urls;
    my $u = urls();
    $h->add($u, "Atlantic Blue Tang");
    $h->add($u, "Banggai Cardinalfish");
    $h->add($u, "Bicolour Parrotfish");
    $h->add($u, "Blackback Butterflyfish");
    $h->add($u, "Blackspotted Puffer");
    $h->add($u, "Blacktip Grouper");
    $h->add($u, "Blue Triggerfish");
    $h->add($u, "Bluespine Unicornfish");
    $h->add($u, "Bluespotted Ribbontail Ray");
    $h->add($u, "Bluestripe Snapper");
    $h->add($u, "Broadbarred Firefish");
    $h->add($u, "Clearfin Lionfish");
    $h->add($u, "Clown Triggerfish");
    $h->add($u, "Common Lionfish");
    $h->add($u, "Copperband Butterflyfish");
    $h->add($u, "Emperor Angelfish");
    $h->add($u, "French Angelfish");
    $h->add($u, "Glasseye Snapper");
    $h->add($u, "Grey Reef Shark");
    $h->add($u, "Lagoon Triggerfish");
    $h->add($u, "Longhorn Cowfish");
    $h->add($u, "Malabar Grouper");
    $h->add($u, "Mandarinfish");
    $h->add($u, "Mangrove Red Snapper");
    $h->add($u, "Marbled Electric Ray");
    $h->add($u, "Masked Puffer");
    $h->add($u, "Midas Blenny");
    $h->add($u, "Moorish Idol");
    $h->add($u, "Orange-lined Triggerfish");
    $h->add($u, "Ornate Ghost Pipefish");
    $h->add($u, "Peacock Flounder");
    $h->add($u, "Puffer Fish");
    $h->add($u, "Queen Angelfish");
    $h->add($u, "Red Lionfish");
    $h->add($u, "Red Sea Clownfish");
    $h->add($u, "Red Sea Sailfin Tang");
    $h->add($u, "Saddle Butterflyfish");
    $h->add($u, "Scissortail Sergeant");
    $h->add($u, "Sea Goldie");
    $h->add($u, "Slender-spined Porcupine Fish");
    $h->add($u, "Spiny Seahorse");
    $h->add($u, "Spotbase Burrfish");
    $h->add($u, "Spotted Eagle Ray");
    $h->add($u, "Spotted Surgeonfish");
    $h->add($u, "Stonefish");
    $h->add($u, "Tiger Grouper");
    $h->add($u, "Titan Triggerfish");
    $h->add($u, "Yellow Boxfish");
    $h->add($u, "Yellow Tang");
    $h->add($u, "Yellow-edged Lyretail");
    $h->add($u, "Yellowtail Clownfish");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Count Action Toys in English
#-------------------------------------------------------------------------------

 {package CountActionToysInEnglish;
  use base qw(CountingApplication);

  sub Load()
   {my $h = bless {};
    $h->add2($_) for 1..10;
    $h
   }
 }

#-------------------------------------------------------------------------------
# Count Animals in English
#-------------------------------------------------------------------------------

 {package CountAnimalsInEnglish;
  use base qw(CountingApplication);

  my %h;
  sub add($$$$)
   {my ($group, $colour, $name, $title) = @_;
    $h{$name} = {colour=>$colour, name=>$name, prefix=>$name, order=>$name, group=>$group, title=>$title, order=>$name};
   }

  sub Load()
   {add(1, "ef5410",  1, "One");
    add(1, "cf7e99",  2, "Two");
    add(1, "5b8cdc",  3, "Three");
    add(2, "efc637",  4, "Four");
    add(2, "f18564",  5, "Five");
    add(2, "fdb26f",  6, "Six");
    add(3, "bd7235",  7, "Seven");
    add(3, "ffd06a",  8, "Eight");
    add(3, "1bd5c1",  9, "Nine");
    add(4, "9082f6", 10, "Ten");
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Count Chocolates in English
#-------------------------------------------------------------------------------

 {package CountChocolatesInEnglish;
  use base qw(CountingApplication);

  sub Load()
   {my $h = bless {};
    $h->add(1,  1, "One");
    $h->add(1,  2, "Two");
    $h->add(1,  3, "Three");
    $h->add(1,  4, "Four");
    $h->add(2,  5, "Five");
    $h->add(2,  6, "Six");
    $h->add(2,  7, "Seven");
    $h->add(2,  8, "Eight");
    $h->add(3,  9, "Nine");
    $h->add(3, 10, "Ten");
    $h->add(3, 11, "Eleven");
    $h->add(3, 12, "Twelve");
    $h->add(4, 13, "Thirteen");
    $h->add(4, 14, "Fourteen");
    $h->add(4, 15, "Fifteen");
    $h->add(4, 16, "Sixteen");
    $h->add(5, 17, "Seventeen");
    $h->add(5, 18, "Eighteen");
    $h->add(5, 19, "Nineteen");
    $h->add(5, 20, "Twenty");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Count Dogs in English
#-------------------------------------------------------------------------------

 {package CountDogsInEnglish;
  use base qw(CountingApplication);

  my %h;
  sub add($$$$)
   {my ($group, $colour, $name, $title) = @_;
    $h{$name} = {colour=>$colour, name=>$name, prefix=>$name, group=>$group, title=>$title, order=>$name};
   }

  sub Load()
   {add(1, "f87d2b",  1, "One");
    add(1, "88b33e",  2, "Two");
    add(1, "4f66f3",  3, "Three");
    add(2, "8f45d4",  4, "Four");
    add(2, "cd3500",  5, "Five");
    add(2, "ffae4e",  6, "Six");
    add(3, "fb6291",  7, "Seven");
    add(3, "f9b81d",  8, "Eight");
    add(3, "5959fb",  9, "Nine");
    add(4, "d65e5d", 10, "Ten");
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Count Dolls in English
#-------------------------------------------------------------------------------

 {package CountDollsInEnglish;
  use base qw(CountingApplication);

  sub Load()
   {my $h = bless {};
    $h->add(1,  1, "One");
    $h->add(1,  2, "Two");
    $h->add(1,  3, "Three");
    $h->add(1,  4, "Four");
    $h->add(2,  5, "Five");
    $h->add(2,  6, "Six");
    $h->add(2,  7, "Seven");
    $h->add(2,  8, "Eight");
    $h->add(3,  9, "Nine");
    $h->add(3, 10, "Ten");
    $h->add(3, 11, "Eleven");
    $h->add(3, 12, "Twelve");
    $h->add(4, 13, "Thirteen");
    $h->add(4, 14, "Fourteen");
    $h->add(4, 15, "Fifteen");
    $h->add(4, 16, "Sixteen");
    $h->add(5, 17, "Seventeen");
    $h->add(5, 18, "Eighteen");
    $h->add(5, 19, "Nineteen");
    $h->add(5, 20, "Twenty");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Count Euros
#-------------------------------------------------------------------------------

 {package CountEuros;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("0-30");
    $h->add("0-71");
    $h->add("3-88");
    $h->add("1-48");
    $h->add("1-80");
    $h->add("1-90");
    $h->add("1-95");
    $h->add("10-10");
    $h->add("10-29");
    $h->add("10-36");
    $h->add("10-50");
    $h->add("10-66");
    $h->add("10-80");
    $h->add("11-00");
    $h->add("11-10");
    $h->add("12-15");
    $h->add("12-25");
    $h->add("12-30");
    $h->add("12-60");
    $h->add("12-74");
    $h->add("12.25");
    $h->add("12.35");
    $h->add("13-00");
    $h->add("13-25");
    $h->add("14-00");
    $h->add("14-80");
    $h->add("15-50");
    $h->add("18-90");
    $h->add("2-45");
    $h->add("2-46");
    $h->add("2-61");
    $h->add("2-65");
    $h->add("3-14");
    $h->add("3-30");
    $h->add("3-53");
    $h->add("4-79");
    $h->add("5-0");
    $h->add("5-05");
    $h->add("5-65");
    $h->add("5-89");
    $h->add("6-18");
    $h->add("6-39");
    $h->add("7-33");
    $h->add("7-35");
    $h->add("7-40");
    $h->add("7-46");
    $h->add("7-60");
    $h->add("7-65");
    $h->add("7-79");
    $h->add("7-80");
    $h->add("8-00");
    $h->add("8-10");
    $h->add("8-15");
    $h->add("8-25");
    $h->add("8-55");
    $h->add("8-75");
    $h->add("9-20");
    $h->add("9-46");
    $h->add("9-75");
    $h->add("9-95");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Count English Flowers
#-------------------------------------------------------------------------------

 {package CountFlowersInEnglish;
  use base qw(CountingApplication);

  my %h;
  sub add($$$$)
   {my ($group, $colour, $name, $title) = @_;
    $h{$name} = {colour=>$colour, name=>$name, prefix=>$name, group=>$group, title=>$title, order=>$name};
   }

  sub Load()
   {add(1, "dc9389",  1, "One");
    add(1, "dbbd15",  2, "Two");
    add(1, "f88600",  3, "Three");
    add(2, "97e500",  4, "Four");
    add(2, "e877b7",  5, "Five");
    add(2, "a76600",  6, "Six");
    add(3, "e100de",  7, "Seven");
    add(3, "d79d1f",  8, "Eight");
    add(3, "b33354",  9, "Nine");
    add(4, "a7de24", 10, "Ten");
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Count Soft Toys in English
#-------------------------------------------------------------------------------

 {package CountSoftToysInEnglish;
  use base qw(CountingApplication);

  sub add($$$$)
   {my ($h, $group, $number, $title) = @_;
    my $order = sprintf "%08d", $number;
    $h->{$title} = {colour=>ColourApplication::vividColour(), name=>$title, prefix=>$number, group=>$group, title=>$title, order=>$order};
   }

  sub Load()
   {my $h = bless {};
    $h->add(1,  1, "One Bee");
    $h->add(1,  1, "One Lobster");
    $h->add(1,  1, "One Owl");
    $h->add(1,  2, "Two Donkeys");
    $h->add(1,  2, "Two Fish");
    $h->add(1,  2, "Two Sheep");
    $h->add(1,  3, "Three Ducks");
    $h->add(1,  3, "Three Parrots");
    $h->add(1,  3, "Three Penguins");
    $h->add(2,  4, "Four Horses");
    $h->add(2,  4, "Four Lions");
    $h->add(2,  4, "Four Reindeer");
    $h->add(2,  5, "Five Cats");
    $h->add(2,  5, "Five Koalas");
    $h->add(2,  5, "Five Leopards");
    $h->add(2,  6, "Six Cows");
    $h->add(2,  6, "Six Mice");
    $h->add(2,  6, "Six Monkeys");
    $h->add(3,  7, "Seven Chicks");
    $h->add(3,  7, "Seven Tigers");
    $h->add(3,  8, "Eight Hedgehogs");
    $h->add(3,  8, "Eight Pigs");
    $h->add(3,  9, "Nine Dolphins");
    $h->add(3,  9, "Nine Rabbits");
    $h->add(3, 10, "Ten Dogs");
    $h->add(3, 10, "Ten Elephants");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Count Teddy Bears in English
#-------------------------------------------------------------------------------

 {package CountTeddyBearsInEnglish;
  use base qw(CountingApplication);

  sub Load()
   {my $h = bless {};
    $h->add(1,  1, "One");
    $h->add(1,  2, "Two");
    $h->add(1,  3, "Three");
    $h->add(2,  4, "Four");
    $h->add(2,  5, "Five");
    $h->add(2,  6, "Six");
    $h->add(3,  7, "Seven");
    $h->add(3,  8, "Eight");
    $h->add(3,  9, "Nine");
    $h->add(4, 10, "Ten");
    $h->add(4, 11, "Eleven");
    $h->add(4, 12, "Twelve");
    $h->add(5, 13, "Thirteen");
    $h->add(5, 14, "Fourteen");
    $h->add(5, 15, "Fifteen");
    $h->add(6, 16, "Sixteen");
    $h->add(6, 17, "Seventeen");
    $h->add(6, 18, "Eighteen");
    $h->add(7, 19, "Nineteen");
    $h->add(7, 20, "Twenty");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Count Toy Dogs in English
#-------------------------------------------------------------------------------

 {package CountToyDogsInEnglish;
  use base qw(CountingApplication);

  sub Load()
   {my $h = bless {};
    $h->add(1,  1, "One");
    $h->add(1,  2, "Two");
    $h->add(1,  3, "Three");
    $h->add(1,  4, "Four");
    $h->add(2,  5, "Five");
    $h->add(2,  6, "Six");
    $h->add(2,  7, "Seven");
    $h->add(2,  8, "Eight");
    $h->add(3,  9, "Nine");
    $h->add(3, 10, "Ten");
    $h->add(3, 11, "Eleven");
    $h->add(3, 12, "Twelve");
    $h->add(4, 13, "Thirteen");
    $h->add(4, 14, "Fourteen");
    $h->add(4, 15, "Fifteen");
    $h->add(4, 16, "Sixteen");
    $h->add(5, 17, "Seventeen");
    $h->add(5, 18, "Eighteen");
    $h->add(5, 19, "Nineteen");
    $h->add(5, 20, "Twenty");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Day of the week
#-------------------------------------------------------------------------------

 {package Day;
  use base qw(ColourApplication);

  my %h;
  sub add($$)
   {my ($colour, $name) = @_;
    $h{$name} = {colour=>$colour, name=>$name, prefix=>length($name), group=>1, order=>$name};
   }

  sub Load()
   {add("fbec1e", "Monday");
    add("fd5dbf", "Tuesday");
    add("09ec0f", "Wednesday");
    add("ff7e00", "Thursday");
    add("370af8", "Friday");
    add("a900e1", "Saturday");
    add("fb001e", "Sunday");
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Days of the week
#-------------------------------------------------------------------------------

 {package Days;
  use base qw(ColourApplication);

  my %h;
  sub add($$)
   {my ($colour, $name) = @_;
    $h{$name} = {colour=>$colour, name=>$name, prefix=>length($name), group=>1, order=>$name};
   }

  sub Load()
   {add("fbec1e", "Monday");
    add("fd5dbf", "Tuesday");
    add("09ec0f", "Wednesday");
    add("ff7e00", "Thursday");
    add("370af8", "Friday");
    add("a900e1", "Saturday");
    add("fb001e", "Sunday");
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Days of the week in German
#-------------------------------------------------------------------------------

 {package DaysGerman;

  sub Load() {Days::Load()}
 }

#-------------------------------------------------------------------------------
# DeathValley
#-------------------------------------------------------------------------------

 {package DeathValley;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->addX2(  name=>"Artists's Palette",                          );
    $h->addX2(  name=>"Badwater Basin (at ground level)",           );
    $h->addX2(  name=>"Badwater Basin (from above)",                );
    $h->addX2(  name=>"Badwater Basin salt flats",                  );
    $h->addX2(  name=>"Bobcat",                                     );
    $h->addX2(  name=>"Bristlecone Pine",                           );
    $h->addX2(  name=>"Coyote",                                     );
    $h->addX2(  name=>"Creosote Bush",                              );
    $h->addX2(  name=>"Dante's View",                               );
    $h->addX2(  name=>"Darwin Falls",                               );
    $h->addX2(  name=>"Death Valley National Park",                 );
    $h->addX2(  name=>"Death Valley Pupfish",                       );
    $h->addX2(  name=>"Death Valley in bloom",                      );
    $h->addX2(  name=>"Desert Bighorn Sheep",                       );
    $h->addX2(  name=>"Desert Chicory",                             );
    $h->addX2(  name=>"Devil's Golf Course",                        );
    $h->addX2(  name=>"Furnace Creek",                              );
    $h->addX2(  name=>"Golden Canyon",                              );
    $h->addX2(  name=>"Golden Carpet",                              );
    $h->addX2(  name=>"Greater Roadrunner",                         );
    $h->addX2(  name=>"Kit Fox",                                    );
    $h->addX2(  name=>"Leadfield",                                  );
    $h->addX2(  name=>"Manly Beacon",                               );
    $h->addX2(  name=>"Mesquite Sand Dunes",                        );
    $h->addX2(  name=>"Mosaic Canyon",                              );
    $h->addX2(  name=>"Mule Deer",                                  );
    $h->addX2(  name=>"Natural Bridge Canyon",                      );
    $h->addX2(  name=>"Panamint Range from Badwater Basin",         );
    $h->addX2(  name=>"Petroglyphs",                                );
    $h->addX2(  name=>"Racetrack Playa",                            );
    $h->addX2(  name=>"Red Cathedral",                              );
    $h->addX2(  name=>"Saratoga Springs",                           );
    $h->addX2(  name=>"Telescope Peak hiking trail",                );
    $h->addX2(  name=>"Telescope Peak",                             );
    $h->addX2(  name=>"Titus Canyon",                               );
    $h->addX2(  name=>"Twenty Mule Team Canyon",                    );
    $h->addX2(  name=>"Ubehebe Crater",                             );
    $h->addX2(  name=>"Ventifact at Ventifact Ridge",               );
    $h->addX2(  name=>"Wildrose Charcoal Kilns",                    );
    $h->addX2(  name=>"Zabriskie Point",                            );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Discover Thorntons Chocolate
#-------------------------------------------------------------------------------

 {package DiscoverThorntonsChocolates;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add("Chocolate Truffle", 2);
    $h->add("Coconut Dream", 2);
    $h->add("Coffee Truffle", 2);
    $h->add("Country Caramel", 2);
    $h->add("Creamy Fudge", 2);
    $h->add("Hazelnut Praline", 2);
    $h->add("Honeycomb Crunch", 2);
    $h->add("Layered Chocolate Classic", 2);
    $h->add("Orange Zest", 2);
    $h->add("Soft Caramel", 2);
    $h->add("Special Toffee Truffle", 2);
    $h->add("Strawberry Velvet", 2);
    $h->add("Turkish Delight", 2);
    $h->add("Thorntons Chocolate Box", 2);
    $h
   }
 }

#-------------------------------------------------------------------------------
# Domesticated animals
#-------------------------------------------------------------------------------

 {package DomesticatedAnimals;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add(1, "Calf");
    $h->add(1, "Cat");
    $h->add(1, "Elephant");
    $h->add(1, "Oxen");
    $h->add(1, "Sheep");
    $h->add(1, "Yak");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Dogs
#-------------------------------------------------------------------------------

 {package Dogs;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX(  name=>"Alaskan Malamute 1",                     questionTitle=>"Alaskan Malamute",                     title=>"Alaskan Malamute",                     question=>"Alaskan Malamute",                     response=>"Alaskan Malamute",                     photo=>"Alaskan Malamute 1", );
    $h->addX(  name=>"Alaskan Malamute 2",                     questionTitle=>"Alaskan Malamute",                     title=>"Alaskan Malamute",                     question=>"Alaskan Malamute",                     response=>"Alaskan Malamute",                     photo=>"Alaskan Malamute 2", );
    $h->addX(  name=>"American Bulldog 1",                     questionTitle=>"American Bulldog",                     title=>"American Bulldog",                     question=>"American Bulldog",                     response=>"American Bulldog",                     photo=>"American Bulldog 1", );
    $h->addX(  name=>"American Bulldog 2",                     questionTitle=>"American Bulldog",                     title=>"American Bulldog",                     question=>"American Bulldog",                     response=>"American Bulldog",                     photo=>"American Bulldog 2", );
    $h->addX(  name=>"American Eskimo 1",                      questionTitle=>"American Eskimo",                      title=>"American Eskimo",                      question=>"American Eskimo",                      response=>"American Eskimo",                      photo=>"American Eskimo 1", );
    $h->addX(  name=>"American Eskimo 2",                      questionTitle=>"American Eskimo",                      title=>"American Eskimo",                      question=>"American Eskimo",                      response=>"American Eskimo",                      photo=>"American Eskimo 2", );
    $h->addX(  name=>"American Pit Bull Terrier 1",            questionTitle=>"American Pit Bull Terrier",            title=>"American Pit Bull Terrier",            question=>"American Pit Bull Terrier",            response=>"American Pit Bull Terrier",            photo=>"American Pit Bull Terrier 1", );
    $h->addX(  name=>"American Pit Bull Terrier 2",            questionTitle=>"American Pit Bull Terrier",            title=>"American Pit Bull Terrier",            question=>"American Pit Bull Terrier",            response=>"American Pit Bull Terrier",            photo=>"American Pit Bull Terrier 2", );
    $h->addX(  name=>"Appenzeller Sennenhund 1",               questionTitle=>"Appenzeller Sennenhund",               title=>"Appenzeller Sennenhund",               question=>"Appenzeller Sennenhund",               response=>"Appenzeller Sennenhund",               photo=>"Appenzeller Sennenhund 1", );
    $h->addX(  name=>"Appenzeller Sennenhund 2",               questionTitle=>"Appenzeller Sennenhund",               title=>"Appenzeller Sennenhund",               question=>"Appenzeller Sennenhund",               response=>"Appenzeller Sennenhund",               photo=>"Appenzeller Sennenhund 2", );
    $h->addX(  name=>"Argentine Dogo 1",                       questionTitle=>"Argentine Dogo",                       title=>"Argentine Dogo",                       question=>"Argentine Dogo",                       response=>"Argentine Dogo",                       photo=>"Argentine Dogo 1", );
    $h->addX(  name=>"Argentine Dogo 2",                       questionTitle=>"Argentine Dogo",                       title=>"Argentine Dogo",                       question=>"Argentine Dogo",                       response=>"Argentine Dogo",                       photo=>"Argentine Dogo 2", );
    $h->addX(  name=>"Australian Cattle Dog 1",                questionTitle=>"Australian Cattle Dog",                title=>"Australian Cattle Dog",                question=>"Australian Cattle Dog",                response=>"Australian Cattle Dog",                photo=>"Australian Cattle Dog 1", );
    $h->addX(  name=>"Australian Cattle Dog 2",                questionTitle=>"Australian Cattle Dog",                title=>"Australian Cattle Dog",                question=>"Australian Cattle Dog",                response=>"Australian Cattle Dog",                photo=>"Australian Cattle Dog 2", );
    $h->addX(  name=>"Australian Shepherd 1",                  questionTitle=>"Australian Shepherd",                  title=>"Australian Shepherd",                  question=>"Australian Shepherd",                  response=>"Australian Shepherd",                  photo=>"Australian Shepherd 1", );
    $h->addX(  name=>"Australian Shepherd 2",                  questionTitle=>"Australian Shepherd",                  title=>"Australian Shepherd",                  question=>"Australian Shepherd",                  response=>"Australian Shepherd",                  photo=>"Australian Shepherd 2", );
    $h->addX(  name=>"Basenji 1",                              questionTitle=>"Basenji",                              title=>"Basenji",                              question=>"Basenji",                              response=>"Basenji",                              photo=>"Basenji 1", );
    $h->addX(  name=>"Basenji 2",                              questionTitle=>"Basenji",                              title=>"Basenji",                              question=>"Basenji",                              response=>"Basenji",                              photo=>"Basenji 2", );
    $h->addX(  name=>"Bassett Hound 1",                        questionTitle=>"Bassett Hound",                        title=>"Bassett Hound",                        question=>"Bassett Hound",                        response=>"Bassett Hound",                        photo=>"Bassett Hound 1", );
    $h->addX(  name=>"Bassett Hound 2",                        questionTitle=>"Bassett Hound",                        title=>"Bassett Hound",                        question=>"Bassett Hound",                        response=>"Bassett Hound",                        photo=>"Bassett Hound 2", );
    $h->addX(  name=>"Beagle 1",                               questionTitle=>"Beagle",                               title=>"Beagle",                               question=>"Beagle",                               response=>"Beagle",                               photo=>"Beagle 1", );
    $h->addX(  name=>"Beagle 2",                               questionTitle=>"Beagle",                               title=>"Beagle",                               question=>"Beagle",                               response=>"Beagle",                               photo=>"Beagle 2", );
    $h->addX(  name=>"Beauceron 1",                            questionTitle=>"Beauceron",                            title=>"Beauceron",                            question=>"Beauceron",                            response=>"Beauceron",                            photo=>"Beauceron 1", );
    $h->addX(  name=>"Beauceron 2",                            questionTitle=>"Beauceron",                            title=>"Beauceron",                            question=>"Beauceron",                            response=>"Beauceron",                            photo=>"Beauceron 2", );
    $h->addX(  name=>"Belgian Shepherd 1",                     questionTitle=>"Belgian Shepherd",                     title=>"Belgian Shepherd",                     question=>"Belgian Shepherd",                     response=>"Belgian Shepherd",                     photo=>"Belgian Shepherd 1", );
    $h->addX(  name=>"Belgian Shepherd 2",                     questionTitle=>"Belgian Shepherd",                     title=>"Belgian Shepherd",                     question=>"Belgian Shepherd",                     response=>"Belgian Shepherd",                     photo=>"Belgian Shepherd 2", );
    $h->addX(  name=>"Berger Blanc Suisse 1",                  questionTitle=>"Berger Blanc Suisse",                  title=>"Berger Blanc Suisse",                  question=>"Berger Blanc Suisse",                  response=>"Berger Blanc Suisse",                  photo=>"Berger Blanc Suisse 1", );
    $h->addX(  name=>"Berger Blanc Suisse 2",                  questionTitle=>"Berger Blanc Suisse",                  title=>"Berger Blanc Suisse",                  question=>"Berger Blanc Suisse",                  response=>"Berger Blanc Suisse",                  photo=>"Berger Blanc Suisse 2", );
    $h->addX(  name=>"Bernese Mountain Dog 1",                 questionTitle=>"Bernese Mountain Dog",                 title=>"Bernese Mountain Dog",                 question=>"Bernese Mountain Dog",                 response=>"Bernese Mountain Dog",                 photo=>"Bernese Mountain Dog 1", );
    $h->addX(  name=>"Bernese Mountain Dog 2",                 questionTitle=>"Bernese Mountain Dog",                 title=>"Bernese Mountain Dog",                 question=>"Bernese Mountain Dog",                 response=>"Bernese Mountain Dog",                 photo=>"Bernese Mountain Dog 2", );
    $h->addX(  name=>"Bichon Frise 1",                         questionTitle=>"Bichon Frise",                         title=>"Bichon Frise",                         question=>"Bichon Frise",                         response=>"Bichon Frise",                         photo=>"Bichon Frise 1", );
    $h->addX(  name=>"Bichon Frise 2",                         questionTitle=>"Bichon Frise",                         title=>"Bichon Frise",                         question=>"Bichon Frise",                         response=>"Bichon Frise",                         photo=>"Bichon Frise 2", );
    $h->addX(  name=>"Border Collie 1",                        questionTitle=>"Border Collie",                        title=>"Border Collie",                        question=>"Border Collie",                        response=>"Border Collie",                        photo=>"Border Collie 1", );
    $h->addX(  name=>"Border Collie 2",                        questionTitle=>"Border Collie",                        title=>"Border Collie",                        question=>"Border Collie",                        response=>"Border Collie",                        photo=>"Border Collie 2", );
    $h->addX(  name=>"Boston Terrier 1",                       questionTitle=>"Boston Terrier",                       title=>"Boston Terrier",                       question=>"Boston Terrier",                       response=>"Boston Terrier",                       photo=>"Boston Terrier 1", );
    $h->addX(  name=>"Boston Terrier 2",                       questionTitle=>"Boston Terrier",                       title=>"Boston Terrier",                       question=>"Boston Terrier",                       response=>"Boston Terrier",                       photo=>"Boston Terrier 2", );
    $h->addX(  name=>"Boxer 1",                                questionTitle=>"Boxer",                                title=>"Boxer",                                question=>"Boxer",                                response=>"Boxer",                                photo=>"Boxer 1", );
    $h->addX(  name=>"Boxer 2",                                questionTitle=>"Boxer",                                title=>"Boxer",                                question=>"Boxer",                                response=>"Boxer",                                photo=>"Boxer 2", );
    $h->addX(  name=>"Bracco Italiano 1",                      questionTitle=>"Bracco Italiano",                      title=>"Bracco Italiano",                      question=>"Bracco Italiano",                      response=>"Bracco Italiano",                      photo=>"Bracco Italiano 1", );
    $h->addX(  name=>"Bracco Italiano 2",                      questionTitle=>"Bracco Italiano",                      title=>"Bracco Italiano",                      question=>"Bracco Italiano",                      response=>"Bracco Italiano",                      photo=>"Bracco Italiano 2", );
    $h->addX(  name=>"Briard 1",                               questionTitle=>"Briard",                               title=>"Briard",                               question=>"Briard",                               response=>"Briard",                               photo=>"Briard 1", );
    $h->addX(  name=>"Briard 2",                               questionTitle=>"Briard",                               title=>"Briard",                               question=>"Briard",                               response=>"Briard",                               photo=>"Briard 2", );
    $h->addX(  name=>"Brittany 1",                             questionTitle=>"Brittany",                             title=>"Brittany",                             question=>"Brittany",                             response=>"Brittany",                             photo=>"Brittany 1", );
    $h->addX(  name=>"Brittany 2",                             questionTitle=>"Brittany",                             title=>"Brittany",                             question=>"Brittany",                             response=>"Brittany",                             photo=>"Brittany 2", );
    $h->addX(  name=>"Bull Terrier 1",                         questionTitle=>"Bull Terrier",                         title=>"Bull Terrier",                         question=>"Bull Terrier",                         response=>"Bull Terrier",                         photo=>"Bull Terrier 1", );
    $h->addX(  name=>"Bull Terrier 2",                         questionTitle=>"Bull Terrier",                         title=>"Bull Terrier",                         question=>"Bull Terrier",                         response=>"Bull Terrier",                         photo=>"Bull Terrier 2", );
    $h->addX(  name=>"Bullmastiff 1",                          questionTitle=>"Bullmastiff",                          title=>"Bullmastiff",                          question=>"Bullmastiff",                          response=>"Bullmastiff",                          photo=>"Bullmastiff 1", );
    $h->addX(  name=>"Bullmastiff 2",                          questionTitle=>"Bullmastiff",                          title=>"Bullmastiff",                          question=>"Bullmastiff",                          response=>"Bullmastiff",                          photo=>"Bullmastiff 2", );
    $h->addX(  name=>"Carolina 1",                             questionTitle=>"Carolina",                             title=>"Carolina",                             question=>"Carolina",                             response=>"Carolina",                             photo=>"Carolina 1", );
    $h->addX(  name=>"Carolina 2",                             questionTitle=>"Carolina",                             title=>"Carolina",                             question=>"Carolina",                             response=>"Carolina",                             photo=>"Carolina 2", );
    $h->addX(  name=>"Catahoula Leopard Dog 1",                questionTitle=>"Catahoula Leopard Dog",                title=>"Catahoula Leopard Dog",                question=>"Catahoula Leopard Dog",                response=>"Catahoula Leopard Dog",                photo=>"Catahoula Leopard Dog 1", );
    $h->addX(  name=>"Catahoula Leopard Dog 2",                questionTitle=>"Catahoula Leopard Dog",                title=>"Catahoula Leopard Dog",                question=>"Catahoula Leopard Dog",                response=>"Catahoula Leopard Dog",                photo=>"Catahoula Leopard Dog 2", );
    $h->addX(  name=>"Caucasian Shepherd 1",                   questionTitle=>"Caucasian Shepherd",                   title=>"Caucasian Shepherd",                   question=>"Caucasian Shepherd",                   response=>"Caucasian Shepherd",                   photo=>"Caucasian Shepherd 1", );
    $h->addX(  name=>"Caucasian Shepherd 2",                   questionTitle=>"Caucasian Shepherd",                   title=>"Caucasian Shepherd",                   question=>"Caucasian Shepherd",                   response=>"Caucasian Shepherd",                   photo=>"Caucasian Shepherd 2", );
    $h->addX(  name=>"Cavalier King Charles Spaniel 1",        questionTitle=>"Cavalier King Charles Spaniel",        title=>"Cavalier King Charles Spaniel",        question=>"Cavalier King Charles Spaniel",        response=>"Cavalier King Charles Spaniel",        photo=>"Cavalier King Charles Spaniel 1", );
    $h->addX(  name=>"Cavalier King Charles Spaniel 2",        questionTitle=>"Cavalier King Charles Spaniel",        title=>"Cavalier King Charles Spaniel",        question=>"Cavalier King Charles Spaniel",        response=>"Cavalier King Charles Spaniel",        photo=>"Cavalier King Charles Spaniel 2", );
    $h->addX(  name=>"Chihuahua 1",                            questionTitle=>"Chihuahua",                            title=>"Chihuahua",                            question=>"Chihuahua",                            response=>"Chihuahua",                            photo=>"Chihuahua 1", );
    $h->addX(  name=>"Chihuahua 2",                            questionTitle=>"Chihuahua",                            title=>"Chihuahua",                            question=>"Chihuahua",                            response=>"Chihuahua",                            photo=>"Chihuahua 2", );
    $h->addX(  name=>"Croatian Sheepdog 1",                    questionTitle=>"Croatian Sheepdog",                    title=>"Croatian Sheepdog",                    question=>"Croatian Sheepdog",                    response=>"Croatian Sheepdog",                    photo=>"Croatian Sheepdog 1", );
    $h->addX(  name=>"Croatian Sheepdog 2",                    questionTitle=>"Croatian Sheepdog",                    title=>"Croatian Sheepdog",                    question=>"Croatian Sheepdog",                    response=>"Croatian Sheepdog",                    photo=>"Croatian Sheepdog 2", );
    $h->addX(  name=>"Dachshund 1",                            questionTitle=>"Dachshund",                            title=>"Dachshund",                            question=>"Dachshund",                            response=>"Dachshund",                            photo=>"Dachshund 1", );
    $h->addX(  name=>"Dachshund 2",                            questionTitle=>"Dachshund",                            title=>"Dachshund",                            question=>"Dachshund",                            response=>"Dachshund",                            photo=>"Dachshund 2", );
    $h->addX(  name=>"Dalmatian 1",                            questionTitle=>"Dalmatian",                            title=>"Dalmatian",                            question=>"Dalmatian",                            response=>"Dalmatian",                            photo=>"Dalmatian 1", );
    $h->addX(  name=>"Dalmatian 2",                            questionTitle=>"Dalmatian",                            title=>"Dalmatian",                            question=>"Dalmatian",                            response=>"Dalmatian",                            photo=>"Dalmatian 2", );
    $h->addX(  name=>"English Cocker Spaniel 1",               questionTitle=>"English Cocker Spaniel",               title=>"English Cocker Spaniel",               question=>"English Cocker Spaniel",               response=>"English Cocker Spaniel",               photo=>"English Cocker Spaniel 1", );
    $h->addX(  name=>"English Cocker Spaniel 2",               questionTitle=>"English Cocker Spaniel",               title=>"English Cocker Spaniel",               question=>"English Cocker Spaniel",               response=>"English Cocker Spaniel",               photo=>"English Cocker Spaniel 2", );
    $h->addX(  name=>"English Mastiff 1",                      questionTitle=>"English Mastiff",                      title=>"English Mastiff",                      question=>"English Mastiff",                      response=>"English Mastiff",                      photo=>"English Mastiff 1", );
    $h->addX(  name=>"English Mastiff 2",                      questionTitle=>"English Mastiff",                      title=>"English Mastiff",                      question=>"English Mastiff",                      response=>"English Mastiff",                      photo=>"English Mastiff 2", );
    $h->addX(  name=>"Eurasier 1",                             questionTitle=>"Eurasier",                             title=>"Eurasier",                             question=>"Eurasier",                             response=>"Eurasier",                             photo=>"Eurasier 1", );
    $h->addX(  name=>"Eurasier 2",                             questionTitle=>"Eurasier",                             title=>"Eurasier",                             question=>"Eurasier",                             response=>"Eurasier",                             photo=>"Eurasier 2", );
    $h->addX(  name=>"German Pinscher 1",                      questionTitle=>"German Pinscher",                      title=>"German Pinscher",                      question=>"German Pinscher",                      response=>"German Pinscher",                      photo=>"German Pinscher 1", );
    $h->addX(  name=>"German Pinscher 2",                      questionTitle=>"German Pinscher",                      title=>"German Pinscher",                      question=>"German Pinscher",                      response=>"German Pinscher",                      photo=>"German Pinscher 2", );
    $h->addX(  name=>"German Shepherd 1",                      questionTitle=>"German Shepherd",                      title=>"German Shepherd",                      question=>"German Shepherd",                      response=>"German Shepherd",                      photo=>"German Shepherd 1", );
    $h->addX(  name=>"German Shepherd 2",                      questionTitle=>"German Shepherd",                      title=>"German Shepherd",                      question=>"German Shepherd",                      response=>"German Shepherd",                      photo=>"German Shepherd 2", );
    $h->addX(  name=>"Golden Retriever 1",                     questionTitle=>"Golden Retriever",                     title=>"Golden Retriever",                     question=>"Golden Retriever",                     response=>"Golden Retriever",                     photo=>"Golden Retriever 1", );
    $h->addX(  name=>"Golden Retriever 2",                     questionTitle=>"Golden Retriever",                     title=>"Golden Retriever",                     question=>"Golden Retriever",                     response=>"Golden Retriever",                     photo=>"Golden Retriever 2", );
    $h->addX(  name=>"Gordon Setter 1",                        questionTitle=>"Gordon Setter",                        title=>"Gordon Setter",                        question=>"Gordon Setter",                        response=>"Gordon Setter",                        photo=>"Gordon Setter 1", );
    $h->addX(  name=>"Gordon Setter 2",                        questionTitle=>"Gordon Setter",                        title=>"Gordon Setter",                        question=>"Gordon Setter",                        response=>"Gordon Setter",                        photo=>"Gordon Setter 2", );
    $h->addX(  name=>"Great Dane 1",                           questionTitle=>"Great Dane",                           title=>"Great Dane",                           question=>"Great Dane",                           response=>"Great Dane",                           photo=>"Great Dane 1", );
    $h->addX(  name=>"Great Dane 2",                           questionTitle=>"Great Dane",                           title=>"Great Dane",                           question=>"Great Dane",                           response=>"Great Dane",                           photo=>"Great Dane 2", );
    $h->addX(  name=>"Hovawart 1",                             questionTitle=>"Hovawart",                             title=>"Hovawart",                             question=>"Hovawart",                             response=>"Hovawart",                             photo=>"Hovawart 1", );
    $h->addX(  name=>"Hovawart 2",                             questionTitle=>"Hovawart",                             title=>"Hovawart",                             question=>"Hovawart",                             response=>"Hovawart",                             photo=>"Hovawart 2", );
    $h->addX(  name=>"Irish Wolfhound 1",                      questionTitle=>"Irish Wolfhound",                      title=>"Irish Wolfhound",                      question=>"Irish Wolfhound",                      response=>"Irish Wolfhound",                      photo=>"Irish Wolfhound 1", );
    $h->addX(  name=>"Irish Wolfhound 2",                      questionTitle=>"Irish Wolfhound",                      title=>"Irish Wolfhound",                      question=>"Irish Wolfhound",                      response=>"Irish Wolfhound",                      photo=>"Irish Wolfhound 2", );
    $h->addX(  name=>"Jack Russell Terrier 1",                 questionTitle=>"Jack Russell Terrier",                 title=>"Jack Russell Terrier",                 question=>"Jack Russell Terrier",                 response=>"Jack Russell Terrier",                 photo=>"Jack Russell Terrier 1", );
    $h->addX(  name=>"Jack Russell Terrier 2",                 questionTitle=>"Jack Russell Terrier",                 title=>"Jack Russell Terrier",                 question=>"Jack Russell Terrier",                 response=>"Jack Russell Terrier",                 photo=>"Jack Russell Terrier 2", );
    $h->addX(  name=>"Japanese Akita 1",                       questionTitle=>"Japanese Akita",                       title=>"Japanese Akita",                       question=>"Japanese Akita",                       response=>"Japanese Akita",                       photo=>"Japanese Akita 1", );
    $h->addX(  name=>"Japanese Akita 2",                       questionTitle=>"Japanese Akita",                       title=>"Japanese Akita",                       question=>"Japanese Akita",                       response=>"Japanese Akita",                       photo=>"Japanese Akita 2", );
    $h->addX(  name=>"Japanese Chin 1",                        questionTitle=>"Japanese Chin",                        title=>"Japanese Chin",                        question=>"Japanese Chin",                        response=>"Japanese Chin",                        photo=>"Japanese Chin 1", );
    $h->addX(  name=>"Japanese Chin 2",                        questionTitle=>"Japanese Chin",                        title=>"Japanese Chin",                        question=>"Japanese Chin",                        response=>"Japanese Chin",                        photo=>"Japanese Chin 2", );
    $h->addX(  name=>"Kooikerhondje 1",                        questionTitle=>"Kooikerhondje",                        title=>"Kooikerhondje",                        question=>"Kooikerhondje",                        response=>"Kooikerhondje",                        photo=>"Kooikerhondje 1", );
    $h->addX(  name=>"Kooikerhondje 2",                        questionTitle=>"Kooikerhondje",                        title=>"Kooikerhondje",                        question=>"Kooikerhondje",                        response=>"Kooikerhondje",                        photo=>"Kooikerhondje 2", );
    $h->addX(  name=>"Labrador Retriever 1",                   questionTitle=>"Labrador Retriever",                   title=>"Labrador Retriever",                   question=>"Labrador Retriever",                   response=>"Labrador Retriever",                   photo=>"Labrador Retriever 1", );
    $h->addX(  name=>"Labrador Retriever 2",                   questionTitle=>"Labrador Retriever",                   title=>"Labrador Retriever",                   question=>"Labrador Retriever",                   response=>"Labrador Retriever",                   photo=>"Labrador Retriever 2", );
    $h->addX(  name=>"Lhasa Apso 1",                           questionTitle=>"Lhasa Apso",                           title=>"Lhasa Apso",                           question=>"Lhasa Apso",                           response=>"Lhasa Apso",                           photo=>"Lhasa Apso 1", );
    $h->addX(  name=>"Lhasa Apso 2",                           questionTitle=>"Lhasa Apso",                           title=>"Lhasa Apso",                           question=>"Lhasa Apso",                           response=>"Lhasa Apso",                           photo=>"Lhasa Apso 2", );
    $h->addX(  name=>"Maltese 1",                              questionTitle=>"Maltese",                              title=>"Maltese",                              question=>"Maltese",                              response=>"Maltese",                              photo=>"Maltese 1", );
    $h->addX(  name=>"Maltese 2",                              questionTitle=>"Maltese",                              title=>"Maltese",                              question=>"Maltese",                              response=>"Maltese",                              photo=>"Maltese 2", );
    $h->addX(  name=>"Miniature Poodle 1",                     questionTitle=>"Miniature Poodle",                     title=>"Miniature Poodle",                     question=>"Miniature Poodle",                     response=>"Miniature Poodle",                     photo=>"Miniature Poodle 1", );
    $h->addX(  name=>"Miniature Poodle 2",                     questionTitle=>"Miniature Poodle",                     title=>"Miniature Poodle",                     question=>"Miniature Poodle",                     response=>"Miniature Poodle",                     photo=>"Miniature Poodle 2", );
    $h->addX(  name=>"Miniature Schnauzer 1",                  questionTitle=>"Miniature Schnauzer",                  title=>"Miniature Schnauzer",                  question=>"Miniature Schnauzer",                  response=>"Miniature Schnauzer",                  photo=>"Miniature Schnauzer 1", );
    $h->addX(  name=>"Miniature Schnauzer 2",                  questionTitle=>"Miniature Schnauzer",                  title=>"Miniature Schnauzer",                  question=>"Miniature Schnauzer",                  response=>"Miniature Schnauzer",                  photo=>"Miniature Schnauzer 2", );
    $h->addX(  name=>"Newfoundland 1",                         questionTitle=>"Newfoundland",                         title=>"Newfoundland",                         question=>"Newfoundland",                         response=>"Newfoundland",                         photo=>"Newfoundland 1", );
    $h->addX(  name=>"Newfoundland 2",                         questionTitle=>"Newfoundland",                         title=>"Newfoundland",                         question=>"Newfoundland",                         response=>"Newfoundland",                         photo=>"Newfoundland 2", );
    $h->addX(  name=>"Norwegian Elkhound 1",                   questionTitle=>"Norwegian Elkhound",                   title=>"Norwegian Elkhound",                   question=>"Norwegian Elkhound",                   response=>"Norwegian Elkhound",                   photo=>"Norwegian Elkhound 1", );
    $h->addX(  name=>"Norwegian Elkhound 2",                   questionTitle=>"Norwegian Elkhound",                   title=>"Norwegian Elkhound",                   question=>"Norwegian Elkhound",                   response=>"Norwegian Elkhound",                   photo=>"Norwegian Elkhound 2", );
    $h->addX(  name=>"Nova Scotia Duck Tolling Retriever 1",   questionTitle=>"Nova Scotia Duck Tolling Retriever",   title=>"Nova Scotia Duck Tolling Retriever",   question=>"Nova Scotia Duck Tolling Retriever",   response=>"Nova Scotia Duck Tolling Retriever",   photo=>"Nova Scotia Duck Tolling Retriever 1", );
    $h->addX(  name=>"Nova Scotia Duck Tolling Retriever 2",   questionTitle=>"Nova Scotia Duck Tolling Retriever",   title=>"Nova Scotia Duck Tolling Retriever",   question=>"Nova Scotia Duck Tolling Retriever",   response=>"Nova Scotia Duck Tolling Retriever",   photo=>"Nova Scotia Duck Tolling Retriever 2", );
    $h->addX(  name=>"Pembroke Welsh Corgi 1",                 questionTitle=>"Pembroke Welsh Corgi",                 title=>"Pembroke Welsh Corgi",                 question=>"Pembroke Welsh Corgi",                 response=>"Pembroke Welsh Corgi",                 photo=>"Pembroke Welsh Corgi 1", );
    $h->addX(  name=>"Pembroke Welsh Corgi 2",                 questionTitle=>"Pembroke Welsh Corgi",                 title=>"Pembroke Welsh Corgi",                 question=>"Pembroke Welsh Corgi",                 response=>"Pembroke Welsh Corgi",                 photo=>"Pembroke Welsh Corgi 2", );
    $h->addX(  name=>"Pomeranian 1",                           questionTitle=>"Pomeranian",                           title=>"Pomeranian",                           question=>"Pomeranian",                           response=>"Pomeranian",                           photo=>"Pomeranian 1", );
    $h->addX(  name=>"Pomeranian 2",                           questionTitle=>"Pomeranian",                           title=>"Pomeranian",                           question=>"Pomeranian",                           response=>"Pomeranian",                           photo=>"Pomeranian 2", );
    $h->addX(  name=>"Pug 1",                                  questionTitle=>"Pug",                                  title=>"Pug",                                  question=>"Pug",                                  response=>"Pug",                                  photo=>"Pug 1", );
    $h->addX(  name=>"Pug 2",                                  questionTitle=>"Pug",                                  title=>"Pug",                                  question=>"Pug",                                  response=>"Pug",                                  photo=>"Pug 2", );
    $h->addX(  name=>"Pyrenean Mountain Dog 1",                questionTitle=>"Pyrenean Mountain Dog",                title=>"Pyrenean Mountain Dog",                question=>"Pyrenean Mountain Dog",                response=>"Pyrenean Mountain Dog",                photo=>"Pyrenean Mountain Dog 1", );
    $h->addX(  name=>"Pyrenean Mountain Dog 2",                questionTitle=>"Pyrenean Mountain Dog",                title=>"Pyrenean Mountain Dog",                question=>"Pyrenean Mountain Dog",                response=>"Pyrenean Mountain Dog",                photo=>"Pyrenean Mountain Dog 2", );
    $h->addX(  name=>"Rhodesian Ridgeback 1",                  questionTitle=>"Rhodesian Ridgeback",                  title=>"Rhodesian Ridgeback",                  question=>"Rhodesian Ridgeback",                  response=>"Rhodesian Ridgeback",                  photo=>"Rhodesian Ridgeback 1", );
    $h->addX(  name=>"Rhodesian Ridgeback 2",                  questionTitle=>"Rhodesian Ridgeback",                  title=>"Rhodesian Ridgeback",                  question=>"Rhodesian Ridgeback",                  response=>"Rhodesian Ridgeback",                  photo=>"Rhodesian Ridgeback 2", );
    $h->addX(  name=>"Rottweiler 1",                           questionTitle=>"Rottweiler",                           title=>"Rottweiler",                           question=>"Rottweiler",                           response=>"Rottweiler",                           photo=>"Rottweiler 1", );
    $h->addX(  name=>"Rottweiler 2",                           questionTitle=>"Rottweiler",                           title=>"Rottweiler",                           question=>"Rottweiler",                           response=>"Rottweiler",                           photo=>"Rottweiler 2", );
    $h->addX(  name=>"Rough Collie 1",                         questionTitle=>"Rough Collie",                         title=>"Rough Collie",                         question=>"Rough Collie",                         response=>"Rough Collie",                         photo=>"Rough Collie 1", );
    $h->addX(  name=>"Rough Collie 2",                         questionTitle=>"Rough Collie",                         title=>"Rough Collie",                         question=>"Rough Collie",                         response=>"Rough Collie",                         photo=>"Rough Collie 2", );
    $h->addX(  name=>"Scottish Terrier 1",                     questionTitle=>"Scottish Terrier",                     title=>"Scottish Terrier",                     question=>"Scottish Terrier",                     response=>"Scottish Terrier",                     photo=>"Scottish Terrier 1", );
    $h->addX(  name=>"Scottish Terrier 2",                     questionTitle=>"Scottish Terrier",                     title=>"Scottish Terrier",                     question=>"Scottish Terrier",                     response=>"Scottish Terrier",                     photo=>"Scottish Terrier 2", );
    $h->addX(  name=>"Shar-Pei 1",                             questionTitle=>"Shar-Pei",                             title=>"Shar-Pei",                             question=>"Shar-Pei",                             response=>"Shar-Pei",                             photo=>"Shar-Pei 1", );
    $h->addX(  name=>"Shar-Pei 2",                             questionTitle=>"Shar-Pei",                             title=>"Shar-Pei",                             question=>"Shar-Pei",                             response=>"Shar-Pei",                             photo=>"Shar-Pei 2", );
    $h->addX(  name=>"Shiba-Inu 1",                            questionTitle=>"Shiba-Inu",                            title=>"Shiba-Inu",                            question=>"Shiba-Inu",                            response=>"Shiba-Inu",                            photo=>"Shiba-Inu 1", );
    $h->addX(  name=>"Shiba-Inu 2",                            questionTitle=>"Shiba-Inu",                            title=>"Shiba-Inu",                            question=>"Shiba-Inu",                            response=>"Shiba-Inu",                            photo=>"Shiba-Inu 2", );
    $h->addX(  name=>"Shih Tzu 1",                             questionTitle=>"Shih Tzu",                             title=>"Shih Tzu",                             question=>"Shih Tzu",                             response=>"Shih Tzu",                             photo=>"Shih Tzu 1", );
    $h->addX(  name=>"Shih Tzu 2",                             questionTitle=>"Shih Tzu",                             title=>"Shih Tzu",                             question=>"Shih Tzu",                             response=>"Shih Tzu",                             photo=>"Shih Tzu 2", );
    $h->addX(  name=>"Siberian Husky 1",                       questionTitle=>"Siberian Husky",                       title=>"Siberian Husky",                       question=>"Siberian Husky",                       response=>"Siberian Husky",                       photo=>"Siberian Husky 1", );
    $h->addX(  name=>"Siberian Husky 2",                       questionTitle=>"Siberian Husky",                       title=>"Siberian Husky",                       question=>"Siberian Husky",                       response=>"Siberian Husky",                       photo=>"Siberian Husky 2", );
    $h->addX(  name=>"St. Bernard 1",                          questionTitle=>"St. Bernard",                          title=>"St. Bernard",                          question=>"St. Bernard",                          response=>"St. Bernard",                          photo=>"St. Bernard 1", );
    $h->addX(  name=>"St. Bernard 2",                          questionTitle=>"St. Bernard",                          title=>"St. Bernard",                          question=>"St. Bernard",                          response=>"St. Bernard",                          photo=>"St. Bernard 2", );
    $h->addX(  name=>"Staffordshire Bull Terrier 1",           questionTitle=>"Staffordshire Bull Terrier",           title=>"Staffordshire Bull Terrier",           question=>"Staffordshire Bull Terrier",           response=>"Staffordshire Bull Terrier",           photo=>"Staffordshire Bull Terrier 1", );
    $h->addX(  name=>"Staffordshire Bull Terrier 2",           questionTitle=>"Staffordshire Bull Terrier",           title=>"Staffordshire Bull Terrier",           question=>"Staffordshire Bull Terrier",           response=>"Staffordshire Bull Terrier",           photo=>"Staffordshire Bull Terrier 2", );
    $h->addX(  name=>"Tamaskan 1",                             questionTitle=>"Tamaskan",                             title=>"Tamaskan",                             question=>"Tamaskan",                             response=>"Tamaskan",                             photo=>"Tamaskan 1", );
    $h->addX(  name=>"Tamaskan 2",                             questionTitle=>"Tamaskan",                             title=>"Tamaskan",                             question=>"Tamaskan",                             response=>"Tamaskan",                             photo=>"Tamaskan 2", );
    $h->addX(  name=>"Vizsla 1",                               questionTitle=>"Vizsla",                               title=>"Vizsla",                               question=>"Vizsla",                               response=>"Vizsla",                               photo=>"Vizsla 1", );
    $h->addX(  name=>"Vizsla 2",                               questionTitle=>"Vizsla",                               title=>"Vizsla",                               question=>"Vizsla",                               response=>"Vizsla",                               photo=>"Vizsla 2", );
    $h->addX(  name=>"Weimaraner 1",                           questionTitle=>"Weimaraner",                           title=>"Weimaraner",                           question=>"Weimaraner",                           response=>"Weimaraner",                           photo=>"Weimaraner 1", );
    $h->addX(  name=>"Weimaraner 2",                           questionTitle=>"Weimaraner",                           title=>"Weimaraner",                           question=>"Weimaraner",                           response=>"Weimaraner",                           photo=>"Weimaraner 2", );
    $h->addX(  name=>"West Highland White Terrier 1",          questionTitle=>"West Highland White Terrier",          title=>"West Highland White Terrier",          question=>"West Highland White Terrier",          response=>"West Highland White Terrier",          photo=>"West Highland White Terrier 1", );
    $h->addX(  name=>"West Highland White Terrier 2",          questionTitle=>"West Highland White Terrier",          title=>"West Highland White Terrier",          question=>"West Highland White Terrier",          response=>"West Highland White Terrier",          photo=>"West Highland White Terrier 2", );
    $h->addX(  name=>"Wire Fox Terrier 1",                     questionTitle=>"Wire Fox Terrier",                     title=>"Wire Fox Terrier",                     question=>"Wire Fox Terrier",                     response=>"Wire Fox Terrier",                     photo=>"Wire Fox Terrier 1", );
    $h->addX(  name=>"Wire Fox Terrier 2",                     questionTitle=>"Wire Fox Terrier",                     title=>"Wire Fox Terrier",                     question=>"Wire Fox Terrier",                     response=>"Wire Fox Terrier",                     photo=>"Wire Fox Terrier 2", );
    $h->addX(  name=>"Yorkshire Terrier 1",                    questionTitle=>"Yorkshire Terrier",                    title=>"Yorkshire Terrier",                    question=>"Yorkshire Terrier",                    response=>"Yorkshire Terrier",                    photo=>"Yorkshire Terrier 1", );
    $h->addX(  name=>"Yorkshire Terrier 2",                    questionTitle=>"Yorkshire Terrier",                    title=>"Yorkshire Terrier",                    question=>"Yorkshire Terrier",                    response=>"Yorkshire Terrier",                    photo=>"Yorkshire Terrier 2", );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Dogs50
#-------------------------------------------------------------------------------

 {package Dogs50;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX(  name=>"Akita Inu",                       questionTitle=>"Akita Inu",                       title=>"Akita Inu",                       question=>"Akita Inu",                       response=>"Akita Inu",                       photo=>"Akita Inu", );
    $h->addX(  name=>"American Cocker Spaniel",         questionTitle=>"American Cocker Spaniel",         title=>"American Cocker Spaniel",         question=>"American Cocker Spaniel",         response=>"American Cocker Spaniel",         photo=>"American Cocker Spaniel", );
    $h->addX(  name=>"Australian Shepherd",             questionTitle=>"Australian Shepherd",             title=>"Australian Shepherd",             question=>"Australian Shepherd",             response=>"Australian Shepherd",             photo=>"Australian Shepherd", );
    $h->addX(  name=>"Bassett Hound",                   questionTitle=>"Bassett Hound",                   title=>"Bassett Hound",                   question=>"Bassett Hound",                   response=>"Bassett Hound",                   photo=>"Bassett Hound", );
    $h->addX(  name=>"Beagle",                          questionTitle=>"Beagle",                          title=>"Beagle",                          question=>"Beagle",                          response=>"Beagle",                          photo=>"Beagle", );
    $h->addX(  name=>"Bernese Mountain Dog",            questionTitle=>"Bernese Mountain Dog",            title=>"Bernese Mountain Dog",            question=>"Bernese Mountain Dog",            response=>"Bernese Mountain Dog",            photo=>"Bernese Mountain Dog", );
    $h->addX(  name=>"Bichon Frise",                    questionTitle=>"Bichon Frise",                    title=>"Bichon Frise",                    question=>"Bichon Frise",                    response=>"Bichon Frise",                    photo=>"Bichon Frise", );
    $h->addX(  name=>"Bloodhound",                      questionTitle=>"Bloodhound",                      title=>"Bloodhound",                      question=>"Bloodhound",                      response=>"Bloodhound",                      photo=>"Bloodhound", );
    $h->addX(  name=>"Boston Terrier",                  questionTitle=>"Boston Terrier",                  title=>"Boston Terrier",                  question=>"Boston Terrier",                  response=>"Boston Terrier",                  photo=>"Boston Terrier", );
    $h->addX(  name=>"Boxer",                           questionTitle=>"Boxer",                           title=>"Boxer",                           question=>"Boxer",                           response=>"Boxer",                           photo=>"Boxer", );
    $h->addX(  name=>"Brittany Spaniel",                questionTitle=>"Brittany Spaniel",                title=>"Brittany Spaniel",                question=>"Brittany Spaniel",                response=>"Brittany Spaniel",                photo=>"Brittany Spaniel", );
    $h->addX(  name=>"Bulldog",                         questionTitle=>"Bulldog",                         title=>"Bulldog",                         question=>"Bulldog",                         response=>"Bulldog",                         photo=>"Bulldog", );
    $h->addX(  name=>"Bullmastiff",                     questionTitle=>"Bullmastiff",                     title=>"Bullmastiff",                     question=>"Bullmastiff",                     response=>"Bullmastiff",                     photo=>"Bullmastiff", );
    $h->addX(  name=>"Cairn Terrier",                   questionTitle=>"Cairn Terrier",                   title=>"Cairn Terrier",                   question=>"Cairn Terrier",                   response=>"Cairn Terrier",                   photo=>"Cairn Terrier", );
    $h->addX(  name=>"Cavalier King Charles Spaniel",   questionTitle=>"Cavalier King Charles Spaniel",   title=>"Cavalier King Charles Spaniel",   question=>"Cavalier King Charles Spaniel",   response=>"Cavalier King Charles Spaniel",   photo=>"Cavalier King Charles Spaniel", );
    $h->addX(  name=>"Chesapeake Bay Retriever",        questionTitle=>"Chesapeake Bay Retriever",        title=>"Chesapeake Bay Retriever",        question=>"Chesapeake Bay Retriever",        response=>"Chesapeake Bay Retriever",        photo=>"Chesapeake Bay Retriever", );
    $h->addX(  name=>"Chihuahua",                       questionTitle=>"Chihuahua",                       title=>"Chihuahua",                       question=>"Chihuahua",                       response=>"Chihuahua",                       photo=>"Chihuahua", );
    $h->addX(  name=>"Chinese Shar-Pei",                questionTitle=>"Chinese Shar-Pei",                title=>"Chinese Shar-Pei",                question=>"Chinese Shar-Pei",                response=>"Chinese Shar-Pei",                photo=>"Chinese Shar-Pei", );
    $h->addX(  name=>"Dachshund",                       questionTitle=>"Dachshund",                       title=>"Dachshund",                       question=>"Dachshund",                       response=>"Dachshund",                       photo=>"Dachshund", );
    $h->addX(  name=>"Doberman Pinscher",               questionTitle=>"Doberman Pinscher",               title=>"Doberman Pinscher",               question=>"Doberman Pinscher",               response=>"Doberman Pinscher",               photo=>"Doberman Pinscher", );
    $h->addX(  name=>"English Mastiff",                 questionTitle=>"English Mastiff",                 title=>"English Mastiff",                 question=>"English Mastiff",                 response=>"English Mastiff",                 photo=>"English Mastiff", );
    $h->addX(  name=>"English Springer Spaniel",        questionTitle=>"English Springer Spaniel",        title=>"English Springer Spaniel",        question=>"English Springer Spaniel",        response=>"English Springer Spaniel",        photo=>"English Springer Spaniel", );
    $h->addX(  name=>"French Bulldog",                  questionTitle=>"French Bulldog",                  title=>"French Bulldog",                  question=>"French Bulldog",                  response=>"French Bulldog",                  photo=>"French Bulldog", );
    $h->addX(  name=>"German Shepherd",                 questionTitle=>"German Shepherd",                 title=>"German Shepherd",                 question=>"German Shepherd",                 response=>"German Shepherd",                 photo=>"German Shepherd", );
    $h->addX(  name=>"German Shorthaired Pointer",      questionTitle=>"German Shorthaired Pointer",      title=>"German Shorthaired Pointer",      question=>"German Shorthaired Pointer",      response=>"German Shorthaired Pointer",      photo=>"German Shorthaired Pointer", );
    $h->addX(  name=>"Golden Retriever",                questionTitle=>"Golden Retriever",                title=>"Golden Retriever",                question=>"Golden Retriever",                response=>"Golden Retriever",                photo=>"Golden Retriever", );
    $h->addX(  name=>"Great Dane",                      questionTitle=>"Great Dane",                      title=>"Great Dane",                      question=>"Great Dane",                      response=>"Great Dane",                      photo=>"Great Dane", );
    $h->addX(  name=>"Havanese",                        questionTitle=>"Havanese",                        title=>"Havanese",                        question=>"Havanese",                        response=>"Havanese",                        photo=>"Havanese", );
    $h->addX(  name=>"Labrador Retriever",              questionTitle=>"Labrador Retriever",              title=>"Labrador Retriever",              question=>"Labrador Retriever",              response=>"Labrador Retriever",              photo=>"Labrador Retriever", );
    $h->addX(  name=>"Maltese",                         questionTitle=>"Maltese",                         title=>"Maltese",                         question=>"Maltese",                         response=>"Maltese",                         photo=>"Maltese", );
    $h->addX(  name=>"Miniature Pinscher",              questionTitle=>"Miniature Pinscher",              title=>"Miniature Pinscher",              question=>"Miniature Pinscher",              response=>"Miniature Pinscher",              photo=>"Miniature Pinscher", );
    $h->addX(  name=>"Miniature Schnauzer",             questionTitle=>"Miniature Schnauzer",             title=>"Miniature Schnauzer",             question=>"Miniature Schnauzer",             response=>"Miniature Schnauzer",             photo=>"Miniature Schnauzer", );
    $h->addX(  name=>"Newfoundland",                    questionTitle=>"Newfoundland",                    title=>"Newfoundland",                    question=>"Newfoundland",                    response=>"Newfoundland",                    photo=>"Newfoundland", );
    $h->addX(  name=>"Papillon",                        questionTitle=>"Papillon",                        title=>"Papillon",                        question=>"Papillon",                        response=>"Papillon",                        photo=>"Papillon", );
    $h->addX(  name=>"Pembroke Welsh Corgi",            questionTitle=>"Pembroke Welsh Corgi",            title=>"Pembroke Welsh Corgi",            question=>"Pembroke Welsh Corgi",            response=>"Pembroke Welsh Corgi",            photo=>"Pembroke Welsh Corgi", );
    $h->addX(  name=>"Pomeranian",                      questionTitle=>"Pomeranian",                      title=>"Pomeranian",                      question=>"Pomeranian",                      response=>"Pomeranian",                      photo=>"Pomeranian", );
    $h->addX(  name=>"Pug",                             questionTitle=>"Pug",                             title=>"Pug",                             question=>"Pug",                             response=>"Pug",                             photo=>"Pug", );
    $h->addX(  name=>"Rhodesian Ridgeback",             questionTitle=>"Rhodesian Ridgeback",             title=>"Rhodesian Ridgeback",             question=>"Rhodesian Ridgeback",             response=>"Rhodesian Ridgeback",             photo=>"Rhodesian Ridgeback", );
    $h->addX(  name=>"Rottweiler",                      questionTitle=>"Rottweiler",                      title=>"Rottweiler",                      question=>"Rottweiler",                      response=>"Rottweiler",                      photo=>"Rottweiler", );
    $h->addX(  name=>"Rough Collie",                    questionTitle=>"Rough Collie",                    title=>"Rough Collie",                    question=>"Rough Collie",                    response=>"Rough Collie",                    photo=>"Rough Collie", );
    $h->addX(  name=>"Saint Bernard",                   questionTitle=>"Saint Bernard",                   title=>"Saint Bernard",                   question=>"Saint Bernard",                   response=>"Saint Bernard",                   photo=>"Saint Bernard", );
    $h->addX(  name=>"Scottish Terrier",                questionTitle=>"Scottish Terrier",                title=>"Scottish Terrier",                question=>"Scottish Terrier",                response=>"Scottish Terrier",                photo=>"Scottish Terrier", );
    $h->addX(  name=>"Shetland Sheepdog",               questionTitle=>"Shetland Sheepdog",               title=>"Shetland Sheepdog",               question=>"Shetland Sheepdog",               response=>"Shetland Sheepdog",               photo=>"Shetland Sheepdog", );
    $h->addX(  name=>"Shih Tzu",                        questionTitle=>"Shih Tzu",                        title=>"Shih Tzu",                        question=>"Shih Tzu",                        response=>"Shih Tzu",                        photo=>"Shih Tzu", );
    $h->addX(  name=>"Siberian Husky",                  questionTitle=>"Siberian Husky",                  title=>"Siberian Husky",                  question=>"Siberian Husky",                  response=>"Siberian Husky",                  photo=>"Siberian Husky", );
    $h->addX(  name=>"Toy Poodle",                      questionTitle=>"Toy Poodle",                      title=>"Toy Poodle",                      question=>"Toy Poodle",                      response=>"Toy Poodle",                      photo=>"Toy Poodle", );
    $h->addX(  name=>"Vizsla",                          questionTitle=>"Vizsla",                          title=>"Vizsla",                          question=>"Vizsla",                          response=>"Vizsla",                          photo=>"Vizsla", );
    $h->addX(  name=>"Weimaraner",                      questionTitle=>"Weimaraner",                      title=>"Weimaraner",                      question=>"Weimaraner",                      response=>"Weimaraner",                      photo=>"Weimaraner", );
    $h->addX(  name=>"West Highland White Terrier",     questionTitle=>"West Highland White Terrier",     title=>"West Highland White Terrier",     question=>"West Highland White Terrier",     response=>"West Highland White Terrier",     photo=>"West Highland White Terrier", );
    $h->addX(  name=>"Yorkshire Terrier",               questionTitle=>"Yorkshire Terrier",               title=>"Yorkshire Terrier",               question=>"Yorkshire Terrier",               response=>"Yorkshire Terrier",               photo=>"Yorkshire Terrier", );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Dunloe
#-------------------------------------------------------------------------------

 {package Dunloe;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add(4, "Bend of Road");
    $h->add(6, "Gorse Rock");
    $h->add(6, "Journey's End");
    $h->add(3, "Lakeside");
    $h->add(3, "Rapids");
    $h->add(4, "Rock Face");
    $h->add(3, "Ruined Farmhouse");
    $h->add(3, "Small Bridge");
    $h->add(3, "Split Rock");
    $h->add(5, "Stone Bridge");
    $h->add(1, "The Start");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Eyes
#-------------------------------------------------------------------------------

 {package Eyes;
  use base qw(Application);
  sub Load()
   {my $h = bless {};
    $h->add("Bison");
    $h->add("Blue Bottle");
    $h->add("Bumble Bee");
    $h->add("Butterfly");
    $h->add("Cat");
    $h->add("Chameleon");
    $h->add("Chicken");
    $h->add("Cow");
    $h->add("Crocodile");
    $h->add("Cuttlefish");
    $h->add("Damselfly");
    $h->add("Deer");
    $h->add("Dog");
    $h->add("Donkey");
    $h->add("Dragonfly");
    $h->add("Elephant");
    $h->add("Elk");
    $h->add("Fly");
    $h->add("Frog");
    $h->add("Gecko");
    $h->add("Gharial");
    $h->add("Goanna");
    $h->add("Goat");
    $h->add("Hawk");
    $h->add("Hippopotamus");
    $h->add("Hornbill");
    $h->add("Horse");
    $h->add("Human");
    $h->add("Iguana");
    $h->add("Jumping Spider");
    $h->add("Kestrel");
    $h->add("Loris");
    $h->add("Nautilus");
    $h->add("Octopus");
    $h->add("Oscar");
    $h->add("Owl");
    $h->add("Parrot");
    $h->add("Pelican");
    $h->add("Penguin");
    $h->add("Plaice");
    $h->add("Sheep");
    $h->add("Squid");
    $h->add("Stingray");
    $h->add("Tiger");
    $h->add("Toad");
    $h->add("Toucan");
    $h->add("Wasp");
    $h->add("Water Buffalo");
    $h->add("Wolf Spider");
    $h->add("Zebra");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Famous Americans
#-------------------------------------------------------------------------------

 {package FamousAmericans;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Abraham_Lincoln",             title=>"Abraham Lincoln",                       );
    $h->addX2(  name=>"Alexander_Graham_Bell",       title=>"Alexander Graham Bell",                 );
    $h->addX2(  name=>"Alexander_Hamilton",          title=>"Alexander Hamilton",                    );
    $h->addX2(  name=>"Amelia_earhart",              title=>"Amelia Earhart",                        );
    $h->addX2(  name=>"Babe_Ruth2",                  title=>"Babe Ruth",                             );
    $h->addX2(  name=>"Barbara_McClintock",          title=>"Barbara McClintock",                    );
    $h->addX2(  name=>"BenFranklin",                 title=>"Benjamin Franklin",                     );
    $h->addX2(  name=>"Betty_Ford",                  title=>"Betty Ford",                            );
    $h->addX2(  name=>"Billie_Holiday",              title=>"Billie Holiday",                        );
    $h->addX2(  name=>"CHBest",                      title=>"Charles Herbert Best",                  );
    $h->addX2(  name=>"Carl_Sagan",                  title=>"Carl Sagan",                            );
    $h->addX2(  name=>"Carnegie",                    title=>"Andrew Carnegie",                       );
    $h->addX2(  name=>"Col_Charles_Lindbergh",       title=>"Charles Lindbergh",                     );
    $h->addX2(  name=>"Elvis_Presley",               title=>"Elvis Aaron Presley",                   );
    $h->addX2(  name=>"Ernest_Hemingway",            title=>"Ernest Hemingway",                      );
    $h->addX2(  name=>"First_flight2",               title=>"Wright brothers",                       );
    $h->addX2(  name=>"Frank_Sinatra",               title=>"Frank Sinatra",                         );
    $h->addX2(  name=>"Frederick_Douglass",          title=>"Frederick Douglass",                    );
    $h->addX2(  name=>"George_Washington",           title=>"George Washington",                     );
    $h->addX2(  name=>"George_Westinghouse",         title=>"George Westinghouse, Jr",               );
    $h->addX2(  name=>"Harriet_Tubman",              title=>"Harriet Tubman",                        );
    $h->addX2(  name=>"HarryHoudini",                title=>"Harry Houdin",                          );
    $h->addX2(  name=>"Henry_ford",                  title=>"Henry Ford",                            );
    $h->addX2(  name=>"Ida_M_Tarbell",               title=>"Ida Tarbell",                           );
    $h->addX2(  name=>"James_Dean",                  title=>"James Byron Dean",                      );
    $h->addX2(  name=>"Jesse_Owens",                 title=>"Jesse Owens",                           );
    $h->addX2(  name=>"JohnFK",                      title=>"John F. Kennedy",                       );
    $h->addX2(  name=>"JohnFK_1",                    title=>"John F. Kennedy",                       );
    $h->addX2(  name=>"John_Adams",                  title=>"John Adams",                            );
    $h->addX2(  name=>"John_Wayne_portrait",         title=>"John Wayne",                            );
    $h->addX2(  name=>"Louis_Armstrong",             title=>"Louis Armstrong",                       );
    $h->addX2(  name=>"Malcolm_X",                   title=>"Malcolm X",                             );
    $h->addX2(  name=>"Marilyn_Monroe",              title=>"Marilyn Monroe",                        );
    $h->addX2(  name=>"Martin_Luther_King_Jr",       title=>"Martin Luther King, Jr.",               );
    $h->addX2(  name=>"Michael_Jackson",             title=>"Michael Joseph Jackson",                );
    $h->addX2(  name=>"Neil_Armstrong",              title=>"Neil Alden Armstrong",                  );
    $h->addX2(  name=>"Neil_Armstrong_1",            title=>"Neil Alden Armstrong",                  );
    $h->addX2(  name=>"Nikola_Tesla",                title=>"Nikola Tesla",                          );
    $h->addX2(  name=>"President_Reagan",            title=>"Ronald Reagan",                         );
    $h->addX2(  name=>"Rachel-Carson",               title=>"Rachel Carson",                         );
    $h->addX2(  name=>"RichardFeynman",              title=>"Richard Feynmann",                      );
    $h->addX2(  name=>"Robert_Edward_Lee",           title=>"Robert E. Lee",                         );
    $h->addX2(  name=>"Rosaparks",                   title=>"Rosa Parkes",                           );
    $h->addX2(  name=>"Sacawagea",                   title=>"Sacagawea",                             );
    $h->addX2(  name=>"Sammy_Davis_Jnr",             title=>"Sammy Davis, Jr.",                      );
    $h->addX2(  name=>"Samuelfinleybreesemorse",     title=>"Samuel Morse",                          );
    $h->addX2(  name=>"Selman_Waksman",              title=>"Selman Abraham Waksman",                );
    $h->addX2(  name=>"Stanford_Robert_Ovshinsky",   title=>"Stanford Robert Ovshinsky",             );
    $h->addX2(  name=>"Steve_Jobs",                  title=>"Steve Jobs",                            );
    $h->addX2(  name=>"T_Roosevelt",                 title=>"Theodore Roosevelt",                    );
    $h->addX2(  name=>"Thomas_Edison1",              title=>"Thomas Alva Edison",                    );
    $h->addX2(  name=>"Thomas_Edison2",              title=>"Thomas Alva Edison",                    );
    $h->addX2(  name=>"Walt_Disney",                 title=>"Walt Disney",                           );
    $h->addX2(  name=>"Wernher_von_Braun",           title=>"Wernher Von Braun",                     );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Famous City Landmarks
#-------------------------------------------------------------------------------

 {package FamousCityLandmarks;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add("Big Ben", 3);
    $h->add("Brandenburg Gate", 3);
    $h->add("Burj Khalifa", 3);
    $h->add("Christ the Redeemer", 3);
    $h->add("Cologne Cathedral", 3);
    $h->add("Colosseum", 3);
    $h->add("Edinburgh Castle", 3);
    $h->add("Eiffel Tower", 3);
    $h->add("Forbidden City", 3);
    $h->add("Golden Gate Bridge", 3);
    $h->add("Great Pyramid of Giza", 3);
    $h->add("Hagia Sophia", 3);
    $h->add("Leaning Tower of Pisa", 3);
    $h->add("Palace of Versailles", 3);
    $h->add("Parthenon", 3);
    $h->add("Petronas Towers", 3);
    $h->add("Ponte Vecchio", 3);
    $h->add("Potala Palace", 3);
    $h->add("Rialto Bridge", 3);
    $h->add("Sagrada Familia", 3);
    $h->add("Saint Basil's Cathedral", 3);
    $h->add("Shwedagon Pagoda", 3);
    $h->add("Singapore Flyer", 3);
    $h->add("Statue of Liberty", 3);
    $h->add("Sydney Opera House", 3);
    $h->add("Taj Mahal", 3);
    $h->add("White House", 3);
    $h
   }
 }

#-------------------------------------------------------------------------------
# Famous London Landmarks
#-------------------------------------------------------------------------------

 {package FamousLondonLandmarks;
  use base qw(SequenceApplication);

  sub add($$$)
   {my ($h, $sequence, $name) = @_;
    $h->{$name} = {name=>$name, sequence=>$sequence, order=>$name};
   }

  sub Load()
   {my $h = bless {};
    $h->add(3, "10 Downing Street");
    $h->add(3, "Admiralty Arch");
    $h->add(3, "Albert Bridge");
    $h->add(3, "Albert Memorial");
    $h->add(3, "BT Tower");
    $h->add(3, "Bank of England");
    $h->add(3, "Battersea Power Station");
    $h->add(3, "Big Ben");
    $h->add(3, "British Museum");
    $h->add(3, "Buckingham Palace");
    $h->add(3, "Canary Wharf");
    $h->add(3, "Cenotaph");
    $h->add(3, "City Hall");
    $h->add(3, "Cleopatra's Needle");
    $h->add(3, "County Hall");
    $h->add(3, "Cutty Sark");
    $h->add(3, "Diana, Princess of Wales Memorial Fountain");
    $h->add(3, "Duke of York's Column");
    $h->add(3, "Eros");
    $h->add(3, "Fountains, Trafalgar Square");
    $h->add(3, "Harrods");
    $h->add(3, "Horse Guards Parade");
    $h->add(3, "Kensington Palace");
    $h->add(3, "Liberty Department Store");
    $h->add(3, "London Eye");
    $h->add(3, "London Palladium");
    $h->add(3, "Marble Arch");
    $h->add(3, "Millennium Bridge");
    $h->add(3, "National Gallery");
    $h->add(3, "Natural History Museum");
    $h->add(3, "Nelson's Column");
    $h->add(3, "North Greenwich Arena");
    $h->add(3, "Odeon, Leicester Square");
    $h->add(3, "Old Bailey");
    $h->add(3, "Old Royal Naval College");
    $h->add(3, "Palace Of Westminster");
    $h->add(3, "Peter Pan Statue");
    $h->add(3, "Royal Albert Hall");
    $h->add(3, "Royal Courts of Justice");
    $h->add(3, "Royal Festival Hall");
    $h->add(3, "Royal Observatory");
    $h->add(3, "Royal Opera House");
    $h->add(3, "Selfridges");
    $h->add(3, "St. Martin in the Fields");
    $h->add(3, "St. Pancras Station");
    $h->add(3, "St. Paul's Cathedral");
    $h->add(3, "Tate Modern");
    $h->add(3, "Thames Barrier");
    $h->add(3, "The Gherkin");
    $h->add(3, "The Monument");
    $h->add(3, "Tower Bridge");
    $h->add(3, "Tower of London");
    $h->add(3, "Traitor's Gate");
    $h->add(3, "Victoria Memorial");
    $h->add(3, "Victoria and Albert Museum");
    $h->add(3, "Wellington Arch");
    $h->add(3, "Westminster Abbey");
    $h->add(3, "Winston Churchill statue");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Flower Alphabet
#-------------------------------------------------------------------------------

 {package FlowerAlphabet;
  use base qw(ColourApplication);

  my %h;
  sub add($$$$$$)
   {my ($group, $S40, $free, $colour, $name, $prefix) = @_;
    my  $p = substr($name, 0, $prefix);
    $h{$name} = {group=>$group, S40=>$S40, free=>$free, colour=>$colour,name=>$name, prefix=>$prefix, order=>$name};
   }

  sub Load()
   {add(11, 0, 0, "955a18", "Acacia", 1);
    add(11, 1, 0, "9b1548", "Aster", 1);
    add(11, 0, 0, "8f475b", "Avens", 1);
    add(11, 1, 0, "5770b7", "Begonia", 1);
    add(11, 0, 0, "d688ff", "Bellflower", 1);
    add(11, 0, 0, "8ac182", "Buddlea", 1); # Buddleia gives more results on Google.
    add(11, 0, 0, "de7901", "Cactus", 1);
    add(11, 0, 0, "9b285e", "Clover", 1);
    add(11, 0, 0, "aca555", "Columbine", 1);
    add(11, 1, 0, "9c66cf", "Crocus", 1);
    add(12, 0, 0, "fafd00", "Daffodil", 1);
    add(12, 0, 0, "e17a16", "Dahlia", 1);
    add(12, 1, 0, "d47d00", "Dandelion", 1);
    add(12, 1, 0, "e54cbc", "Echium", 1);
    add(12, 0, 0, "d9b300", "Edelweiss", 1);
    add(12, 0, 0, "c170dc", "Eyebright", 1);
    add(12, 0, 0, "b16f99", "Fleabane", 1);
    add(12, 0, 0, "d7bc05", "Forget-Me-Not", 1);
    add(12, 1, 0, "f83dd6", "Fuschia", 1);
    add(13, 1, 0, "b6c415", "Gentian", 1);
    add(13, 0, 0, "89ab00", "Gerbera", 1);
    add(13, 0, 0, "4d7fd2", "Globeflower", 1);
    add(13, 1, 0, "dbba56", "Hawthorn", 1);
    add(13, 0, 0, "a7394b", "Heather", 1);
    add(13, 0, 0, "db565f", "Hibiscus", 1);
    add(13, 0, 0, "fd7ada", "Impatiens", 1);
    add(13, 1, 0, "fd57c4", "Ipomoea", 1);
    add(13, 0, 0, "fbd802", "Iris", 1);
    add(14, 0, 0, "adbc66", "Jacaranda", 1);
    add(14, 0, 0, "9887ff", "Jacob's Ladder", 1);
    add(14, 1, 0, "dccd00", "Jasmine", 1);
    add(14, 0, 0, "dc8719", "Kidney Vetch", 1);
    add(14, 1, 0, "ffce0a", "King of the Alps", 1);
    add(14, 0, 0, "f18b00", "Kingcup", 1);
    add(14, 1, 0, "bae232", "Lilac", 1);
    add(14, 0, 0, "95c854", "Lobelia", 1);
    add(14, 0, 0, "dc4eff", "Lupin", 1);
    add(15, 0, 0, "efba00", "Marguerite", 1);
    add(15, 0, 0, "90c422", "Marigold", 1);
    add(15, 1, 1, "ff9100", "Mayweed", 1);
    add(15, 0, 0, "c41961", "Naked Man Orchid", 1);
    add(15, 1, 1, "e1c400", "Nasturtium", 1);
    add(15, 0, 0, "ec848e", "Netted Willow", 1);
    add(15, 0, 0, "f12200", "Orange Lily", 1);
    add(15, 1, 1, "b32065", "Orchid", 1);
    add(15, 0, 0, "f1cc00", "Oxlip", 1);
    add(16, 1, 1, "eb694f", "Pansy", 1);
    add(16, 0, 0, "d942be", "Petunia", 1);
    add(16, 0, 0, "c256f4", "Pink", 1);
    add(16, 1, 1, "b75f00", "Queen Anne's Lace", 2);
    add(16, 1, 1, "8bcc3e", "Ragwort", 1);
    add(16, 0, 0, "bdd631", "Rhododendron", 1);
    add(16, 0, 0, "e43c73", "Rock Rose", 1);
    add(17, 0, 0, "d675a3", "Snowbell", 1);
    add(17, 1, 0, "1e6dff", "Sunflower", 1);
    add(17, 0, 0, "b2d134", "Sweet Pea", 1);
    add(17, 0, 0, "ac7de6", "Teasle", 1);
    add(17, 0, 0, "b8c46a", "Thistle", 1);
    add(17, 1, 0, "ff8f3c", "Turk's Cap", 1);
    add(17, 1, 0, "db5c16", "Umbrella Plant", 1);
    add(18, 0, 0, "77aa6d", "Valerian", 1);
    add(18, 0, 0, "ff4e00", "Vetch", 1);
    add(18, 1, 0, "4800ff", "Violet", 1);
    add(18, 1, 0, "e8b4ab", "White Rose", 1);
    add(18, 0, 0, "e9b055", "Wintergreen", 1);
    add(18, 0, 0, "ebdd00", "Wood Sorrel", 1);
    add(18, 0, 0, "cede1e", "Yarrow", 1);
    add(18, 1, 0, "75cd57", "Yellow Poppy", 1);
    add(18, 0, 0, "e3c600", "Yellow Violet", 1);
    add(18, 1, 0, "f695a9", "Zinnia", 1);
    return bless \%h;
   }
 }


#------------------------------------------------------------------------------
# Fractions
#------------------------------------------------------------------------------

 {package Fractions;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->addX2(name=>"6-0",    title=>0,       order=>"000",   );
    $h->addX2(name=>"6-6",    title=>"6/6",   order=>"000",   );
    $h->addX2(name=>"6-3c",   title=>"3/6",   order=>"001",   );
    $h->addX2(name=>"6-3a",   title=>"3/6",   order=>"002",   );
    $h->addX2(name=>"6-3b",   title=>"3/6",   order=>"002",   );
    $h->addX2(name=>"6-2a",   title=>"2/6",   order=>"0031",  );
    $h->addX2(name=>"6-2b",   title=>"2/6",   order=>"0032",  );
    $h->addX2(name=>"6-2c",   title=>"2/6",   order=>"0033",  );
    $h->addX2(name=>"6-4a",   title=>"4/6",   order=>"0041",  );
    $h->addX2(name=>"6-4b",   title=>"4/6",   order=>"0042",  );
    $h->addX2(name=>"6-5a",   title=>"5/6",   order=>"006",   );
    $h->addX2(name=>"6-1b",   title=>"1/6",   order=>"0061",  );
    $h->addX2(name=>"6-1a",   title=>"1/6",   order=>"0062",  );
    $h->addX2(name=>"12-12",  title=>"12/12", order=>"010",   );
    $h->addX2(name=>"12-6a",  title=>"6/12",  order=>"0112",  );
    $h->addX2(name=>"12-6b",  title=>"6/12",  order=>"0112",  );
    $h->addX2(name=>"12-6e",  title=>"6/12",  order=>"0112",  );
    $h->addX2(name=>"12-6c",  title=>"6/12",  order=>"0112",  );
    $h->addX2(name=>"12-6d",  title=>"6/12",  order=>"0112",  );
    $h->addX2(name=>"12-6f",  title=>"6/12",  order=>"0112",  );
    $h->addX2(name=>"12-3a",  title=>"3/12",  order=>"0113",  );
    $h->addX2(name=>"12-3b",  title=>"3/12",  order=>"0113",  );
    $h->addX2(name=>"12-3c",  title=>"3/12",  order=>"0113",  );
    $h->addX2(name=>"12-4a",  title=>"4/12",  order=>"0114",  );
    $h->addX2(name=>"12-4c",  title=>"4/12",  order=>"0114",  );
    $h->addX2(name=>"12-4b",  title=>"4/12",  order=>"0114",  );
    $h->addX2(name=>"12-4d",  title=>"4/12",  order=>"0114",  );
    $h->addX2(name=>"12-9a",  title=>"9/12",  order=>"01151", );
    $h->addX2(name=>"12-9b",  title=>"9/12",  order=>"01152", );
    $h->addX2(name=>"12-9c",  title=>"9/12",  order=>"01153", );
    $h->addX2(name=>"12-8a",  title=>"8/12",  order=>"01160", );
    $h->addX2(name=>"12-8b",  title=>"8/12",  order=>"01160", );
    $h->addX2(name=>"12-2a",  title=>"2/12",  order=>"0117",  );
    $h->addX2(name=>"12-2b",  title=>"2/12",  order=>"0117",  );
    $h->addX2(name=>"12-10a", title=>"10/12", order=>"0118",  );
    $h->addX2(name=>"12-1a",  title=>"1/12",  order=>"0119",  );
    $h->addX2(name=>"12-5a",  title=>"5/12",  order=>"0120",  );
    $h->addX2(name=>"12-5b",  title=>"5/12",  order=>"0120",  );
    $h->addX2(name=>"24-24",  title=>"24/24", order=>"020",   );
    $h->addX2(name=>"24-12a", title=>"12/24", order=>"021",   );
    $h->addX2(name=>"24-6a",  title=>"6/24",  order=>"022",   );
    $h->addX2(name=>"24-6b",  title=>"6/24",  order=>"022",   );
    $h->addX2(name=>"24-8a",  title=>"8/24",  order=>"023",   );
    $h->addX2(name=>"24-4a",  title=>"4/24",  order=>"024",   );
    $h->addX2(name=>"24-18a", title=>"18/24", order=>"025",   );
    $h->addX2(name=>"24-16a", title=>"16/24", order=>"026",   );
    $h->addX2(name=>"24-16b", title=>"16/24", order=>"026",   );
    $h->addX2(name=>"24-16c", title=>"16/24", order=>"026",   );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Fruits
#-------------------------------------------------------------------------------

 {package Fruits;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Apple 1",              title=>"Apple",                  );
    $h->addX2(  name=>"Apple 2",              title=>"Apple",                  );
    $h->addX2(  name=>"Apricot 1",            title=>"Apricot",                );
    $h->addX2(  name=>"Apricot 2",            title=>"Apricot",                );
    $h->addX2(  name=>"Avocado 1",            title=>"Avocado",                );
    $h->addX2(  name=>"Avocado 2",            title=>"Avocado",                );
    $h->addX2(  name=>"Banana 1",             title=>"Banana",                 );
    $h->addX2(  name=>"Banana 2",             title=>"Banana",                 );
    $h->addX2(  name=>"Blackberry 1",         title=>"Blackberry",             );
    $h->addX2(  name=>"Blackberry 2",         title=>"Blackberry",             );
    $h->addX2(  name=>"Blackcurrant 1",       title=>"Blackcurrant",           );
    $h->addX2(  name=>"Blackcurrant 2",       title=>"Blackcurrant",           );
    $h->addX2(  name=>"Blueberry 1",          title=>"Blueberry",              );
    $h->addX2(  name=>"Blueberry 2",          title=>"Blueberry",              );
    $h->addX2(  name=>"Breadfruit 1",         title=>"Breadfruit",             );
    $h->addX2(  name=>"Breadfruit 2",         title=>"Breadfruit",             );
    $h->addX2(  name=>"Canary Melon 1",       title=>"Canary Melon",           );
    $h->addX2(  name=>"Cantaloupe Melon 1",   title=>"Cantaloupe Melon",       );
    $h->addX2(  name=>"Cherry 1",             title=>"Cherry",                 );
    $h->addX2(  name=>"Cherry 2",             title=>"Cherry",                 );
    $h->addX2(  name=>"Clementine 1",         title=>"Clementine",             );
    $h->addX2(  name=>"Clementine 2",         title=>"Clementine",             );
    $h->addX2(  name=>"Coconut 1",            title=>"Coconut",                );
    $h->addX2(  name=>"Coconut 2",            title=>"Coconut",                );
    $h->addX2(  name=>"Cranberry 1",          title=>"Cranberry",              );
    $h->addX2(  name=>"Cranberry 2",          title=>"Cranberry",              );
    $h->addX2(  name=>"Damson 1",             title=>"Damson",                 );
    $h->addX2(  name=>"Damson 2",             title=>"Damson",                 );
    $h->addX2(  name=>"Date 1",               title=>"Date",                   );
    $h->addX2(  name=>"Date 2",               title=>"Date",                   );
    $h->addX2(  name=>"Fig 1",                title=>"Fig",                    );
    $h->addX2(  name=>"Fig 2",                title=>"Fig",                    );
    $h->addX2(  name=>"Galia Melon 1",        title=>"Galia Melon",            );
    $h->addX2(  name=>"Gooseberry 1",         title=>"Gooseberry",             );
    $h->addX2(  name=>"Gooseberry 2",         title=>"Gooseberry",             );
    $h->addX2(  name=>"Grape 1",              title=>"Grape",                  );
    $h->addX2(  name=>"Grape 2",              title=>"Grape",                  );
    $h->addX2(  name=>"Grapefruit 1",         title=>"Grapefruit",             );
    $h->addX2(  name=>"Grapefruit 2",         title=>"Grapefruit",             );
    $h->addX2(  name=>"Greengage 1",          title=>"Greengage",              );
    $h->addX2(  name=>"Greengage 2",          title=>"Greengage",              );
    $h->addX2(  name=>"Guava 1",              title=>"Guava",                  );
    $h->addX2(  name=>"Guava 2",              title=>"Guava",                  );
    $h->addX2(  name=>"Honeydew Melon 1",     title=>"Honeydew Melon",         );
    $h->addX2(  name=>"Horned Melon 1",       title=>"Horned Melon",           );
    $h->addX2(  name=>"Jackfruit 1",          title=>"Jackfruit",              );
    $h->addX2(  name=>"Jackfruit 2",          title=>"Jackfruit",              );
    $h->addX2(  name=>"Kiwifruit 1",          title=>"Kiwifruit",              );
    $h->addX2(  name=>"Kiwifruit 2",          title=>"Kiwifruit",              );
    $h->addX2(  name=>"Kumquat 1",            title=>"Kumquat",                );
    $h->addX2(  name=>"Kumquat 2",            title=>"Kumquat",                );
    $h->addX2(  name=>"Lemon 1",              title=>"Lemon",                  );
    $h->addX2(  name=>"Lemon 2",              title=>"Lemon",                  );
    $h->addX2(  name=>"Lime 1",               title=>"Lime",                   );
    $h->addX2(  name=>"Lime 2",               title=>"Lime",                   );
    $h->addX2(  name=>"Lychee 1",             title=>"Lychee",                 );
    $h->addX2(  name=>"Lychee 2",             title=>"Lychee",                 );
    $h->addX2(  name=>"Mango 1",              title=>"Mango",                  );
    $h->addX2(  name=>"Mango 2",              title=>"Mango",                  );
    $h->addX2(  name=>"Nectarine 1",          title=>"Nectarine",              );
    $h->addX2(  name=>"Nectarine 2",          title=>"Nectarine",              );
    $h->addX2(  name=>"Olive 1",              title=>"Olive",                  );
    $h->addX2(  name=>"Olive 2",              title=>"Olive",                  );
    $h->addX2(  name=>"Orange 1",             title=>"Orange",                 );
    $h->addX2(  name=>"Orange 2",             title=>"Orange",                 );
    $h->addX2(  name=>"Papaya 1",             title=>"Papaya",                 );
    $h->addX2(  name=>"Papaya 2",             title=>"Papaya",                 );
    $h->addX2(  name=>"Passion Fruit 1",      title=>"Passion Fruit",          );
    $h->addX2(  name=>"Passion Fruit 2",      title=>"Passion Fruit",          );
    $h->addX2(  name=>"Pawpaw 1",             title=>"Pawpaw",                 );
    $h->addX2(  name=>"Pawpaw 2",             title=>"Pawpaw",                 );
    $h->addX2(  name=>"Peach 1",              title=>"Peach",                  );
    $h->addX2(  name=>"Peach 2",              title=>"Peach",                  );
    $h->addX2(  name=>"Pear 1",               title=>"Pear",                   );
    $h->addX2(  name=>"Pear 2",               title=>"Pear",                   );
    $h->addX2(  name=>"Pineapple 1",          title=>"Pineapple",              );
    $h->addX2(  name=>"Pineapple 2",          title=>"Pineapple",              );
    $h->addX2(  name=>"Plum 1",               title=>"Plum",                   );
    $h->addX2(  name=>"Plum 2",               title=>"Plum",                   );
    $h->addX2(  name=>"Pomegranate 1",        title=>"Pomegranate",            );
    $h->addX2(  name=>"Pomegranate 2",        title=>"Pomegranate",            );
    $h->addX2(  name=>"Pomelo 1",             title=>"Pomelo",                 );
    $h->addX2(  name=>"Pomelo 2",             title=>"Pomelo",                 );
    $h->addX2(  name=>"Quince 1",             title=>"Quince",                 );
    $h->addX2(  name=>"Quince 2",             title=>"Quince",                 );
    $h->addX2(  name=>"Raspberry 1",          title=>"Raspberry",              );
    $h->addX2(  name=>"Raspberry 2",          title=>"Raspberry",              );
    $h->addX2(  name=>"Redcurrant 1",         title=>"Redcurrant",             );
    $h->addX2(  name=>"Redcurrant 2",         title=>"Redcurrant",             );
    $h->addX2(  name=>"Satsuma 1",            title=>"Satsuma",                );
    $h->addX2(  name=>"Satsuma 2",            title=>"Satsuma",                );
    $h->addX2(  name=>"Starfruit 1",          title=>"Starfruit",              );
    $h->addX2(  name=>"Starfruit 2",          title=>"Starfruit",              );
    $h->addX2(  name=>"Strawberry 1",         title=>"Strawberry",             );
    $h->addX2(  name=>"Strawberry 2",         title=>"Strawberry",             );
    $h->addX2(  name=>"Tamarillo 1",          title=>"Tamarillo",              );
    $h->addX2(  name=>"Tamarillo 2",          title=>"Tamarillo",              );
    $h->addX2(  name=>"Watermelon 1",         title=>"Watermelon",             );
    $h->addX2(  name=>"Watermelon 2",         title=>"Watermelon",             );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Fun fair
#-------------------------------------------------------------------------------
# Needs to be upgraded to Sequence Application
 {package FunFair;
  use base qw(SequenceApplication);

  my %h;
  sub add($$)
   {my ($name, $sequence) = @_;
    $h{$name} = {group=>1, name=>$name, sequence=>$sequence, order=>$name};
   }

  sub genJava($$)
   {my ($data, $app) = @_;
    my $s = '';
    for($app->things)
     {my $group = $_->group;
      my $name  = $_->name;
      my $title = $_->title;
      my $sequence = $_->sequence;

      $s .= <<"END" if $name eq $title;
`  Add($sequence, "$name");
END
      $s .= <<"END" unless $name eq $title;
`  Add($sequence, "$name", "$title");
END
     }
    $s
   }

  sub Load()
   {add("Arcade Games", 5);
    add("Archery", 2);
    add("Balloons", 3);
    add("Big Wheel", 3);
    add("Bungee", 3);
    add("Burgers", 2);
    add("Candy Floss", 2);
    add("Catch A Duck", 3);
    add("Circus Slide", 2);
    add("Claw machine", 2);
    add("Crazy Circus", 3);
    add("Crazy Frog Game", 3);
    add("Darts", 4);
    add("Dodgems", 4);
    add("Flying Chairs", 2);
    add("Freddy's Revenge", 6);
    add("Froggit", 3);
    add("Fun House", 3);
    add("Galloping Horses", 3);
    add("Ghost Train", 3);
    add("Giant Helter Skelter", 3);
    add("Helter Skelter", 3);
    add("High Roller", 2);
    add("Ladybirds", 2);
    add("Little Wheel", 2);
    add("Merry-Go-Round", 6);
    add("Orbit", 7);
    add("Pirate's Treasure", 2);
    add("Rifle Range", 3);
    add("Sky Flyer", 5);
    add("Slot Machine", 4);
    add("Octopus", 2);
    add("Spinning Teacups", 2);
    add("Storm", 6);
    add("Superbowl", 4);
    add("Sweets", 4);
    add("Teacups", 2);
    add("Tin Can Alley", 3);
    add("Twister", 2);
    add("Win a Goldfish", 3);
    add("Win a Teddy", 4);
    bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------

 {package Functions;
  use base qw(Application);

  sub Add
   {my ($h, $function, $order) = @_;
    my $e = $h->add($function);
    $e->{order} = sprintf("%05.2f", $order);
   }

  sub Load()
   {my $h = bless {};
    $h->Add("linear",                        1.1);
    $h->Add("minus linear",                  1.2);
    $h->Add("one over linear",               1.3);
    $h->Add("minus one over linear",         1.4);
    $h->Add("squared",                       2.1);
    $h->Add("minus squared",                 2.2);
    $h->Add("one over squared",              2.3);
    $h->Add("minus one over squared",        2.4);
    $h->Add("cubed",                         3.1);
    $h->Add("minus cubed",                   3.2);
    $h->Add("one over cubed",                3.3);
    $h->Add("minus one over cubed",          3.4);
    $h->Add("sin",                           4.1);
    $h->Add("minus sin",                     4.2);
    $h->Add("one over sin",                  4.3);
    $h->Add("minus one over sin",            4.4);
    $h->Add("cos",                           5.1);
    $h->Add("minus cos",                     5.2);
    $h->Add("one over cos",                  5.3);
    $h->Add("minus one over cos",            5.4);
    $h->Add("tan",                           6.1);
    $h->Add("minus tan",                     6.2);
    $h->Add("one over tan",                  6.3);
    $h->Add("minus one over tan",            6.4);
    $h->Add("squared sin",                   7.1);
    $h->Add("minus squared sin",             7.2);
    $h->Add("one over squared sin",          7.3);
    $h->Add("minus one over squared sin",    7.4);
    $h->Add("squared cos",                   8.1);
    $h->Add("minus squared cos",             8.2);
    $h->Add("one over squared cos",          8.3);
    $h->Add("minus one over squared cos",    8.4);
    $h->Add("sinc",                          9.1);
    $h->Add("minus sinc",                    9.2);
    $h->Add("one over sinc",                 9.3);
    $h->Add("minus one over sinc",           9.4);
    $h->Add("exp",                           10.1);
    $h->Add("minus exp",                     10.2);
    $h->Add("one over exp",                  10.3);
    $h->Add("minus one over exp",            10.4);
    $h->Add("exp squared",                   11.1);
    $h->Add("minus exp squared",             11.2);
    $h->Add("one over exp squared",          11.3);
    $h->Add("minus one over exp squared",    11.4);
    $h->Add("log",                           12.1);
    $h->Add("minus log",                     12.2);
    $h->Add("one over log",                  12.3);
    $h->Add("minus one over log",            12.4);
    $h->Add("squared log",                   13.1);
    $h->Add("minus squared log",             13.2);
    $h->Add("one over squared log",          13.3);
    $h->Add("minus one over squared log",    13.4);
    $h->Add("exp squared sin",               14.1);
    $h->Add("minus exp squared sin",         14.2);
    $h->Add("one over exp squared sin",      14.3);
    $h->Add("minus one over exp squared sin",14.4);
    $h->Add("exp squared cos",               15.1);
    $h->Add("minus exp squared cos",         15.2);
    $h->Add("one over exp squared cos",      15.3);
    $h->Add("minus one over exp squared cos",15.4);
    $h
   }
 }

#-------------------------------------------------------------------------------
# Garden Flowers
#-------------------------------------------------------------------------------

 {package GardenFlowers;
  use base qw(Application);

  my %h;
  sub add($;$)
   {my ($name, $icon) = @_;
    $h{$name} = {group=>1, name=>$name, icon=>$icon, order=>$name};
   }

  sub Load()
   {add("African Daisy");
    add("Amaryllis");
    add("Azalea");
    add("Beard Tongue");
    add("Begonia");
    add("Bellflower");
    add("Busy Lizzie");
    add("Cactus");
    add("Carnation");
    add("Chrysanthemum");
    add("Clematis");
    add("Coleus");
    add("Cranesbill");
    add("Dahlia");
    add("Fuschia");
    add("Geranium");
    add("Gerbera", 4);
    add("Hibiscus");
    add("Hollyhock");
    add("Hydrangea");
    add("Iris");
    add("Large Pink");
    add("Lavendar");
    add("Lilac");
    add("Lily");
    add("Lobelia");
    add("Lupin");
    add("Marguerite");
    add("Marigold");
    add("Mock Orange");
    add("Morning Glory");
    add("Nasturtium");
    add("Pansy");
    add("Passion Flower");
    add("Petunia");
    add("Pink Rose");
    add("Poppy");
    add("Primrose");
    add("Rock Rose");
    add("Snap Dragon");
    add("Solomon's Seal");
    add("St John's Wort");
    add("Sunflower");
    add("Sweet Pea");
    add("Tagetes");
    add("Turk's Cap");
    add("Valerian");
    add("Verbena");
    add("Viola");
    add("White Rose");
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Geography Manmade Features
#-------------------------------------------------------------------------------

 {package GeographyManmadeFeatures;
  use base qw(Application);

  my %h;
  sub add($$;$)
   {my ($group, $name, $icon) = @_;
    $h{$name} = {group=>$group, name=>$name, icon=>$icon, order=>$name};
   }

  sub Load()
   {add( 2, "Airport");
    add( 6, "Ancient burial chamber");
    add( 2, "Aqueduct");
    add( 4, "Breakwater");
    add( 1, "Canal");
    add( 3, "Car park");
    add( 3, "Cemetery");
    add( 4, "Chair lift");
    add( 1, "City");
    add( 1, "Dam");
    add( 6, "Drainage ditch");
    add( 6, "Electricity pylon");
    add( 4, "Embankment");
    add( 5, "Farm fields");
    add( 6, "Flood defence wall");
    add( 3, "Fly-over");
    add( 5, "Foot bridge");
    add( 1, "Football stadium");
    add( 3, "Footpath");
    add( 5, "Golf course");
    add( 2, "Harbour");
    add( 1, "Lake");
    add( 5, "Lighthouse");
    add( 2, "Marina");
    add( 3, "Monument");
    add( 3, "Motorway", 4);
    add( 6, "Nuclear Power Station");
    add( 6, "Observation wheel");
    add( 2, "Orchard");
    add( 1, "Pier");
    add( 1, "Port");
    add( 2, "Quarry");
    add( 6, "Railway bridge");
    add( 1, "Railway line");
    add( 4, "Reservoir");
    add( 5, "Road bridge");
    add( 1, "Road");
    add( 5, "Ruined city");
    add( 3, "Sea wall");
    add( 4, "Ski slope");
    add( 6, "Stepping stones");
    add( 6, "Suspension bridge");
    add( 5, "Swimming pool");
    add( 3, "Terraces");
    add( 1, "Town");
    add( 2, "Tunnel");
    add( 2, "Village");
    add( 4, "Vineyard");
    add( 4, "Wind farm");
    add( 4, "Woodland");
    bless \%h
   }
 }

#-------------------------------------------------------------------------------
# Geography Manmade Features in German
#-------------------------------------------------------------------------------

 {package GeographyManmadeFeaturesGerman;
  use base qw(Application);

  sub Load() {GeographyManmadeFeatures::Load()}
 }

#-------------------------------------------------------------------------------
# Geography Natural Features.
#-------------------------------------------------------------------------------

 {package GeographyNaturalFeatures;
  use base qw(Application);

  my %h;
  sub add($$;$)
   {my ($group, $name, $icon) = @_;
    $h{$name} = {group=>$group, name=>$name, icon=>$icon, order=>$name};
   }

  sub Load()
   {add( 1, "Arete");
    add( 1, "Bay");
    add( 3, "Boulders", 4);
    add( 2, "Canyon");
    add( 1, "Cave");
    add( 5, "Chalk cliff");
    add( 4, "Coastline");
    add( 4, "Crevasse");
    add( 2, "Desert");
    add( 3, "Erratic");
    add( 3, "Estuary");
    add( 7, "Extinct volcano");
    add( 3, "Folding");
    add( 5, "Frozen lake");
    add( 6, "Glacial lake");
    add( 3, "Glacier");
    add( 3, "Headland");
    add( 5, "Hot spring");
    add( 4, "Ice cliff");
    add( 2, "Island");
    add( 3, "Jungle");
    add( 4, "Moorland");
    add( 4, "Mountain");
    add( 7, "Mountain range");
    add( 4, "Peat bog");
    add( 3, "Plateau");
    add( 1, "Pond");
    add( 6, "Raised beach");
    add( 2, "Rapids");
    add( 2, "Ravine");
    add( 1, "Ridge");
    add( 1, "River");
    add( 6, "River valley");
    add( 6, "Rock pinnacles");
    add( 5, "Rock pool");
    add( 5, "Sand dune");
    add( 7, "Sandstone cliff");
    add( 5, "Sandy beach");
    add( 4, "Savannah");
    add( 2, "Scree");
    add( 6, "Shingle beach");
    add( 6, "Snow cornice");
    add( 5, "Stone arch");
    add( 2, "Strata");
    add( 2, "Stream");
    add( 1, "Swamp");
    add( 7, "U shaped valley");
    add( 5, "Waterfall");
    add( 1, "Waves");
    add( 4, "Woodland");
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Geometric Shapes
#-------------------------------------------------------------------------------

 {package GeometricShapes;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->add("Circle");
    $h->add("Cone");
    $h->add("Crescent");
    $h->add("Cube");
    $h->add("Cylinder");
    $h->add("Decagon");
    $h->add("Decagram");
    $h->add("Disc");
    $h->add("Dodecagon");
    $h->add("Dodecahedron");
    $h->add("Ellipse");
    $h->add("Equilateral Triangle");
    $h->add("Helix");
    $h->add("Hendecagon");
    $h->add("Heptagon");
    $h->add("Heptagram");
    $h->add("Hexagon");
    $h->add("Hexagram");
    $h->add("Icosahedron");
    $h->add("Isosceles Triangle");
    $h->add("Kite");
    $h->add("Nonagon");
    $h->add("Octagon");
    $h->add("Octagram");
    $h->add("Octahedron");
    $h->add("Oval");
    $h->add("Parallelogram");
    $h->add("Pentagon");
    $h->add("Pentagram");
    $h->add("Polygons");
    $h->add("Pyramid");
    $h->add("Rectangle");
    $h->add("Rhombus");
    $h->add("Right-angled Triangle");
    $h->add("Scalene Triangle");
    $h->add("Semicircle");
    $h->add("Sphere");
    $h->add("Square");
    $h->add("Tetrahedron");
    $h->add("Torus");
    $h->add("Trapezoid");

    use Facts::GeometricShapes_urls;
    $h->addUrls(urls());

    $h
   }

  sub genJava($)
   {my ($app) = (@_);
    Application::genJavaExtended($app);
   }
 }

#-------------------------------------------------------------------------------
# Glacier
#-------------------------------------------------------------------------------

 {package Glacier;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Alpine Glacier Poppy",                          );
    $h->addX2(  name=>"Avalanche Lake",                                );
    $h->addX2(  name=>"Beargrass",                                     );
    $h->addX2(  name=>"Bearhat Mountain and Hidden Lake",              );
    $h->addX2(  name=>"Big Drift",                                     );
    $h->addX2(  name=>"Bighorn Sheep",                                 );
    $h->addX2(  name=>"Bird Woman Falls",                              );
    $h->addX2(  name=>"Clark's Nutcracker",                            );
    $h->addX2(  name=>"Clements Mountain",                             );
    $h->addX2(  name=>"Garden Wall",                                   );
    $h->addX2(  name=>"Glacier Lily",                                  );
    $h->addX2(  name=>"Glacier National Park",                         );
    $h->addX2(  name=>"Going-to-the-Sun Mountain",                     );
    $h->addX2(  name=>"Going-to-the-Sun Road",                         );
    $h->addX2(  name=>"Golden-mantled Ground Squirrel",                );
    $h->addX2(  name=>"Granite Park Chalet",                           );
    $h->addX2(  name=>"Grinnell Glacier",                              );
    $h->addX2(  name=>"Grinnell Lake",                                 );
    $h->addX2(  name=>"Grizzly Bear",                                  );
    $h->addX2(  name=>"Highline Trail",                                );
    $h->addX2(  name=>"Iceberg Cirque",                                );
    $h->addX2(  name=>"Jackson Glacier",                               );
    $h->addX2(  name=>"Lake McDonald Lodge",                           );
    $h->addX2(  name=>"Lake McDonald",                                 );
    $h->addX2(  name=>"Logan Pass",                                    );
    $h->addX2(  name=>"Many Glacier Hotel and Mount Grinnell",         );
    $h->addX2(  name=>"McDonald Falls",                                );
    $h->addX2(  name=>"Mountain Goat",                                 );
    $h->addX2(  name=>"Red Jammers",                                   );
    $h->addX2(  name=>"Sperry Glacier",                                );
    $h->addX2(  name=>"St. Mary Falls",                                );
    $h->addX2(  name=>"St. Mary Lake",                                 );
    $h->addX2(  name=>"Sunrift Gorge",                                 );
    $h->addX2(  name=>"Swiftcurrent Falls",                            );
    $h->addX2(  name=>"Swiftcurrent Lake and Mount Gould",             );
    $h->addX2(  name=>"Swiftcurrent Pass and Bullhead Lake",           );
    $h->addX2(  name=>"Trail of the Cedars",                           );
    $h->addX2(  name=>"Two Medicine Lake",                             );
    $h->addX2(  name=>"Weeping Wall",                                  );
    $h->addX2(  name=>"Western Meadowlark",                            );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Great Olympians
#-------------------------------------------------------------------------------

 {package GreatOlympians;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Alexander Karelin");
    $h->add("Alexei Nemov");
    $h->add("Alfred Oerter");
    $h->add("Ben Ainslie");
    $h->add("Birgit Fischer");
    $h->add("Bjorn Daehlie");
    $h->add("Bonnie Blair");
    $h->add("Carl Lewis");
    $h->add("Chris Hoy");
    $h->add("Christa Luding-Rothenburger");
    $h->add("Claudia Pechstein");
    $h->add("Daley Thompson");
    $h->add("Dara Torres");
    $h->add("Dmitri Sautin");
    $h->add("Edwin Moses");
    $h->add("Elisabeta Lipa");
    $h->add("Emil Zatopek");
    $h->add("Fanny Blankers-Koen");
    $h->add("Haile Gebrselassie");
    $h->add("Hans-Gunter Winkler");
    $h->add("Hiroshi Hoketsu");
    $h->add("Ian Millar");
    $h->add("Ian Thorpe");
    $h->add("Jan Zelezny");
    $h->add("Jasna Sekaric");
    $h->add("Jayne Torvill and Christopher Dean");
    $h->add("Jesse Owens");
    $h->add("Jim Thorpe");
    $h->add("Joan Benoit");
    $h->add("Johnny Weissmuller");
    $h->add("Jonathan Edwards");
    $h->add("Kelly Holmes");
    $h->add("Kjetil Andre Aamodt");
    $h->add("Larysa Latynina");
    $h->add("Ludmilla Tourischeva");
    $h->add("Mark Spitz");
    $h->add("Merlene Ottey");
    $h->add("Michael Johnson");
    $h->add("Michael Phelps");
    $h->add("Muhammad Ali");
    $h->add("Nadia Comaneci");
    $h->add("Ole Einar Bjoerndalen");
    $h->add("Olga Korbut");
    $h->add("Paavo Nurmi");
    $h->add("Pyrros Dimas");
    $h->add("Shane Gould");
    $h->add("Steve Redgrave");
    $h->add("Teofilo Stevenson");
    $h->add("Toni Sailer");
    $h->add("Valentina Vezzali");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Great Sports Cars
#-------------------------------------------------------------------------------

 {package GreatSportsCars;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add("Aston Martin DBS V12", 5);      # V12
    $h->add("Audi R8", 5);
    $h->add("Bentley Continental GT", 5);
    $h->add("Bugatti Veyron", 5);
    $h->add("Chevrolet Camaro Convertible", 5);
    $h->add("Chevrolet Corvette C6 Z06", 5); # Z06
    $h->add("Dodge Viper", 5);
    $h->add("Ferrari 458 Italia", 5);
    $h->add("Ferrari Enzo", 5);
    $h->add("Fisker Karma", 5);
    $h->add("Ford GT", 5);
    $h->add("Koenigsegg CCX", 5);
    $h->add("Lamborghini Aventador", 5);
    $h->add("Lamborghini Gallardo", 5);
    $h->add("Lexus LFA", 5);
    $h->add("Lotus Elise", 5);
    $h->add("Maserati GranTurismo", 5);
    $h->add("McLaren F1", 5);
    $h->add("Mercedes-Benz SLS AMG", 5);    #-
    $h->add("Porsche 911", 5);
    $h
   }

  sub Description() {<< 'END'}

END
 }

#-------------------------------------------------------------------------------
# Greek - letters of the Greek alphabet
#-------------------------------------------------------------------------------

 {package Greek;
  use base qw(Application);

  sub add($$$)
   {my ($h, $order, $title, $name) = @_;
    $h->{$name} = {name=>$name, title=>$title, order=>sprintf("%02d", $order+0)};
   }

  sub Load()
   {my $h = bless {};
    $h->add(  1, "alpha"  , "𝝰");
    $h->add(  2, "beta"   , "𝝱");
    $h->add(  3, "gamma"  , "𝝲");
    $h->add(  4, "delta"  , "𝝳");
    $h->add(  5, "epsilon", "𝝴");
    $h->add(  6, "zeta"   , "𝝵");
    $h->add(  7, "eta"    , "𝝶");
    $h->add(  8, "theta"  , "𝝷");
    $h->add(  9, "iota"   , "𝝸");
    $h->add( 10, "kappa"  , "𝝹");
    $h->add( 11, "lambda" , "𝝺");
    $h->add( 12, "mu"     , "𝝻");
    $h->add( 13, "nu"     , "𝝼");
    $h->add( 14, "xi"     , "𝝽");
    $h->add( 15, "omicron", "𝝾");
    $h->add( 16, "pi"     , "𝝿");
    $h->add( 17, "rho"    , "𝞀");
    $h->add( 18, "sigma"  , "𝞂");
    $h->add( 19, "tau"    , "𝞃");
    $h->add( 20, "upsilon", "𝞄");
    $h->add( 21, "phi"    , "𝞅");
    $h->add( 22, "chi"    , "𝞆");
    $h->add( 23, "psi"    , "𝞇");
    $h->add( 24, "omega"  , "𝞈");
    $h->add(101, "alpha"  , "𝝖");
    $h->add(102, "beta"   , "𝝗");
    $h->add(103, "gamma"  , "𝝘");
    $h->add(104, "delta"  , "𝝙");
    $h->add(105, "epsilon", "𝝚");
    $h->add(106, "zeta"   , "𝝛");
    $h->add(107, "eta"    , "𝝜");
    $h->add(108, "theta"  , "𝝝");
    $h->add(109, "iota"   , "𝝞" );
    $h->add(110, "kappa"  , "𝝟");
    $h->add(111, "lambda" , "𝝠");
    $h->add(112, "mu"     , "𝝡");
    $h->add(113, "nu"     , "𝝢");
    $h->add(114, "xi"     , "𝝣");
    $h->add(115, "omicron", "𝝤");
    $h->add(116, "pi"     , "𝝥");
    $h->add(117, "rho"    , "𝝦");
    $h->add(118, "sigma"  , "𝝨");
    $h->add(119, "tau"    , "𝝩");
    $h->add(120, "upsilon", "𝝪");
    $h->add(121, "phi"    , "𝝫");
    $h->add(122, "chi"    , "𝝬");
    $h->add(123, "psi"    , "𝝭");
    $h->add(124, "omega"  , "𝝮");

    return $h;
   }
 }


#-------------------------------------------------------------------------------
# House
#-------------------------------------------------------------------------------

 {package House;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Air_Conditioner",         title=>"AC",                 );
    $h->addX2(  name=>"Aquarium",                                             );
    $h->addX2(  name=>"Basin",                                                );
    $h->addX2(  name=>"Bunk_bed",                title=>"Bunk Bed",           );
    $h->addX2(  name=>"Bus_Stop",                title=>"Bus Stop",           );
    $h->addX2(  name=>"Car_garage",              title=>"Garage",             );
    $h->addX2(  name=>"Carpet",                                               );
    $h->addX2(  name=>"Ceiling_fan",             title=>"Fan",                );
    $h->addX2(  name=>"Chinese_vase",            title=>"Vase",               );
    $h->addX2(  name=>"Couch",                   title=>"Sofa",               );
    $h->addX2(  name=>"CrochetHammock",          title=>"Hammock",            );
    $h->addX2(  name=>"Dining_Room",             title=>"Dining Room",        );
    $h->addX2(  name=>"Dining_table",            title=>"Dining Table",       );
    $h->addX2(  name=>"Door_bell",               title=>"Door bell",          );
    $h->addX2(  name=>"Flower_Bed",              title=>"Flower Bed",         );
    $h->addX2(  name=>"Garden_bench_001",        title=>"Bench",              );
    $h->addX2(  name=>"Gate_lock",               title=>"Lock",               );
    $h->addX2(  name=>"House_Lobby",             title=>"Lobby",              );
    $h->addX2(  name=>"Living_Room",             title=>"Living Room",        );
    $h->addX2(  name=>"Modern_kitchen",          title=>"Kitchen",            );
    $h->addX2(  name=>"Roof",                                                 );
    $h->addX2(  name=>"Saucer_magnolia",         title=>"Tree",               );
    $h->addX2(  name=>"Showerhead",              title=>"Shower",             );
    $h->addX2(  name=>"Sink",                                                 );
    $h->addX2(  name=>"Stairway",                title=>"Stairs",             );
    $h->addX2(  name=>"Table",                                                );
    $h->addX2(  name=>"Vacuum_Cleaner",          title=>"Hoover",             );
    $h->addX2(  name=>"Watering-can-green",      title=>"Watering Can",       );
    $h->addX2(  name=>"Welcome_mat",             title=>"Door mat",           );
    $h->addX2(  name=>"Writing_desk",            title=>"Desk",               );
    $h->addX2(  name=>"balcony",                 title=>"Balcony",            );
    $h->addX2(  name=>"bath_tub",                title=>"Bathtub",            );
    $h->addX2(  name=>"bathroom",                title=>"Bathroom",           );
    $h->addX2(  name=>"bed",                     title=>"Bed",                );
    $h->addX2(  name=>"bedroom",                 title=>"Bedroom",            );
    $h->addX2(  name=>"car",                     title=>"Car",                );
    $h->addX2(  name=>"ceiling",                 title=>"Ceiling",            );
    $h->addX2(  name=>"chair_1",                 title=>"Chair",              );
    $h->addX2(  name=>"clock",                   title=>"Clock",              );
    $h->addX2(  name=>"curtain",                 title=>"Curtain",            );
    $h->addX2(  name=>"doghouse",                title=>"Dog house",          );
    $h->addX2(  name=>"driveway",                title=>"Drive",              );
    $h->addX2(  name=>"floor",                   title=>"Floor",              );
    $h->addX2(  name=>"gardens",                 title=>"Garden",             );
    $h->addX2(  name=>"gas_stove",               title=>"Stove",              );
    $h->addX2(  name=>"hedge",                   title=>"Hedge",              );
    $h->addX2(  name=>"house_door",              title=>"Door",               );
    $h->addX2(  name=>"letter_box",              title=>"Letter Box",         );
    $h->addX2(  name=>"microwave_oven",          title=>"Oven",               );
    $h->addX2(  name=>"mirror",                  title=>"Mirror",             );
    $h->addX2(  name=>"modern_wall_shelf",       title=>"Shelf",              );
    $h->addX2(  name=>"pillow",                  title=>"Pillow",             );
    $h->addX2(  name=>"refrigerator_interior",   title=>"Fridge",             );
    $h->addX2(  name=>"stool_seat",              title=>"Stool",              );
    $h->addX2(  name=>"street",                  title=>"Street",             );
    $h->addX2(  name=>"table_lamp",              title=>"Table Lamp",         );
    $h->addX2(  name=>"telephone",               title=>"Telephone",          );
    $h->addX2(  name=>"television",              title=>"TV",                 );
    $h->addX2(  name=>"toilet",                  title=>"Toilet",             );
    $h->addX2(  name=>"wall",                    title=>"Wall",               );
    $h->addX2(  name=>"window",                  title=>"Window",             );
    $h
   }
 }

#-------------------------------------------------------------------------------
# How Heavy Am I
#-------------------------------------------------------------------------------

 {package HowHeavyAmI;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Heaviest ant (Army Ant)",                          title=>"Army Ant",                          photo=>"Heaviest ant (Army Ant)",                          order=>"000000000008", );
    $h->addX2(  name=>"Heaviest moth (Atlas Moth)",                       title=>"Atlas Moth",                        photo=>"Heaviest moth (Atlas Moth)",                       order=>"000000000012", );
    $h->addX2(  name=>"Heaviest hummingbird (Giant Hummingbird)",         title=>"Giant Hummingbird",                 photo=>"Heaviest hummingbird (Giant Hummingbird)",         order=>"000000000021", );
    $h->addX2(  name=>"Heaviest cockroach (Giant Burrowing Cockroach)",   title=>"Giant Burrowing Cockroach",         photo=>"Heaviest cockroach (Giant Burrowing Cockroach)",   order=>"000000000035", );
    $h->addX2(  name=>"Heaviest insect (Goliath Beetle)",                 title=>"Goliath Beetle",                    photo=>"Heaviest insect (Goliath Beetle)",                 order=>"000000000090", );
    $h->addX2(  name=>"Heaviest spider (Goliath Birdeater)",              title=>"Goliath Birdeater",                 photo=>"Heaviest spider (Goliath Birdeater)",              order=>"000000000170", );
    $h->addX2(  name=>"Heaviest plover (Masked Lapwing)",                 title=>"Masked Lapwing",                    photo=>"Heaviest plover (Masked Lapwing)",                 order=>"000000000400", );
    $h->addX2(  name=>"Heaviest tern (Caspian Tern)",                     title=>"Caspian Tern",                      photo=>"Heaviest tern (Caspian Tern)",                     order=>"000000000660", );
    $h->addX2(  name=>"Heaviest bat (Giant Golden-Crowned Flying Fox)",   title=>"Giant Golden-Crowned Flying Fox",   photo=>"Heaviest bat (Giant Golden-Crowned Flying Fox)",   order=>"000000001000", );
    $h->addX2(  name=>"Heaviest owl (Eurasian Eagle-Owl)",                title=>"Eurasian Eagle-Owl",                photo=>"Heaviest owl (Eurasian Eagle-Owl)",                order=>"000000002300", );
    $h->addX2(  name=>"Heaviest land-living arthropod (Coconut crab)",    title=>"Coconut crab",                      photo=>"Heaviest land-living arthropod (Coconut crab)",    order=>"000000004000", );
    $h->addX2(  name=>"Heaviest marsupial carnivore (Tasmanian Devil)",   title=>"Tasmanian Devil",                   photo=>"Heaviest marsupial carnivore (Tasmanian Devil)",   order=>"000000008000", );
    $h->addX2(  name=>"Heaviest bird of prey (Eurasian Black Vulture)",   title=>"Eurasian Black Vulture",            photo=>"Heaviest bird of prey (Eurasian Black Vulture)",   order=>"000000011000", );
    $h->addX2(  name=>"Heaviest waterfowl (Trumpeter Swan)",              title=>"Trumpeter Swan",                    photo=>"Heaviest waterfowl (Trumpeter Swan)",              order=>"000000012000", );
    $h->addX2(  name=>"Heaviest crustacean (American lobster)",           title=>"American lobster",                  photo=>"Heaviest crustacean (American lobster)",           order=>"000000020000", );
    $h->addX2(  name=>"Heaviest armadillo (Giant Armadillo)",             title=>"Giant Armadillo",                   photo=>"Heaviest armadillo (Giant Armadillo)",             order=>"000000030000", );
    $h->addX2(  name=>"Heaviest penguin (Emperor Penguin)",               title=>"Emperor Penguin",                   photo=>"Heaviest penguin (Emperor Penguin)",               order=>"000000038000", );
    $h->addX2(  name=>"Heaviest rodent (Capybara)",                       title=>"Capybara",                          photo=>"Heaviest rodent (Capybara)",                       order=>"000000050000", );
    $h->addX2(  name=>"Heaviest marsupial (Red Kangaroo)",                title=>"Red Kangaroo",                      photo=>"Heaviest marsupial (Red Kangaroo)",                order=>"000000070000", );
    $h->addX2(  name=>"Heaviest lizard (Komodo Dragon)",                  title=>"Komodo Dragon",                     photo=>"Heaviest lizard (Komodo Dragon)",                  order=>"000000085000", );
    $h->addX2(  name=>"Heaviest snake (Green Anaconda)",                  title=>"Green Anaconda",                    photo=>"Heaviest snake (Green Anaconda)",                  order=>"000000097000", );
    $h->addX2(  name=>"Heaviest bird (Ostrich)",                          title=>"Ostrich",                           photo=>"Heaviest bird (Ostrich)",                          order=>"000000115000", );
    $h->addX2(  name=>"Heaviest jellyfish (Lion's Mane Jellyfish)",       title=>"Lion's Mane Jellyfish",             photo=>"Heaviest jellyfish (Lion's Mane Jellyfish)",       order=>"000000150000", );
    $h->addX2(  name=>"Heaviest primate (Gorilla)",                       title=>"Gorilla",                           photo=>"Heaviest primate (Gorilla)",                       order=>"000000170000", );
    $h->addX2(  name=>"Heaviest cat (Bengal Tiger)",                      title=>"Bengal Tiger",                      photo=>"Heaviest cat (Bengal Tiger)",                      order=>"000000230000", );
    $h->addX2(  name=>"Heaviest land reptile (Galapagos Tortoise)",       title=>"Galapagos Tortoise",                photo=>"Heaviest land reptile (Galapagos Tortoise)",       order=>"000000400000", );
    $h->addX2(  name=>"Heaviest turtle (Leatherback Sea Turtle)",         title=>"Leatherback Sea Turtle",            photo=>"Heaviest turtle (Leatherback Sea Turtle)",         order=>"000000475000", );
    $h->addX2(  name=>"Heaviest mollusk (Colossal Squid)",                title=>"Colossal Squid",                    photo=>"Heaviest mollusk (Colossal Squid)",                order=>"000000495000", );
    $h->addX2(  name=>"Heaviest land carnivore (Polar Bear)",             title=>"Polar Bear",                        photo=>"Heaviest land carnivore (Polar Bear)",             order=>"000000525000", );
    $h->addX2(  name=>"Heaviest reptile (Saltwater Crocodile)",           title=>"Saltwater Crocodile",               photo=>"Heaviest reptile (Saltwater Crocodile)",           order=>"000000700000", );
    $h->addX2(  name=>"Heaviest bony fish (Ocean Sunfish)",               title=>"Ocean Sunfish",                     photo=>"Heaviest bony fish (Ocean Sunfish)",               order=>"000001000000", );
    $h->addX2(  name=>"Heaviest even-toed ungulate (Hippopotamus)",       title=>"Hippopotamus",                      photo=>"Heaviest even-toed ungulate (Hippopotamus)",       order=>"000001700000", );
    $h->addX2(  name=>"Heaviest odd-toed ungulate (White Rhinoceros)",    title=>"White Rhinoceros",                  photo=>"Heaviest odd-toed ungulate (White Rhinoceros)",    order=>"000002300000", );
    $h->addX2(  name=>"Heaviest carnivore (Southern Elephant Seal)",      title=>"Southern Elephant Seal",            photo=>"Heaviest carnivore (Southern Elephant Seal)",      order=>"000003200000", );
    $h->addX2(  name=>"Heaviest land animal (African Bush Elephant)",     title=>"African Bush Elephant",             photo=>"Heaviest land animal (African Bush Elephant)",     order=>"000005000000", );
    $h->addX2(  name=>"Heaviest dolphin (Killer Whale)",                  title=>"Killer Whale",                      photo=>"Heaviest dolphin (Killer Whale)",                  order=>"000006000000", );
    $h->addX2(  name=>"Heaviest fish (Whale Shark)",                      title=>"Whale Shark",                       photo=>"Heaviest fish (Whale Shark)",                      order=>"000009000000", );
    $h->addX2(  name=>"Heaviest toothed whale (Sperm Whale)",             title=>"Sperm Whale",                       photo=>"Heaviest toothed whale (Sperm Whale)",             order=>"000041000000", );
    $h->addX2(  name=>"Heaviest animal ever (Blue Whale)",                title=>"Blue Whale",                        photo=>"Heaviest animal ever (Blue Whale)",                order=>"000170000000", );
    $h
   }
 }

#-------------------------------------------------------------------------------
# How Much Power Do I Use?
#-------------------------------------------------------------------------------

 {package HowMuchPowerDoIUse;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Clock radio",                      title=>"Clock radio",                      photo=>"Clock radio",                      order=>"0010", );
    $h->addX2(  name=>"Toothbrush",                       title=>"Toothbrush",                       photo=>"Toothbrush",                       order=>"0010", );
    $h->addX2(  name=>"Compact fluorescent light bulb",   title=>"Compact fluorescent light bulb",   photo=>"Compact fluorescent light bulb",   order=>"0011", );
    $h->addX2(  name=>"Shaver",                           title=>"Shaver",                           photo=>"Shaver",                           order=>"0020", );
    $h->addX2(  name=>"Halogen lamp",                     title=>"Halogen lamp",                     photo=>"Halogen lamp",                     order=>"0025", );
    $h->addX2(  name=>"Satellite dish",                   title=>"Satellite dish",                   photo=>"Satellite dish",                   order=>"0030", );
    $h->addX2(  name=>"Incandescent light bulb",          title=>"Incandescent light bulb",          photo=>"Incandescent light bulb",          order=>"0060", );
    $h->addX2(  name=>"Laptop",                           title=>"Laptop",                           photo=>"Laptop",                           order=>"0060", );
    $h->addX2(  name=>"Desktop computer",                 title=>"Desktop computer",                 photo=>"Desktop computer",                 order=>"0100", );
    $h->addX2(  name=>"Portable fan",                     title=>"Portable fan",                     photo=>"Portable fan",                     order=>"0100", );
    $h->addX2(  name=>"Hand blender",                     title=>"Hand blender",                     photo=>"Hand blender",                     order=>"0150", );
    $h->addX2(  name=>"Television",                       title=>"Television",                       photo=>"Television",                       order=>"0150", );
    $h->addX2(  name=>"Aquarium",                         title=>"Aquarium",                         photo=>"Aquarium",                         order=>"0200", );
    $h->addX2(  name=>"Electric blanket",                 title=>"Electric blanket",                 photo=>"Electric blanket",                 order=>"0200", );
    $h->addX2(  name=>"Slow cooker",                      title=>"Slow cooker",                      photo=>"Slow cooker",                      order=>"0200", );
    $h->addX2(  name=>"Blender",                          title=>"Blender",                          photo=>"Blender",                          order=>"0300", );
    $h->addX2(  name=>"Dehumidifier",                     title=>"Dehumidifier",                     photo=>"Dehumidifier",                     order=>"0300", );
    $h->addX2(  name=>"Washing machine",                  title=>"Washing machine",                  photo=>"Washing machine",                  order=>"0500", );
    $h->addX2(  name=>"Bread maker",                      title=>"Bread maker",                      photo=>"Bread maker",                      order=>"0600", );
    $h->addX2(  name=>"Freezer",                          title=>"Freezer",                          photo=>"Freezer",                          order=>"0700", );
    $h->addX2(  name=>"Refrigerator",                     title=>"Refrigerator",                     photo=>"Refrigerator",                     order=>"0700", );
    $h->addX2(  name=>"Sandwich toaster",                 title=>"Sandwich toaster",                 photo=>"Sandwich toaster",                 order=>"0700", );
    $h->addX2(  name=>"Coffeemaker",                      title=>"Coffeemaker",                      photo=>"Coffeemaker",                      order=>1000, );
    $h->addX2(  name=>"Cordless drill",                   title=>"Cordless drill",                   photo=>"Cordless drill",                   order=>1000, );
    $h->addX2(  name=>"Hair dryer",                       title=>"Hair dryer",                       photo=>"Hair dryer",                       order=>1000, );
    $h->addX2(  name=>"Microwave oven",                   title=>"Microwave oven",                   photo=>"Microwave oven",                   order=>1000, );
    $h->addX2(  name=>"Toaster",                          title=>"Toaster",                          photo=>"Toaster",                          order=>1000, );
    $h->addX2(  name=>"Vacuum cleaner",                   title=>"Vacuum cleaner",                   photo=>"Vacuum cleaner",                   order=>1000, );
    $h->addX2(  name=>"Dishwasher",                       title=>"Dishwasher",                       photo=>"Dishwasher",                       order=>1200, );
    $h->addX2(  name=>"Iron",                             title=>"Iron",                             photo=>"Iron",                             order=>1500, );
    $h->addX2(  name=>"Kettle",                           title=>"Kettle",                           photo=>"Kettle",                           order=>2000, );
    $h->addX2(  name=>"Fan heater",                       title=>"Fan heater",                       photo=>"Fan heater",                       order=>3000, );
    $h->addX2(  name=>"Oven",                             title=>"Oven",                             photo=>"Oven",                             order=>3000, );
    $h->addX2(  name=>"Air conditioner",                  title=>"Air conditioner",                  photo=>"Air conditioner",                  order=>5000, );
    $h->addX2(  name=>"Water heater",                     title=>"Water heater",                     photo=>"Water heater",                     order=>5000, );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Kitchen in English
#-------------------------------------------------------------------------------

 {package Kitchen;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add(1, "Baking Trays");
    $h->add(1, "Biscuit Jars");
    $h->add(1, "Bowl");
    $h->add(1, "Bread Knife");
    $h->add(1, "Cafetiere");
    $h->add(1, "Can Opener");
    $h->add(1, "Cheese Grater");
    $h->add(1, "Chopping Board");
    $h->add(1, "Colander");
    $h->add(1, "Cold Tap");
    $h->add(1, "Cooker");
    $h->add(1, "Cooker Socket");
    $h->add(1, "Crockery");
    $h->add(1, "Cup and Saucer");
    $h->add(1, "Cupboard");
    $h->add(1, "Cutlery");
    $h->add(1, "Dish Cloth");
    $h->add(1, "Dish Washer");
    $h->add(1, "Drainer Basket");
    $h->add(1, "Electric Blender");
    $h->add(1, "Electric Kettle");
    $h->add(1, "Forks");
    $h->add(1, "Freezer");
    $h->add(1, "Fridge");
    $h->add(1, "Fruit Bowl");
    $h->add(1, "Frying Pan");
    $h->add(1, "Garlic Press");
    $h->add(1, "Gas Burner");
    $h->add(1, "Glass");
    $h->add(1, "Glasses");
    $h->add(1, "Hand Blender");
    $h->add(1, "Hob Controls");
    $h->add(1, "Hob Top");
    $h->add(1, "Hot Tap");
    $h->add(1, "Iron");
    $h->add(1, "Ironing Board");
    $h->add(1, "Kitchen Dresser");
    $h->add(1, "Kitchen Knives");
    $h->add(1, "Kitchen Scales");
    $h->add(1, "Kitchen Sink");
    $h->add(1, "Kitchen Utensils");
    $h->add(1, "Knives");
    $h->add(1, "Ladle");
    $h->add(1, "Lemon Squeezer");
    $h->add(1, "Microwave");
    $h->add(1, "Milk Jug");
    $h->add(1, "Mixer Tap");
    $h->add(1, "Mixing Bowl");
    $h->add(1, "Mug");
    $h->add(1, "Oven");
    $h->add(1, "Oven Controls");
    $h->add(1, "Oven Mitt");
    $h->add(1, "Paper Towels");
    $h->add(1, "Plate");
    $h->add(1, "Plug");
    $h->add(1, "Plug Hole");
    $h->add(1, "Pyrex Dishes");
    $h->add(1, "Rolling Pin");
    $h->add(1, "Salt and Pepper");
    $h->add(1, "Sandwich Toaster");
    $h->add(1, "Saucepan");
    $h->add(1, "Scissors");
    $h->add(1, "Scourers");
    $h->add(1, "Sink");
    $h->add(1, "Spatula");
    $h->add(1, "Spoons");
    $h->add(1, "Strainer Plug");
    $h->add(1, "Sugar Bowl");
    $h->add(1, "Table and Chairs");
    $h->add(1, "Tea Service");
    $h->add(1, "Tea Towels");
    $h->add(1, "Teapot");
    $h->add(1, "Toaster");
    $h->add(1, "Tray");
    $h->add(1, "Washing Machine");
    $h->add(1, "Washing Powder");
    $h->add(1, "Washing Up Liquid");
    $h->add(1, "Water Filter");
    $h->add(1, "Wok");
    $h->add(1, "Wooden Spoon");
    $h
   }
 }

#-------------------------------------------------------------------------------
# India
#-------------------------------------------------------------------------------

 {package India;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Akshardham_2",                                       title=>"Akshardham",                         );
    $h->addX2(  name=>"Amritsar_Golden_Temple_1",                           title=>"Golden Temple",                      );
    $h->addX2(  name=>"Bibi_ka_Maqbara_1",                                  title=>"Bibi Ka Maqbara",                    );
    $h->addX2(  name=>"Buland_Darwaza_gate_1",                              title=>"Buland Darwaza",                     );
    $h->addX2(  name=>"Charminar-Pride_of_Hyderabad",                       title=>"Charminar",                          );
    $h->addX2(  name=>"Chhatrapati_Shivaji_Terminus_(Victoria_Terminus)",   title=>"Chhatrapati Shivaji Terminus",       );
    $h->addX2(  name=>"City_Palace_1",                                      title=>"City Palace",                        );
    $h->addX2(  name=>"Coochbihar_Palace_1",                                title=>"Cooch Behar Palace",                 );
    $h->addX2(  name=>"Dakshineswar_Kali_Temple_1",                         title=>"Dakshineswar Kali Temple",           );
    $h->addX2(  name=>"Dudhsagar_Falls_Triplet",                            title=>"Dudhsagar Falls",                    );
    $h->addX2(  name=>"Gateway_of_India_1",                                 title=>"Gateway of India",                   );
    $h->addX2(  name=>"GolGumbaz",                                          title=>"Gol Gumbaz,",                        );
    $h->addX2(  name=>"Howrah_Bridge,_1",                                   title=>"Howrah Bridge",                      );
    $h->addX2(  name=>"Humayun_tomb_2",                                     title=>"Humayun's tomb",                     );
    $h->addX2(  name=>"India_Gate_3",                                       title=>"India Gate",                         );
    $h->addX2(  name=>"Jai_Vilas_Palace_3",                                 title=>"The Jai Vilas Mahal",                );
    $h->addX2(  name=>"Jaipur,_Hawa_Mahal",                                 title=>"Hawa Mahal",                         );
    $h->addX2(  name=>"Khajjiar",                                                                                        );
    $h->addX2(  name=>"Khajuraho4",                                         title=>"Khajuraho Group of Monuments",       );
    $h->addX2(  name=>"Konark_Sun_Temple_3",                                title=>"Konark Sun Temple",                  );
    $h->addX2(  name=>"Lake_Palace_1",                                      title=>"Lake Palace(Jag Niwas)",             );
    $h->addX2(  name=>"Lotus_Temple1",                                      title=>"Lotus Temple",                       );
    $h->addX2(  name=>"Mahabodhi_Temple_1",                                 title=>"Mahabodhi Temple",                   );
    $h->addX2(  name=>"Matrimandir",                                                                                     );
    $h->addX2(  name=>"Mysore_Palace_1",                                    title=>"Mysore Palace",                      );
    $h->addX2(  name=>"Nalanda_University_India_ruins",                     title=>"Nalanda",                            );
    $h->addX2(  name=>"Nariman_Point_2",                                    title=>"Nariman Point",                      );
    $h->addX2(  name=>"Pagoda_2",                                           title=>"Global Vipassana Pagoda",            );
    $h->addX2(  name=>"Palitana_temples_1",                                 title=>"Palitana temples",                   );
    $h->addX2(  name=>"Phiroze_Jeejeebhoy_Towers",                          title=>"Phiroze Jeejeebhoy Towers",          );
    $h->addX2(  name=>"Q_Minar",                                            title=>"Qutub Minar",                        );
    $h->addX2(  name=>"Rajabai_Clock_Tower",                                title=>"Rajabai Clock Tower",                );
    $h->addX2(  name=>"Rashtrapati_Bhavan_1",                               title=>"Rashtrapati Bhavan",                 );
    $h->addX2(  name=>"Red_fort_1",                                         title=>"Red Fort",                           );
    $h->addX2(  name=>"Sanchi_Stupa_1",                                     title=>"Sanchi",                             );
    $h->addX2(  name=>"Taj_Mahal_4",                                        title=>"Taj Mahal",                          );
    $h->addX2(  name=>"Taj_Mahal_Palace_Hotel_1",                           title=>"The Taj Mahal Palace Hotel",         );
    $h->addX2(  name=>"The_Imperial_Towers_2",                              title=>"Imperial Towers",                    );
    $h->addX2(  name=>"Tso_Moriri_Lake_2",                                  title=>"Tso Moriri Lake",                    );
    $h->addX2(  name=>"UB_city_2",                                          title=>"UB City",                            );
    $h->addX2(  name=>"Umaid_Bhawan_Palace_1",                              title=>"Umaid Bhawan Palace",                );
    $h->addX2(  name=>"Victoria_Memorial_3",                                title=>"Victoria Memorial",                  );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Inventions
#-------------------------------------------------------------------------------

 {package Inventions;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"1896_telephone",                        title=>"Telephone",                   );
    $h->addX2(  name=>"AdhesivesForHouseUse004",               title=>"Adhesive",                    );
    $h->addX2(  name=>"Apollo_11_Launch2",                     title=>"Rocket",                      );
    $h->addX2(  name=>"Archetype_of_the_Bicycle._Pic_01",      title=>"Bicycle",                     );
    $h->addX2(  name=>"Aspirin",                                                                     );
    $h->addX2(  name=>"Atlantic_cable_Map",                    title=>"Telegraph",                   );
    $h->addX2(  name=>"Benz-velo",                             title=>"Automobile",                  );
    $h->addX2(  name=>"Braun_HF_1_Television",                 title=>"Television",                  );
    $h->addX2(  name=>"Camera_1839",                           title=>"Camera",                      );
    $h->addX2(  name=>"Chinese_lock",                          title=>"Lock",                        );
    $h->addX2(  name=>"Compact_disc",                          title=>"CD",                          );
    $h->addX2(  name=>"Cotton_gin_EWM_2007",                   title=>"Cotton Gin",                  );
    $h->addX2(  name=>"Edison_Carbon_Bulb",                    title=>"Light Bulb",                  );
    $h->addX2(  name=>"Electric_Refrigerator_1927",            title=>"Refrigerator",                );
    $h->addX2(  name=>"Fisher_500_radio",                      title=>"Radio",                       );
    $h->addX2(  name=>"German_1530_Watch",                     title=>"Watch",                       );
    $h->addX2(  name=>"Greetsieler_Zwillingsmuhlen_2010",      title=>"Windmill",                    );
    $h->addX2(  name=>"Harrison_Machine_Works_1882_tractor",   title=>"Tractor",                     );
    $h->addX2(  name=>"Histortic_Wheel",                       title=>"Wheel",                       );
    $h->addX2(  name=>"ISS_from_space",                        title=>"Satellite",                   );
    $h->addX2(  name=>"Internet",                                                                    );
    $h->addX2(  name=>"Iserlohn-Druckpresse1-Bubo",            title=>"Printing press",              );
    $h->addX2(  name=>"Jedlik_motor",                          title=>"Electric Motor",              );
    $h->addX2(  name=>"Jonescs_Sewing",                        title=>"Sewing Machines",             );
    $h->addX2(  name=>"Kompas_Sofia",                          title=>"Compass",                     );
    $h->addX2(  name=>"Mercury_Thermometer",                   title=>"Thermometer",                 );
    $h->addX2(  name=>"Microchips",                            title=>"Microchip",                   );
    $h->addX2(  name=>"Microwave_Oven",                        title=>"Microwave oven",              );
    $h->addX2(  name=>"Mk17_bomb",                             title=>"Hydrogen bomb",               );
    $h->addX2(  name=>"Mobile_phone_evolution",                title=>"Mobile phone",                );
    $h->addX2(  name=>"Old-microscopes",                       title=>"Microscope",                  );
    $h->addX2(  name=>"OldPlow2006-05-21",                     title=>"Plow",                        );
    $h->addX2(  name=>"Papers_today",                          title=>"Paper",                       );
    $h->addX2(  name=>"Plastic_household_items",               title=>"Plastic",                     );
    $h->addX2(  name=>"RGB_laser",                             title=>"Laser",                       );
    $h->addX2(  name=>"Stanley_steam_car",                     title=>"Steam Car",                   );
    $h->addX2(  name=>"Steel_wire_rope",                       title=>"Steel",                       );
    $h->addX2(  name=>"StephensonRocket",                      title=>"Stephenson's Rocket",         );
    $h->addX2(  name=>"Stott_Park_Bobbin_Mill_Steam_Engine",   title=>"Steam Engine",                );
    $h->addX2(  name=>"Tastenmaus_Microsoft",                  title=>"Mouse (computing)",           );
    $h->addX2(  name=>"Telescope",                                                                   );
    $h->addX2(  name=>"TypewriterHermes",                      title=>"Typewriter",                  );
    $h->addX2(  name=>"UPC-Barcode",                           title=>"Barcode",                     );
    $h->addX2(  name=>"Waschmaschine_Historisch",              title=>"Washing Machine",             );
    $h->addX2(  name=>"X-ray_1896",                            title=>"X-ray",                       );
    $h->addX2(  name=>"Yuan_chinese_gun",                      title=>"Gun",                         );
    $h->addX2(  name=>"hovercraft",                            title=>"Hovercraft",                  );
    $h->addX2(  name=>"programma101",                          title=>"Personal Computer(PC)",       );
    $h
   }
 }

#------------------------------------------------------------------------------
# Jets
#------------------------------------------------------------------------------

 {package Jets;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(name=>747,                        title=>"Boeing 747 Jumbo Jet",       );
    $h->addX2(name=>"A-1E_Skyraider",           title=>"Douglas Skyraider",          );
    $h->addX2(name=>"A10_Thunderbolt",          title=>"A10 Thunderbolt",            );
    $h->addX2(name=>"A400M_Atlas_2",            title=>"Airbus Atlas",               );
    $h->addX2(name=>"AH64D_Apache_Longbow_1",   title=>"AH64D Apache Longbow",       );
    $h->addX2(name=>"Avro_Vulcan_1",            title=>"Avro Vulcan",                );
    $h->addX2(name=>"B-17_Flying_Fortress",     title=>"B17G Flying Fortress",       );
    $h->addX2(name=>"B-25_Mitchell",            title=>"B25 Mitchell",               );
    $h->addX2(name=>"B2",                       title=>"B-2 Spirit",                 );
    $h->addX2(name=>"B36",                      title=>"B-36 Peacemaker",            );
    $h->addX2(name=>"B52",                      title=>"B-52 Stratofortress",        );
    $h->addX2(name=>"BAC_Strikemaster",         title=>"BAC Strikemaster",           );
    $h->addX2(name=>"Bell_UH-1_Iroquois",       title=>"UH-1H Huey",                 );
    $h->addX2(name=>"Boeing-Stearman_Model_75", title=>"Boeing A75N-1 Stearman",     );
    $h->addX2(name=>"C-130J_Super_Hercules",    title=>"C-130J Hercules",            );
    $h->addX2(name=>"C-47_Skytrain",            title=>"C47 Skytrain",               );
    $h->addX2(name=>"CH-47_Chinook",            title=>"CH-47 Chinook",              );
    $h->addX2(name=>"Concorde",                                                      );
    $h->addX2(name=>"Dornier_Do_228",           title=>"Dornier Do-228",             );
    $h->addX2(name=>"Douglas_SBD_Dauntless",    title=>"Douglas Dauntless",          );
    $h->addX2(name=>"Dragon_Rapid",             title=>"Dragon Rapide",              );
    $h->addX2(name=>"EEL",                      title=>"English Electric Lightning", );
    $h->addX2(name=>"EMB145H",                  title=>"Embraer R-99",               );
    $h->addX2(name=>"Eurofighter_Typhoon_1",    title=>"Typhoon",                    );
    $h->addX2(name=>"F-22_Raptor",              title=>"F22 Raptor",                 );
    $h->addX2(name=>"F-86_Sabre",               title=>"F86F Sabre",                 );
    $h->addX2(name=>"F16",                      title=>"F16 Fighting Falcon",        );
    $h->addX2(name=>"F35",                      title=>"F35 Lightning",              );
    $h->addX2(name=>"F5_Tiger",                 title=>"F5 Tiger",                   );
    $h->addX2(name=>"Gloster_Gladiator",        title=>"Gloster Gladiator",          );
    $h->addX2(name=>"Gloster_Meteor",           title=>"Gloster Meteor",             );
    $h->addX2(name=>"Grumman_F7F_Tigercat",     title=>"Grumman F7F Tigercat",       );
    $h->addX2(name=>"Harrier",                                                       );
    $h->addX2(name=>"Hawk",                                                          );
    $h->addX2(name=>"Hughes_OH-6_Cayuse",       title=>"Hughes Cayuse",              );
    $h->addX2(name=>"JAS_39_Gripen",            title=>"Saab Gripen",                );
    $h->addX2(name=>"L29_Delfin",               title=>"L29 Delfin",                 );
    $h->addX2(name=>"Mig_29",                   title=>"Mig 29",                     );
    $h->addX2(name=>"Mirage_2000",              title=>"Mirage 2000",                );
    $h->addX2(name=>"Mirage_F1_1",              title=>"Mirage F1",                  );
    $h->addX2(name=>"Morane-Saulnier_M.S.406",  title=>"Morane M.S.406",             );
    $h->addX2(name=>"Mosquito",                                                      );
    $h->addX2(name=>"P-38_Lightning",           title=>"P38 Lightning",              );
    $h->addX2(name=>"P-40_Warhawk",             title=>"P40N Warhawk",               );
    $h->addX2(name=>"P-47_Thunderbolt",         title=>"P47 Thunderbolt",            );
    $h->addX2(name=>"P51A_Mustang",             title=>"P51 Mustang",                );
    $h->addX2(name=>"SR-71_Blackbird",          title=>"SR-71 Blackbird",            );
    $h->addX2(name=>"SU27",                     title=>"SU27 Flanker",               );
    $h->addX2(name=>"Supermarine_Spitfire",     title=>"Supermarine Spitfire",       );
    $h->addX2(name=>"Tornado_2",                title=>"Tornado",                    );
    $h->addX2(name=>"Transall_C-160",           title=>"C160 Transall",              );
    $h->addX2(name=>"U2",                       title=>"U-2",                        );
    $h->addX2(name=>"UH-60_Black_Hawk",         title=>"Sikorsky Blackhawk",         );
    $h->addX2(name=>"V22_Osprey",               title=>"V22 Osprey",                 );
    $h->addX2(name=>"Westland_Lynx",            title=>"Westland Lynx",              );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Lake District
#-------------------------------------------------------------------------------

 {package LakeDistrict;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Aira Force",                                                                               );
    $h->addX2(  name=>"Ambleside Town Centre",                                                                    );
    $h->addX2(  name=>"Ashness Bridge",                                                                           );
    $h->addX2(  name=>"Black Sail Youth Hostel",                                                                  );
    $h->addX2(  name=>"Blea Water",                                                                               );
    $h->addX2(  name=>"Bleaberry Tarn from Red Pike",                                                             );
    $h->addX2(  name=>"Blencathra",                                                                               );
    $h->addX2(  name=>"Borrowdale",                                                                               );
    $h->addX2(  name=>"Bowder Stone",                                                                             );
    $h->addX2(  name=>"Bowness-on-Windermere",                                                                    );
    $h->addX2(  name=>"Brantwood",                                                                                );
    $h->addX2(  name=>"Buttermere and Crummock Water",                                                            );
    $h->addX2(  name=>"Buttermere valley",                        title=>"Buttermere Valley",                     );
    $h->addX2(  name=>"Buttermere village",                                                                       );
    $h->addX2(  name=>"Canoeing on Derwentwater",                                                                 );
    $h->addX2(  name=>"Catbells",                                                                                 );
    $h->addX2(  name=>"Coniston Coppermines Youth Hostel",                                                        );
    $h->addX2(  name=>"Coniston Water",                                                                           );
    $h->addX2(  name=>"Crinkle Crags and Bow Fell",                                                               );
    $h->addX2(  name=>"Derwentwater",                                                                             );
    $h->addX2(  name=>"Dove Cottage",                                                                             );
    $h->addX2(  name=>"Dow Crag",                                                                                 );
    $h->addX2(  name=>"Drunken Duck Inn",                                                                         );
    $h->addX2(  name=>"Dry stone wall",                                                                           );
    $h->addX2(  name=>"Easedale Tarn",                                                                            );
    $h->addX2(  name=>"Elter Water",                                                                              );
    $h->addX2(  name=>"Eskdale Youth Hostel",                                                                     );
    $h->addX2(  name=>"Fairfield Horseshoe",                                                                      );
    $h->addX2(  name=>"Fell Running",                                                                             );
    $h->addX2(  name=>"Fleetwith Pike",                                                                           );
    $h->addX2(  name=>"Grasmere Gingerbread",                                                                     );
    $h->addX2(  name=>"Grasmere from Loughrigg",                                                                  );
    $h->addX2(  name=>"Grasmere from Silver How",                                                                 );
    $h->addX2(  name=>"Grasmoor",                                                                                 );
    $h->addX2(  name=>"Great Gable from Great End",                                                               );
    $h->addX2(  name=>"Great Gable from Wasdale Head",                                                            );
    $h->addX2(  name=>"Great Langdale",                                                                           );
    $h->addX2(  name=>"Hardknott Roman Fort",                                                                     );
    $h->addX2(  name=>"Haystacks",                                                                                );
    $h->addX2(  name=>"Helvellyn Horseshoe",                                                                      );
    $h->addX2(  name=>"Herdwick Sheep",                                                                           );
    $h->addX2(  name=>"High Sweden Bridge",                                                                       );
    $h->addX2(  name=>"Hill Top",                                                                                 );
    $h->addX2(  name=>"Honister Slate Mine",                                                                      );
    $h->addX2(  name=>"Innominate Tarn",                                                                          );
    $h->addX2(  name=>"Keswick Market",                                                                           );
    $h->addX2(  name=>"Keswick Pier",                                                                             );
    $h->addX2(  name=>"Kirkstone Pass",                                                                           );
    $h->addX2(  name=>"Langdale Pikes",                                                                           );
    $h->addX2(  name=>"Lingcove Bridge",                                                                          );
    $h->addX2(  name=>"Little Town",                                                                              );
    $h->addX2(  name=>"Lodore Falls",                                                                             );
    $h->addX2(  name=>"Loughrigg Tarn",                                                                           );
    $h->addX2(  name=>"Loweswater Fells",                                                                         );
    $h->addX2(  name=>"Mickledore",                                                                               );
    $h->addX2(  name=>"Mortal Man Inn",                                                                           );
    $h->addX2(  name=>"Muncaster Castle",                                                                         );
    $h->addX2(  name=>"Newlands Church",                                                                          );
    $h->addX2(  name=>"Newlands valley",                                                                          );
    $h->addX2(  name=>"Old Dungeon Ghyll Hotel",                                                                  );
    $h->addX2(  name=>"Old Man of Coniston",                                                                      );
    $h->addX2(  name=>"Pike of Stickle",                                                                          );
    $h->addX2(  name=>"Ravenglass and Eskdale Railway",                                                           );
    $h->addX2(  name=>"Red Squirrel",                                                                             );
    $h->addX2(  name=>"Red Tarn",                                                                                 );
    $h->addX2(  name=>"River Esk",                                                                                );
    $h->addX2(  name=>"Rock Climbing",                                                                            );
    $h->addX2(  name=>"Row Bridge",                                                                               );
    $h->addX2(  name=>"Rydal Mount",                                                                              );
    $h->addX2(  name=>"Rydal Water and Windermere",                                                               );
    $h->addX2(  name=>"Scafell Pike",                                                                             );
    $h->addX2(  name=>"Sharp Edge",                                                                               );
    $h->addX2(  name=>"Skelwith Force",                                                                           );
    $h->addX2(  name=>"Skiddaw",                                                                                  );
    $h->addX2(  name=>"Slater Bridge",                                                                            );
    $h->addX2(  name=>"St. James Church",                         title=>"St. James' Church, Buttermere",         );
    $h->addX2(  name=>"St. Olaf Church",                          title=>"St. Olaf's Church, Wasdale Head",       );
    $h->addX2(  name=>"Steam Yacht Gondola",                                                                      );
    $h->addX2(  name=>"Stickle Tarn",                                                                             );
    $h->addX2(  name=>"Stock Ghyll Force",                                                                        );
    $h->addX2(  name=>"Stockley Bridge",                                                                          );
    $h->addX2(  name=>"Striding Edge",                                                                            );
    $h->addX2(  name=>"Styhead Tarn",                                                                             );
    $h->addX2(  name=>"Summit of Dale Head",                                                                      );
    $h->addX2(  name=>"Summit of Helm Crag",                                                                      );
    $h->addX2(  name=>"Summit of Helvellyn",                                                                      );
    $h->addX2(  name=>"Summit of Scafell Pike",                                                                   );
    $h->addX2(  name=>"Summit of Skiddaw",                                                                        );
    $h->addX2(  name=>"Tarn Hows",                                                                                );
    $h->addX2(  name=>"Thirlmere",                                                                                );
    $h->addX2(  name=>"Townend",                                                                                  );
    $h->addX2(  name=>"Troutbeck valley",                                                                         );
    $h->addX2(  name=>"Ullswater Steamer",                                                                        );
    $h->addX2(  name=>"Ullswater",                                                                                );
    $h->addX2(  name=>"View of Ambleside",                                                                        );
    $h->addX2(  name=>"View of Coniston",                                                                         );
    $h->addX2(  name=>"View of Keswick",                                                                          );
    $h->addX2(  name=>"Wasdale and Wastwater from Great Gable",                                                   );
    $h->addX2(  name=>"Wastwater Screes",                                                                         );
    $h->addX2(  name=>"Wastwater Youth Hostel",                                                                   );
    $h->addX2(  name=>"Wastwater",                                                                                );
    $h->addX2(  name=>"Watendlath Bridge",                                                                        );
    $h->addX2(  name=>"Windermere",                                                                               );
    $h->addX2(  name=>"Wray Castle",                                                                              );
    $h->addX2(  name=>"Wrynose Pass",                                                                             );
    $h->addX2(  name=>"Yewbarrow",                                                                                );
    $h
   }
 }

#-------------------------------------------------------------------------------
# ManOnTheMoon
#-------------------------------------------------------------------------------

 {package ManOnTheMoon;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(name=>"35th Anniversary",                                    order=>"00000074");
    $h->addX2(name=>"40th Anniversary",                                    order=>"00000075");
    $h->addX2(name=>"Apollo 11 crew",                                      order=>"00000013");
    $h->addX2(name=>"Apollo 11 insignia",                                  order=>"00000012");
    $h->addX2(name=>"Apollo spacecraft",                                   order=>"00000040");
    $h->addX2(name=>"Apollo spacecraft at launch",                         order=>"00000010");
    $h->addX2(name=>"Assembly of Command-Service Module and Lunar Module", order=>"00000008");
    $h->addX2(name=>"Astronauts after countdown test",                     order=>"00000018");
    $h->addX2(name=>"Buzz Aldrin",                                         order=>"00000014");
    $h->addX2(name=>"Buzz Aldrin bootprint",                               order=>"00000054");
    $h->addX2(name=>"Buzz Aldrin carries the EASEP",                       order=>"00000057");
    $h->addX2(name=>"Buzz Aldrin in Lunar Module",                         order=>"00000043");
    $h->addX2(name=>"Buzz Aldrin near Lunar Module",                       order=>"00000052");
    $h->addX2(name=>"Buzz Aldrin on the Moon",                             order=>"00000053");
    $h->addX2(name=>"Checks in the Command Module",                        order=>"00000019");
    $h->addX2(name=>"Command Module",                                      order=>"00000065");
    $h->addX2(name=>"Command Module Simulator",                            order=>"00000020");
    $h->addX2(name=>"Command Service Module",                              order=>"00000041");
    $h->addX2(name=>"Commemorative stamp",                                 order=>"00000072");
    $h->addX2(name=>"Crawler-Transporter",                                 order=>"00000026");
    $h->addX2(name=>"Crescent Earth",                                      order=>"00000038");
    $h->addX2(name=>"Crew in quarantine",                                  order=>"00000070");
    $h->addX2(name=>"Eagle in lunar orbit",                                order=>"00000042");
    $h->addX2(name=>"Earth from Apollo 11",                                order=>"00000037");
    $h->addX2(name=>"Earth over Lunar Module",                             order=>"00000062");
    $h->addX2(name=>"First step on the Moon",                              order=>"00000048");
    $h->addX2(name=>"Helicopter recovery",                                 order=>"00000067");
    $h->addX2(name=>"John F. Kennedy",                                     order=>"00000001");
    $h->addX2(name=>"Johnson Space Centre",                                order=>"00000030");
    $h->addX2(name=>"Kennedy Space Centre",                                order=>"00000003");
    $h->addX2(name=>"Launch Complex 39",                                   order=>"00000025");
    $h->addX2(name=>"Launch Escape System",                                order=>"00000011");
    $h->addX2(name=>"Launch Pad 39A",                                      order=>"00000029");
    $h->addX2(name=>"Liquid Cooling and Ventilation Garment",              order=>"00000023");
    $h->addX2(name=>"Lunar Laser Ranging experiment",                      order=>"00000058");
    $h->addX2(name=>"Lunar Module",                                        order=>"00000063");
    $h->addX2(name=>"Lunar Module, Moon and Earth",                        order=>"00000064");
    $h->addX2(name=>"Lunar orbit",                                         order=>"00000039");
    $h->addX2(name=>"Michael Collins",                                     order=>"00000015");
    $h->addX2(name=>"Mission Control Centre",                              order=>"00000031");
    $h->addX2(name=>"Moon craters",                                        order=>"00000045");
    $h->addX2(name=>"Moon landing site",                                   order=>"00000047");
    $h->addX2(name=>"Moon rock",                                           order=>"00000061");
    $h->addX2(name=>"Moon surface",                                        order=>"00000046");
    $h->addX2(name=>"NASA insignia",                                       order=>"00000002");
    $h->addX2(name=>"Neil Armstrong",                                      order=>"00000016");
    $h->addX2(name=>"Neil Armstrong and Lunar Module",                     order=>"00000049");
    $h->addX2(name=>"Neil Armstrong in Lunar Module",                      order=>"00000044");
    $h->addX2(name=>"Nixon phonecall",                                     order=>"00000056");
    $h->addX2(name=>"Plaque",                                              order=>"00000050");
    $h->addX2(name=>"President Nixon and astronauts",                      order=>"00000073");
    $h->addX2(name=>"Primary Life Support System",                         order=>"00000024");
    $h->addX2(name=>"Quarantine suits",                                    order=>"00000069");
    $h->addX2(name=>"Saluting the American flag",                          order=>"00000055");
    $h->addX2(name=>"Saturn V Apollo 11",                                  order=>"00000009");
    $h->addX2(name=>"Saturn V engines",                                    order=>"00000033");
    $h->addX2(name=>"Saturn V engines firing",                             order=>"00000032");
    $h->addX2(name=>"Saturn V first stage",                                order=>"00000005");
    $h->addX2(name=>"Saturn V first stage separation",                     order=>"00000036");
    $h->addX2(name=>"Saturn V into orbit",                                 order=>"00000035");
    $h->addX2(name=>"Saturn V lift off",                                   order=>"00000034");
    $h->addX2(name=>"Saturn V on crawler-transporter",                     order=>"00000027");
    $h->addX2(name=>"Saturn V on way to launch pad",                       order=>"00000028");
    $h->addX2(name=>"Saturn V second stage",                               order=>"00000006");
    $h->addX2(name=>"Saturn V third stage",                                order=>"00000007");
    $h->addX2(name=>"Scientific experiments",                              order=>"00000059");
    $h->addX2(name=>"Second man on the Moon",                              order=>"00000051");
    $h->addX2(name=>"Solar wind experiment",                               order=>"00000060");
    $h->addX2(name=>"Space suit",                                          order=>"00000022");
    $h->addX2(name=>"Splashdown",                                          order=>"00000066");
    $h->addX2(name=>"The Washington Post",                                 order=>"00000071");
    $h->addX2(name=>"Training exercise",                                   order=>"00000021");
    $h->addX2(name=>"USS Hornet",                                          order=>"00000068");
    $h->addX2(name=>"Vehicle Assembly Building",                           order=>"00000004");
    $h->addX2(name=>"White Room",                                          order=>"00000017");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Marine Aquarium Fish
#-------------------------------------------------------------------------------

 {package MarineAquariumFish;
  use base qw(ApplicationUrl);

  sub Load()
   {my $h = bless {};
    use Facts::MarineAquariumFish_urls;
    my $u = urls();
    $h->add($u, "Achilles Tang");
    $h->add($u, "Banded Sole");
    $h->add($u, "Banggai Cardinalfish");
    $h->add($u, "Checkerboard Wrasse");
    $h->add($u, "Cherubfish");
    $h->add($u, "Citron Clown Goby");
    $h->add($u, "Convict Blenny");
    $h->add($u, "Convict Tang");
    $h->add($u, "Copperband Butterflyfish");
    $h->add($u, "Crown Toby");
    $h->add($u, "Elegant Firefish");
    $h->add($u, "Emperor Angelfish");
    $h->add($u, "Falco's Hawkfish");
    $h->add($u, "Goldsaddle Goatfish");
    $h->add($u, "Guineafowl Puffer");
    $h->add($u, "Harlequin Tusk");
    $h->add($u, "Humpback Grouper");
    $h->add($u, "Long-spine Porcupinefish");
    $h->add($u, "Longnose Hawkfish");
    $h->add($u, "Lookdown Fish");
    $h->add($u, "Mandarinfish");
    $h->add($u, "Maroon Clownfish");
    $h->add($u, "Mimic Tang");
    $h->add($u, "Orange Clownfish");
    $h->add($u, "Orange Striped Triggerfish");
    $h->add($u, "Orbicular Batfish");
    $h->add($u, "Oriental Sweetlips");
    $h->add($u, "Queen Angelfish");
    $h->add($u, "Raccoon Butterflyfish");
    $h->add($u, "Ringed Pipefish");
    $h->add($u, "Rockmover Wrasse");
    $h->add($u, "Round Stingray");
    $h->add($u, "Royal Gramma");
    $h->add($u, "Semicircle Angelfish");
    $h->add($u, "Sergeant Major");
    $h->add($u, "Spotfin Hogfish");
    $h->add($u, "Spotted Surgeonfish");
    $h->add($u, "Stonefish");
    $h->add($u, "Striated Frogfish");
    $h->add($u, "Tassle Filefish");
    $h->add($u, "Tomato Clownfish");
    $h->add($u, "Two-spined Angelfish");
    $h->add($u, "Twospot Turkeyfish");
    $h->add($u, "Warty Frogfish");
    $h->add($u, "Weedy Scorpionfish");
    $h->add($u, "White-spotted Puffer");
    $h->add($u, "Yellow Tang");
    $h->add($u, "Yellow-edged Lyretail");
    $h->add($u, "Yellowtail Clownfish");
    $h->add($u, "Yellowtail Damselfish");
    $h->add($u, "Yellowtail Wrasse");
    $h->add($u, "Zebra Lionfish");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Months of The Year in English
#-------------------------------------------------------------------------------

 {package MonthsOfTheYearInEnglish;
  use base qw(ColourApplication);

  my %h;
  sub add($$$$)
   {my ($group, $colour, $prefix, $name) = @_;
    $h{$name} = {colour=>$colour, name=>$name, prefix=>$prefix, group=>$group, title=>$name, S40=>1, free=>1, order=>$name};
   }

  sub Load()
   {add( 1, "ff6ba3", 1, "January");
    add( 1, "a567cd", 2, "February");
    add( 1, "f8ae6d", 3, "March");
    add( 2, "ffa200", 4, "April");
    add( 2, "a2bf00", 5, "May");
    add( 2, "827ae5", 6, "June");
    add( 3, "ff3649", 7, "July");
    add( 3, "ffde03", 8, "August");
    add( 3, "86d20f", 9, "September");
    add( 4, "ec73af",10, "October");
    add( 4, "ba667c",11, "November");
    add( 4, "87c0db",12, "December");
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Months of The Year in German
#-------------------------------------------------------------------------------

 {package MonthsOfTheYearInGerman;

  sub Load() {MonthsOfTheYearInEnglish::Load()}
 }

#-------------------------------------------------------------------------------
# Noses
#-------------------------------------------------------------------------------

 {package Noses;
  use base qw(ApplicationUrl);

  sub Load()
   {my $h = bless {};
    use Facts::Noses_urls;
    my $u = urls();
    $h->add($u, "Albatross");
    $h->add($u, "Alligator");
    $h->add($u, "Baboon");
    $h->add($u, "Baby");
    $h->add($u, "Black Bear");
    $h->add($u, "Budgerigar");
    $h->add($u, "Camel");
    $h->add($u, "Cat");
    $h->add($u, "Cheetah");
    $h->add($u, "Cougar");
    $h->add($u, "Cow");
    $h->add($u, "Coypu");
    $h->add($u, "Deer");
    $h->add($u, "Dog");
    $h->add($u, "Donkey");
    $h->add($u, "Eagle");
    $h->add($u, "Elephant");
    $h->add($u, "Field Vole");
    $h->add($u, "Fur Seal");
    $h->add($u, "Gazelle");
    $h->add($u, "Giraffe");
    $h->add($u, "Goat");
    $h->add($u, "Grey Seal");
    $h->add($u, "Hippopotamus");
    $h->add($u, "Hyena");
    $h->add($u, "Iguana");
    $h->add($u, "Jaguar");
    $h->add($u, "Kestrel");
    $h->add($u, "Leopard");
    $h->add($u, "Lion");
    $h->add($u, "Lynx");
    $h->add($u, "Man");
    $h->add($u, "Mandrill");
    $h->add($u, "Moose");
    $h->add($u, "Moray Eel");
    $h->add($u, "Otter");
    $h->add($u, "Panda");
    $h->add($u, "Pig");
    $h->add($u, "Polar Bear");
    $h->add($u, "Porcupine");
    $h->add($u, "Rabbit");
    $h->add($u, "Rhinoceros");
    $h->add($u, "Salamander");
    $h->add($u, "Sea Lion");
    $h->add($u, "Sheep");
    $h->add($u, "Squirrel");
    $h->add($u, "Tapir");
    $h->add($u, "Tiger");
    $h->add($u, "Toad");
    $h->add($u, "Tortoise");
    $h->add($u, "Walrus");
    $h->add($u, "Zebra");
    $h;
   }
 }

#-------------------------------------------------------------------------------
# OodlesOfAnimals
#-------------------------------------------------------------------------------

 {package OodlesOfAnimals;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->add("Team of dogs");
    $h->add("Team of horses");
    $h->add("Team of oxen");
    $h->add("Bevy of otters");
    $h->add("Bevy of swans");
    $h->add("Herd of cattle");
    $h->add("Herd of deer");
    $h->add("Herd of goats");
    $h->add("Herd of wildebeest");
    $h->add("Herd of elephants");
    $h->add("Herd of horses");
    $h->add("Herd of walruses");
    $h->add("Herd of mules");
    $h->add("Pack of wolves");
    $h->add("Pack of hounds");
    $h->add("Pack of wild dogs");
    $h->add("Flock of sheep");
    $h->add("Flock of seagulls");
    $h->add("Flock of starlings");
    $h->add("Flock of geese");
    $h->add("Brood of ducklings");
    $h->add("Brood of goslings");
    $h->add("Brood of chicks");
    $h->add("Brood of honey bees");
    $h->add("School of fish");
    $h->add("Shoal of fish");
    $h->add("Swarm of bees");
    $h->add("Swarm of ants");
    $h->add("Swarm of flies");
    $h->add("Litter of pigs");
    $h->add("Litter of kittens");
    $h->add("Litter of puppies");
    $h->add("Army of ants");
    $h->add("Army of caterpillars");
    $h->add("Colony of sea lions");
    $h->add("Colony of bats");
    $h->add("Colony of ants");
    $h->add("Colony of honey bees");
    $h->add("Crowd of people");
    $h->add("Parade of elephants");
    $h->add("Bed of mussels");
    $h->add("Bed of clams");
    $h->add("Bed of eels");
    $h->add("Pod of hippos");
    $h->add("Pod of dolphins");
    $h->add("Pod of sea lions");
    $h->add("Pod of whales");
    $h->add("Troop of gorillas");
    $h->add("Troop of chimpanzees");
    $h->add("Troop of baboons");
    $h->add("Pride of lions");
    $h->add("Pride of peacocks");
    $h->add("Cluster of spiders");
    $h->add("Cluster of butterflies");
    $h->add("Nest of eggs");
    $h->add("Nest of mice");
    $h->add("Nest of birds");
    $h->add("Nest of vipers");
    $h->add("Cloud of bats");
    $h->add("Cloud of flies");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Organic molecules
#-------------------------------------------------------------------------------

 {package OrganicMolecules;
  use base qw(Application);

  sub add($$$$)
   {my ($h, $name, $title, $label) = @_;
    $h->{$name} = {group=>1, name=>$name, title=>$title, label=>$label, order=>$name};
   }

  sub genJava($$)
   {my ($data, $app) = @_;
    my $s = '';
    for($app->things)
     {my $name    = $_->name;
      my $formula = $_->title;
      my $label =   $_->{label};

      $s .= <<"END";
`  add(drawMolecule.$label);
END
     }
    $s
   }

  sub Load()
   {my $h = bless {};
    $h->add("Water", "H2O", "Water");
    $h->add("Ammonia", "NH3", "Ammonia");
    $h->add("Methane", "CH4", "Methane");
    $h->add("Carbon Tetra Fluoride", "CF4", "CarbonTetraFluoride");
    $h->add("Chloroform", "CHCl3", "Chloroform");
    $h->add("Hydrogen cyanide", "HCN", "Hydrogencyanide");
    $h->add("Cyanamide", "CN2H2", "Cyanamide");
    $h->add("Formaldehyde", "CH2O", "Formaldehyde");
    $h->add("Formic Acid", "HCO2H", "FormicAcid");
    $h->add("Urea", "CH4N2O", "Urea");
    $h->add("Methanol", "CH3OH", "Methanol");
    $h->add("Ethylene glycol", "C2H602", "Ethyleneglycol");
    $h->add("Ethanol", "C2H5OH", "Ethanol");
    $h->add("Butanol", "C4H9OH", "Butanol");
    $h->add("Acetylene", "C2H2", "Acetylene");
    $h->add("Ethylene", "C2H4", "Ethylene");
    $h->add("Ethylene oxide", "C2H4O", "Ethyleneoxide");
    $h->add("Hydrazine", "N2H4", "Hydrazine");
    $h->add("Acetic Acid", "CH3COOH", "AceticAcid");
    $h->add("Ethane", "C2H6", "Ethane");
    $h->add("Acetaldehyde", "CH3CHO", "Acetaldehyde");
    $h->add("Carbon Dioxide", "CO2", "CarbonDioxide");
    $h->add("Benzene", "C6H6", "Benzene");
    $h->add("Glycerol", "C3H8O3", "Glycerol");
    $h->add("Butane", "C4H10", "Butane");
    $h->add("Propane", "C3H8", "Propane");
    $h->add("Acetone", "C3H6O", "Acetone");
    $h->add("Pentane", "C5H12", "Pentane");
    $h->add("Propene", "C3H6", "Propene");
    $h->add("Phenol", "C6H5OH", "Phenol");
    $h->add("Pyridine", "C5H5N", "Pyridine");
    $h->add("Toluene", "C7H8", "Toluene");
    $h->add("Naphthalene", "C10H8", "Naphthalene");
    $h->add("Caffeine", "C8H10N4O2 ", "Caffeine");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Parks
#-------------------------------------------------------------------------------

 {package Parks;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Arches National Park",                                                                                                           );
    $h->addX2(  name=>"Arches National Park, Balanced Rock",                                   title=>"Balanced Rock",                                  );
    $h->addX2(  name=>"Arches National Park, Delicate Arch",                                   title=>"Delicate Arch",                                  );
    $h->addX2(  name=>"Arches National Park, Double Arch",                                     title=>"Double Arch",                                    );
    $h->addX2(  name=>"Arches National Park, The Organ",                                       title=>"The Organ",                                      );
    $h->addX2(  name=>"Badlands National Park",                                                                                                         );
    $h->addX2(  name=>"Badlands National Park, Prairie Wind Overlook",                         title=>"Prairie Wind Overlook",                          );
    $h->addX2(  name=>"Badlands National Park, View of Badlands",                              title=>"View of Badlands",                               );
    $h->addX2(  name=>"Bryce Canyon National Park",                                                                                                     );
    $h->addX2(  name=>"Bryce Canyon National Park, Bryce Amphitheatre",                        title=>"Bryce Amphitheatre",                             );
    $h->addX2(  name=>"Bryce Canyon National Park, Natural Bridge",                            title=>"Natural Bridge",                                 );
    $h->addX2(  name=>"Bryce Canyon National Park, Queen's Garden Trail",                      title=>"Queen's Garden Trail",                           );
    $h->addX2(  name=>"Bryce Canyon National Park, Thor's Hammer",                             title=>"Thor's Hammer",                                  );
    $h->addX2(  name=>"Canyonlands National Park",                                                                                                      );
    $h->addX2(  name=>"Canyonlands National Park, Butte in Horseshoe Canyon",                  title=>"Butte in Horseshoe Canyon",                      );
    $h->addX2(  name=>"Canyonlands National Park, Cataract Canyon",                            title=>"Cataract Canyon",                                );
    $h->addX2(  name=>"Canyonlands National Park, Green River Overlook",                       title=>"Green River Overlook",                           );
    $h->addX2(  name=>"Canyonlands National Park, Rock pinnacles in The Needles",              title=>"Rock pinnacles in The Needles",                  );
    $h->addX2(  name=>"Death Valley National Park",                                                                                                     );
    $h->addX2(  name=>"Death Valley National Park, Artists's Palette",                         title=>"Artists's Palette",                              );
    $h->addX2(  name=>"Death Valley National Park, Badwater Basin and Telescope Peak",         title=>"Badwater Basin and Telescope Peak",              );
    $h->addX2(  name=>"Death Valley National Park, Devil's Golf Course",                       title=>"Devil's Golf Course",                            );
    $h->addX2(  name=>"Death Valley National Park, Mesquite Sand Dunes",                       title=>"Mesquite Sand Dunes",                            );
    $h->addX2(  name=>"Death Valley National Park, Racetrack Playa",                           title=>"Racetrack Playa",                                );
    $h->addX2(  name=>"Death Valley National Park, Zabriskie Point",                           title=>"Zabriskie Point",                                );
    $h->addX2(  name=>"Glacier National Park",                                                                                                          );
    $h->addX2(  name=>"Glacier National Park, Chief Mountain",                                 title=>"Chief Mountain",                                 );
    $h->addX2(  name=>"Glacier National Park, Iceberg Cirque",                                 title=>"Iceberg Cirque",                                 );
    $h->addX2(  name=>"Glacier National Park, Lake McDonald",                                  title=>"Lake McDonald",                                  );
    $h->addX2(  name=>"Glacier National Park, St Mary Lake",                                   title=>"St Mary Lake",                                   );
    $h->addX2(  name=>"Grand Canyon National Park",                                                                                                     );
    $h->addX2(  name=>"Grand Canyon National Park, Eagle Rock",                                title=>"Eagle Rock",                                     );
    $h->addX2(  name=>"Grand Canyon National Park, Grand Canyon",                              title=>"Grand Canyon",                                   );
    $h->addX2(  name=>"Grand Canyon National Park, Marble Canyon",                             title=>"Marble Canyon",                                  );
    $h->addX2(  name=>"Grand Canyon National Park, Tonto Trail and the Tower of Set",          title=>"Tonto Trail and the Tower of Set",               );
    $h->addX2(  name=>"Grand Teton National Park",                                                                                                      );
    $h->addX2(  name=>"Grand Teton National Park, Cathedral Group",                            title=>"Cathedral Group",                                );
    $h->addX2(  name=>"Grand Teton National Park, Hidden Falls",                               title=>"Hidden Falls",                                   );
    $h->addX2(  name=>"Grand Teton National Park, Jackson Lake",                               title=>"Jackson Lake",                                   );
    $h->addX2(  name=>"Grand Teton National Park, Jenny Lake",                                 title=>"Jenny Lake",                                     );
    $h->addX2(  name=>"Great Smoky Mountains National Park",                                                                                            );
    $h->addX2(  name=>"Great Smoky Mountains National Park, Clingman's Dome",                  title=>"Clingman's Dome",                                );
    $h->addX2(  name=>"Great Smoky Mountains National Park, Great Smoky Mountains forest",     title=>"Great Smoky Mountains forest",                   );
    $h->addX2(  name=>"Great Smoky Mountains National Park, Laurel Falls",                     title=>"Laurel Falls",                                   );
    $h->addX2(  name=>"Great Smoky Mountains National Park, Oconaluftee Overlook",             title=>"Oconaluftee Overlook",                           );
    $h->addX2(  name=>"Hawaii Volcanoes National Park",                                                                                                 );
    $h->addX2(  name=>"Hawaii Volcanoes National Park, Lava and Pacific Ocean",                title=>"Lava and Pacific Ocean",                         );
    $h->addX2(  name=>"Hawaii Volcanoes National Park, Pahoehoe lava fountain",                title=>"Pahoehoe lava fountain",                         );
    $h->addX2(  name=>"Hawaii Volcanoes National Park, Pu'u O'o",                              title=>"Pu'u O'o",                                       );
    $h->addX2(  name=>"Hawaii Volcanoes National Park, Thurston Lava Tube",                    title=>"Thurston Lava Tube",                             );
    $h->addX2(  name=>"Joshua Tree National Park",                                                                                                      );
    $h->addX2(  name=>"Joshua Tree National Park, Giant Marbles",                              title=>"Giant Marbles",                                  );
    $h->addX2(  name=>"Joshua Tree National Park, Hidden Valley Campground",                   title=>"Hidden Valley Campground",                       );
    $h->addX2(  name=>"Joshua Tree National Park, Joshua Trees",                               title=>"Joshua Trees",                                   );
    $h->addX2(  name=>"Joshua Tree National Park, Old Woman Rock",                             title=>"Old Woman Rock",                                 );
    $h->addX2(  name=>"Kings Canyon National Park",                                                                                                     );
    $h->addX2(  name=>"Kings Canyon National Park, Boyden Cave",                               title=>"Boyden Cave",                                    );
    $h->addX2(  name=>"Kings Canyon National Park, General Grant tree",                        title=>"General Grant tree",                             );
    $h->addX2(  name=>"Kings Canyon National Park, Kings Canyon",                              title=>"Kings Canyon",                                   );
    $h->addX2(  name=>"Kings Canyon National Park, Kings River",                               title=>"Kings River",                                    );
    $h->addX2(  name=>"Mammoth Cave National Park",                                                                                                     );
    $h->addX2(  name=>"Mammoth Cave National Park, Frozen Niagara",                            title=>"Frozen Niagara",                                 );
    $h->addX2(  name=>"Mammoth Cave National Park, Mammoth Cave stalagmites",                  title=>"Mammoth Cave stalagmites",                       );
    $h->addX2(  name=>"Mammoth Cave National Park, Mammoth Cave tour",                         title=>"Mammoth Cave tour",                              );
    $h->addX2(  name=>"Mount Rainier National Park",                                                                                                    );
    $h->addX2(  name=>"Mount Rainier National Park, Little Tahoma and Paradise Glacier",       title=>"Little Tahoma and Paradise Glacier",             );
    $h->addX2(  name=>"Mount Rainier National Park, Mount Rainier",                            title=>"Mount Rainier",                                  );
    $h->addX2(  name=>"Mount Rainier National Park, Reflection Lake and Mount Rainier",        title=>"Reflection Lake and Mount Rainier",              );
    $h->addX2(  name=>"Mount Rainier National Park, Wonderland Trail and Mount Rainier",       title=>"Wonderland Trail and Mount Rainier",             );
    $h->addX2(  name=>"Olympic National Park",                                                                                                          );
    $h->addX2(  name=>"Olympic National Park, Hoh Rainforest",                                 title=>"Hoh Rainforest",                                 );
    $h->addX2(  name=>"Olympic National Park, Hurricane Ridge",                                title=>"Hurricane Ridge",                                );
    $h->addX2(  name=>"Olympic National Park, Mount Olympus",                                  title=>"Mount Olympus",                                  );
    $h->addX2(  name=>"Olympic National Park, Ruby Beach",                                     title=>"Ruby Beach",                                     );
    $h->addX2(  name=>"Petrified Forest National Park",                                                                                                 );
    $h->addX2(  name=>"Petrified Forest National Park, Painted Desert",                        title=>"Painted Desert",                                 );
    $h->addX2(  name=>"Petrified Forest National Park, Petrified Wood",                        title=>"Petrified Wood",                                 );
    $h->addX2(  name=>"Petrified Forest National Park, Petroglyphs",                           title=>"Petroglyphs",                                    );
    $h->addX2(  name=>"Petrified Forest National Park, The Tepees",                            title=>"The Tepees",                                     );
    $h->addX2(  name=>"Rocky Mountain National Park",                                                                                                   );
    $h->addX2(  name=>"Rocky Mountain National Park, Dream Lake and Hallett Peak",             title=>"Dream Lake and Hallett Peak",                    );
    $h->addX2(  name=>"Rocky Mountain National Park, Grand Lake",                              title=>"Grand Lake",                                     );
    $h->addX2(  name=>"Rocky Mountain National Park, Longs Peak",                              title=>"Longs Peak",                                     );
    $h->addX2(  name=>"Rocky Mountain National Park, Milner Pass",                             title=>"Milner Pass",                                    );
    $h->addX2(  name=>"Sequoia National Park",                                                                                                          );
    $h->addX2(  name=>"Sequoia National Park, Crystal Cave",                                   title=>"Crystal Cave",                                   );
    $h->addX2(  name=>"Sequoia National Park, Giant Forest",                                   title=>"Giant Forest",                                   );
    $h->addX2(  name=>"Sequoia National Park, Hamilton Lake and High Sierra Trail",            title=>"Hamilton Lake and High Sierra Trail",            );
    $h->addX2(  name=>"Sequoia National Park, Moro Rock",                                      title=>"Moro Rock",                                      );
    $h->addX2(  name=>"Sequoia National Park, Mount Whitney",                                  title=>"Mount Whitney",                                  );
    $h->addX2(  name=>"Yellowstone National Park",                                                                                                      );
    $h->addX2(  name=>"Yellowstone National Park, Fishing Cone Geyser and Yellowstone Lake",   title=>"Fishing Cone Geyser and Yellowstone Lake",       );
    $h->addX2(  name=>"Yellowstone National Park, Grand Prismatic Spring",                     title=>"Grand Prismatic Spring",                         );
    $h->addX2(  name=>"Yellowstone National Park, Great Fountain Geyser",                      title=>"Great Fountain Geyser",                          );
    $h->addX2(  name=>"Yellowstone National Park, Old Faithful",                               title=>"Old Faithful",                                   );
    $h->addX2(  name=>"Yosemite National Park",                                                                                                         );
    $h->addX2(  name=>"Yosemite National Park, El Capitan",                                    title=>"El Capitan",                                     );
    $h->addX2(  name=>"Yosemite National Park, Half Dome",                                     title=>"Half Dome",                                      );
    $h->addX2(  name=>"Yosemite National Park, Vernal Falls",                                  title=>"Vernal Falls",                                   );
    $h->addX2(  name=>"Yosemite National Park, Yosemite Valley",                               title=>"Yosemite Valley",                                );
    $h->addX2(  name=>"Zion National Park",                                                                                                             );
    $h->addX2(  name=>"Zion National Park, Angels Landing",                                    title=>"Angels Landing",                                 );
    $h->addX2(  name=>"Zion National Park, Checkerboard Mesa",                                 title=>"Checkerboard Mesa",                              );
    $h->addX2(  name=>"Zion National Park, The Narrows",                                       title=>"The Narrows",                                    );
    $h->addX2(  name=>"Zion National Park, Zion Canyon as seen from Angel's Landing",          title=>"Zion Canyon as seen from Angel's Landing",       );
    $h
   }
 }

#------------------------------------------------------------------------------
# Past
#------------------------------------------------------------------------------

 {package Past;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->addX2(name=>"Arise",    );
    $h->addX2(name=>"Awake",    );
    $h->addX2(name=>"Be",       );
    $h->addX2(name=>"Bear",     );
    $h->addX2(name=>"Beat",     );
    $h->addX2(name=>"Begin",    );
    $h->addX2(name=>"Bend",     );
    $h->addX2(name=>"Bet",      );
    $h->addX2(name=>"Bid",      );
    $h->addX2(name=>"Bind",     );
    $h->addX2(name=>"Bite",     );
    $h->addX2(name=>"Blow",     );
    $h->addX2(name=>"Break",    );
    $h->addX2(name=>"Breed",    );
    $h->addX2(name=>"Bring",    );
    $h->addX2(name=>"Build",    );
    $h->addX2(name=>"Burn",     );
    $h->addX2(name=>"Burst",    );
    $h->addX2(name=>"Buy",      );
    $h->addX2(name=>"Cast",     );
    $h->addX2(name=>"Catch",    );
    $h->addX2(name=>"Choose",   );
    $h->addX2(name=>"Cling",    );
    $h->addX2(name=>"Clothe",   );
    $h->addX2(name=>"Come",     );
    $h->addX2(name=>"Cost",     );
    $h->addX2(name=>"Creep",    );
    $h->addX2(name=>"Cut",      );
    $h->addX2(name=>"Deal",     );
    $h->addX2(name=>"Dig",      );
    $h->addX2(name=>"Do",       );
    $h->addX2(name=>"Draw",     );
    $h->addX2(name=>"Drink",    );
    $h->addX2(name=>"Drive",    );
    $h->addX2(name=>"Dwell",    );
    $h->addX2(name=>"Eat",      );
    $h->addX2(name=>"Fall",     );
    $h->addX2(name=>"Feed",     );
    $h->addX2(name=>"Feel",     );
    $h->addX2(name=>"Fight",    );
    $h->addX2(name=>"Find",     );
    $h->addX2(name=>"Fit",      );
    $h->addX2(name=>"Flee",     );
    $h->addX2(name=>"Fling",    );
    $h->addX2(name=>"Fly",      );
    $h->addX2(name=>"Forbid",   );
    $h->addX2(name=>"Forecast", );
    $h->addX2(name=>"Foresee",  );
    $h->addX2(name=>"Foretell", );
    $h->addX2(name=>"Forget",   );
    $h->addX2(name=>"Forgive",  );
    $h->addX2(name=>"Forsake",  );
    $h->addX2(name=>"Freeze",   );
    $h->addX2(name=>"Get",      );
    $h->addX2(name=>"Give",     );
    $h->addX2(name=>"Go",       );
    $h->addX2(name=>"Grind",    );
    $h->addX2(name=>"Grow",     );
    $h->addX2(name=>"Hang",     );
    $h->addX2(name=>"Have",     );
    $h->addX2(name=>"Hear",     );
    $h->addX2(name=>"Hide",     );
    $h->addX2(name=>"Hit",      );
    $h->addX2(name=>"Hold",     );
    $h->addX2(name=>"Keep",     );
    $h->addX2(name=>"Kneel",    );
    $h->addX2(name=>"Know",     );
    $h->addX2(name=>"Lay",      );
    $h->addX2(name=>"Lead",     );
    $h->addX2(name=>"Leave",    );
    $h->addX2(name=>"Lend",     );
    $h->addX2(name=>"Let",      );
    $h->addX2(name=>"Lose",     );
    $h->addX2(name=>"Make",     );
    $h->addX2(name=>"Mean",     );
    $h->addX2(name=>"Meet",     );
    $h->addX2(name=>"Pay",      );
    $h->addX2(name=>"Put",      );
    $h->addX2(name=>"Quit",     );
    $h->addX2(name=>"Read",     );
    $h->addX2(name=>"Ride",     );
    $h->addX2(name=>"Ring",     );
    $h->addX2(name=>"Rise",     );
    $h->addX2(name=>"Run",      );
    $h->addX2(name=>"Say",      );
    $h->addX2(name=>"See",      );
    $h->addX2(name=>"Seek",     );
    $h->addX2(name=>"Sell",     );
    $h->addX2(name=>"Send",     );
    $h->addX2(name=>"Set",      );
    $h->addX2(name=>"Shake",    );
    $h->addX2(name=>"Shed",     );
    $h->addX2(name=>"Shine",    );
    $h->addX2(name=>"Shoot",    );
    $h->addX2(name=>"Shrink",   );
    $h->addX2(name=>"Shut",     );
    $h->addX2(name=>"Sing",     );
    $h->addX2(name=>"Sink",     );
    $h->addX2(name=>"Sit",      );
    $h->addX2(name=>"Slay",     );
    $h->addX2(name=>"Sleep",    );
    $h->addX2(name=>"Slide",    );
    $h->addX2(name=>"Sling",    );
    $h->addX2(name=>"Slink",    );
    $h->addX2(name=>"Speak",    );
    $h->addX2(name=>"Speed",    );
    $h->addX2(name=>"Spell",    );
    $h->addX2(name=>"Spend",    );
    $h->addX2(name=>"Spill",    );
    $h->addX2(name=>"Spin",     );
    $h->addX2(name=>"Split",    );
    $h->addX2(name=>"Spread",   );
    $h->addX2(name=>"Spring",   );
    $h->addX2(name=>"Stand",    );
    $h->addX2(name=>"Steal",    );
    $h->addX2(name=>"Stick",    );
    $h->addX2(name=>"Sting",    );
    $h->addX2(name=>"Stride",   );
    $h->addX2(name=>"Strike",   );
    $h->addX2(name=>"String",   );
    $h->addX2(name=>"Strive",   );
    $h->addX2(name=>"Swear",    );
    $h->addX2(name=>"Sweep",    );
    $h->addX2(name=>"Swell",    );
    $h->addX2(name=>"Swim",     );
    $h->addX2(name=>"Swing",    );
    $h->addX2(name=>"Take",     );
    $h->addX2(name=>"Teach",    );
    $h->addX2(name=>"Tear",     );
    $h->addX2(name=>"Tell",     );
    $h->addX2(name=>"Think",    );
    $h->addX2(name=>"Throw",    );
    $h->addX2(name=>"Thrust",   );
    $h->addX2(name=>"Tread",    );
    $h->addX2(name=>"Wake",     );
    $h->addX2(name=>"Wear",     );
    $h->addX2(name=>"Weave",    );
    $h->addX2(name=>"Wed",      );
    $h->addX2(name=>"Weep",     );
    $h->addX2(name=>"Wet",      );
    $h->addX2(name=>"Wind",     );
    $h->addX2(name=>"Won",      );
    $h->addX2(name=>"Wring",    );
    $h->addX2(name=>"Write",    );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Paws and Claws
#-------------------------------------------------------------------------------

 {package PawsAndClaws;
  use base qw(ApplicationUrl);

  sub Load()
   {my $h = bless {};
    use Facts::PawsAndClaws_urls;
    my $u = urls();
    $h->add($u, "Albatross");
    $h->add($u, "Alligator");
    $h->add($u, "Badger");
    $h->add($u, "Bat");
    $h->add($u, "Booby");
    $h->add($u, "Camel");
    $h->add($u, "Cat");
    $h->add($u, "Chicken");
    $h->add($u, "Chimpanzee");
    $h->add($u, "Coot");
    $h->add($u, "Cow");
    $h->add($u, "Deer");
    $h->add($u, "Dog");
    $h->add($u, "Duck");
    $h->add($u, "Eagle");
    $h->add($u, "Egret");
    $h->add($u, "Elephant");
    $h->add($u, "Emu");
    $h->add($u, "Flamingo");
    $h->add($u, "Fox");
    $h->add($u, "Gecko");
    $h->add($u, "Giraffe");
    $h->add($u, "Grouse");
    $h->add($u, "Gull");
    $h->add($u, "Hare");
    $h->add($u, "Hedgehog");
    $h->add($u, "Hippopotamus");
    $h->add($u, "Horse");
    $h->add($u, "Human");
    $h->add($u, "Iguana");
    $h->add($u, "Lion");
    $h->add($u, "Lynx");
    $h->add($u, "Marine Iguana");
    $h->add($u, "Marmot");
    $h->add($u, "Mole");
    $h->add($u, "Ostrich");
    $h->add($u, "Penguin");
    $h->add($u, "Puma");
    $h->add($u, "Racoon");
    $h->add($u, "Rhinoceros");
    $h->add($u, "Rock Hyrax");
    $h->add($u, "Sheep");
    $h->add($u, "Skink");
    $h->add($u, "Sloth");
    $h->add($u, "Spider Monkey");
    $h->add($u, "Tapir");
    $h->add($u, "Tarsier");
    $h->add($u, "Tiger");
    $h->add($u, "Tortoise");
    $h->add($u, "Turtle");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Penguins
#-------------------------------------------------------------------------------

 {package Penguins;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add(6, "Adelie Penguin");
    $h->add(6, "Chinstrap Penguin");
    $h->add(6, "Emperor Penguin");
    $h->add(6, "Gentoo Penguin");
    $h->add(6, "King Penguin");
    $h->add(6, "Macaroni Penguin");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Periodic Table
#-------------------------------------------------------------------------------

 {package PeriodicTable;
  use base qw(ColourApplication);
  use Data::Dump qw(dump);
  my %h;

  sub subsetNames()      {[qw(NonMetals NobleGases AlkaliMetals AlkalineEarthMetals Metalloids Halogens PostTransitionMetals TransitionMetals Lanthanides Actinides)]}
  sub subsetThings($$)
   {my (undef, $sn) = @_; # Subset required by number
    if ($sn)
     {my @s = @{subsetNames()};
      my $s = $s[$sn-1];
      my @t;  # Things in subset
      for my $e(keys %h)
       {my $S = join('', split(/[- ]/, $h{$e}{classification}));
        next unless lc($s) eq lc($S);
        push @t, $h{$e};
       }
      return (sort {$a->{atomicNumber} <=> $b->{atomicNumber}} @t);
     }
    else
     {return sort {$a->{atomicNumber} <=> $b->{atomicNumber}} map {$h{$_}} keys %h;
     }
   }
  sub androidIconSource($$)
   {my (undef, $app, $subset) = @_;
    return "icon" unless $subset;
    [('Non metals', 'Noble gases', 'Alkali metals', 'Alkaline earth metals', 'Metalloids', 'Halogens', 'Post-transition metals', 'Transition metals', 'Lanthanides', 'Actinides')]->[$subset-1];
   }

  sub subsetter($$$$$) # Subsetter for nokia
   {my ($PT, $app, $P, $S, $ps) = @_; # Periodic table, app description, Reference to array of subset bins, reference to array of subset names for each bin, packing size
    if ($ps == 1)
     {my %S; my @S;
      for my $thing($app->things)
       {my $sn = $thing->{subsetName};
        my $n = $S{$sn};
        unless(defined $n)
         {push @S, $sn;
          $n = scalar keys %S;
          $S{$sn} = $n;
         }
        push @{$P->[$n]}, $thing->name;
       }
      @$S = @S;
     }
    elsif ($ps == 2)
     {for my $thing($app->things)
       {push @{$P->[0]}, $thing->name;
       }
      push @$S, "ALL";
     }
   }

  sub subsets() # Elements by atomic number in each classification set
   {my %s;
    for (keys %h)
     {my $S = $h{$_}{classification};
      my $n = $h{$_}{atomicNumber};
      $s{$S} = $n if !defined($s{$S}) || $s{$S} > $n;
     }
    sort {$s{$a} <=> $s{$b}} keys %s;
   }

  sub add($$$$$$$$$$$$$$)
   {my ($an, $subset, $symbol, $name, $Group, $Period, $mass, $density,
        $meltingPoint, $boilingPoint, $heatCapacity, $electroNegativity,
        $abundance, $valency) = @_;
    my $colour = ColourApplication::vividColour();
    $colour = "00ff00" if $name eq "Hydrogen";
    $colour = "9ea2ca" if $name eq "Oxygen";
    $colour = "f9fe00" if $name eq "Sulfur";
    $colour = "B87333" if $name eq "Copper";
    $colour = "C0C0C0" if $name eq "Silver";
    $colour = "D4AF37" if $name eq "Gold";
    $colour = "E5E4E2" if $name eq "Platinum";
    $colour = "0047AB" if $name eq "Cobalt";

    $colour = "a5843d" if $name eq "Fluorine";
    $colour = "b2c456" if $name eq "Chlorine";
    $colour = "940094" if $name eq "Iodine";
    $colour = "ab2313" if $name eq "Bromine";

    $h{$name} =
     {colour=>$colour, name=>$name, prefix=>0,
#     title=>$name, subsets=>["ALL", $subset], subsetName=>::squeezeOutBadChars($subset), classification=>$subset,
      title=>$name, subsetName=>::squeezeOutBadChars($subset), classification=>$subset,
      atomicNumber=>$an, atomicMass=>$mass, symbol=>$symbol,
      Group=>$Group, Period=>$Period, density=>$density,
      meltingPoint=>$meltingPoint, boilingPoint=>$boilingPoint,
      heatCapacity=>$heatCapacity, electroNegativity=>$electroNegativity,
      abundance=>$abundance, valency=>$valency,
     }
   }

  sub numericSort($$) # Almost, but not quite dealing with < .001 parts per million
   {my ($A, $B) = @_;
    my $AA = $A =~ /\A\s*\Z|</;
    my $BB = $B =~ /\A\s*\Z|</;
    return -1 if  $AA && !$BB;
    return +1 if !$AA &&  $BB;
    return  0 if  $AA &&  $BB;
    $A <=> $B
   }

  sub min(@)
   {my @c = sort {$a <=> $b} @_;
    $c[0];
   }

  sub factoid($$$$)
   {my ($facts, $text, $order, $Order) = @_;
    my @o = ("", "2nd ", "3rd ", "4th ", "5th ", "6th ", "7th ", "8th ", "9th ", "10th ");
    for(0..min($#o, int(scalar(@$order)/2)-1)) # Middle is ignored as it is somewhat meaningless
     {push @{$h{$order->[$_]}{$facts}}, $o[$_]. "lowest ".$text unless $Order && $Order->[$_] eq $order->[$_];
     }
    for(1..min(scalar(@o), int(scalar(@$order)/2)-1))
     {push @{$h{$order->[-$_]}{$facts}}, $o[$_-1]. "highest ".$text unless $Order && $Order->[-$_] eq $order->[-$_];
     }
   }

  sub order($$;$)
   {my ($field, $text, $ignoreOverAll) = @_;
    my @o = sort {numericSort($h{$a}{$field}, $h{$b}{$field})} keys %h;
    factoid("factsOverall", $text, \@o, undef) unless $ignoreOverAll; # Avoid atomic number on over all as it makes no sense
    $h{$o[$_]}{order}{$field} = [$_+1, $#o-$_+1] for 0..$#o;
    for my $s(subsets())
     {my @O = sort {numericSort($h{$a}{$field}, $h{$b}{$field})} grep {$h{$_}{classification} eq $s} keys %h;
      next unless @O;
      $h{$O[$_]}{subsetOrder}{$field} = [$_+1, $#O-$_+1] for 0..$#O;
      factoid("factsSubset", $text, \@O, \@o);
     }
   }

  sub facts()
   {order("density",      "density");
    order("meltingPoint", "melting point");
    order("boilingPoint", "boiling point");
    order("heatCapacity", "heat capacity");
    order("abundance",    "abundance in Earth's crust");
    order("atomicNumber", "atomic number", 1);
   }

  sub genFacts()
   {genFact($h{$_}) for keys %h;
   }

  sub genFact($)
   {my ($h) = @_;
    my $File = $h->factsSource(1);
    open my $F, ">$File";
     {my $H = do('facts/periodicTable.pm');
      if (my $f = $H->{$h->{name}})
       {for(split(/\n/, $f))
         {say {$F} $_;
         }
       }
     }
    my $centigrade = 273.15;
    say {$F} "Density ", $h->{density}, " grams per cubic centimeter."if $h->{density};
    say {$F} "Melts at ", ::r2($h->{meltingPoint}-$centigrade), " degrees centigrade." if $h->{meltingPoint};
    say {$F} "Boils at ", ::r2($h->{boilingPoint}-$centigrade), " degrees centigrade." if $h->{boilingPoint};
    say {$F} "Heat capacity ", $h->{heatCapacity}, " joules per gram per degree centigrade." if $h->{heatCapacity};
    my $e = $h->{electroNegativity};
    say {$F} "Electronegativity $e" if $h->{subset} !~ /noble/i && $e && $e > 0;
    say {$F} "Abundance ", $h->{abundance}, " parts per million by weight in Earth's crust." if $h->{abundance};
    say {$F} "Member of ", lc($h->{subsetName}), " group.";
    for(@{$h->{factsOverall}})
     {say {$F} "Element with ${_}.";
     }
    for(@{$h->{factsSubset}})
     {say {$F} ucfirst($_), " in ", lcfirst($h->{classification}), " group.";
     }
    say {$F} "*Valency ", $h->{valency};
    say {$F} "Atomic number ", $h->{atomicNumber} if $h->{atomicNumber};
    say {$F} "Atomic mass ", $h->{atomicMass} if $h->{atomicMass};
    say {$F} "Group ", $h->{Group}, " in periodic table." if $h->{Group};
    say {$F} "Period ", $h->{Period}, " in periodic table." if $h->{Period};
   }

  sub Load()
   {add(1,  "Non metals"             ,  "H",  "Hydrogen"          , 1,  1,  "1.00794"   , "0.00008988", "14.175"    , "20.28"     , "14.304"    , "2.20"      , "1400"      , 1);
    add(2,  "Noble gases"            ,  "He", "Helium"            , 18, 1,  "4.002602"  , "0.0001785" , ""          , "4.22"      , "5.193"     , ""          , "0.008"     , 0);
    add(3,  "Alkali metals"          ,  "Li", "Lithium"           , 1,  2,  "6.941"     , "0.534"     , "453.85"    , "1615"      , "3.582"     , "0.98"      , "20"        , 1);
    add(4,  "Alkaline earth metals"  ,  "Be", "Beryllium"         , 2,  2,  "9.012182"  , "1.85"      , "1560.15"   , "2742"      , "1.825"     , "1.57"      , "2.8"       , 2);
    add(5,  "Metalloids"             ,  "B",  "Boron"             , 13, 2,  "10.811"    , "2.34"      , "2573.15"   , "4200"      , "1.026"     , "2.04"      , "10"        , 3);
    add(6,  "Non metals"             ,  "C",  "Carbon"            , 14, 2,  "12.0107"   , "2.267"     , "3948.15"   , "4300"      , "0.709"     , "2.55"      , "200"       , 4);
    add(7,  "Non metals"             ,  "N",  "Nitrogen"          , 15, 2,  "14.0067"   , "0.0012506" , "63.29"     , "77.36"     , "1.04"      , "3.04"      , "19"        , 3);
    add(8,  "Non metals"             ,  "O",  "Oxygen"            , 16, 2,  "15.9994"   , "0.001429"  , "50.5"      , "90.20"     , "0.918"     , "3.44"      , "461000"    , 2);
    add(9,  "Halogens"               ,  "F",  "Fluorine"          , 17, 2,  "18.9984032", "0.001696"  , "53.63"     , "85.03"     , "0.824"     , "3.98"      , "585"       , 1);
    add(10, "Noble gases"            ,  "Ne", "Neon"              , 18, 2,  "20.1797"   , "0.0008999" , "24.703"    , "27.07"     , "1.03"      , ""          , "0.005"     , 0);
    add(11, "Alkali metals"          ,  "Na", "Sodium"            , 1,  3,  "22.98976928",  "0.971"     , "371.15"    , "1156"      , "1.228"     , "0.93"      , "23600"     , 1);
    add(12, "Alkaline earth metals"  ,  "Mg", "Magnesium"         , 2,  3,  "24.3050"   , "1.738"     , "923.15"    , "1363"      , "1.023"     , "1.31"      , "23300"     , 2);
    add(13, "Post-transition metals" ,  "Al", "Aluminium"         , 13, 3,  "26.9815386", "2.698"     , "933.4"     , "2792"      , "0.897"     , "1.61"      , "82300"     , 3);
    add(14, "Metalloids"             ,  "Si", "Silicon"           , 14, 3,  "28.0855"   , "2.3296"    , "1683.15"   , "3538"      , "0.705"     , "1.9"       , "282000"    , 4);
    add(15, "Non metals"             ,  "P",  "Phosphorus"        , 15, 3,  "30.973762" , "1.82"      , "317.25"    , "553"       , "0.769"     , "2.19"      , "1050"      , 5);
    add(16, "Non metals"             ,  "S",  "Sulfur"            , 16, 3,  "32.065"    , "2.067"     , "388.51"    , "717.8"     , "0.71"      , "2.58"      , "350"       , 6);
    add(17, "Halogens"               ,  "Cl", "Chlorine"          , 17, 3,  "35.453"    , "0.003214"  , "172.31"    , "239.11"    , "0.479"     , "3.16"      , "145"       , 5);
    add(18, "Noble gases"            ,  "Ar", "Argon"             , 18, 3,  "39.948"    , "0.0017837" , "83.96"     , "87.30"     , "0.52"      , ""          , "3.5"       , 0);
    add(19, "Alkali metals"          ,  "K",  "Potassium"         , 1,  4,  "39.0983"   , "0.862"     , "336.5"     , "1032"      , "0.757"     , "0.82"      , "20900"     , 1);
    add(20, "Alkaline earth metals"  ,  "Ca", "Calcium"           , 2,  4,  "40.078"    , "1.54"      , "1112.15"   , "1757"      , "0.647"     , "1"         , "41500"     , 2);
    add(21, "Transition metals"      ,  "Sc", "Scandium"          , 3,  4,  "44.955912" , "2.989"     , "1812.15"   , "3109"      , "0.568"     , "1.36"      , "22"        , 3);
    add(22, "Transition metals"      ,  "Ti", "Titanium"          , 4,  4,  "47.867"    , "4.54"      , "1933.15"   , "3560"      , "0.523"     , "1.54"      , "5650"      , 4);
    add(23, "Transition metals"      ,  "V",  "Vanadium"          , 5,  4,  "50.9415"   , "6.11"      , "2175.15"   , "3680"      , "0.489"     , "1.63"      , "120"       , 5);
    add(24, "Transition metals"      ,  "Cr", "Chromium"          , 6,  4,  "51.9961"   , "7.15"      , "2130.15"   , "2944"      , "0.449"     , "1.66"      , "102"       , 6);
    add(25, "Transition metals"      ,  "Mn", "Manganese"         , 7,  4,  "54.938045" , "7.44"      , "1519.15"   , "2334"      , "0.479"     , "1.55"      , "950"       , 4);
    add(26, "Transition metals"      ,  "Fe", "Iron"              , 8,  4,  "55.845"    , "7.874"     , "1808.15"   , "3134"      , "0.449"     , "1.83"      , "56300"     , 3);
    add(27, "Transition metals"      ,  "Co", "Cobalt"            , 9,  4,  "58.933195" , "8.86"      , "1768.15"   , "3200"      , "0.421"     , "1.88"      , "25"        , 3);
    add(28, "Transition metals"      ,  "Ni", "Nickel"            , 10, 4,  "58.6934"   , "8.912"     , "1726.15"   , "3186"      , "0.444"     , "1.91"      , "84"        , 2);
    add(29, "Transition metals"      ,  "Cu", "Copper"            , 11, 4,  "63.546"    , "8.96"      , "1357.75"   , "2835"      , "0.385"     , "1.9"       , "60"        , 2);
    add(30, "Transition metals"      ,  "Zn", "Zinc"              , 12, 4,  "65.38"     , "7.134"     , "692.88"    , "1180"      , "0.388"     , "1.65"      , "70"        , 2);
    add(31, "Post-transition metals" ,  "Ga", "Gallium"           , 13, 4,  "69.723"    , "5.907"     , "302.91"    , "2477"      , "0.371"     , "1.81"      , "19"        , 3);
    add(32, "Metalloids"             ,  "Ge", "Germanium"         , 14, 4,  "72.64"     , "5.323"     , "1211.45"   , "3106"      , "0.32"      , "2.01"      , "1.5"       , 4);
    add(33, "Metalloids"             ,  "As", "Arsenic"           , 15, 4,  "74.92160"  , "5.776"     , "1090.15"   , "887"       , "0.329"     , "2.18"      , "1.8"       , 5);
    add(34, "Non metals"             ,  "Se", "Selenium"          , 16, 4,  "78.96"     , "4.809"     , "494.15"    , "958"       , "0.321"     , "2.55"      , "0.05"      , 6);
    add(35, "Halogens"               ,  "Br", "Bromine"           , 17, 4,  "79.904"    , "3.122"     , "266.05"    , "332.0"     , "0.474"     , "2.96"      , "2.4"       , 5);
    add(36, "Noble gases"            ,  "Kr", "Krypton"           , 18, 4,  "83.798"    , "0.003733"  , "115.93"    , "119.93"    , "0.248"     , "3"         , "<0.001"    , 2);
    add(37, "Alkali metals"          ,  "Rb", "Rubidium"          , 1,  5,  "85.4678"   , "1.532"     , "312.79"    , "961"       , "0.363"     , "0.82"      , "90"        , 1);
    add(38, "Alkaline earth metals"  ,  "Sr", "Strontium"         , 2,  5,  "87.62"     , "2.64"      , "1042.15"   , "1655"      , "0.301"     , "0.95"      , "370"       , 2);
    add(39, "Transition metals"      ,  "Y",  "Yttrium"           , 3,  5,  "88.90585"  , "4.469"     , "1799.15"   , "3609"      , "0.298"     , "1.22"      , "33"        , 3);
    add(40, "Transition metals"      ,  "Zr", "Zirconium"         , 4,  5,  "91.224"    , "6.506"     , "2125.15"   , "4682"      , "0.278"     , "1.33"      , "165"       , 4);
    add(41, "Transition metals"      ,  "Nb", "Niobium"           , 5,  5,  "92.90638"  , "8.57"      , "2741.15"   , "5017"      , "0.265"     , "1.6"       , "20"        , 5);
    add(42, "Transition metals"      ,  "Mo", "Molybdenum"        , 6,  5,  "95.96"     , "10.22"     , "2890.15"   , "4912"      , "0.251"     , "2.16"      , "1.2"       , 6);
    add(43, "Transition metals"      ,  "Tc", "Technetium"        , 7,  5,  "98"        , "11.5"      , "2473.15"   , "5150"      , ""          , "1.9"       , "<0.001"    , 7);
    add(44, "Transition metals"      ,  "Ru", "Ruthenium"         , 8,  5,  "101.07"    , "12.37"     , "2523.15"   , "4423"      , "0.238"     , "2.2"       , "0.001"     , 6);
    add(45, "Transition metals"      ,  "Rh", "Rhodium"           , 9,  5,  "102.90550" , "12.41"     , "2239.15"   , "3968"      , "0.243"     , "2.28"      , "0.001"     , 6);
    add(46, "Transition metals"      ,  "Pd", "Palladium"         , 10, 5,  "106.42"    , "12.02"     , "1825.15"   , "3236"      , "0.244"     , "2.2"       , "0.015"     , 6);
    add(47, "Transition metals"      ,  "Ag", "Silver"            , 11, 5,  "107.8682"  , "10.501"    , "1234.15"   , "2435"      , "0.235"     , "1.93"      , "0.075"     , 3);
    add(48, "Transition metals"      ,  "Cd", "Cadmium"           , 12, 5,  "112.411"   , "8.69"      , "594.33"    , "1040"      , "0.232"     , "1.69"      , "0.159"     , 2);
    add(49, "Post-transition metals" ,  "In", "Indium"            , 13, 5,  "114.818"   , "7.31"      , "429.91"    , "2345"      , "0.233"     , "1.78"      , "0.25"      , 3);
    add(50, "Post-transition metals" ,  "Sn", "Tin"               , 14, 5,  "118.710"   , "7.287"     , "505.21"    , "2875"      , "0.228"     , "1.96"      , "2.3"       , 4);
    add(51, "Metalloids"             ,  "Sb", "Antimony"          , 15, 5,  "121.760"   , "6.685"     , "904.05"    , "1860"      , "0.207"     , "2.05"      , "0.2"       , 5);
    add(52, "Metalloids"             ,  "Te", "Tellurium"         , 16, 5,  "127.60"    , "6.232"     , "722.8"     , "1261"      , "0.202"     , "2.1"       , "0.001"     , 6);
    add(53, "Halogens"               ,  "I",  "Iodine"            , 17, 5,  "126.90447" , "4.93"      , "386.65"    , "457.4"     , "0.214"     , "2.66"      , "0.45"      , 7);
    add(54, "Noble gases"            ,  "Xe", "Xenon"             , 18, 5,  "131.293"   , "0.005887"  , "161.45"    , "165.03"    , "0.158"     , "2.6"       , "<0.001"    , 6);
    add(55, "Alkali metals"          ,  "Cs", "Caesium"           , 1,  6,  "132.9054519",  "1.873"     , "301.7"     , "944"       , "0.242"     , "0.79"      , "3"         , 1);
    add(56, "Alkaline earth metals"  ,  "Ba", "Barium"            , 2,  6,  "137.327"   , "3.594"     , "1002.15"   , "2170"      , "0.204"     , "0.89"      , "425"       , 2);
    add(57, "Lanthanides"            ,  "La", "Lanthanum"         , 0,  6,  "138.90547" , "6.145"     , "1193.15"   , "3737"      , "0.195"     , "1.1"       , "39"        , 3);
    add(58, "Lanthanides"            ,  "Ce", "Cerium"            , 0,  6,  "140.116"   , "6.77"      , "1071.15"   , "3716"      , "0.192"     , "1.12"      , "66.5"      , 4);
    add(59, "Lanthanides"            ,  "Pr", "Praseodymium"      , 0,  6,  "140.90765" , "6.773"     , "1204.15"   , "3793"      , "0.193"     , "1.13"      , "9.2"       , 4);
    add(60, "Lanthanides"            ,  "Nd", "Neodymium"         , 0,  6,  "144.242"   , "7.007"     , "1289.15"   , "3347"      , "0.19"      , "1.14"      , "41.5"      , 3);
    add(61, "Lanthanides"            ,  "Pm", "Promethium"        , 0,  6,  "145"       , "7.26"      , "1204.15"   , "3273"      , ""          , ""          , "<0.001"    , 3);
    add(62, "Lanthanides"            ,  "Sm", "Samarium"          , 0,  6,  "150.36"    , "7.52"      , "1345.15"   , "2067"      , "0.197"     , "1.17"      , "7.05"      , 3);
    add(63, "Lanthanides"            ,  "Eu", "Europium"          , 0,  6,  "151.964"   , "5.243"     , "1095.15"   , "1802"      , "0.182"     , "1.2"       , "2"         , 3);
    add(64, "Lanthanides"            ,  "Gd", "Gadolinium"        , 0,  6,  "157.25"    , "7.895"     , "1585.15"   , "3546"      , "0.236"     , "1.2"       , "6.2"       , 3);
    add(65, "Lanthanides"            ,  "Tb", "Terbium"           , 0,  6,  "158.92535" , "8.229"     , "1630.15"   , "3503"      , "0.182"     , "1.2"       , "1.2"       , 4);
    add(66, "Lanthanides"            ,  "Dy", "Dysprosium"        , 0,  6,  "162.500"   , "8.55"      , "1680.15"   , "2840"      , "0.17"      , "1.22"      , "5.2"       , 3);
    add(67, "Lanthanides"            ,  "Ho", "Holmium"           , 0,  6,  "164.93032" , "8.795"     , "1743.15"   , "2993"      , "0.165"     , "1.23"      , "1.3"       , 3);
    add(68, "Lanthanides"            ,  "Er", "Erbium"            , 0,  6,  "167.259"   , "9.066"     , "1795.15"   , "3503"      , "0.168"     , "1.24"      , "3.5"       , 3);
    add(69, "Lanthanides"            ,  "Tm", "Thulium"           , 0,  6,  "168.93421" , "9.321"     , "1818.15"   , "2223"      , "0.16"      , "1.25"      , "0.52"      , 3);
    add(70, "Lanthanides"            ,  "Yb", "Ytterbium"         , 0,  6,  "173.054"   , "6.965"     , "1097.15"   , "1469"      , "0.155"     , "1.1"       , "3.2"       , 3);
    add(71, "Lanthanides"            ,  "Lu", "Lutetium"          , 3,  6,  "174.9668"  , "9.84"      , "1936.15"   , "3675"      , "0.154"     , "1.27"      , "0.8"       , 3);
    add(72, "Transition metals"      ,  "Hf", "Hafnium"           , 4,  6,  "178.49"    , "13.31"     , "2500.15"   , "4876"      , "0.144"     , "1.3"       , "3"         , 4);
    add(73, "Transition metals"      ,  "Ta", "Tantalum"          , 5,  6,  "180.94788" , "16.654"    , "3269.15"   , "5731"      , "0.14"      , "1.5"       , "2"         , 5);
    add(74, "Transition metals"      ,  "W",  "Tungsten"          , 6,  6,  "183.84"    , "19.25"     , "3680.15"   , "5828"      , "0.132"     , "2.36"      , "1.3"       , 6);
    add(75, "Transition metals"      ,  "Re", "Rhenium"           , 7,  6,  "186.207"   , "21.02"     , "3453.15"   , "5869"      , "0.137"     , "1.9"       , "<0.001"    , 7);
    add(76, "Transition metals"      ,  "Os", "Osmium"            , 8,  6,  "190.23"    , "22.61"     , "3300.15"   , "5285"      , "0.13"      , "2.2"       , "0.002"     , 6);
    add(77, "Transition metals"      ,  "Ir", "Iridium"           , 9,  6,  "192.217"   , "22.56"     , "2716.15"   , "4701"      , "0.131"     , "2.2"       , "0.001"     , 6);
    add(78, "Transition metals"      ,  "Pt", "Platinum"          , 10, 6,  "195.084"   , "21.46"     , "2045.15"   , "4098"      , "0.133"     , "2.28"      , "0.005"     , 6);
    add(79, "Transition metals"      ,  "Au", "Gold"              , 11, 6,  "196.966569", "19.282"    , "1337.73"   , "3129"      , "0.129"     , "2.54"      , "0.004"     , 5);
    add(80, "Transition metals"      ,  "Hg", "Mercury"           , 12, 6,  "200.59"    , "13.5336"   , "234.43"    , "630"       , "0.14"      , "2"         , "0.085"     , 4);
    add(81, "Post-transition metals" ,  "Tl", "Thallium"          , 13, 6,  "204.3833"  , "11.85"     , "577.15"    , "1746"      , "0.129"     , "1.62"      , "0.85"      , 3);
    add(82, "Post-transition metals" ,  "Pb", "Lead"              , 14, 6,  "207.2"     , "11.342"    , "600.75"    , "2022"      , "0.129"     , "2.33"      , "14"        , 4);
    add(83, "Post-transition metals" ,  "Bi", "Bismuth"           , 15, 6,  "208.98040" , "9.807"     , "544.67"    , "1837"      , "0.122"     , "2.02"      , "0.009"     , 5);
    add(84, "Metalloids"             ,  "Po", "Polonium"          , 16, 6,  "210"       , "9.32"      , "527.15"    , "1235"      , ""          , "2"         , "<0.001"    , 6);
    add(85, "Halogens"               ,  "At", "Astatine"          , 17, 6,  "210"       , "7"         , "575.15"    , "610"       , ""          , "2.2"       , "<0.001"    , 1);
    add(86, "Noble gases"            ,  "Rn", "Radon"             , 18, 6,  "222"       , "0.00973"   , "202.15"    , "211.3"     , "0.094"     , ""          , "<0.001"    , 2);
    add(87, "Alkali metals"          ,  "Fr", "Francium"          , 1,  7,  "223"       , "1.87"      , "300.15"    , "950"       , ""          , "0.7"       , "<0.001"    , 1);
    add(88, "Alkaline earth metals"  ,  "Ra", "Radium"            , 2,  7,  "226"       , "5.5"       , "973.15"    , "2010"      , ""          , "0.9"       , "<0.001"    , 2);
    add(89, "Actinides"              ,  "Ac", "Actinium"          , 0,  7,  "227"       , "10.07"     , "1323.15"   , "3471"      , "0.12"      , "1.1"       , "<0.001"    , 3);
    add(90, "Actinides"              ,  "Th", "Thorium"           , 0,  7,  "232.03806" , "11.72"     , "2028.15"   , "5061"      , "0.113"     , "1.3"       , "9.6"       , 4);
    add(91, "Actinides"              ,  "Pa", "Protactinium"      , 0,  7,  "231.03588" , "15.37"     , "1873.15"   , "4300"      , ""          , "1.5"       , "<0.001"    , 5);
    add(92, "Actinides"              ,  "U",  "Uranium"           , 0,  7,  "238.02891" , "18.95"     , "1405.15"   , "4404"      , "0.116"     , "1.38"      , "2.7"       , 6);
#   grouping();
    facts();
    return bless \%h;
   }

# sub subsetNames()
#  {my $s = # Name - project name, icon - icon name
#    {"ALL"                        =>{name=>"ALL",                  icon=>"icon"},
#     "Non metals"                 =>{name=>"NonMetals",            icon=>"Carbon"},
#     "Halogens"                   =>{name=>"Halogens",             icon=>"Fluorine"},
#     "Metalloids"                 =>{name=>"Metalloids",           icon=>"Silicon"},
#     "Noble gases"                =>{name=>"NobleGases",           icon=>"Krypton"},
#     "Alkaline earth metals"      =>{name=>"AlkalineEarthMetals",  icon=>"Strontium"},
#     "Lanthanides"                =>{name=>"Lanthanides",          icon=>"Neodymium"},
#     "Transition metals"          =>{name=>"TransitionMetals",     icon=>"Gold"},
#     "Post-transition metals"     =>{name=>"PostTransitionMetals", icon=>"Lead"},
#     "Alkali metals"              =>{name=>"AlkaliMetals",         icon=>"Francium"},
#     "Actinides"                  =>{name=>"Actinides",            icon=>"Uranium"},
#    }
#  }

  sub genJava()
   {my ($PT, $app) = @_; # Periodic table, app description
    my $d;
    for(sort {$a->{atomicNumber} <=> $b->{atomicNumber}} $app->things)
     {my @D;
      push @D, "        add(0x".$_->{colour}.",",
               "\"". $_->pad.   "\",",
               "\"". $_->title. "\",",
               "new ElementOfPeriodicTable(";
      for my $w(qw(sclassification natomicNumber satomicMass ssymbol nGroup nPeriod sdensity smeltingPoint sboilingPoint sheatCapacity selectroNegativity sabundance nvalency))
       {my $s = $_->{substr($w, 1)};
        my $t = substr($w, 0, 1);
        $s =~ s/0+\Z// if $s =~ /\A\d+\.\d+\Z/;
        push @D, "\"$s\"," if     $t =~ /s/i;
        push @D,  "$s,"    unless $t =~ /s/i;
       }
       {my $s = pop @D; chop($s); push @D, $s;}
      push @$d, [@D, "));"];
     }
    say for ::table($d);
   }
 }

#------------------------------------------------------------------------------
# PlusOrMinus
#------------------------------------------------------------------------------

 {package PlusOrMinus;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->addX2(name=>0,   order=>"000", );
    $h->addX2(name=>1,   order=>"001", );
    $h->addX2(name=>2,   order=>"002", );
    $h->addX2(name=>3,   order=>"003", );
    $h->addX2(name=>4,   order=>"004", );
    $h->addX2(name=>5,   order=>"005", );
    $h->addX2(name=>6,   order=>"006", );
    $h->addX2(name=>7,   order=>"007", );
    $h->addX2(name=>8,   order=>"008", );
    $h->addX2(name=>9,   order=>"009", );
    $h->addX2(name=>10,  order=>"010", );
    $h->addX2(name=>11,  order=>"011", );
    $h->addX2(name=>12,  order=>"012", );
    $h->addX2(name=>13,  order=>"013", );
    $h->addX2(name=>14,  order=>"014", );
    $h->addX2(name=>15,  order=>"015", );
    $h->addX2(name=>16,  order=>"016", );
    $h->addX2(name=>17,  order=>"017", );
    $h->addX2(name=>18,  order=>"018", );
    $h->addX2(name=>19,  order=>"019", );
    $h->addX2(name=>20,  order=>"020", );
    $h->addX2(name=>21,  order=>"021", );
    $h->addX2(name=>22,  order=>"022", );
    $h->addX2(name=>23,  order=>"023", );
    $h->addX2(name=>24,  order=>"024", );
    $h->addX2(name=>25,  order=>"025", );
    $h->addX2(name=>26,  order=>"026", );
    $h->addX2(name=>27,  order=>"027", );
    $h->addX2(name=>28,  order=>"028", );
    $h->addX2(name=>29,  order=>"029", );
    $h->addX2(name=>30,  order=>"030", );
    $h->addX2(name=>31,  order=>"031", );
    $h->addX2(name=>32,  order=>"032", );
    $h->addX2(name=>33,  order=>"033", );
    $h->addX2(name=>34,  order=>"034", );
    $h->addX2(name=>35,  order=>"035", );
    $h->addX2(name=>36,  order=>"036", );
    $h->addX2(name=>37,  order=>"037", );
    $h->addX2(name=>38,  order=>"038", );
    $h->addX2(name=>39,  order=>"039", );
    $h->addX2(name=>40,  order=>"040", );
    $h->addX2(name=>41,  order=>"041", );
    $h->addX2(name=>42,  order=>"042", );
    $h->addX2(name=>43,  order=>"043", );
    $h->addX2(name=>44,  order=>"044", );
    $h->addX2(name=>45,  order=>"045", );
    $h->addX2(name=>46,  order=>"046", );
    $h->addX2(name=>47,  order=>"047", );
    $h->addX2(name=>48,  order=>"048", );
    $h->addX2(name=>49,  order=>"049", );
    $h->addX2(name=>50,  order=>"050", );
    $h->addX2(name=>51,  order=>"051", );
    $h->addX2(name=>52,  order=>"052", );
    $h->addX2(name=>53,  order=>"053", );
    $h->addX2(name=>54,  order=>"054", );
    $h->addX2(name=>55,  order=>"055", );
    $h->addX2(name=>56,  order=>"056", );
    $h->addX2(name=>57,  order=>"057", );
    $h->addX2(name=>58,  order=>"058", );
    $h->addX2(name=>59,  order=>"059", );
    $h->addX2(name=>60,  order=>"060", );
    $h->addX2(name=>61,  order=>"061", );
    $h->addX2(name=>62,  order=>"062", );
    $h->addX2(name=>63,  order=>"063", );
    $h->addX2(name=>64,  order=>"064", );
    $h->addX2(name=>65,  order=>"065", );
    $h->addX2(name=>66,  order=>"066", );
    $h->addX2(name=>67,  order=>"067", );
    $h->addX2(name=>68,  order=>"068", );
    $h->addX2(name=>69,  order=>"069", );
    $h->addX2(name=>70,  order=>"070", );
    $h->addX2(name=>71,  order=>"071", );
    $h->addX2(name=>72,  order=>"072", );
    $h->addX2(name=>73,  order=>"073", );
    $h->addX2(name=>74,  order=>"074", );
    $h->addX2(name=>75,  order=>"075", );
    $h->addX2(name=>76,  order=>"076", );
    $h->addX2(name=>77,  order=>"077", );
    $h->addX2(name=>78,  order=>"078", );
    $h->addX2(name=>79,  order=>"079", );
    $h->addX2(name=>80,  order=>"080", );
    $h->addX2(name=>81,  order=>"081", );
    $h->addX2(name=>82,  order=>"082", );
    $h->addX2(name=>83,  order=>"083", );
    $h->addX2(name=>84,  order=>"084", );
    $h->addX2(name=>85,  order=>"085", );
    $h->addX2(name=>86,  order=>"086", );
    $h->addX2(name=>87,  order=>"087", );
    $h->addX2(name=>88,  order=>"088", );
    $h->addX2(name=>89,  order=>"089", );
    $h->addX2(name=>90,  order=>"090", );
    $h->addX2(name=>91,  order=>"091", );
    $h->addX2(name=>92,  order=>"092", );
    $h->addX2(name=>93,  order=>"093", );
    $h->addX2(name=>94,  order=>"094", );
    $h->addX2(name=>95,  order=>"095", );
    $h->addX2(name=>96,  order=>"096", );
    $h->addX2(name=>97,  order=>"097", );
    $h->addX2(name=>98,  order=>"098", );
    $h->addX2(name=>99,  order=>"099", );
    $h->addX2(name=>100,               );
    $h
   }
  sub loadBreathDepth {{"[plus]"=>32, "[minus]"=>32, 0=>14, 1=>14, 2=>14, 3=>14, 4=>14, 5=>14, 6=>14, 7=>14, 8=>14, 9=>14, 10=>14, }}
# sub loadBreathDepth {{"[plus]"=>3, "[minus]"=>3, }}
 }

#-------------------------------------------------------------------------------
# Puppy Dog Breeds one and two
#-------------------------------------------------------------------------------

 {package PuppyDogBreedsOne;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add("Bassett Hound", 3);
    $h->add("Beagle Family", 1);
    $h->add("Bloodhound", 3);
    $h->add("Boxer", 3);
    $h->add("Chihuahua", 3);
    $h->add("Chow Chow", 3);
    $h->add("Cocker Spaniel Family", 1);
    $h->add("Dachshund", 3);
    $h->add("Dalmatian", 3);
    $h->add("German Shepherd", 3);
    $h->add("Golden Labrador", 3);
    $h->add("Golden Retriever", 3);
    $h->add("Irish Setter", 3);
    $h->add("Jack Russell Terrier", 3);
    $h->add("King Charles Spaniel", 3);
    $h->add("Maltese", 3);
    $h->add("Miniature Poodle", 3);
    $h->add("Newfoundland", 3);
    $h->add("Old English Sheepdog", 3);
    $h->add("Schnauzer", 3);
    $h->add("Shetland Sheepdog", 3);
    $h->add("St. Bernard", 3);
    $h->add("Standard Poodle", 3);
    $h->add("Weimaraner", 3);
    $h->add("West Highland Terrier", 3);
    $h->add("Yorkshire Terrier", 3);
    $h
   }
 }

 {package PuppyDogBreedsTwo;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add("Afghan", 3);
    $h->add("Beagle", 3);
    $h->add("Bernese Mountain Dog", 3);
    $h->add("Bichon Frise", 3);
    $h->add("Bloodhound", 3);
    $h->add("Chihuahua", 3);
    $h->add("Dalmatian", 3);
    $h->add("German Short-haired Pointer", 3);
    $h->add("Golden Labrador", 3);
    $h->add("Golden Retriever", 3);
    $h->add("Golden Retriever Family", 1);
    $h->add("Jack Russell Terrier", 3);
    $h->add("King Charles Spaniel", 3);
    $h->add("Labrador Retriever", 3);
    $h->add("Maltese", 3);
    $h->add("Miniature Poodle", 3);
    $h->add("Old English Sheepdog Family", 1);
    $h->add("Pekingese", 3);
    $h->add("Rough Collie", 3);
    $h->add("Shar Pei", 3);
    $h->add("Springer Spaniel", 3);
    $h->add("Standard Poodle", 3);
    $h->add("West Highland Terrier", 3);
    $h->add("Wire-haired Fox Terrier", 3);
    $h->add("Yorkshire Terrier", 3);
    $h
   }
 }

#-------------------------------------------------------------------------------
# Rhyming Kitchen
#-------------------------------------------------------------------------------

 {package RhymingKitchen;
  use base qw(Kitchen);

  sub Load()
   {bless Kitchen::Load()
   }

  sub Description() {<< 'END'}

Learn the Kitchen in words that rhyme,
You'll find it saves a lot of time.
If all these words you can master,
You'll speak English that much faster.

With <PHOTOCOUNT> kitchen photographs,
You're bound to have a lot of laughs.
Can-opener, dish washer, freezer,
Cheese grater or lemon squeezer?

If all these words are new to you,
Then here is what you have to do,
Download this game and play it through,
So you can learn the kitchen too.

<SHARE>
END
 }

#-------------------------------------------------------------------------------
# Soft Toy Alphabet in English
#-------------------------------------------------------------------------------

 {package SoftToyAlphabet;
  use base qw(AlphabetApplication);

  sub Load()
   {my $h = bless {};
    $h->add("Ant");
    $h->add("Badger");
    $h->add("Beaver");
    $h->add("Bee");
    $h->add("Camel");
    $h->add("Cat");
    $h->add("Chick");
    $h->add("Cow");
    $h->add("Dog");
    $h->add("Dolphin");
    $h->add("Duck");
    $h->add("Elephant");
    $h->add("Fish");
    $h->add("Frog");
    $h->add("Giraffe");
    $h->add("Goose");
    $h->add("Guinea Pig");
    $h->add("Hedgehog");
    $h->add("Hippopotamus");
    $h->add("Horse");
    $h->add("Insect");
    $h->add("Jolly Bear");
    $h->add("Koala");
    $h->add("Ladybird");
    $h->add("Lemur");
    $h->add("Leopard");
    $h->add("Lion");
    $h->add("Lobster");
    $h->add("Monkey");
    $h->add("Mouse");
    $h->add("Nice Bear");
    $h->add("Old Bear");
    $h->add("Owl");
    $h->add("Panda");
    $h->add("Parrot");
    $h->add("Penguin");
    $h->add("Pig");
    $h->add("Queen Ant");
    $h->add("Rabbit");
    $h->add("Reindeer");
    $h->add("Robin");
    $h->add("Seal");
    $h->add("Sheep");
    $h->add("Snake");
    $h->add("Squirrel");
    $h->add("Swan");
    $h->add("Teddy Bear");
    $h->add("Tiger");
    $h->add("Unicorn");
    $h->add("Vole");
    $h->add("Whale");
    $h->add("Xtra Pretty Fish");
    $h->add("Yellow Bear");
    $h->add("Zebra");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Seasons
#-------------------------------------------------------------------------------

 {package Seasons;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Autumn L",   title=>"Autumn",       );
    $h->addX2(  name=>"Autumn P",   title=>"Autumn",       );
    $h->addX2(  name=>"Spring L",   title=>"Spring",       );
    $h->addX2(  name=>"Spring P",   title=>"Spring",       );
    $h->addX2(  name=>"Summer L",   title=>"Summer",       );
    $h->addX2(  name=>"Summer P",   title=>"Summer",       );
    $h->addX2(  name=>"Winter L",   title=>"Winter",       );
    $h->addX2(  name=>"Winter P",   title=>"Winter",       );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Sharks
#-------------------------------------------------------------------------------

 {package Sharks;
  use base qw(Application);

  sub Load {&load}
  sub load(;$)
   {my $language = $_[0] // "en";
    my $h = bless {};
    $h->add("Australian Angelshark");
    $h->add("Basking Shark");
    $h->add("Blacktip Reef Shark");
    $h->add("Blind Shark");
    $h->add("Blotchy Swell Shark");
    $h->add("Blue Shark");
    $h->add("Bonnethead Shark");
    $h->add("Broadnose Sevengill Shark");
    $h->add("Bull Shark");
    $h->add("Caribbean Reef Shark");
    $h->add("Copper Shark");
    $h->add("Crested Bullhead Shark");
    $h->add("Dark Shyshark");
    $h->add("Draughtsboard Shark");
    $h->add("Elephant Shark");
    $h->add("Galapagos Shark");
    $h->add("Great Hammerhead Shark");
    $h->add("Great White Shark");
    $h->add("Grey Bamboo Shark");
    $h->add("Grey Reef Shark");
    $h->add("Horn Shark");
    $h->add("Japanese Angelshark");
    $h->add("Japanese Bullhead Shark");
    $h->add("Japanese Sawshark");
    $h->add("Japanese Topeshark");
    $h->add("Leopard Shark");
    $h->add("Longnose Velvet Dogfish");
    $h->add("Nurse Shark");
    $h->add("Port Jackson Shark");
    $h->add("Puffadder Shyshark");
    $h->add("Pyjama Shark");
    $h->add("Sand Tiger Shark");
    $h->add("Sandbar Shark");
    $h->add("Saw Shark");
    $h->add("Scalloped Hammerhead Shark");
    $h->add("Shortfin Mako Shark");
    $h->add("Sicklefin Lemon Shark");
    $h->add("Silky Shark");
    $h->add("Silvertip Shark");
    $h->add("Small-spotted Catshark");
    $h->add("Speartooth Shark");
    $h->add("Spined Pygmy Shark");
    $h->add("Spiny Dogfish");
    $h->add("Spotted Wobbegong Shark");
    $h->add("Swellshark");
    $h->add("Tasselled Wobbegong Shark");
    $h->add("Tiger Shark");
    $h->add("Whale Shark");
    $h->add("Whitetip Reef Shark");
    $h->add("Zebra Shark");

    use Facts::Sharks_urls;
    $h->addUrls(urls());

    $h
   }

  sub genJava($) {my ($app) = (@_); Application::genJavaExtended($app);}
 }

#-------------------------------------------------------------------------------
# Sharks In German
#-------------------------------------------------------------------------------

 {package SharksInGerman;
  use base qw(Application);

  sub Load {bless &SharksInGerman::load("de")}
 }

#-------------------------------------------------------------------------------
# Signs of the Zodiac
#-------------------------------------------------------------------------------

 {package SignsoftheZodiac;
  use base qw(Application);

  sub genJava($$)
   {my ($data, $app) = @_;
    my $s = '';
    for($app->things)
     {my $name    = $_->name;
      $s .= <<"END";
`  add(1, 0, 0, 2, "$name", "$name", null);
END
     }
    $s
   }

  sub add($$)
   {my ($h, $name) = @_;
    $h->{$name} =
     {group=>1, name=>$name, title=>$name, sequence=>2, order=>$name
     };
   }

  sub Load()
   {my $h = bless {};
    $h->add("Aquarius");
    $h->add("Aries");
    $h->add("Cancer");
    $h->add("Capricorn");
    $h->add("Gemini");
    $h->add("Leo");
    $h->add("Libra");
    $h->add("Pisces");
    $h->add("Sagittarius");
    $h->add("Scorpio");
    $h->add("Taurus");
    $h->add("Virgo");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Sun, Moons and Planets
#-------------------------------------------------------------------------------

 {package SunMoonsPlanets;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX(  name=>"Ariel",         questionTitle=>"Ariel",         title=>"Ariel",         question=>"Ariel",         response=>"Ariel",         photo=>"Ariel", );
    $h->addX(  name=>"Callisto",      questionTitle=>"Callisto",      title=>"Callisto",      question=>"Callisto",      response=>"Callisto",      photo=>"Callisto", );
    $h->addX(  name=>"Earth",         questionTitle=>"Earth",         title=>"Earth",         question=>"Earth",         response=>"Earth",         photo=>"Earth", );
    $h->addX(  name=>"Earth 1",       questionTitle=>"Earth",         title=>"Earth",         question=>"Earth",         response=>"Earth",         photo=>"Earth 1", );
    $h->addX(  name=>"Earth 2",       questionTitle=>"Earth",         title=>"Earth",         question=>"Earth",         response=>"Earth",         photo=>"Earth 2", );
    $h->addX(  name=>"Enceladus",     questionTitle=>"Enceladus",     title=>"Enceladus",     question=>"Enceladus",     response=>"Enceladus",     photo=>"Enceladus", );
    $h->addX(  name=>"Europa",        questionTitle=>"Europa",        title=>"Europa",        question=>"Europa",        response=>"Europa",        photo=>"Europa", );
    $h->addX(  name=>"Ganymede",      questionTitle=>"Ganymede",      title=>"Ganymede",      question=>"Ganymede",      response=>"Ganymede",      photo=>"Ganymede", );
    $h->addX(  name=>"Ganymede 1",    questionTitle=>"Ganymede",      title=>"Ganymede",      question=>"Ganymede",      response=>"Ganymede",      photo=>"Ganymede 1", );
    $h->addX(  name=>"Iapetus",       questionTitle=>"Iapetus",       title=>"Iapetus",       question=>"Iapetus",       response=>"Iapetus",       photo=>"Iapetus", );
    $h->addX(  name=>"Io",            questionTitle=>"Io",            title=>"Io",            question=>"Io",            response=>"Io",            photo=>"Io", );
    $h->addX(  name=>"Io 1",          questionTitle=>"Io",            title=>"Io",            question=>"Io",            response=>"Io",            photo=>"Io 1", );
    $h->addX(  name=>"Jupiter",       questionTitle=>"Jupiter",       title=>"Jupiter",       question=>"Jupiter",       response=>"Jupiter",       photo=>"Jupiter", );
    $h->addX(  name=>"Jupiter 1",     questionTitle=>"Jupiter",       title=>"Jupiter",       question=>"Jupiter",       response=>"Jupiter",       photo=>"Jupiter 1", );
    $h->addX(  name=>"Jupiter 2",     questionTitle=>"Jupiter",       title=>"Jupiter",       question=>"Jupiter",       response=>"Jupiter",       photo=>"Jupiter 2", );
    $h->addX(  name=>"Mars",          questionTitle=>"Mars",          title=>"Mars",          question=>"Mars",          response=>"Mars",          photo=>"Mars", );
    $h->addX(  name=>"Mars 1",        questionTitle=>"Mars",          title=>"Mars",          question=>"Mars",          response=>"Mars",          photo=>"Mars 1", );
    $h->addX(  name=>"Mars 2",        questionTitle=>"Mars",          title=>"Mars",          question=>"Mars",          response=>"Mars",          photo=>"Mars 2", );
    $h->addX(  name=>"Mars 3",        questionTitle=>"Mars",          title=>"Mars",          question=>"Mars",          response=>"Mars",          photo=>"Mars 3", );
    $h->addX(  name=>"Mars 4",        questionTitle=>"Mars",          title=>"Mars",          question=>"Mars",          response=>"Mars",          photo=>"Mars 4", );
    $h->addX(  name=>"Mercury",       questionTitle=>"Mercury",       title=>"Mercury",       question=>"Mercury",       response=>"Mercury",       photo=>"Mercury", );
    $h->addX(  name=>"Mimas",         questionTitle=>"Mimas",         title=>"Mimas",         question=>"Mimas",         response=>"Mimas",         photo=>"Mimas", );
    $h->addX(  name=>"Miranda",       questionTitle=>"Miranda",       title=>"Miranda",       question=>"Miranda",       response=>"Miranda",       photo=>"Miranda", );
    $h->addX(  name=>"Moon",          questionTitle=>"Moon",          title=>"Moon",          question=>"Moon",          response=>"Moon",          photo=>"Moon", );
    $h->addX(  name=>"Moon 1",        questionTitle=>"Moon",          title=>"Moon",          question=>"Moon",          response=>"Moon",          photo=>"Moon 1", );
    $h->addX(  name=>"Moon 2",        questionTitle=>"Moon",          title=>"Moon",          question=>"Moon",          response=>"Moon",          photo=>"Moon 2", );
    $h->addX(  name=>"Moon 3",        questionTitle=>"Moon",          title=>"Moon",          question=>"Moon",          response=>"Moon",          photo=>"Moon 3", );
    $h->addX(  name=>"Neptune",       questionTitle=>"Neptune",       title=>"Neptune",       question=>"Neptune",       response=>"Neptune",       photo=>"Neptune", );
    $h->addX(  name=>"Oberon",        questionTitle=>"Oberon",        title=>"Oberon",        question=>"Oberon",        response=>"Oberon",        photo=>"Oberon", );
    $h->addX(  name=>"Rhea",          questionTitle=>"Rhea",          title=>"Rhea",          question=>"Rhea",          response=>"Rhea",          photo=>"Rhea", );
    $h->addX(  name=>"Saturn",        questionTitle=>"Saturn",        title=>"Saturn",        question=>"Saturn",        response=>"Saturn",        photo=>"Saturn", );
    $h->addX(  name=>"Saturn 1",      questionTitle=>"Saturn",        title=>"Saturn",        question=>"Saturn",        response=>"Saturn",        photo=>"Saturn 1", );
    $h->addX(  name=>"Saturn 2",      questionTitle=>"Saturn",        title=>"Saturn",        question=>"Saturn",        response=>"Saturn",        photo=>"Saturn 2", );
    $h->addX(  name=>"Saturn 3",      questionTitle=>"Saturn",        title=>"Saturn",        question=>"Saturn",        response=>"Saturn",        photo=>"Saturn 3", );
    $h->addX(  name=>"SolarSystem",   questionTitle=>"Solar System",  title=>"Solar System",  question=>"Solar System",  response=>"Solar System",  photo=>"SolarSystem", );
    $h->addX(  name=>"Sun",           questionTitle=>"Sun",           title=>"Sun",           question=>"Sun",           response=>"Sun",           photo=>"Sun", );
    $h->addX(  name=>"Tethys",        questionTitle=>"Tethys",        title=>"Tethys",        question=>"Tethys",        response=>"Tethys",        photo=>"Tethys", );
    $h->addX(  name=>"Titan",         questionTitle=>"Titan",         title=>"Titan",         question=>"Titan",         response=>"Titan",         photo=>"Titan", );
    $h->addX(  name=>"Titania",       questionTitle=>"Titania",       title=>"Titania",       question=>"Titania",       response=>"Titania",       photo=>"Titania", );
    $h->addX(  name=>"Triton",        questionTitle=>"Triton",        title=>"Triton",        question=>"Triton",        response=>"Triton",        photo=>"Triton", );
    $h->addX(  name=>"Triton 1",      questionTitle=>"Triton",        title=>"Triton",        question=>"Triton",        response=>"Triton",        photo=>"Triton 1", );
    $h->addX(  name=>"Umbriel",       questionTitle=>"Umbriel",       title=>"Umbriel",       question=>"Umbriel",       response=>"Umbriel",       photo=>"Umbriel", );
    $h->addX(  name=>"Uranus",        questionTitle=>"Uranus",        title=>"Uranus",        question=>"Uranus",        response=>"Uranus",        photo=>"Uranus", );
    $h->addX(  name=>"Venus",         questionTitle=>"Venus",         title=>"Venus",         question=>"Venus",         response=>"Venus",         photo=>"Venus", );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Sun Moons Planets
#-------------------------------------------------------------------------------

 {package SunMoonsPlanets2;
  use base qw(Application);

  my %h;
  sub add($$)
   {my ($group, $name) = @_;
    $h{$name} =
     {colour=>0, prefix=>0, group=>$group, name=>$name, title=>$name, S40=>1, free=>1, order=>$name
     };
   }

  sub Load()
   {add(11, "Ariel");
    add(10, "Callisto");
    add( 1, "Earth");
    add(11, "Enceladus");
    add(10, "Europa");
    add(10, "Ganymede");
    add(10, "Iapetus");
    add(11, "Io");
    add( 2, "Jupiter");
    add( 1, "Mars");
    add( 2, "Mercury");
    add(11, "Mimas");
    add(11, "Miranda");
    add( 1, "Moon");
    add( 2, "Neptune");
    add(12, "Oberon");
    add(12, "Rhea");
    add( 2, "Saturn");
    add( 1, "SolarSystem");
    add( 1, "Sun");
    add(11, "Tethys");
    add(12, "Titania");
    add(11, "Titan");
    add(11, "Triton");
    add(12, "Umbriel");
    add( 2, "Uranus");
    add( 1, "Venus");
    return bless \%h;
   }
 }
#-------------------------------------------------------------------------------
# Super Birds
#-------------------------------------------------------------------------------

 {package SuperBirds;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Best flyer (Hummingbird)",                                          title=>"Hummingbird",                 photo=>"Best flyer (Hummingbird)",                                          order=>"Best flyer (Hummingbird)", );
    $h->addX2(  name=>"Biggest Condor (Andean Condor)",                                    title=>"Andean Condor",               photo=>"Biggest Condor (Andean Condor)",                                    order=>"Biggest Condor (Andean Condor)", );
    $h->addX2(  name=>"Biggest community nest (Sociable Weaver)",                          title=>"Sociable Weaver",             photo=>"Biggest community nest (Sociable Weaver)",                          order=>"Biggest community nest (Sociable Weaver)", );
    $h->addX2(  name=>"Biggest parrot (Hyacinth Macaw)",                                   title=>"Hyacinth Macaw",              photo=>"Biggest parrot (Hyacinth Macaw)",                                   order=>"Biggest parrot (Hyacinth Macaw)", );
    $h->addX2(  name=>"Biggest tree nest (Bald Eagle)",                                    title=>"Bald Eagle",                  photo=>"Biggest tree nest (Bald Eagle)",                                    order=>"Biggest tree nest (Bald Eagle)", );
    $h->addX2(  name=>"Deepest dive for a flying bird (Thick-billed Murre)",               title=>"Thick-billed Murre",          photo=>"Deepest dive for a flying bird (Thick-billed Murre)",               order=>"Deepest dive for a flying bird (Thick-billed Murre)", );
    $h->addX2(  name=>"Deepest diving bird (Emperor Penguin)",                             title=>"Emperor Penguin",             photo=>"Deepest diving bird (Emperor Penguin)",                             order=>"Deepest diving bird (Emperor Penguin)", );
    $h->addX2(  name=>"Earliest domesticated bird (Red Junglefowl)",                       title=>"Red Junglefowl",              photo=>"Earliest domesticated bird (Red Junglefowl)",                       order=>"Earliest domesticated bird (Red Junglefowl)", );
    $h->addX2(  name=>"Fastest flying bird (Peregrine Falcon)",                            title=>"Peregrine Falcon",            photo=>"Fastest flying bird (Peregrine Falcon)",                            order=>"Fastest flying bird (Peregrine Falcon)", );
    $h->addX2(  name=>"Fastest running flying bird (Greater Roadrunner)",                  title=>"Greater Roadrunner",          photo=>"Fastest running flying bird (Greater Roadrunner)",                  order=>"Fastest running flying bird (Greater Roadrunner)", );
    $h->addX2(  name=>"Fastest swimming bird (Gentoo Penguin)",                            title=>"Gentoo Penguin",              photo=>"Fastest swimming bird (Gentoo Penguin)",                            order=>"Fastest swimming bird (Gentoo Penguin)", );
    $h->addX2(  name=>"Fastest wing beat (Ruby-throated Hummingbird)",                     title=>"Ruby-throated Hummingbird",   photo=>"Fastest wing beat (Ruby-throated Hummingbird)",                     order=>"Fastest wing beat (Ruby-throated Hummingbird)", );
    $h->addX2(  name=>"Furthest migrating bird (Arctic Tern)",                             title=>"Arctic Tern",                 photo=>"Furthest migrating bird (Arctic Tern)",                             order=>"Furthest migrating bird (Arctic Tern)", );
    $h->addX2(  name=>"Greatest number of feathers (Whistling Swan)",                      title=>"Whistling Swan",              photo=>"Greatest number of feathers (Whistling Swan)",                      order=>"Greatest number of feathers (Whistling Swan)", );
    $h->addX2(  name=>"Heaviest Eagle (Steller's Sea Eagle)",                              title=>"Steller's Sea Eagle",         photo=>"Heaviest Eagle (Steller's Sea Eagle)",                              order=>"Heaviest Eagle (Steller's Sea Eagle)", );
    $h->addX2(  name=>"Heaviest Owl (Eurasian Eagle-Owl)",                                 title=>"Eurasian Eagle-Owl",          photo=>"Heaviest Owl (Eurasian Eagle-Owl)",                                 order=>"Heaviest Owl (Eurasian Eagle-Owl)", );
    $h->addX2(  name=>"Heaviest flying bird (Dalmatian Pelican)",                          title=>"Dalmatian Pelican",           photo=>"Heaviest flying bird (Dalmatian Pelican)",                          order=>"Heaviest flying bird (Dalmatian Pelican)", );
    $h->addX2(  name=>"Highest flying bird ever (Ruppell's Griffon Vulture)",              title=>"Ruppell's Griffon Vulture",   photo=>"Highest flying bird ever (Ruppell's Griffon Vulture)",              order=>"Highest flying bird ever (Ruppell's Griffon Vulture)", );
    $h->addX2(  name=>"Highest flying migratory bird (Bar-headed Goose)",                  title=>"Bar-headed Goose",            photo=>"Highest flying migratory bird (Bar-headed Goose)",                  order=>"Highest flying migratory bird (Bar-headed Goose)", );
    $h->addX2(  name=>"Highest price paid for a live bird (Racing Pigeon)",                title=>"Racing Pigeon",               photo=>"Highest price paid for a live bird (Racing Pigeon)",                order=>"Highest price paid for a live bird (Racing Pigeon)", );
    $h->addX2(  name=>"Keenest sense of hearing of any bird (Barn Owl)",                   title=>"Barn Owl",                    photo=>"Keenest sense of hearing of any bird (Barn Owl)",                   order=>"Keenest sense of hearing of any bird (Barn Owl)", );
    $h->addX2(  name=>"Keenest sense of smell of any bird (Kiwi)",                         title=>"Kiwi",                        photo=>"Keenest sense of smell of any bird (Kiwi)",                         order=>"Keenest sense of smell of any bird (Kiwi)", );
    $h->addX2(  name=>"Largest Eagle (Phillipine Eagle)",                                  title=>"Phillipine Eagle",            photo=>"Largest Eagle (Phillipine Eagle)",                                  order=>"Largest Eagle (Phillipine Eagle)", );
    $h->addX2(  name=>"Largest bird (Ostrich)",                                            title=>"Ostrich",                     photo=>"Largest bird (Ostrich)",                                            order=>"Largest bird (Ostrich)", );
    $h->addX2(  name=>"Largest owl (Great Grey Owl)",                                      title=>"Great Grey Owl",              photo=>"Largest owl (Great Grey Owl)",                                      order=>"Largest owl (Great Grey Owl)", );
    $h->addX2(  name=>"Longest beak (Australian Pelican)",                                 title=>"Australian Pelican",          photo=>"Longest beak (Australian Pelican)",                                 order=>"Longest beak (Australian Pelican)", );
    $h->addX2(  name=>"Longest beak relative to body length (Sword-billed Hummingbird)",   title=>"Sword-billed Hummingbird",    photo=>"Longest beak relative to body length (Sword-billed Hummingbird)",   order=>"Longest beak relative to body length (Sword-billed Hummingbird)", );
    $h->addX2(  name=>"Longest non-stop migration (Bar-tailed Godwit)",                    title=>"Bar-tailed Godwit",           photo=>"Longest non-stop migration (Bar-tailed Godwit)",                    order=>"Longest non-stop migration (Bar-tailed Godwit)", );
    $h->addX2(  name=>"Longest wingspan (Wandering Albatross)",                            title=>"Wandering Albatross",         photo=>"Longest wingspan (Wandering Albatross)",                            order=>"Longest wingspan (Wandering Albatross)", );
    $h->addX2(  name=>"Longest wingspan of any eagle (White-tailed Eagle)",                title=>"White-tailed Eagle",          photo=>"Longest wingspan of any eagle (White-tailed Eagle)",                order=>"Longest wingspan of any eagle (White-tailed Eagle)", );
    $h->addX2(  name=>"Most intelligent bird (African Grey Parrot)",                       title=>"African Grey Parrot",         photo=>"Most intelligent bird (African Grey Parrot)",                       order=>"Most intelligent bird (African Grey Parrot)", );
    $h->addX2(  name=>"Most numerous bird (Red-billed Quelea)",                            title=>"Red-billed Quelea",           photo=>"Most numerous bird (Red-billed Quelea)",                            order=>"Most numerous bird (Red-billed Quelea)", );
    $h->addX2(  name=>"Most time spent flying (Common Swift)",                             title=>"Common Swift",                photo=>"Most time spent flying (Common Swift)",                             order=>"Most time spent flying (Common Swift)", );
    $h->addX2(  name=>"Oldest living wild bird (Laysan Albatross)",                        title=>"Laysan Albatross",            photo=>"Oldest living wild bird (Laysan Albatross)",                        order=>"Oldest living wild bird (Laysan Albatross)", );
    $h->addX2(  name=>"Rarest bird (Ivory-billed Woodpecker)",                             title=>"Ivory-billed Woodpecker",     photo=>"Rarest bird (Ivory-billed Woodpecker)",                             order=>"Rarest bird (Ivory-billed Woodpecker)", );
    $h->addX2(  name=>"Slowest flying bird (American Woodcock)",                           title=>"American Woodcock",           photo=>"Slowest flying bird (American Woodcock)",                           order=>"Slowest flying bird (American Woodcock)", );
    $h->addX2(  name=>"Smallest Owl (Elf Owl)",                                            title=>"Elf Owl",                     photo=>"Smallest Owl (Elf Owl)",                                            order=>"Smallest Owl (Elf Owl)", );
    $h->addX2(  name=>"Smallest bird (Bee Hummingbird)",                                   title=>"Bee Hummingbird",             photo=>"Smallest bird (Bee Hummingbird)",                                   order=>"Smallest bird (Bee Hummingbird)", );
    $h->addX2(  name=>"Tallest flying bird (Sarus Crane)",                                 title=>"Sarus Crane",                 photo=>"Tallest flying bird (Sarus Crane)",                                 order=>"Tallest flying bird (Sarus Crane)", );
    $h->addX2(  name=>"Worst bird strike (Common Starling)",                               title=>"Common Starling",             photo=>"Worst bird strike (Common Starling)",                               order=>"Worst bird strike (Common Starling)", );
    $h
   }
 }

#-------------------------------------------------------------------------------
# SuperFish
#-------------------------------------------------------------------------------

 {package SuperFish;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Most ingenious angler (Anglerfish)",                            title=>"Anglerfish",              photo=>"Most ingenious angler (Anglerfish)",                            order=>"Anglerfish", );
    $h->addX2(  name=>"Best shot (Archerfish)",                                        title=>"Archerfish",              photo=>"Best shot (Archerfish)",                                        order=>"Archerfish", );
    $h->addX2(  name=>"Finest sense of smell and taste (Channel Catfish)",             title=>"Channel Catfish",         photo=>"Finest sense of smell and taste (Channel Catfish)",             order=>"Channel Catfish", );
    $h->addX2(  name=>"Longest tail (Common Thresher Shark)",                          title=>"Common Thresher Shark",   photo=>"Longest tail (Common Thresher Shark)",                          order=>"Common Thresher Shark", );
    $h->addX2(  name=>"Deepest living fish (Cusk-eel)",                                title=>"Cusk-eel",                photo=>"Deepest living fish (Cusk-eel)",                                order=>"Cusk-eel", );
    $h->addX2(  name=>"Slowest swimming fish (Dwarf Seahorse)",                        title=>"Dwarf Seahorse",          photo=>"Slowest swimming fish (Dwarf Seahorse)",                        order=>"Dwarf Seahorse", );
    $h->addX2(  name=>"Most electric fish (Electric Eel)",                             title=>"Electric Eel",            photo=>"Most electric fish (Electric Eel)",                             order=>"Electric Eel", );
    $h->addX2(  name=>"Strangest-looking fish (Frogfish)",                             title=>"Frogfish",                photo=>"Strangest-looking fish (Frogfish)",                             order=>"Frogfish", );
    $h->addX2(  name=>"Strongest bite (Great White Shark)",                            title=>"Great White Shark",       photo=>"Strongest bite (Great White Shark)",                            order=>"Great White Shark", );
    $h->addX2(  name=>"Slimiest fish (Hagfish)",                                       title=>"Hagfish",                 photo=>"Slimiest fish (Hagfish)",                                       order=>"Hagfish", );
    $h->addX2(  name=>"Most colourful fish (Mandarinfish)",                            title=>"Mandarinfish",            photo=>"Most colourful fish (Mandarinfish)",                            order=>"Mandarinfish", );
    $h->addX2(  name=>"Largest genome of any vertebrate (Marbled Lungfish)",           title=>"Marbled Lungfish",        photo=>"Largest genome of any vertebrate (Marbled Lungfish)",           order=>"Marbled Lungfish", );
    $h->addX2(  name=>"Heaviest bony fish (Ocean Sunfish)",                            title=>"Ocean Sunfish",           photo=>"Heaviest bony fish (Ocean Sunfish)",                            order=>"Ocean Sunfish", );
    $h->addX2(  name=>"Fastest muscle contraction in vertebrates (Oyster Toadfish)",   title=>"Oyster Toadfish",         photo=>"Fastest muscle contraction in vertebrates (Oyster Toadfish)",   order=>"Oyster Toadfish", );
    $h->addX2(  name=>"Most inflateable fish (Pufferfish)",                            title=>"Pufferfish",              photo=>"Most inflateable fish (Pufferfish)",                            order=>"Pufferfish", );
    $h->addX2(  name=>"Longest lived fish (Rougheye Rockfish)",                        title=>"Rougheye Rockfish",       photo=>"Longest lived fish (Rougheye Rockfish)",                        order=>"Rougheye Rockfish", );
    $h->addX2(  name=>"Fastest swimming fish (Sailfish)",                              title=>"Sailfish",                photo=>"Fastest swimming fish (Sailfish)",                              order=>"Sailfish", );
    $h->addX2(  name=>"Most venomous fish (Stonefish)",                                title=>"Stonefish",               photo=>"Most venomous fish (Stonefish)",                                order=>"Stonefish", );
    $h->addX2(  name=>"Largest teeth relative to head size (Viperfish)",               title=>"Viperfish",               photo=>"Largest teeth relative to head size (Viperfish)",               order=>"Viperfish", );
    $h->addX2(  name=>"Largest fish (Whale Shark)",                                    title=>"Whale Shark",             photo=>"Largest fish (Whale Shark)",                                    order=>"Whale Shark", );
    $h
   }
 }

#-------------------------------------------------------------------------------
# SuperMammals
#-------------------------------------------------------------------------------

 {package SuperMammals;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Largest land mammal (African elephant)",                           title=>"African elephant",         photo=>"Largest land mammal (African elephant)",                           order=>"African elephant", );
    $h->addX2(  name=>"Best hearing of any land mammal (Bat)",                            title=>"Bat",                      photo=>"Best hearing of any land mammal (Bat)",                            order=>"Bat", );
    $h->addX2(  name=>"Largest mammal that's ever lived (Blue Whale)",                    title=>"Blue Whale",               photo=>"Largest mammal that's ever lived (Blue Whale)",                    order=>"Blue Whale", );
    $h->addX2(  name=>"Biggest mouth of any marine mammal (Bowhead whale)",               title=>"Bowhead whale",            photo=>"Biggest mouth of any marine mammal (Bowhead whale)",               order=>"Bowhead whale", );
    $h->addX2(  name=>"Fastest land mammal (Cheetah)",                                    title=>"Cheetah",                  photo=>"Fastest land mammal (Cheetah)",                                    order=>"Cheetah", );
    $h->addX2(  name=>"Smallest dog breed (Chihuahua)",                                   title=>"Chihuahua",                photo=>"Smallest dog breed (Chihuahua)",                                   order=>"Chihuahua", );
    $h->addX2(  name=>"Fastest cat breed (Egyptian Mau)",                                 title=>"Egyptian Mau",             photo=>"Fastest cat breed (Egyptian Mau)",                                 order=>"Egyptian Mau", );
    $h->addX2(  name=>"Heaviest dog breed (English Mastiff)",                             title=>"English Mastiff",          photo=>"Heaviest dog breed (English Mastiff)",                             order=>"English Mastiff", );
    $h->addX2(  name=>"Smallest land mammal (Etruscan shrew)",                            title=>"Etruscan shrew",           photo=>"Smallest land mammal (Etruscan shrew)",                            order=>"Etruscan shrew", );
    $h->addX2(  name=>"Greatest number of teeth of any land mammal (Giant Armadillo)",    title=>"Giant Armadillo",          photo=>"Greatest number of teeth of any land mammal (Giant Armadillo)",    order=>"Giant Armadillo", );
    $h->addX2(  name=>"Tallest land mammal (Giraffe)",                                    title=>"Giraffe",                  photo=>"Tallest land mammal (Giraffe)",                                    order=>"Giraffe", );
    $h->addX2(  name=>"Largest primate (Gorilla)",                                        title=>"Gorilla",                  photo=>"Largest primate (Gorilla)",                                        order=>"Gorilla", );
    $h->addX2(  name=>"Fastest dog breed (Greyhound)",                                    title=>"Greyhound",                photo=>"Fastest dog breed (Greyhound)",                                    order=>"Greyhound", );
    $h->addX2(  name=>"Biggest mouth of any land mammal (Hippopotamus)",                  title=>"Hippopotamus",             photo=>"Biggest mouth of any land mammal (Hippopotamus)",                  order=>"Hippopotamus", );
    $h->addX2(  name=>"Loudest land mammal (Howler monkey)",                              title=>"Howler monkey",            photo=>"Loudest land mammal (Howler monkey)",                              order=>"Howler monkey", );
    $h->addX2(  name=>"Tallest primate (Human)",                                          title=>"Human",                    photo=>"Tallest primate (Human)",                                          order=>"Human", );
    $h->addX2(  name=>"Most complex song of any marine mammal (Humpback Whale)",          title=>"Humpback Whale",           photo=>"Most complex song of any marine mammal (Humpback Whale)",          order=>"Humpback Whale", );
    $h->addX2(  name=>"Tallest dog breed (Irish Wolfhound)",                              title=>"Irish Wolfhound",          photo=>"Tallest dog breed (Irish Wolfhound)",                              order=>"Irish Wolfhound", );
    $h->addX2(  name=>"Fastest marine mammal (Killer Whale)",                             title=>"Killer Whale",             photo=>"Fastest marine mammal (Killer Whale)",                             order=>"Killer Whale", );
    $h->addX2(  name=>"Largest cat breed (Maine Coon)",                                   title=>"Maine Coon",               photo=>"Largest cat breed (Maine Coon)",                                   order=>"Maine Coon", );
    $h->addX2(  name=>"Longest hibernation of any mammal (Marmot)",                       title=>"Marmot",                   photo=>"Longest hibernation of any mammal (Marmot)",                       order=>"Marmot", );
    $h->addX2(  name=>"Smallest primate (Mouse lemur)",                                   title=>"Mouse lemur",              photo=>"Smallest primate (Mouse lemur)",                                   order=>"Mouse lemur", );
    $h->addX2(  name=>"Furthest migration of any land mammal (North American Caribou)",   title=>"North American Caribou",   photo=>"Furthest migration of any land mammal (North American Caribou)",   order=>"North American Caribou", );
    $h->addX2(  name=>"Fastest primate (Patas monkey)",                                   title=>"Patas monkey",             photo=>"Fastest primate (Patas monkey)",                                   order=>"Patas monkey", );
    $h->addX2(  name=>"Tallest cat breed (Savannah)",                                     title=>"Savannah",                 photo=>"Tallest cat breed (Savannah)",                                     order=>"Savannah", );
    $h->addX2(  name=>"Smallest marine mammal (Sea Otter)",                               title=>"Sea Otter",                photo=>"Smallest marine mammal (Sea Otter)",                               order=>"Sea Otter", );
    $h->addX2(  name=>"Smallest cat breed (Singapura)",                                   title=>"Singapura",                photo=>"Smallest cat breed (Singapura)",                                   order=>"Singapura", );
    $h->addX2(  name=>"Slowest primate (Slow Loris)",                                     title=>"Slow Loris",               photo=>"Slowest primate (Slow Loris)",                                     order=>"Slow Loris", );
    $h->addX2(  name=>"Deepest diving marine mammal (Sperm Whale)",                       title=>"Sperm Whale",              photo=>"Deepest diving marine mammal (Sperm Whale)",                       order=>"Sperm Whale", );
    $h->addX2(  name=>"Strangest looking mammal (Star-nosed mole)",                       title=>"Star-nosed mole",          photo=>"Strangest looking mammal (Star-nosed mole)",                       order=>"Star-nosed mole", );
    $h->addX2(  name=>"Smelliest mammal (Striped Skunk)",                                 title=>"Striped Skunk",            photo=>"Smelliest mammal (Striped Skunk)",                                 order=>"Striped Skunk", );
    $h->addX2(  name=>"Slowest land mammal (Three-toed sloth)",                           title=>"Three-toed sloth",         photo=>"Slowest land mammal (Three-toed sloth)",                           order=>"Three-toed sloth", );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Teddy Bears In Action
#-------------------------------------------------------------------------------

 {package TeddyBearsInAction;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Baking a cake");
    $h->add("Blowing out a candle");
    $h->add("Climbing a tree");
    $h->add("Cuddling a friend");
    $h->add("Doing exercises");
    $h->add("Drinking a cup of tea");
    $h->add("Driving a motorbike");
    $h->add("Eating strawberries");
    $h->add("Flying in space");
    $h->add("Getting married");
    $h->add("Going to school");
    $h->add("Hanging on a line");
    $h->add("Having a picnic");
    $h->add("Holding a flower");
    $h->add("Listening to music");
    $h->add("Looking out of the window");
    $h->add("Lying on a windowsill");
    $h->add("Playing a guitar");
    $h->add("Reading a book");
    $h->add("Riding a bicycle");
    $h->add("Sharing the same push chair");
    $h->add("Sitting on the toilet");
    $h->add("Sleeping on the couch");
    $h->add("Smelling the flowers");
    $h->add("Smiling at me");
    $h->add("Standing on a stool");
    $h->add("Swimming in a pool");
    $h->add("Talking on the phone");
    $h->add("Typing on a keyboard");
    $h->add("Watching a candle burn");
    $h->add("Waving at me");
    $h->add("Wearing sunglasses");
    $h->add("Working at the computer");
    $h->add("Writing a letter");

    use Facts::TeddyBearsInAction_urls;
    $h->addUrls(urls());

    $h
   }

  sub genJava($) {my ($app) = (@_); Application::genJavaExtended($app);}
 }

#-------------------------------------------------------------------------------
# Tell The Time
#-------------------------------------------------------------------------------

 {package TellTheTime;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Eight O'Clock");
    $h->add("Eleven O'Clock");
    $h->add("Five O'Clock");
    $h->add("Five past twelve");
    $h->add("Five to three");
    $h->add("Four O'Clock");
    $h->add("Half past eight");
    $h->add("Nine O'Clock");
    $h->add("One O'Clock");
    $h->add("Quarter past one");
    $h->add("Quarter to six");
    $h->add("Seven O'Clock");
    $h->add("Six O'Clock");
    $h->add("Ten O'Clock");
    $h->add("Ten past eleven");
    $h->add("Ten to eight");
    $h->add("Three O'Clock");
    $h->add("Twelve O'Clock");
    $h->add("Twenty past ten");
    $h->add("Twenty to three");
    $h->add("Twenty-five past eleven");
    $h->add("Twenty-five to five");
    $h->add("Two O'Clock");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Tell The Time in German
#-------------------------------------------------------------------------------

 {package TellTheTimeGerman;
  use base qw(Application);

  sub Load() {TellTheTime::Load()}
 }

#-------------------------------------------------------------------------------
# Tell The Time Two
#-------------------------------------------------------------------------------

 {package TellTheTimeTwo;
  use base qw(ApplicationUrl);

  sub Load()
   {my $h = bless {};
    use Facts::TellTheTimeTwo_urls;
    my $u = urls();
    $h->add($u, "00_00a", "Midday");
    $h->add($u, "00_00b", "Twelve o'clock");
    $h->add($u, "00_15a", "Quarter past twelve");
    $h->add($u, "00_15b", "Twelve fifteen");
    $h->add($u, "00_30a", "Half past twelve");
    $h->add($u, "00_30b", "Twelve thirty");
    $h->add($u, "00_45a", "Quarter to one");
    $h->add($u, "00_45b", "Twelve forty-five");
    $h->add($u, "01_00a", "One o'clock");
    $h->add($u, "01_00b", "One o'clock");
    $h->add($u, "01_12a", "Twelve minutes past one");
    $h->add($u, "01_12b", "One twelve");
    $h->add($u, "01_20a", "Twenty minutes past one");
    $h->add($u, "01_20b", "One twenty");
    $h->add($u, "01_50a", "Ten to two");
    $h->add($u, "01_50b", "One fifty");
    $h->add($u, "02_00a", "Two o'clock");
    $h->add($u, "02_00b", "Two o'clock");
    $h->add($u, "02_10a", "Ten past two");
    $h->add($u, "02_10b", "Two ten");
    $h->add($u, "02_35a", "Twenty five to three");
    $h->add($u, "02_35b", "Two thirty-five");
    $h->add($u, "02_55a", "Five to three");
    $h->add($u, "02_55b", "Two fifty-five");
    $h->add($u, "03_00a", "Three o'clock");
    $h->add($u, "03_00b", "Three o'clock");
    $h->add($u, "03_05a", "Five past three");
    $h->add($u, "03_05b", "Three o' five");
    $h->add($u, "03_25a", "Twenty five past three");
    $h->add($u, "03_25b", "Three twenty-five");
    $h->add($u, "03_40a", "Twenty to four");
    $h->add($u, "03_40b", "Three forty");
    $h->add($u, "04_00a", "Four o'clock");
    $h->add($u, "04_00b", "Four o'clock");
    $h->add($u, "04_05a", "Five past four");
    $h->add($u, "04_05b", "Four o' five");
    $h->add($u, "04_30a", "Half past four");
    $h->add($u, "04_30b", "Four thirty");
    $h->add($u, "04_45a", "Quarter to five");
    $h->add($u, "04_45b", "Four forty-five");
    $h->add($u, "05_00a", "Five o'clock");
    $h->add($u, "05_00b", "Five o'clock");
    $h->add($u, "05_10a", "Ten past five");
    $h->add($u, "05_10b", "Five ten");
    $h->add($u, "05_25a", "Twenty five past five");
    $h->add($u, "05_25b", "Five twenty-five");
    $h->add($u, "05_40a", "Twenty to six");
    $h->add($u, "05_40b", "Five forty");
    $h->add($u, "06_00a", "Six o'clock");
    $h->add($u, "06_00b", "Six o'clock");
    $h->add($u, "06_05a", "Five past six");
    $h->add($u, "06_05b", "Six o' five");
    $h->add($u, "06_15a", "Quarter past six");
    $h->add($u, "06_15b", "Six fifteen");
    $h->add($u, "06_50a", "Ten to seven");
    $h->add($u, "06_50b", "Six fifty");
    $h->add($u, "07_00a", "Seven o'clock");
    $h->add($u, "07_00b", "Seven o'clock");
    $h->add($u, "07_10a", "Ten past seven");
    $h->add($u, "07_10b", "Seven ten");
    $h->add($u, "07_20a", "Twenty past seven");
    $h->add($u, "07_20b", "Seven twenty");
    $h->add($u, "07_55a", "Five to eight");
    $h->add($u, "07_55b", "Seven fifty-five");
    $h->add($u, "08_00a", "Eight o'clock");
    $h->add($u, "08_00b", "Eight o'clock");
    $h->add($u, "08_08a", "Eight minutes past eight");
    $h->add($u, "08_08b", "Eight o' eight");
    $h->add($u, "08_31a", "Twenty nine minutes to nine");
    $h->add($u, "08_31b", "Eight thirty-one");
    $h->add($u, "08_45a", "Quarter to nine");
    $h->add($u, "08_45b", "Eight forty-five");
    $h->add($u, "09_00a", "Nine o'clock");
    $h->add($u, "09_00b", "Nine o'clock");
    $h->add($u, "09_07a", "Seven minutes past nine");
    $h->add($u, "09_07b", "Nine o' seven");
    $h->add($u, "09_25a", "Twenty five minutes past nine");
    $h->add($u, "09_25b", "Nine twenty-five");
    $h->add($u, "09_35a", "Twenty five minutes to ten");
    $h->add($u, "09_35b", "Nine thirty-five");
    $h->add($u, "09_56a", "Four minutes to ten");
    $h->add($u, "09_56b", "Nine fifty-six");
    $h->add($u, "10_00a", "Ten o'clock");
    $h->add($u, "10_00b", "Ten o'clock");
    $h->add($u, "10_20a", "Twenty past ten");
    $h->add($u, "10_20b", "Ten twenty");
    $h->add($u, "10_35a", "Twenty five to eleven");
    $h->add($u, "10_35b", "Ten thirty-five");
    $h->add($u, "10_40a", "Twenty to eleven");
    $h->add($u, "10_40b", "Ten forty");
    $h->add($u, "10_50a", "Ten to eleven");
    $h->add($u, "10_50b", "Ten fifty");
    $h->add($u, "11_00a", "Eleven o'clock");
    $h->add($u, "11_00b", "Eleven o'clock");
    $h->add($u, "11_15a", "Quarter past eleven");
    $h->add($u, "11_15b", "Eleven fifteen");
    $h->add($u, "11_30a", "Half past eleven");
    $h->add($u, "11_30b", "Eleven thirty");
    $h->add($u, "11_55a", "Five to twelve");
    $h->add($u, "11_55b", "Eleven fifty-five");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Test Cricketers of Australia
#-------------------------------------------------------------------------------

 {package TestCricketersAustralia;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add("Adam Gilchrist", 1);
    $h->add("Andrew McDonald", 2);
    $h->add("Andrew Symonds", 3);
    $h->add("Ben Hilfenhaus", 2);
    $h->add("Brad Haddin", 1);
    $h->add("Brad Hodge", 1);
    $h->add("Brad Hogg", 2);
    $h->add("Brett Lee", 3);
    $h->add("Cameron White", 2);
    $h->add("Damien Martyn", 1);
    $h->add("David Warner", 2);
    $h->add("Doug Bollinger", 1);
    $h->add("Ed Cowan", 1);
    $h->add("Glenn McGrath", 3);
    $h->add("Jason Gillespie", 1);
    $h->add("Justin Langer", 1);
    $h->add("Marcus North", 1);
    $h->add("Matthew Hayden", 1);
    $h->add("Matthew Wade", 2);
    $h->add("Michael Clarke", 3);
    $h->add("Michael Hussey", 2);
    $h->add("Michael Kasprowicz", 1);
    $h->add("Mitchell Johnson", 3);
    $h->add("Mitchell Starc", 2);
    $h->add("Nathan Bracken", 1);
    $h->add("Nathan Hauritz", 3);
    $h->add("Peter Siddle", 1);
    $h->add("Phil Jaques", 1);
    $h->add("Phillip Hughes", 5);
    $h->add("Ricky Ponting", 3);
    $h->add("Shane Warne", 2);
    $h->add("Shane Watson", 2);
    $h->add("Shaun Marsh", 2);
    $h->add("Shaun Tait", 2);
    $h->add("Simon Katich", 3);
    $h->add("Steve Smith", 1);
    $h->add("Steve Waugh", 1);
    $h->add("Stuart Clark", 3);
    $h->add("Stuart MacGill", 1);
    $h->add("Tim Paine", 1);
    $h->add("Trent Copeland", 2);
    $h
   }
 }

#-------------------------------------------------------------------------------
# Test Cricketers of India
#-------------------------------------------------------------------------------

 {package TestCricketersIndia;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add("Abhinav Mukund", 1);
    $h->add("Ajay Jadega", 1);
    $h->add("Ajinkya Rahane", 2);
    $h->add("Amit Mishra", 1);
    $h->add("Anil Kumble", 2);
    $h->add("Anshuman Gaekwad", 1);
    $h->add("Dinesh Karthik", 2);
    $h->add("Duncan Fletcher", 1);
    $h->add("Gautam Gambhir", 2);
    $h->add("Harbhajan Singh", 2);
    $h->add("Irfan Pathan", 2);
    $h->add("Ishant Sharma", 2);
    $h->add("Javagal Srinath", 1);
    $h->add("Kapil Dev", 1);
    $h->add("Mahendra Singh Dhoni", 3);
    $h->add("Mohammad Kaif", 1);
    $h->add("Munaf Patel", 3);
    $h->add("Murali Kartik", 2);
    $h->add("Piyush Chawla", 2);
    $h->add("Praveen Kumar", 1);
    $h->add("Rahul Dravid", 4);
    $h->add("Ravichandran Ashwin", 1);
    $h->add("Rohit Sharma", 2);
    $h->add("Sachin Tendulkar", 5);
    $h->add("Shanthakumaran Sreesanth", 1);
    $h->add("Sourav Ganguly", 1);
    $h->add("Sunil Joshi", 1);
    $h->add("Suresh Raina", 2);
    $h->add("Syed Kirmani", 1);
    $h->add("Tinu Yohannan", 1);
    $h->add("V.V.S. Laxman", 2);
    $h->add("Venkatesh Prasad", 1);
    $h->add("Vinay Kumar", 1);
    $h->add("Vinod Kambli", 1);
    $h->add("Virat Kohli", 1);
    $h->add("Virender Sehwag", 2);
    $h->add("Wriddhiman Saha", 1);
    $h->add("Yuvraj Singh", 3);
    $h->add("Zaheer Khan", 1);
    $h
   }
 }

#-------------------------------------------------------------------------------
# ToBeOrNotToBe
#-------------------------------------------------------------------------------

 {package ToBeOrNotToBe;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"AgainstASeaOfTroubles",               title=>"Against a Sea of troubles",                                     );
    $h->addX2(  name=>"AndByOpposingEndThem",                title=>"And by opposing end them?",                                     );
    $h->addX2(  name=>"AndTheThousandNaturaShocks",          title=>"and the thousand Natural shocks",                               );
    $h->addX2(  name=>"OrToTakeArms",                        title=>"Or to take Arms",                                               );
    $h->addX2(  name=>"OutrageousFortune",                   title=>"Of outrageous Fortune",                                         );
    $h->addX2(  name=>"ThatFleshIsHeirTo",                   title=>"That Flesh is heir to?",                                        );
    $h->addX2(  name=>"ThatIsTheQuestion",                   title=>"That is the Question",                                          );
    $h->addX2(  name=>"TheHeartAche",                        title=>"The Heart-ache",                                                );
    $h->addX2(  name=>"TheSlingsAndArrows",                  title=>"The Slings and Arrows",                                         );
    $h->addX2(  name=>"TisAConsumationdevoutlyToBeWished",   title=>"'Tis a consummation Devoutly to be wished.",                    );
    $h->addX2(  name=>"ToBeOrNotToBe",                       title=>"To Be Or Not To Be",                                            );
    $h->addX2(  name=>"ToDieToSleepNoMore",                  title=>"To die, to sleep no more, and by a sleep to say, we end",       );
    $h->addX2(  name=>"WhetherTisNoblerInTheMindToSuffer",   title=>"Whether 'tis Nobler in the mind to suffer",                     );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Top 10 Fast Motor Bikes
#-------------------------------------------------------------------------------

 {package Top10FastMotorBikes;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add("Honda CBR1100XX");
    $h->add("BMW S1000RR");
    $h->add("Suzuki Hayabusa");
    $h->add("Ducati 1098R");
    $h->add("Kawasaki Ninja ZX-11");
    $h->add("Kawasaki Ninja ZX-12R");
    $h->add("Kawasaki Ninja ZX-14");
    $h->add("MV Agusta F4 1000 R312");
    $h->add("Suzuki GSX-R1000");
    $h->add("Yamaha YZF-R1");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Top 10 Highest Mountains
#-------------------------------------------------------------------------------

 {package Top10HighestMountains;
  use base qw(SequenceApplication);

  my %h;
  sub add($$$$$)
   {my ($group, $colour, $prefix, $name, $count) = @_;
    $h{$name} = {colour=>$colour, name=>$name, prefix=>$prefix, group=>$group, title=>$name, sequence=>$count, order=>sprintf("%05d", 9999-$prefix)};
   }

  sub Load()
   {add( 1, "b37c66", 8848, "Everest", 7);
    add( 1, "cfa133", 8611, "K2", 6);
    add( 1, "a887e3", 8586, "Kangchenjunga", 5);
    add( 2, "d76299", 8516, "Lhotse", 4);
    add( 2, "44bd6f", 8485, "Makalu", 3);
    add( 2, "ff8e49", 8188, "Cho Oyu", 5);
    add( 3, "c9c942", 8167, "Dhaulagiri", 8);
    add( 3, "d53940", 8163, "Manaslu", 3);
    add( 3, "edb727", 8126, "Nanga Parbat", 6);
    add( 3, "3c8b3d", 8091, "Annapurna 1", 3);
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Top 10 Tallest Asia Pacific Roller Coasters
#-------------------------------------------------------------------------------

 {package Top10TallestAsiaPacificRollerCoasters;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add(5, "BuzzSaw");
    $h->add(3, "Dodonpa");
    $h->add(5, "Eejanaika");
    $h->add(3, "Fujiyama");
    $h->add(1, "Steel Dragon");
    $h->add(1, "T Express");
    $h->add(4, "Takabisha");
    $h->add(6, "Thunder Dolphin");
    $h->add(4, "Tower of Terror");
    $h->add(1, "White Cyclone");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Top 10 Tallest European Roller Coasters
#-------------------------------------------------------------------------------

 {package Top10TallestEuropeanRollerCoasters;
  use base qw(VideoSequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add(5, "Colossos",           20, 100);
    $h->add(7, "Expedition GeForce", 20, 140);
    $h->add(4, "Jubilee Odyssey",    25,  84);
    $h->add(7, "Katun",              45, 120);
    $h->add(6, "Pepsi Max Big One",  50, 150);
    $h->add(6, "Shambhala");
    $h->add(6, "Silver Star",        45, 120);
    $h->add(6, "Stealth",             5,  30);
    $h->add(6, "Stunt Fall");
    $h->add(7, "iSpeed",              5,  54);
    $h
   }
 }

#-------------------------------------------------------------------------------
# Top 10 Tallest North American Roller Coasters
#-------------------------------------------------------------------------------

 {package Top10TallestNorthAmericanRollerCoasters;
  use base qw(VideoSequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add(5, "Desperado",                     50, 144);
    $h->add(5, "El Toro",                       25, 105);
    $h->add(5, "Goliath",                       60, 140);
    $h->add(5, "Intimidator 305",               15,  80);
    $h->add(5, "Kingda Ka",                     25,  58);
    $h->add(4, "Leviathan",                     55, 135);
    $h->add(6, "Millennium Force",              15, 105, "ignore");
    $h->add(5, "Superman - Escape from Krypton", 3,  35);
    $h->add(4, "The Rattler",                    0, 170);
    $h->add(6, "Top Thrill Dragster",           24,  93, "ignore");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Top 10 Tallest Ferris Wheels
#-------------------------------------------------------------------------------

 {package Top10TallestFerrisWheels;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add("Changsha Ferris Wheel",           1);
    $h->add("Daikanransha",                    4);
    $h->add("Diamond and Flower Ferris Wheel", 3);
    $h->add("London Eye",                      5);
    $h->add("Singapore Flyer",                 5);
    $h->add("Southern Star",                   3);
    $h->add("Star of Nanchang",                1);
    $h->add("Suzhou Ferris Wheel",             1);
    $h->add("Tianjin Eye",                     6);
    $h->add("Zhengzhou Ferris Wheel",          2);
    $h
   }
 }

#-------------------------------------------------------------------------------
# Top 10 Tallest Roller Coasters
#-------------------------------------------------------------------------------

 {package Top10TallestRollerCoasters;
  use base qw(SequenceApplication);

  sub Load()
   {my $h = bless {};
    $h->add("Eejanaika", 3);
    $h->add("Fujiyama", 2);
    $h->add("Intimidator 305", 3);
    $h->add("Kingda Ka", 3);
    $h->add("Millennium Force", 4);
    $h->add("Steel Dragon 2000", 1);
    $h->add("Superman - Escape from Krypton", 3);
    $h->add("Thunder Dolphin", 2);
    $h->add("Top Thrill Dragster", 3);
    $h->add("Tower of Terror II", 3);
    $h
   }
 }

#-------------------------------------------------------------------------------
# Top 10 Tallest Towers
#-------------------------------------------------------------------------------

 {package Top10TallestTowers;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(name=>"AbrajAlBaitTowers",            title=>"Abraj-al-Bait towers",            );
    $h->addX2(name=>"BurjKhalifa",                  title=>"Burj Khalifa",                    );
    $h->addX2(name=>"InternationalCommerceCentre",  title=>"International Commerce Centre",   );
    $h->addX2(name=>"Kingkey100",                                                             );
    $h->addX2(name=>"OneWorldTradeCenter",          title=>"One World Trade Center",          );
    $h->addX2(name=>"PetronasTowers",               title=>"Petronas Towers",                 );
    $h->addX2(name=>"ShanghaiWorldFinancialCenter", title=>"Shanghai World Financial Center", );
    $h->addX2(name=>"Taipei101",                                                              );
    $h->addX2(name=>"WillisTower",                  title=>"Willis Tower",                    );
    $h->addX2(name=>"ZifengTower",                  title=>"Zifeng Tower",                    );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Top20HorseBreeds
#-------------------------------------------------------------------------------

 {package Top20HorseBreeds;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"American Paint Horse 1",      title=>"American Paint Horse",          );
    $h->addX2(  name=>"American Paint Horse 2",      title=>"American Paint Horse",          );
    $h->addX2(  name=>"American Paint Horse",                                                );
    $h->addX2(  name=>"American Quarter Horse 1",    title=>"American Quarter Horse",        );
    $h->addX2(  name=>"American Quarter Horse 2",    title=>"American Quarter Horse",        );
    $h->addX2(  name=>"American Quarter Horse",                                              );
    $h->addX2(  name=>"American Saddlebred 1",       title=>"American Saddlebred",           );
    $h->addX2(  name=>"American Saddlebred 2",       title=>"American Saddlebred",           );
    $h->addX2(  name=>"American Saddlebred",                                                 );
    $h->addX2(  name=>"Andalusian 1",                title=>"Andalusian",                    );
    $h->addX2(  name=>"Andalusian 2",                title=>"Andalusian",                    );
    $h->addX2(  name=>"Andalusian",                                                          );
    $h->addX2(  name=>"Appaloosa 1",                 title=>"Appaloosa",                     );
    $h->addX2(  name=>"Appaloosa 2",                 title=>"Appaloosa",                     );
    $h->addX2(  name=>"Appaloosa",                                                           );
    $h->addX2(  name=>"Arabian 1",                   title=>"Arabian",                       );
    $h->addX2(  name=>"Arabian 2",                   title=>"Arabian",                       );
    $h->addX2(  name=>"Arabian",                                                             );
    $h->addX2(  name=>"Friesian 1",                  title=>"Friesian",                      );
    $h->addX2(  name=>"Friesian 2",                  title=>"Friesian",                      );
    $h->addX2(  name=>"Friesian",                                                            );
    $h->addX2(  name=>"Hanoverian 1",                title=>"Hanoverian",                    );
    $h->addX2(  name=>"Hanoverian 2",                title=>"Hanoverian",                    );
    $h->addX2(  name=>"Hanoverian",                                                          );
    $h->addX2(  name=>"Icelandic 1",                 title=>"Icelandic",                     );
    $h->addX2(  name=>"Icelandic 2",                 title=>"Icelandic",                     );
    $h->addX2(  name=>"Icelandic",                                                           );
    $h->addX2(  name=>"Miniature 1",                 title=>"Miniature",                     );
    $h->addX2(  name=>"Miniature 2",                 title=>"Miniature",                     );
    $h->addX2(  name=>"Miniature",                                                           );
    $h->addX2(  name=>"Missouri Fox Trotter",                                                );
    $h->addX2(  name=>"Morgan 1",                    title=>"Morgan",                        );
    $h->addX2(  name=>"Morgan 2",                    title=>"Morgan",                        );
    $h->addX2(  name=>"Morgan",                                                              );
    $h->addX2(  name=>"Mustang 1",                   title=>"Mustang",                       );
    $h->addX2(  name=>"Mustang 2",                   title=>"Mustang",                       );
    $h->addX2(  name=>"Mustang",                                                             );
    $h->addX2(  name=>"Paso Fino 1",                 title=>"Paso Fino",                     );
    $h->addX2(  name=>"Paso Fino 2",                 title=>"Paso Fino",                     );
    $h->addX2(  name=>"Paso Fino",                                                           );
    $h->addX2(  name=>"Peruvian Paso 1",             title=>"Peruvian Paso",                 );
    $h->addX2(  name=>"Peruvian Paso 2",             title=>"Peruvian Paso",                 );
    $h->addX2(  name=>"Peruvian Paso",                                                       );
    $h->addX2(  name=>"Shetland Pony 2",             title=>"Shetland Pony",                 );
    $h->addX2(  name=>"Shetland Pony 3",             title=>"Shetland Pony",                 );
    $h->addX2(  name=>"Shetland Pony",                                                       );
    $h->addX2(  name=>"Tennessee Walking Horse 1",   title=>"Tennessee Walking Horse",       );
    $h->addX2(  name=>"Tennessee Walking Horse 2",   title=>"Tennessee Walking Horse",       );
    $h->addX2(  name=>"Tennessee Walking Horse",                                             );
    $h->addX2(  name=>"Thoroughbred 1",              title=>"Thoroughbred",                  );
    $h->addX2(  name=>"Thoroughbred 2",              title=>"Thoroughbred",                  );
    $h->addX2(  name=>"Thoroughbred",                                                        );
    $h->addX2(  name=>"Trakehner 1",                 title=>"Trakehner",                     );
    $h->addX2(  name=>"Trakehner 2",                 title=>"Trakehner",                     );
    $h->addX2(  name=>"Trakehner",                                                           );
    $h->addX2(  name=>"Welsh Pony and Cob 1",        title=>"Welsh Pony and Cob",            );
    $h->addX2(  name=>"Welsh Pony and Cob 2",        title=>"Welsh Pony and Cob",            );
    $h->addX2(  name=>"Welsh Pony and Cob",                                                  );
    $h
   }
 }


#-------------------------------------------------------------------------------
# Trees
#-------------------------------------------------------------------------------

 {package Trees;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Angel_Oak_Tree_in_SC",      title=>"Southern Live Oak",        );
    $h->addX2(  name=>"Arbutus_menziesii",         title=>"Madrone",                  );
    $h->addX2(  name=>"Banyan_Tree",               title=>"Banyan Tree",              );
    $h->addX2(  name=>"Baobab",                                                       );
    $h->addX2(  name=>"Black_gum",                 title=>"Black Gum",                );
    $h->addX2(  name=>"Black_locust",              title=>"Black Locust",             );
    $h->addX2(  name=>"Bottle_tree",               title=>"Bottle Tree",              );
    $h->addX2(  name=>"Cedrus_deodara_Manali_2",   title=>"Deodar Cedar",             );
    $h->addX2(  name=>"Common_walnut",             title=>"Common Walnut",            );
    $h->addX2(  name=>"Dracaena_draco",            title=>"Dragon Tree",              );
    $h->addX2(  name=>"European_larch_2",          title=>"Larch",                    );
    $h->addX2(  name=>"Honey_Locust",              title=>"Honey Locust",             );
    $h->addX2(  name=>"Jacaranda",                                                    );
    $h->addX2(  name=>"Judas_tree",                title=>"Judas Tree",               );
    $h->addX2(  name=>"Katsura_Tree_1",            title=>"Katsura",                  );
    $h->addX2(  name=>"Northern_red_oak",          title=>"Northern Red Oak",         );
    $h->addX2(  name=>"Palm_tree_1",               title=>"Palm Tree",                );
    $h->addX2(  name=>"Pando_tree_1",              title=>"Pando Tree",               );
    $h->addX2(  name=>"PohutukawaCornwallis",      title=>"Pohutukawa Tree",          );
    $h->addX2(  name=>"Rowan_tree",                title=>"Rowan Tree",               );
    $h->addX2(  name=>"Saucer_magnolia",           title=>"Magnolia",                 );
    $h->addX2(  name=>"Scots_pine",                title=>"Scots Pine",               );
    $h->addX2(  name=>"Sequoia_Tree_2",            title=>"Sequoia",                  );
    $h->addX2(  name=>"Thuja_plicata_Vancouver",   title=>"Giant Cedar",              );
    $h->addX2(  name=>"Tilia_platyphyllos",        title=>"Linden",                   );
    $h->addX2(  name=>"Weeping_willow",            title=>"Weeping willow",           );
    $h->addX2(  name=>"Wild_cherry_1",             title=>"Wild Cherry",              );
    $h->addX2(  name=>"ash",                       title=>"Ash",                      );
    $h->addX2(  name=>"beechTree",                 title=>"Beech Forest",             );
    $h->addX2(  name=>"black_poplar",              title=>"Black Poplar",             );
    $h->addX2(  name=>"blueSpruce",                title=>"Blue Spruce",              );
    $h->addX2(  name=>"cedar",                     title=>"Cedar of Lebanon",         );
    $h->addX2(  name=>"copperBeech2",              title=>"Copper Beech",             );
    $h->addX2(  name=>"corkOak",                   title=>"Cork Oak",                 );
    $h->addX2(  name=>"crabapple_tree",            title=>"Crab Apple",               );
    $h->addX2(  name=>"crepeMyrtle",               title=>"Crepe Myrtle",             );
    $h->addX2(  name=>"eucalyptus",                title=>"Eucalyptus",               );
    $h->addX2(  name=>"ginkgo_biloba01",           title=>"Ginkgo",                   );
    $h->addX2(  name=>"hawthorn",                  title=>"Hawthorn",                 );
    $h->addX2(  name=>"kauri",                     title=>"Kauri",                    );
    $h->addX2(  name=>"mapleTrees",                title=>"Maple",                    );
    $h->addX2(  name=>"monkeyPuzzle",              title=>"Monkey Puzzle Tree",       );
    $h->addX2(  name=>"olive",                     title=>"Olive",                    );
    $h->addX2(  name=>"planeTrees",                title=>"Oriental Plane",           );
    $h->addX2(  name=>"redHorseChestnut",          title=>"Horse Chestnut",           );
    $h->addX2(  name=>"silverBirch",               title=>"Silver Birch",             );
    $h->addX2(  name=>"sweetChestnut",             title=>"Sweet Chestnut",           );
    $h->addX2(  name=>"sycamore",                  title=>"Sycamore",                 );
    $h->addX2(  name=>"white_oak",                 title=>"White Oak",                );
    $h->addX2(  name=>"yellow_poplar",             title=>"American Tulip",           );
    $h->addX2(  name=>"yew",                       title=>"Yew",                      );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Numbers from one to ten
#-------------------------------------------------------------------------------

 {package NumbersFromOneToTen;
  use base qw(ColourApplication);

  my %h;
  sub add($$$$)
   {my ($group, $colour, $name, $title) = @_;
    $h{$name} = {colour=>$colour, name=>$name, prefix=>$name, group=>$group, title=>$title, order=>$name};
   }

  sub Load()
   {add(1, "448bc1",  1, "One");
    add(1, "ff9d4e",  2, "Two");
    add(1, "9d5af1",  3, "Three");
    add(2, "e8c41a",  4, "Four");
    add(2, "dc4162",  5, "Five");
    add(2, "a2a400",  6, "Six");
    add(3, "f89974",  7, "Seven");
    add(3, "99d24e",  8, "Eight");
    add(3, "ff786a",  9, "Nine");
    add(4, "5f42c3", 10, "Ten");
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Toy Transport Alphabet
#-------------------------------------------------------------------------------

 {package ToyTransportAlphabet;
  use base qw(AlphabetApplication);

  sub Load()
   {my $h = bless {};
    $h->add("Ambulances");
    $h->add("Buses");
    $h->add("Campers");
    $h->add("Diggers");
    $h->add("Engines");
    $h->add("Fork Lift Trucks");
    $h->add("Green Cars");
    $h->add("Helicopters");
    $h->add("Incredibly Tiny Train");
    $h->add("Jeeps");
    $h->add("Khaki Jeep");
    $h->add("Lorries");
    $h->add("Motorbike");
    $h->add("Nice Car!");
    $h->add("Oil Tankers");
    $h->add("Police Car");
    $h->add("Quad Bikes");
    $h->add("Racing Cars");
    $h->add("Scooters");
    $h->add("Tractors");
    $h->add("Unusual Vehicle");
    $h->add("Vintage Trucks");
    $h->add("White Car");
    $h->add("Xtra Fast Car");
    $h->add("Yellow Cars");
    $h->add("Zig Zag Cranes");
    $h
   }
 }

#-------------------------------------------------------------------------------
# The Numbers from 1 to 100 in English
#-------------------------------------------------------------------------------

 {package TheNumbersFrom1To100InEnglish;
  use base qw(ColourApplication);

  sub add($$$)
   {my ($h, $name, $title) = @_;
    $h->{$name} = {colour=>-1, name=>$name, prefix=>$name+0, title=>$title, order=>sprintf("%04d", $name)};
   }

  sub genJava($$)
   {my ($data, $app) = @_;
    my $s = '';
    for(sort {$a->{order} <=> $b->{order}} $app->things)
     {my $name   = $_->name;
      my $prefix = $_->prefix;
      my $title  = $_->title;

      $s .= <<"END";
`  Add($prefix, "$name", "$title");
END
     }
    $s
   }

  sub genFacts()
   {my $f;

# Plus
    for   my $i(1..10)
     {for my $j($i..10)
       {push @{$f->{$i+$j}}, "$i + $j";
       }
     }

# Times
    for   my $i(2..10)
     {for my $j($i..10)
       {push @{$f->{$i*$j}}, "$i * $j";
       }
     }
# Results
    for(sort {$a <=> $b} keys %$f)
     {my ($k, $v) = ($_, $f->{$_});
      say '';
      ::Log "$k = $_" for @$v
      }
    }

  sub Load()
   {my $h = bless {};
    $h->add( 1, "One");
    $h->add( 2, "Two");
    $h->add( 3, "Three");
    $h->add( 4, "Four");
    $h->add( 5, "Five");
    $h->add( 6, "Six");
    $h->add( 7, "Seven");
    $h->add( 8, "Eight");
    $h->add( 9, "Nine");
    $h->add(10, "Ten");
    $h->add(11, "Eleven");
    $h->add(12, "Twelve");
    $h->add(13, "Thirteen");
    $h->add(14, "Fourteen");
    $h->add(15, "Fifteen");
    $h->add(16, "Sixteen");
    $h->add(17, "Seventeen");
    $h->add(18, "Eighteen");
    $h->add(19, "Nineteen");
    $h->add(20, "Twenty");
    $h->add(21, "Twenty one");
    $h->add(22, "Twenty two");
    $h->add(23, "Twenty three");
    $h->add(24, "Twenty four");
    $h->add(25, "Twenty five");
    $h->add(26, "Twenty six");
    $h->add(27, "Twenty seven");
    $h->add(28, "Twenty eight");
    $h->add(29, "Twenty nine");
    $h->add(30, "Thirty");
    $h->add(40, "Forty");
    $h->add(50, "Fifty");
    $h->add(60, "Sixty");
    $h->add(70, "Seventy");
    $h->add(80, "Eighty");
    $h->add(90, "Ninety");
    $h->add(100, "One hundred");
    $h->add(31, "Thirty one");
    $h->add(32, "Thirty two");
    $h->add(33, "Thirty three");
    $h->add(34, "Thirty four");
    $h->add(35, "Thirty five");
    $h->add(36, "Thirty six");
    $h->add(37, "Thirty seven");
    $h->add(38, "Thirty eight");
    $h->add(39, "Thirty nine");
    $h->add(41, "Forty one");
    $h->add(42, "Forty two");
    $h->add(43, "Forty three");
    $h->add(44, "Forty four");
    $h->add(45, "Forty five");
    $h->add(46, "Forty six");
    $h->add(47, "Forty seven");
    $h->add(48, "Forty eight");
    $h->add(49, "Forty nine");
    $h->add(51, "Fifty one");
    $h->add(52, "Fifty two");
    $h->add(53, "Fifty three");
    $h->add(54, "Fifty four");
    $h->add(55, "Fifty five");
    $h->add(56, "Fifty six");
    $h->add(57, "Fifty seven");
    $h->add(58, "Fifty eight");
    $h->add(59, "Fifty nine");
    $h->add(61, "Sixty one");
    $h->add(62, "Sixty two");
    $h->add(63, "Sixty three");
    $h->add(64, "Sixty four");
    $h->add(65, "Sixty five");
    $h->add(66, "Sixty six");
    $h->add(67, "Sixty seven");
    $h->add(68, "Sixty eight");
    $h->add(69, "Sixty nine");
    $h->add(71, "Seventy one");
    $h->add(72, "Seventy two");
    $h->add(73, "Seventy three");
    $h->add(74, "Seventy four");
    $h->add(75, "Seventy five");
    $h->add(76, "Seventy six");
    $h->add(77, "Seventy seven");
    $h->add(78, "Seventy eight");
    $h->add(79, "Seventy nine");
    $h->add(81, "Eighty one");
    $h->add(82, "Eighty two");
    $h->add(83, "Eighty three");
    $h->add(84, "Eighty four");
    $h->add(85, "Eighty five");
    $h->add(86, "Eighty six");
    $h->add(87, "Eighty seven");
    $h->add(88, "Eighty eight");
    $h->add(89, "Eighty nine");
    $h->add(91, "Ninety one");
    $h->add(92, "Ninety two");
    $h->add(93, "Ninety three");
    $h->add(94, "Ninety four");
    $h->add(95, "Ninety five");
    $h->add(96, "Ninety six");
    $h->add(97, "Ninety seven");
    $h->add(98, "Ninety eight");
    $h->add(99, "Ninety nine");
    $h
   }
 }

#-------------------------------------------------------------------------------
# The Numbers from 1 to 100 in German
#-------------------------------------------------------------------------------

 {package TheNumbersFrom1To100InGerman;
  use base qw(ColourApplication);

  sub add($$$)
   {my ($h, $name, $title) = @_;
    $h->{$name} = {colour=>-1, name=>$name, prefix=>$name+0, title=>$title, order=>sprintf("%04d", $name)};
   }

  sub genJava($$)
   {#my ($data, $app) = @_;
    my ($app) = @_;
    my $s = '';
    for(sort {$a->{order} <=> $b->{order}} $app->things)
     {my $name   = $_->name;
      my $prefix = $_->prefix;
      my $title  = $_->title;

      $s .= <<"END";
      Add($prefix, "$name", "$title");
END
     }
    $s
   }

  sub Load()
   {my $h = bless {};
    $h->add( 1,  "eins");
    $h->add( 2,  "zwei");
    $h->add( 3,  "drei");
    $h->add( 4,  "vier");
    $h->add( 5,  "fünf");
    $h->add( 6,  "sechs");
    $h->add( 7,  "sieben");
    $h->add( 8,  "acht");
    $h->add( 9,  "neun");
    $h->add(10,  "zehn");
    $h->add(11,  "elf");
    $h->add(12,  "zwölf");
    $h->add(13,  "dreizehn");
    $h->add(14,  "vierzehn");
    $h->add(15,  "fünfzehn");
    $h->add(16,  "sechzehn");
    $h->add(17,  "siebzehn");
    $h->add(18,  "achtzehn");
    $h->add(19,  "neunzehn");
    $h->add(20,  "zwanzig");
    $h->add(21,  "ein und zwanzig");
    $h->add(22,  "zwei und zwanzig");
    $h->add(23,  "drei und zwanzig");
    $h->add(24,  "vier und zwanzig");
    $h->add(25,  "fünf und zwanzig");
    $h->add(26,  "sechs und zwanzig");
    $h->add(27,  "sieben und zwanzig");
    $h->add(28,  "acht und zwanzig");
    $h->add(29,  "neun und zwanzig");
    $h->add(30,  "dreiβig");
    $h->add(31,  "ein und dreiβig");
    $h->add(32,  "zwei und reißig");
    $h->add(33,  "drei und dreißig");
    $h->add(34,  "vier und dreißig");
    $h->add(35,  "fünf und dreißig");
    $h->add(36,  "sechs und dreißig");
    $h->add(37,  "sieben und dreißig");
    $h->add(38,  "acht und dreißig");
    $h->add(39,  "neun und dreißig");
    $h->add(40,  "vierzig");
    $h->add(41,  "ein und vierzig");
    $h->add(42,  "zwei und vierzig");
    $h->add(43,  "drei und vierzig");
    $h->add(44,  "vier und vierzig");
    $h->add(45,  "fünf und vierzig");
    $h->add(46,  "sechs und vierzig");
    $h->add(47,  "sieben und vierzig");
    $h->add(48,  "acht und vierzig");
    $h->add(49,  "neun und vierzig");
    $h->add(50,  "fünfzig");
    $h->add(51,  "ein und fünfzig");
    $h->add(52,  "zwei und fünfzig");
    $h->add(53,  "drei und fünfzig");
    $h->add(54,  "vier und fünfzig");
    $h->add(55,  "fünf und fünfzig");
    $h->add(56,  "sechs und fünfzig");
    $h->add(57,  "sieben und fünfzig");
    $h->add(58,  "acht und fünfzig");
    $h->add(59,  "neun und fünfzig");
    $h->add(60,  "sechzig");
    $h->add(61,  "ein und sechzig");
    $h->add(62,  "zwei und sechzig");
    $h->add(63,  "drei und sechzig");
    $h->add(64,  "vier und sechzig");
    $h->add(65,  "fünf und sechzig");
    $h->add(66,  "sechs und sechzig");
    $h->add(67,  "sieben und sechzig");
    $h->add(68,  "acht und sechzig");
    $h->add(69,  "neun und sechzig");
    $h->add(70,  "siebzig");
    $h->add(71,  "ein und siebzig");
    $h->add(72,  "zwei und siebzig");
    $h->add(73,  "drei und siebzig");
    $h->add(74,  "vier und siebzig");
    $h->add(75,  "fünf und siebzig");
    $h->add(76,  "sechs und siebzig");
    $h->add(77,  "sieben und siebzig");
    $h->add(78,  "acht und siebzig");
    $h->add(79,  "neun und siebzig");
    $h->add(80,  "achtzig");
    $h->add(81,  "ein und achtzig");
    $h->add(82,  "zwei und achtzig");
    $h->add(83,  "drei und achtzig");
    $h->add(84,  "vier und achtzig");
    $h->add(85,  "fünf und achtzig");
    $h->add(86,  "sechs und achtzig");
    $h->add(87,  "sieben und achtzig");
    $h->add(88,  "acht und achtzig");
    $h->add(89,  "neun und achtzig");
    $h->add(90,  "neunzig");
    $h->add(91,  "ein und neunzig");
    $h->add(92,  "zwei und neunzig");
    $h->add(93,  "drei und neunzig");
    $h->add(94,  "vier und neunzig");
    $h->add(95,  "fünf und neunzig");
    $h->add(96,  "sechs und neunzig");
    $h->add(97,  "sieben und neunzig");
    $h->add(98,  "acht und neunzig");
    $h->add(99,  "neun und neunzig");
    $h->add(100, "ein hundert");
    $h
   }
 }

#-------------------------------------------------------------------------------
# The Numbers from 1 to 100 in Italian
#-------------------------------------------------------------------------------

 {package TheNumbersFrom1To100InItalian;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->addX2(name=>1,    title=>"uno",               order=>"001");
    $h->addX2(name=>2,    title=>"due",               order=>"002");
    $h->addX2(name=>3,    title=>"tre",               order=>"003");
    $h->addX2(name=>4,    title=>"quattro",           order=>"004");
    $h->addX2(name=>5,    title=>"cinque",            order=>"005");
    $h->addX2(name=>6,    title=>"sei",               order=>"006");
    $h->addX2(name=>7,    title=>"sette",             order=>"007");
    $h->addX2(name=>8,    title=>"otto",              order=>"008");
    $h->addX2(name=>9,    title=>"nove",              order=>"009");
    $h->addX2(name=>10,   title=>"dieci",             order=>"010");
    $h->addX2(name=>11,   title=>"undici",            order=>"011");
    $h->addX2(name=>12,   title=>"dodici",            order=>"012");
    $h->addX2(name=>13,   title=>"tredici",           order=>"013");
    $h->addX2(name=>14,   title=>"quattordici",       order=>"014");
    $h->addX2(name=>15,   title=>"quindici",          order=>"015");
    $h->addX2(name=>16,   title=>"sedici",            order=>"016");
    $h->addX2(name=>17,   title=>"diciassette",       order=>"017");
    $h->addX2(name=>18,   title=>"diciotto",          order=>"018");
    $h->addX2(name=>19,   title=>"diciannove",        order=>"019");
    $h->addX2(name=>20,   title=>"venti",             order=>"020");
    $h->addX2(name=>21,   title=>"ventuno",           order=>"021");
    $h->addX2(name=>22,   title=>"ventidue",          order=>"022");
    $h->addX2(name=>23,   title=>"ventitre",          order=>"023");
    $h->addX2(name=>24,   title=>"ventiquattro",      order=>"024");
    $h->addX2(name=>25,   title=>"venticinque",       order=>"025");
    $h->addX2(name=>26,   title=>"ventisei",          order=>"026");
    $h->addX2(name=>27,   title=>"ventisette",        order=>"027");
    $h->addX2(name=>28,   title=>"ventotto",          order=>"028");
    $h->addX2(name=>29,   title=>"ventinove",         order=>"029");
    $h->addX2(name=>30,   title=>"trenta",            order=>"030");
    $h->addX2(name=>31,   title=>"trentuno",          order=>"031");
    $h->addX2(name=>32,   title=>"trentadue",         order=>"032");
    $h->addX2(name=>33,   title=>"trentatre",         order=>"033");
    $h->addX2(name=>34,   title=>"trentaquattro",     order=>"034");
    $h->addX2(name=>35,   title=>"trentacinque",      order=>"035");
    $h->addX2(name=>36,   title=>"trentasei",         order=>"036");
    $h->addX2(name=>37,   title=>"trentasette",       order=>"037");
    $h->addX2(name=>38,   title=>"trentotto",         order=>"038");
    $h->addX2(name=>39,   title=>"trentanove",        order=>"039");
    $h->addX2(name=>40,   title=>"quaranta",          order=>"040");
    $h->addX2(name=>41,   title=>"quarantuno",        order=>"041");
    $h->addX2(name=>42,   title=>"quarantadue",       order=>"042");
    $h->addX2(name=>43,   title=>"quarantatre",       order=>"043");
    $h->addX2(name=>44,   title=>"quarantaquattro",   order=>"044");
    $h->addX2(name=>45,   title=>"quarantacinque",    order=>"045");
    $h->addX2(name=>46,   title=>"quarantasei",       order=>"046");
    $h->addX2(name=>47,   title=>"quarantasette",     order=>"047");
    $h->addX2(name=>48,   title=>"quarantotto",       order=>"048");
    $h->addX2(name=>49,   title=>"quarantanove",      order=>"049");
    $h->addX2(name=>50,   title=>"cinquanta",         order=>"050");
    $h->addX2(name=>51,   title=>"cinquantuno",       order=>"051");
    $h->addX2(name=>52,   title=>"cinquantadue",      order=>"052");
    $h->addX2(name=>53,   title=>"cinquantatre",      order=>"053");
    $h->addX2(name=>54,   title=>"cinquantaquattro",  order=>"054");
    $h->addX2(name=>55,   title=>"cinquantacinque",   order=>"055");
    $h->addX2(name=>56,   title=>"cinquantasei",      order=>"056");
    $h->addX2(name=>57,   title=>"cinquantasette",    order=>"057");
    $h->addX2(name=>58,   title=>"cinquantotto",      order=>"058");
    $h->addX2(name=>59,   title=>"cinquantanove",     order=>"059");
    $h->addX2(name=>60,   title=>"sessanta",          order=>"060");
    $h->addX2(name=>61,   title=>"sessantuno",        order=>"061");
    $h->addX2(name=>62,   title=>"sessantadue",       order=>"062");
    $h->addX2(name=>63,   title=>"sessantatre",       order=>"063");
    $h->addX2(name=>64,   title=>"sessantaquattro",   order=>"064");
    $h->addX2(name=>65,   title=>"sessantacinque",    order=>"065");
    $h->addX2(name=>66,   title=>"sessantasei",       order=>"066");
    $h->addX2(name=>67,   title=>"sessantasette",     order=>"067");
    $h->addX2(name=>68,   title=>"sessantotto",       order=>"068");
    $h->addX2(name=>69,   title=>"sessantanove",      order=>"069");
    $h->addX2(name=>70,   title=>"settanta",          order=>"070");
    $h->addX2(name=>71,   title=>"settantuno",        order=>"071");
    $h->addX2(name=>72,   title=>"settantadue",       order=>"072");
    $h->addX2(name=>73,   title=>"settantatre",       order=>"073");
    $h->addX2(name=>74,   title=>"settantaquattro",   order=>"074");
    $h->addX2(name=>75,   title=>"settantacinque",    order=>"075");
    $h->addX2(name=>76,   title=>"settantasei",       order=>"076");
    $h->addX2(name=>77,   title=>"settantasette",     order=>"077");
    $h->addX2(name=>78,   title=>"settantotto",       order=>"078");
    $h->addX2(name=>79,   title=>"settantanove",      order=>"079");
    $h->addX2(name=>80,   title=>"ottanta",           order=>"080");
    $h->addX2(name=>81,   title=>"ottantuno",         order=>"081");
    $h->addX2(name=>82,   title=>"ottantadue",        order=>"082");
    $h->addX2(name=>83,   title=>"ottantatre",        order=>"083");
    $h->addX2(name=>84,   title=>"ottantaquattro",    order=>"084");
    $h->addX2(name=>85,   title=>"ottantacinque",     order=>"085");
    $h->addX2(name=>86,   title=>"ottantasei",        order=>"086");
    $h->addX2(name=>87,   title=>"ottantasette",      order=>"087");
    $h->addX2(name=>88,   title=>"ottantotto",        order=>"088");
    $h->addX2(name=>89,   title=>"ottantanove",       order=>"089");
    $h->addX2(name=>90,   title=>"novanta",           order=>"090");
    $h->addX2(name=>91,   title=>"novantuno",         order=>"091");
    $h->addX2(name=>92,   title=>"novantadue",        order=>"092");
    $h->addX2(name=>93,   title=>"novantatre",        order=>"093");
    $h->addX2(name=>94,   title=>"novantaquattro",    order=>"094");
    $h->addX2(name=>95,   title=>"novantacinque",     order=>"095");
    $h->addX2(name=>96,   title=>"novantasei",        order=>"096");
    $h->addX2(name=>97,   title=>"novantasette",      order=>"097");
    $h->addX2(name=>98,   title=>"novantotto",        order=>"098");
    $h->addX2(name=>99,   title=>"novantanove",       order=>"099");
    $h->addX2(name=>100,  title=>"cento",             order=>"100");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Trace numbers from 0 to 9
#-------------------------------------------------------------------------------

 {package TraceNumbers09;
  use base qw(TheNumbersFrom1To100InEnglish);

  sub add($$$)
   {my ($h, $name, $title) = @_;
    $h->{$name} = {colour=>-1, name=>$name, prefix=>$name+0, title=>$title, order=>$name+0};
   }

  sub Load()
   {my $h = bless {};
    $h->add(1, "One");
    $h->add(2, "Two");
    $h->add(3, "Three");
    $h->add(4, "Four");
    $h->add(5, "Five");
    $h->add(6, "Six");
    $h->add(7, "Seven");
    $h->add(8, "Eight");
    $h->add(9, "Nine");
    $h->add(0, "Zero");

    return $h;
   }
 }

#-------------------------------------------------------------------------------
# Trace numbers from 0 to 9 in French
#-------------------------------------------------------------------------------

 {package TraceNumbers09InFrench;
  use base qw(TheNumbersFrom1To100InEnglish);

  sub add($$$)
   {my ($h, $name, $title) = @_;
    $h->{$name} = {colour=>-1, name=>$name, prefix=>$name+0, title=>$title, order=>$name+0};
   }

  sub Load()
   {my $h = bless {};
    $h->add( 0,  "Zéro");
    $h->add( 1,  "Un");
    $h->add( 2,  "Deux");
    $h->add( 3,  "Trois");
    $h->add( 4,  "Quatre");
    $h->add( 5,  "Cinq");
    $h->add( 6,  "Six");
    $h->add( 7,  "Sept");
    $h->add( 8,  "Huit");
    $h->add( 9,  "Neuf");

    return $h;
   }
 }

#-------------------------------------------------------------------------------
# Trace numbers from 0 to 9 in German
#-------------------------------------------------------------------------------

 {package TraceNumbers09InGerman;
  use base qw(TheNumbersFrom1To100InEnglish);

  sub add($$$)
   {my ($h, $name, $title) = @_;
    $h->{$name} = {colour=>-1, name=>$name, prefix=>$name+0, title=>$title, order=>$name+0};
   }

  sub Load()
   {my $h = bless {};
    $h->add( 0,  "null");
    $h->add( 1,  "eins");
    $h->add( 2,  "zwei");
    $h->add( 3,  "drei");
    $h->add( 4,  "vier");
    $h->add( 5,  "fünf");
    $h->add( 6,  "sechs");
    $h->add( 7,  "sieben");
    $h->add( 8,  "acht");
    $h->add( 9,  "neun");

    return $h;
   }
 }
#-------------------------------------------------------------------------------
# Transport Alphabet
#-------------------------------------------------------------------------------

 {package TransportAlphabet;
  use base qw(ColourApplication);

  my %h;
  sub add($$$$$$)
   {my ($group, $S40, $free, $colour, $name, $prefix) = @_;
    my  $p = substr($name, 0, $prefix);
    $h{$name} = {group=>$group, S40=>$S40, free=>$free, colour=>$colour,name=>$name, prefix=>$prefix, order=>$name};
   }

  sub Load()
   {add( 1, 1, 0, "edc900", "Airplane", 1);
    add(11, 0, 0, "ee7153", "Airport", 1);
    add(11, 0, 0, "ea5800", "Ambulance", 1);
    add(11, 0, 0, "a65c5a", "Auto rickshaw", 1);
    add( 1, 1, 0, "c73876", "Bus", 1);
    add( 1, 1, 0, "e86f26", "Camel", 1);
    add(11, 0, 0, "ed0043", "Canal", 1);
    add(11, 0, 0, "fdd13a", "Canoe", 1);
    add(11, 0, 0, "02b87e", "Cart", 1);
    add(11, 0, 0, "e57700", "Chair lift", 2);
    add( 2, 1, 0, "f108a1", "Donkey", 1);
    add(12, 0, 0, "f61403", "Dory", 1);
    add(12, 0, 0, "3aff68", "Electric tram", 1);
    add( 2, 1, 0, "f1843c", "Elephant", 1);
    add( 2, 1, 0, "fd5b2a", "Ferry", 1);
    add(12, 0, 0, "1d87ea", "Fire engine", 1);
    add(12, 0, 0, "3767f1", "Fly-over", 1);
    add(13, 0, 0, "fffc00", "Galleon", 1);
    add(13, 0, 1, "f6bf60", "Gig", 1);
    add( 3, 1, 0, "6e59c8", "Gondola", 1);
    add( 3, 1, 1, "b0dc00", "Helicopter", 1);
    add(13, 0, 0, "ff477b", "Horse box", 1);
    add( 3, 1, 1, "e7ad31", "Ice-cream van", 1);
    add(12, 0, 0, "40c60c", "Inflatable Dinghy", 1);
    add( 4, 1, 1, "bd6191", "Jeep", 1);
    add( 4, 1, 1, "66c4ff", "Kayak", 1);
    add( 4, 1, 0, "f66767", "Land Rover", 1);
    add(14, 0, 0, "f4b01f", "Lifeboat", 1);
    add(14, 0, 1, "efaa59", "Llama", 1);
    add(14, 0, 0, "2d87c6", "Lorry", 1);
    add( 5, 1, 0, "ffb555", "Mini", 1);
    add(15, 0, 0, "cf0088", "Minibus", 1);
    add(15, 0, 0, "d2ab36", "Minivan", 1);
    add(15, 0, 0, "fd2370", "Motorbike", 1);
    add(15, 0, 0, "d71e24", "Motorhome", 1);
    add(15, 0, 0, "f4d52f", "Motorway", 1);
    add(15, 0, 0, "ff6f7d", "Mountain bike", 1);
    add(15, 0, 0, "86affb", "Mule", 1);
    add( 5, 1, 0, "ff90a8", "Narrowboat", 1);
    add(15, 0, 0, "edea00", "Naval frigate", 1);
    add(15, 0, 0, "ca49e1", "Nepalese porter", 1);
    add(15, 0, 0, "cb3f23", "Nissan car", 1);
    add(15, 0, 0, "f667d9", "Observation wheel", 1);
    add( 5, 1, 0, "fca203", "Oil tanker", 1);
    add(15, 0, 0, "b84558", "Open top bus", 1);
    add(16, 0, 0, "60c300", "Pack horse", 1);
    add(16, 0, 0, "ffb853", "Pakistani bus", 1);
    add(16, 0, 0, "fb0448", "Pakistani lorry", 1);
    add( 6, 1, 0, "fd585e", "Paraglider", 1);
    add(16, 0, 0, "c63ee8", "Police car", 1);
    add(16, 0, 0, "9090f9", "Porter", 1);
    add( 6, 1, 0, "fff600", "Quad bike", 2);
    add(16, 0, 0, "2edcf1", "RIB", 1);
    add( 6, 1, 0, "95d525", "Racehorse", 1);
    add(16, 0, 0, "e06d40", "Racing bike", 1);
    add(16, 0, 0, "d2a315", "Railway Station", 1);
    add(16, 0, 0, "f64059", "Railway line", 1);
    add(16, 0, 0, "2e6e80", "Reed boat", 1);
    add(16, 0, 0, "966ff3", "Rickshaw", 1);
    add(16, 0, 0, "28bc19", "Road", 1);
    add(16, 0, 0, "ff5d16", "Road bike", 1);
    add(16, 0, 0, "fd3900", "Royal carriage", 1);
    add(17, 0, 0, "ffce00", "Scooter", 1);
    add(17, 0, 0, "abd000", "Scrambling bike", 1);
    add(17, 0, 0, "ff5a7d", "Ship", 2);
    add(17, 0, 0, "6a75ae", "Skis", 1);
    add( 7, 1, 0, "e07348", "Sports car", 1);
    add(17, 0, 0, "e3bb00", "Tanker", 1);
    add(17, 0, 0, "176ed9", "Toboggan", 1);
    add(17, 0, 0, "baa12c", "Tractor", 1);
    add( 7, 1, 0, "d23666", "Train", 1);
    add(17, 0, 0, "f3af38", "Trawler", 1);
    add( 7, 1, 0, "8155ff", "Unicycle", 1);
    add( 8, 1, 0, "6d850f", "Van", 1);
    add(18, 0, 0, "b0331e", "Vintage car", 1);
    add(18, 0, 0, "ff7e64", "Wagon", 1);
    add( 8, 1, 0, "87a022", "Wooden box pulley", 1);
    add( 9, 1, 0, "ec4d76", "Yak", 1);
    add( 9, 1, 0, "f928f7", "Zanzibar dhow", 1);
    add(19, 0, 0, "0087a4", "Zho", 1);
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Waterfalls
#-------------------------------------------------------------------------------

 {package Waterfalls;
#  use base qw(Application);
  use base qw(VideoApplication);

  sub Load()
   {my $h = bless {};
    $h->add($_) for 1..11;
    $h
   }
 }

#-------------------------------------------------------------------------------
# Weather vanes
#-------------------------------------------------------------------------------

 {package WeatherVanes;
  use base qw(ColourApplication);
  use Data::Dump qw(dump);

  my %h;
  sub add($)
   {my ($name) = @_;
    $h{$name} = {group=>1, name=>$name, colour=>ColourApplication::vividColour(), prefix=>1, order=>$name};
   }

  sub genJava($$)
   {my ($data, $app) = @_;
    my $s = '';
    for($app->things)
     {my $group  = $_->group;
      my $name   = $_->name;
      my $colour = $_->colour;
      my $prefix = $_->prefix;

      $s .= <<"END";
`  add($group, $prefix, 0x$colour, "$name");
END
     }
    $s
   }

  sub Load()
   {add("Arrow");
    add("Badger");
    add("Cockerel");
    add("Dog");
    add("Engine");
    add("Fox");
    add("Goose");
    add("Hunter");
    add("Insect");
    add("Jockey");
    add("King Cobra");
    add("Lifeboat");
    add("Mackerel");
    add("Nine Sails");
    add("Owl");
    add("Pennant");
    add("Quarter Horse");
    add("Reindeer");
    add("Surfer");
    add("Tern");
    add("Unbalanced Weathervane");
    add("Vixen");
    add("Whale");
    add("X-Ray");
    add("Yacht");
    add("Zebra Fox");
    return bless \%h;
   }
 }

#-------------------------------------------------------------------------------
# Wild animals
#-------------------------------------------------------------------------------

 {package WildAnimals;
  use base qw(Application);

  sub Load() {loadLanguage("en")}

  sub loadLanguage($)
   {my ($language) = @_;
    my $h = bless {};
    $h->add(1, "Antelope");
    $h->add(1, "Baboon");
    $h->add(1, "Bat");
    $h->add(1, "Buffalo");
    $h->add(1, "Camel");
    $h->add(1, "Cheetah");
    $h->add(1, "Civet");
    $h->add(1, "Crocodile");
    $h->add(1, "Dingo");
    $h->add(1, "Dolphin");
    $h->add(1, "Dove");
    $h->add(1, "Elephant");
    $h->add(1, "Emu");
    $h->add(1, "Fish");
    $h->add(1, "Frog");
    $h->add(1, "Gecko");
    $h->add(1, "Giraffe");
    $h->add(1, "Goat");
    $h->add(1, "Grasshopper");
    $h->add(1, "Hippopotamus");
    $h->add(1, "Hornet");
    $h->add(1, "Hyena");
    $h->add(1, "Jellyfish");
    $h->add(1, "Kangaroo");
    $h->add(1, "Koala");
    $h->add(1, "Leopard");
    $h->add(1, "Lion");
    $h->add(1, "Lizard");
    $h->add(1, "Marmot");
    $h->add(1, "Mongoose");
    $h->add(1, "Monkey");
    $h->add(1, "Moth");
    $h->add(1, "Mouse");
    $h->add(1, "Ostrich");
    $h->add(1, "Pelican");
    $h->add(1, "Pigeon") unless $language =~ /de/;                              # Per Wolfgang: no difference in German with dove
    $h->add(1, "Raven");
    $h->add(1, "Rhinoceros");
    $h->add(1, "Seagull");
    $h->add(1, "Seal");
    $h->add(1, "Snake");
    $h->add(1, "Stork");
    $h->add(1, "Swan");
    $h->add(1, "Tiger");
    $h->add(1, "Toad");
    $h->add(1, "Wallaby");
    $h->add(1, "Warthog");
    $h->add(1, "Wildebeest");
    $h->add(1, "Yak");
    $h->add(1, "Zebra");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Wild Animals in German
#-------------------------------------------------------------------------------

 {package WildAnimalsGerman;
  use base qw(Application);

  sub Load() {WildAnimals::loadLanguage("de")}
 }

#-------------------------------------------------------------------------------
# Wild Flowers
#-------------------------------------------------------------------------------

 {package WildFlowers;
  use base qw(Application);

  sub Load()
   {my $h = bless {};
    $h->add(1, "Acacia");
    $h->add(1, "Aster");
    $h->add(1, "Avens");
    $h->add(1, "Bellflower");
    $h->add(1, "Bluebell");
    $h->add(1, "Buddlea");
    $h->add(1, "Bugle");
    $h->add(1, "Buttercup");
    $h->add(1, "Campion");
    $h->add(1, "Clover");
    $h->add(1, "Columbine");
    $h->add(1, "Knapweed");
    $h->add(1, "Cowslip");
    $h->add(1, "Cranesbill");
    $h->add(1, "Crocus");
    $h->add(1, "Daffodil");
    $h->add(1, "Dandelion");
    $h->add(1, "Edelweiss");
    $h->add(1, "Eyebright");
    $h->add(1, "Forget-Me-Not");
    $h->add(1, "Gentian");
    $h->add(1, "Globeflower");
    $h->add(1, "Gorse");
    $h->add(1, "Hawthorn");
    $h->add(1, "Heather");
    $h->add(1, "Honeysuckle");
    $h->add(1, "Iris");
    $h->add(1, "Lily");
    $h->add(1, "Lousewort");
    $h->add(1, "Mallow");
    $h->add(1, "Mayweed");
    $h->add(1, "Orchid");
    $h->add(1, "Pasqueflower");
    $h->add(1, "Pink");
    $h->add(1, "Primrose");
    $h->add(1, "Rhododendron");
    $h->add(1, "Saxifrage");
    $h->add(1, "Scabious");
    $h->add(1, "Snowbell");
    $h->add(1, "Soapwort");
    $h->add(1, "Speedwell");
    $h->add(1, "Stonecrop");
    $h->add(1, "Teasel");
    $h->add(1, "Thistle");
    $h->add(1, "Thrift");
    $h->add(1, "Thyme");
    $h->add(1, "Toadflax");
    $h->add(1, "Vetch");
    $h->add(1, "Viola");
    $h->add(1, "Violet");
    $h
   }
 }

#-------------------------------------------------------------------------------
# Wild Flowers in German
#-------------------------------------------------------------------------------

 {package WildFlowersGerman;
  use base qw(Application);

  sub Load() {WildFlowers::Load()}
 }

#-------------------------------------------------------------------------------
# Word Endings
#-------------------------------------------------------------------------------

 {package WordEndings;
  use base qw(ColourApplication);
  use Data::Dump qw(dump);

  sub add($$$)
   {my ($h, $prefix, $word) = @_;
    my $colour = ColourApplication::vividColour();
    state $order = 1e6;                                                         # Crude but effective means of maintaing the ordering of theitems - which is crucial

    $h->{$word} = {colour=>$colour, prefix=>$prefix, name=>$word, order=>++$order};
   }

  sub Load()
   {my $h = bless{};
    $h->add(2, "Bag");
    $h->add(2, "Flag");
    $h->add(2, "Car");
    $h->add(2, "Jar");
    $h->add(2, "Cat");
    $h->add(2, "Hat");
    $h->add(2, "Map");
    $h->add(2, "Tap");
    $h->add(2, "Fan");
    $h->add(2, "Van");
    $h->add(3, "Ball");
    $h->add(3, "Wall");
    $h->add(3, "Calf");
    $h->add(3, "Half");
    $h->add(3, "Hand");
    $h->add(3, "Sand");
    $h->add(3, "Lamp");
    $h->add(3, "Ramp");
    $h->add(3, "Nail");
    $h->add(3, "Sail");
    $h->add(3, "Bread");
    $h->add(3, "Head");
    $h->add(3, "Heel");
    $h->add(3, "Wheel");
    $h->add(3, "Jeep");
    $h->add(3, "Sheep");
    $h->add(3, "Nest");
    $h->add(3, "West");
    $h->add(3, "Tent");
    $h->add(3, "Vent");
    $h->add(2, "Bed");
    $h->add(2, "Shed");
    $h->add(2, "Bee");
    $h->add(2, "Tree");
    $h->add(2, "Hoe");
    $h->add(2, "Toe");
    $h->add(2, "Leg");
    $h->add(2, "Peg");
    $h->add(2, "Men");
    $h->add(2, "Pen");
    $h->add(3, "Ape");
    $h->add(3, "Grape");
    $h->add(3, "Cart");
    $h->add(3, "Chart");
    $h->add(3, "Cave");
    $h->add(3, "Wave");
    $h->add(3, "Crane");
    $h->add(3, "Plane");
    $h->add(3, "Gate");
    $h->add(3, "Plate");
    $h->add(2, "Bun");
    $h->add(2, "Sun");
    $h->add(2, "Canoe");
    $h->add(2, "Shoe");
    $h->add(2, "Dog");
    $h->add(2, "Frog");
    $h->add(3, "Duck");
    $h->add(3, "Truck");
    $h->add(2, "Jug");
    $h->add(2, "Mug");
    $h->add(3, "Book");
    $h->add(3, "Hook");
    $h->add(3, "Door");
    $h->add(3, "Floor");
    $h->add(3, "Dove");
    $h->add(3, "Glove");
    $h->add(3, "Fork");
    $h->add(3, "Stork");
    $h->add(3, "Moon");
    $h->add(3, "Spoon");
    $h->add(3, "Boat");
    $h->add(3, "Goat");
    $h->add(3, "Foal");
    $h->add(3, "Goal");
    $h->add(3, "Hose");
    $h->add(3, "Rose");
    $h->add(4, "House");
    $h->add(4, "Mouse");
    $h->add(3, "Road");
    $h->add(3, "Toad");
    $h->add(2, "Church");
    $h->add(2, "Ostrich");
    $h->add(3, "Cloth");
    $h->add(3, "Moth");
    $h->add(2, "Cow");
    $h->add(2, "Sow");
    $h->add(2, "Daisy");
    $h->add(2, "Pansy");
    $h->add(3, "Dish");
    $h->add(3, "Fish");
    return $h;
   }
 }

#-------------------------------------------------------------------------------
# Yawning
#-------------------------------------------------------------------------------

 {package Yawning;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"Alligator",               );
    $h->addX2(  name=>"Alpaca",                  );
    $h->addX2(  name=>"Baboon",                  );
    $h->addX2(  name=>"Baby",                    );
    $h->addX2(  name=>"Cat",                     );
    $h->addX2(  name=>"Cheetah",                 );
    $h->addX2(  name=>"Chimpanzee",              );
    $h->addX2(  name=>"Clouded Leopard",         );
    $h->addX2(  name=>"Cockatiel",               );
    $h->addX2(  name=>"Crabeater Seal",          );
    $h->addX2(  name=>"Dog",                     );
    $h->addX2(  name=>"Elephant Seal",           );
    $h->addX2(  name=>"Ferret",                  );
    $h->addX2(  name=>"Fox",                     );
    $h->addX2(  name=>"Fur Seal",                );
    $h->addX2(  name=>"Giraffe",                 );
    $h->addX2(  name=>"Gorilla",                 );
    $h->addX2(  name=>"Herring Gull",            );
    $h->addX2(  name=>"Hippopotamus",            );
    $h->addX2(  name=>"Horse",                   );
    $h->addX2(  name=>"Jaguar",                  );
    $h->addX2(  name=>"Kangaroo",                );
    $h->addX2(  name=>"Koala",                   );
    $h->addX2(  name=>"Leopard",                 );
    $h->addX2(  name=>"Lion",                    );
    $h->addX2(  name=>"Lioness",                 );
    $h->addX2(  name=>"Lizard",                  );
    $h->addX2(  name=>"Llama",                   );
    $h->addX2(  name=>"Lynx",                    );
    $h->addX2(  name=>"Man",                     );
    $h->addX2(  name=>"Meerkat",                 );
    $h->addX2(  name=>"Monkey",                  );
    $h->addX2(  name=>"Orangutan",               );
    $h->addX2(  name=>"Otter",                   );
    $h->addX2(  name=>"Owl",                     );
    $h->addX2(  name=>"Polar Bear",              );
    $h->addX2(  name=>"Puma",                    );
    $h->addX2(  name=>"Rabbit",                  );
    $h->addX2(  name=>"Raccoon",                 );
    $h->addX2(  name=>"Rat",                     );
    $h->addX2(  name=>"Rattlesnake",             );
    $h->addX2(  name=>"Red Panda",               );
    $h->addX2(  name=>"Shoebill",                );
    $h->addX2(  name=>"Snow Leopard",            );
    $h->addX2(  name=>"Tiger",                   );
    $h->addX2(  name=>"Tortoise",                );
    $h->addX2(  name=>"White Tiger",             );
    $h->addX2(  name=>"Wild Dog",                );
    $h->addX2(  name=>"Wolf",                    );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Yosemite
#-------------------------------------------------------------------------------

 {package Yosemite;
  use base qw(Application);

  sub Load()
   {my $h = bless {};

    $h->addX2(  name=>"American Black Bear",                   );
    $h->addX2(  name=>"Bridalveil Fall",                       );
    $h->addX2(  name=>"California Tunnel Tree",                );
    $h->addX2(  name=>"Cathedral Peak",                        );
    $h->addX2(  name=>"Crimson Columbine",                     );
    $h->addX2(  name=>"El Capitan",                            );
    $h->addX2(  name=>"Emerald Pool and Silver Apron",         );
    $h->addX2(  name=>"Fairview Dome",                         );
    $h->addX2(  name=>"Glacier Point",                         );
    $h->addX2(  name=>"Grizzly Giant",                         );
    $h->addX2(  name=>"Half Dome",                             );
    $h->addX2(  name=>"Liberty Cap",                           );
    $h->addX2(  name=>"Mariposa Grove",                        );
    $h->addX2(  name=>"Merced River",                          );
    $h->addX2(  name=>"Middle Cathedral Rock",                 );
    $h->addX2(  name=>"Mirror Lake",                           );
    $h->addX2(  name=>"Mist Trail",                            );
    $h->addX2(  name=>"Monkeyflower",                          );
    $h->addX2(  name=>"Mountain Lion",                         );
    $h->addX2(  name=>"Mountain Pride",                        );
    $h->addX2(  name=>"Mule Deer",                             );
    $h->addX2(  name=>"Nevada Fall",                           );
    $h->addX2(  name=>"Ribbon Fall",                           );
    $h->addX2(  name=>"Sentinel Dome",                         );
    $h->addX2(  name=>"Sentinel Rock",                         );
    $h->addX2(  name=>"Spotted Owl",                           );
    $h->addX2(  name=>"Steller's Jay",                         );
    $h->addX2(  name=>"Taft Point",                            );
    $h->addX2(  name=>"Tenaya Lake",                           );
    $h->addX2(  name=>"The Three Brothers",                    );
    $h->addX2(  name=>"Three Chute Falls",                     );
    $h->addX2(  name=>"Tuolumne Meadows",                      );
    $h->addX2(  name=>"Vernal Fall",                           );
    $h->addX2(  name=>"Wapama Falls",                          );
    $h->addX2(  name=>"Waterwheel Falls",                      );
    $h->addX2(  name=>"Western Tanager",                       );
    $h->addX2(  name=>"Yellow-bellied Marmot",                 );
    $h->addX2(  name=>"Yosemite Falls",                        );
    $h->addX2(  name=>"Yosemite National Park",                );
    $h->addX2(  name=>"Yosemite Valley",                       );
    $h
   }
 }

#-------------------------------------------------------------------------------
# Music - names for numbered midi music
#-------------------------------------------------------------------------------

 {package Music;

  sub Numbers2Names()
   {bless {
1=>'Istancow',
2=>'Another Sunset',
18=>'Tranquility',
25=>'Trad Jazz',
33=>'A Hint of Heather',
36=>'Mexican Festival',
37=>'Pipers Parade',
40=>'Spanish Festival',
44=>'Passing Ships',
46=>'Love is Everything',
47=>'Midnight in Mexico',
49=>'Morning in Mexico',
50=>'A Beach Siesta',
51=>'Dance of the Spirits',
53=>'Three Kings stomp',
55=>'Spanish fiesta',
56=>'Lidls Jazz',
57=>'Jazz Stomp',
59=>'Like Never Before',
60=>'Memories',
61=>'Rambla Polka',
68=>'Happy Days', # Also 45
69=>'New Year Strut',
70=>'Almond Blossom Bop',
71=>'Caribbean Beach',
72=>'Cavtat Nights',
73=>'Loch Smith I',
74=>'Loch Smith II',
75=>'Teatime Jazz',
75=>'Bone Idle Blues',
76=>'Fiddle Round the Fire',
77=>'One For the Road',
78=>'Pipers Parade',
79=>'Sunshine',
80=>'Sunshine long',
81=>'Tijuana Tea Time',
82=>'East of West',
84=>'Dreaming',
85=>'Drifting',
86=>'The Sun Doesn\'t Shine',
87=>'Carrauntoohil Too High',
88=>'Hypnotic',
89=>'Killarney Ceilidh',
90=>'Military Band',
91=>'Mist on Lough Leane',
92=>'A Greek  Wedding',
93=>'A Night in Tangier',
94=>'All Together Now',
95=>'Intermission Jazz',
96=>'Rambla Rock',
97=>'The Gap of Dunloe',
98=>'A Taste of The 50s',
99=>'Adios Amigos',
100=>'Costos The Greek',
101=>'Den Haag Clog Dance',
102=>'Moon Rise',
103=>'Muckross',
104=>'Reggae Reggie',
105=>'Remember 1957',
106=>'Turkish Delight',
107=>'A Winter\'s Day',
108=>'CarraunTooHil not Too High for Ruth',
109=>'Foxtrot in The Rain',
110=>'Going Nowhere',
111=>'Nuevo Acapulco',
112=>'Another day, another sunset',

#Compilation1
113=>"Carrauntoohil",
114=>"A Winter's Day",
115=>"Beach Siesta",
116=>"Going Somewhere",
117=>"Nostalgia",
118=>"Happy Days",
119=>"Memories",
120=>"Love is Everything",
121=>"Sunset",
122=>"Adios Amigos",
     }
   }
 }

#-------------------------------------------------------------------------------
# Device list for Appia
#-------------------------------------------------------------------------------

sub appiaDevices()
 {my $s = readFile("../Vendors/Appia/devices.data");
  my @s = split(/\s*,\s*/, $s);
  grep {!/&/} @s
 }

#-------------------------------------------------------------------------------
# Ftp to Amazon.
#-------------------------------------------------------------------------------

sub ftpAmazon
 {my ($source, $target) = @_;

  writeFile("z/sftp.data", <<"END");
put $source $target
exit
END

  writeFile("z/sftpAnswers.data", "Y\n");

  if (1)
   {my $l = execCommand("psftp -v -bc -be -b z/sftp.data -l VM18CKOWWELVH98 -P 22 -pw OIl5HmmHI7 dar.amazon-digital-ftp.com < z/sftpAnswers.data 2>&1");
    if ($l =~ /Server sent command exit status 0/)
     {Log "    Transferred to $target from $source";
      return 1;
     }
    ::Confess "      Unable to transfer file $source to Amazon\n$l";
   }
 }

#-------------------------------------------------------------------------------
# Ftp apk (optional), screen shots, icons to Amazon or Amazon Underground
#-------------------------------------------------------------------------------

sub ftpApkAmazon
 {my ($source, $app, $subset, $genAndroid) = @_;
  my $group = $app->group;
  my $amazonId = oneOfVendor($genAndroid, qw(Amazon))      ? $app->amazonId($subset)
               : oneOfVendor($genAndroid, qw(UnderGround)) ? $app->amazonIdUnderGround($subset)
               : undef;

  if (!defined $amazonId)                                                       # Check we have an id
   {::Carp "      No Amazon Id for app $group subset $subset, so cannot ftp Apk to Amazon";
    return 0
   }

  my @u;                                                                        # Upload definitions
  my $version = strftime("%y_%m_%d__%H_%M_%S", localtime(time()));              # Version of apk for ftp although it is not obvious what this does at the other end

  if ($source)                                                                  # Only provide source if you want the apk uploaded
   {-e $source or ::Confess "      Cannot ftp app $group subset $subset to Amazon because file $source does not exist";
    my $targetApk   = $amazonId.'-com.appaapps.'.lc($app->apkName($subset, vendorNumber(qw(Amazon)))).'-Binary1.apk';
    push @u, ([$source, $targetApk]);
   }

  if (0)                                                                        # Icons
   {my $sourceIcon1 = $app->icon114;
    my $targetIcon1 = $amazonId.'-AD-ICON.png';
    my $sourceIcon2 = $app->icon512;
    my $targetIcon2 = $amazonId.'-AD-THUMB.png';
    push @u, ([$sourceIcon1, $targetIcon1], [$sourceIcon2, $targetIcon2]);
   }

  if (0)                                                                        # Screenshots that have a numeric code in them
   {for(@{$app->screenShots})
     {if (/(\d+)\.jpg\Z/)
       {my $s = sprintf("%02d", $1);
         push @u, [$_, $amazonId."-AD-SHOT$s.jpg"];
       }
     }
   }

  my $n = @u;                                                                   # Upload count
  my $r = 0;
  $r += ftpAmazon($_->[0], $_->[1]) for @u;                                     # Upload items
  ::Log "      Sent $r/$n $group to ", vendorCode($genAndroid), "\n";
  $r
 }

#-------------------------------------------------------------------------------
# Send icons and screen shots to Amazon or UnderGround
#-------------------------------------------------------------------------------

if ($sendAmazon)
 {my $v = $sendAmazon == 1 ? "Amazon" : "UnderGround";
  my $n = vendorNumber($v);
  my $c = 0;

  $c += byApp("  FTP to $v", sub
   {my ($app) = @_;
    my $C = 0;
    for my $s (0..$app->subsets)
     {next if $app->skipSubset($s, $n);
      $C += ftpApkAmazon(undef, $app, $s, $n);
     }
    $C
   });
  normalFinish "Sent $c apps to $v";
 }

#-------------------------------------------------------------------------------
# Amazon underground id for each app as produced by $printAmazonIds
#-------------------------------------------------------------------------------

sub undergroundId {+{
A3LetterWords=>"M2C2WPILL1VAFB",
A4LetterWords=>"M11U765ZYC2H7C",
A5LetterWords=>"M1VWS4RZMI9YE7",
Addition=>"M10U1LJXAXGP1",
Adjectives=>"M8QDUDD7HFDGM",
Alphabet=>"M1J5WU2ZTF6KLT",
AlpineFlowers=>"M37I1N1LE7G6I6",
AnimalAlphabet=>"M7JC38GHIR9Q0",
AnotherDayAnotherSunset=>"M1O6RMSHG5AVDK",
Antarctica=>"M21Q7JUTV3Z5AN",
Apes=>"M2P6M6SXD9AWJB",
Arches=>"M2LIU6LKR5WO9V",
Arctic=>"M30K5N4GHZRHYY",
BabyAnimals=>"M25XUQQWSX0CBY",
Bathroom=>"M27397UKF7A5DR",
Birds=>"M1SP3VC3CDCZOX",
Boats=>"M2TMUD5G3WUE69",
Body=>"MM89OJIZV6URZ",
Bollywood=>"MIES63DXCOA0C",
Boots=>"M14L6M5MV99FS6",
Bridges=>"MSSM0NQ8FI2O3",
BritishRoyalFamily=>"M1WWOFYT7KQ7IV",
Buildings=>"M1UGSI3NQOC0RB",
CarsCranesTrucksTrains=>"M10M5JJGOK77T0",
Cats=>"MOQ3VMG67J107",
Cereals=>"M1BUBKVL7GO5CT",
China=>"MSGKTBTZ9W2SF",
Chocolate=>"M2AXODOD6LRTRS",
Christmas=>"M2TGEEXAZYBL51",
Cliffs=>"MB1AQ16NYAP55",
CollectiveNounsInEnglish=>"MCWUY1R05U3GO",
Colours=>"M2TNX29RZSZHO1",
CoralReefFish=>"M1YCHF6XTTKKN2",
CountActionToysInEnglish=>"MK13J06UHUGQI",
CountAnimalsInEnglish=>"M3S14X1SKGSRZS",
CountChocolatesInEnglish=>"M3556G80Y8H4W7",
CountDogsInEnglish=>"M3905FY42UM396",
CountDollsInEnglish=>"M2IC1RO546ZBBM",
CountEuros=>"M3E138CFM0G0I8",
CountFlowersInEnglish=>"M1QOBYX0AGGFT2",
CountSoftToysInEnglish=>"MUDL0OS5V3X51",
CountTeddyBearsInEnglish=>"MNA1GIMF63TGU",
CountToyDogsInEnglish=>"M1CQC6NTSXA2CL",
Days=>"M26ANFRL08B208",
DeathValley=>"M273DXLIADSRSP",
Dogs=>"M3116RV9XSEKK2",
Dogs50=>"M2AEVXNLK9PSUR",
Dunloe=>"M2WCKHJ2AVZP2R",
Eyes=>"M3L81DOYIFCDIX",
FamousCityLandmarks=>"M1ZDNHD0SVAJ8",
FamousLondonLandmarks=>"MBQ8VBCI7XW5N",
FlowerAlphabet=>"M273CUGME137C3",
Fractions=>"M1LJ2FDSY9AQYC",
Fruits=>"M22J7VKQBUXXIO",
FunFair=>"M2WSV5K1OXEDQ7",
Functions=>"M3G9I2BU85FFDW",
GardenFlowers=>"M1ZVA6TE7JYACZ",
Gcd=>"MEQ3TBM5B600M",
GeographyManmadeFeatures=>"M1GUIY8YLF5KJ4",
GeographyNaturalFeatures=>"M2OFDFHBLR7X4Q",
GeometricShapes=>"M1QAMTHMX8RRA0",
Glacier=>"M1UME10ONLZMTB",
GreatOlympians=>"M1JCIE1SSY5AIZ",
GreatSportsCars=>"M2X3MMLG162KY0",
House=>"MCCWXDGHF8FOK",
HowHeavyAmI=>"M1HDEGQBOCMII7",
HowMuchPowerDoIUse=>"M8H3RKQ5BMRPJ",
Jets=>"M2BH1IQKWWO05Q",
India=>"M3LM4JLBTXOK69",
LakeDistrict=>"M39MI4JG9NPHF9",
ManOnTheMoon=>"M62QJSMUYS760",
MarineAquariumFish=>"M1XQRQOAG7CAQ8",
MonthsOfTheYearInEnglish=>"MAB9HIRS6F7R",
Noses=>"M1TPUKE657P2WA",
OodlesOfAnimals=>"M1EMYULRD3RMTG",
OrganicMolecules=>"M3ANDRMO2LC7PG",
Parks=>"MFI8YKEFXRFE9",
Past=>"MD3YJK4B4RPGO",
PawsAndClaws=>"M3A9RYM0VN4TJ9",
Penguins=>"MYKLGKNB3NRD9",
PlusOrMinus=>"M2V17U66CSG1H",
PuppyDogBreedsOne=>"M38590N1YFDWJ2",
PuppyDogBreedsTwo=>"M3GIFKKW8KT3IS",
RhymingKitchen=>"M3FSVFKLH32TK5",
Seasons=>"M1HW442A74QXG4",
Sharks=>"M3DB2374X2EX1T",
SignsoftheZodiac=>"MJ45S2K39KRQK",
SoftToyAlphabet=>"M822ND0408NXH",
Subtraction=>"M1GV6LHAA97DGS",
SunMoonsPlanets=>"MNRYHPA31QNMI",
SuperBirds=>"M263W7FXZ4Z03B",
SuperFish=>"M3U8A6FMW8VZO3",
SuperMammals=>"M3FR2VMIVHEQUT",
TeddyBearsInAction=>"M23Z6UF4V0J3X9",
TellTheTime=>"M37I1G6CP523HE",
TellTheTimeTwo=>"M2D0VF2RIFX3FY",
TestCricketersAustralia=>"M1TJOXVL2FQW1N",
TestCricketersIndia=>"M1177GT982R2N4",
TheNumbersFrom1To100InEnglish=>"M1L2U4X773YZVL",
ToBeOrNotToBe=>"M3BYVB1ZFAORAW",
Top10FastMotorBikes=>"MGO2XKV9D6ZIN",
Top10HighestMountains=>"M20YDX2A38FUG7",
Top10TallestAsiaPacificRollerCoasters=>"M2HXGIXDHOZD3D",
Top10TallestEuropeanRollerCoasters=>"M37LOD7PYRCZPA",
Top10TallestFerrisWheels=>"M1RB7PD05N226L",
Top10TallestNorthAmericanRollerCoasters=>"M3TYOUE0CAOPIV",
Top10TallestRollerCoasters=>"M3AK1FIW50HRW6",
Top10TallestTowers=>"MVUDJR7S26NWB",
Top20HorseBreeds=>"M21CR5V2CAU325",
ToyTransportAlphabet=>"M3IRJ11NLQ6ODT",
TraceNumbers09=>"M2K0YX5OTM6PM",
TransportAlphabet=>"M3UHXOI2Y9T7QG",
Trees=>"M1U7HGICNOUFKW",
Waterfalls=>"MLQZ5CDZXVDBB",
WeatherVanes=>"M1XMJVI511XUNZ",
WildAnimals=>"M2NYY5NQITJ9FL",
WildFlowers=>"M14C6PHE285EUH",
WordEndings=>"M30WLQVNRQXID8",
Yawning=>"M2ZM3OFFXQ8QUJ",
Yosemite=>"M24WOTBGV5JB1Z",
}}

#-------------------------------------------------------------------------------
# Send files to Amazon
#-------------------------------------------------------------------------------

sub amazonKeysToIds()
{{
 "584a524254344f333136374e46594c30" => {id=>"MLWYGZKY14X2A"   , group=>"A3LetterWords"                           , subset=>0},
 "89d952d879254092905fa91a8804baa9" => {id=>"MQBGIX60L3GYJ"   , group=>"A3LetterWords"                           , subset=>1},
 "8274b00d6c30427792081ff35632eed9" => {id=>"M1C0ZNBW52W192"  , group=>"A3LetterWords"                           , subset=>2},
 "1189f53553e04db59d7e0c9d5e19959b" => {id=>"M1JE8U6O6XIZJ5"  , group=>"A3LetterWords"                           , subset=>3},
 "d6e060dd5dd449c9a34f04e55bad7590" => {id=>"M23HXQJGTMOS4F"  , group=>"A4LetterWords"                           , subset=>0},
 "47cb0a6ba9974afca49a6d4f82bc8bb7" => {id=>"MCW9C5SWFT0GO"   , group=>"A4LetterWords"                           , subset=>1},
 "73d178bb019a49039faffdc884eb8f18" => {id=>"M3QGZL02LDQIIU"  , group=>"A4LetterWords"                           , subset=>2},
 "db4f710b712241a191e809ebf7226ca8" => {id=>"M33OPPWTJT147W"  , group=>"A4LetterWords"                           , subset=>3},
 "102facf9db274bec9909c86adae4d435" => {id=>"M1QO6171SH9P5E"  , group=>"A5LetterWords"                           , subset=>0},
 "c3d294d657be408e94cf8253b69e9361" => {id=>"M59EKP3YSFAKW"   , group=>"A5LetterWords"                           , subset=>1},
 "0caf2d39babb47f89ca5eab5fba9b89d" => {id=>"M13TV71E6PPYVE"  , group=>"A5LetterWords"                           , subset=>2},
 "b361d83bc841417290d529943000dcac" => {id=>"MU1ARGTLU6CPH"   , group=>"A5LetterWords"                           , subset=>3},
 "b2513221ef454ef493a024a878828ade" => {id=>"M1PBTJERS9DEP2"  , group=>"Addition"                                , subset=>0},
 "b2513221ef454ef493a024a878828ade" => {id=>"M1PBTJERS9DEP2"  , group=>"Addition"                                , subset=>1},
 "9935300482b440e48a8d3d0a21038db2" => {id=>"M1KS7Q39S6B6UA"  , group=>"Adjectives"                              , subset=>0},
 "59ed0a24eb1d4d8c862f2fe5a458e86f" => {id=>"MTAHCZPD0JFUM"   , group=>"Adjectives"                              , subset=>1},
 "61c1bf87b63c45eb9c86af4d1e7558c4" => {id=>"M2WBH2JMGXCHD0"  , group=>"Adjectives"                              , subset=>2},
 "3cf14d4a8fa44be598c696b71d92edcd" => {id=>"MM025LFV901F6"   , group=>"Adjectives"                              , subset=>3},
 "56464959503442304b33465841555351" => {id=>"MNMO8ZP30NSOB"   , group=>"Alphabet"                                , subset=>0},
 "607ea2ece533418bb4e85a90ca1a37ba" => {id=>"M2CYEMM42LDZ5R"  , group=>"Alphabet"                                , subset=>1},
 "b203c49b1075490793dddf2b89722207" => {id=>"M3BAU02A0QVUNS"  , group=>"Alphabet"                                , subset=>2},
 "5a689133b5c9411f9d4c380e704eca6e" => {id=>"M2TPJ9HNDOK18P"  , group=>"Alphabet"                                , subset=>3},
 "ba4c21539a154bf39946e8a8df0b2908" => {id=>"M14VK42A9YI9NO"  , group=>"AlpineFlowers"                           , subset=>0},
 "776e5751f8934f25808178748c114870" => {id=>"M1GYFXIGLCNNOO"  , group=>"AlpineFlowers"                           , subset=>1},
 "92ebfa6280d94dc8b33d257a5d9d04eb" => {id=>"M3QIUJVD866W3M"  , group=>"AlpineFlowers"                           , subset=>2},
 "584a53534a52474f323430544f314d37" => {id=>"M8N3O5KA16M9J"   , group=>"AnimalAlphabet"                          , subset=>0},
 "e89ec324363f4dac8b34364a70449679" => {id=>"M2D0Y3WWWUSDBE"  , group=>"AnimalAlphabet"                          , subset=>1},
 "07cd1b75f13b4bef81326d2a950b08e7" => {id=>"M389G1NZNUW03C"  , group=>"AnimalAlphabet"                          , subset=>2},
 "395258324f5a535a345535314657494b" => {id=>"M25D8STJ4SU93Z"  , group=>"AnotherDayAnotherSunset"                 , subset=>0},
 "95e987de8cb64bacba2f7936a5e739c7" => {id=>"M3P0YQUTXV9YTD"  , group=>"AnotherDayAnotherSunset"                 , subset=>1},
 "1c18075eff5e4bb8a62d3d4053f7f59a" => {id=>"MWNNDP7WLU4AR"   , group=>"Antarctica"                              , subset=>0},
 "922693e3f2344deb93afe6b40692bfad" => {id=>"M2TJEHISQNA1VV"  , group=>"Antarctica"                              , subset=>1},
 "ca1aec92cedc4d4c84bcf14a990be710" => {id=>"M3H92OQC8NFOJZ"  , group=>"Antarctica"                              , subset=>2},
 "53bede68c4b744ecbfcaafc9b62fbe14" => {id=>"M1HCN1VJCA5QQC"  , group=>"Apes"                                    , subset=>0},
 "fe4c73ae72fb4f51886294937dbe25c9" => {id=>"MFW0ARTBI52KP"   , group=>"Apes"                                    , subset=>1},
 "013349d4f44c46f7b44ff5b210de7aae" => {id=>"MEE07ILJLML5Q"   , group=>"Arches"                                  , subset=>0},
 "60686ac8dbfd4049bf283c47d4b785a3" => {id=>"M33TC6TDAW5QUU"  , group=>"Arches"                                  , subset=>1},
 "9d04d5e9565143beaa563b6b54593716" => {id=>"M2851V1OG3G3UT"  , group=>"Arctic"                                  , subset=>0},
 "faac4764634f423096c1ce790ef14567" => {id=>"M15HWWGTM2VVPH"  , group=>"Arctic"                                  , subset=>1},
 "e5239978671442f48133b38898507152" => {id=>"MK5TNCCI0DOM9"   , group=>"Arctic"                                  , subset=>2},
 "e78275bfed9549278c34587e582c7efe" => {id=>"M1V24V8AB942SG"  , group=>"BabyAnimals"                             , subset=>0},
 "87b91e67afee497ca562124f600b49c2" => {id=>"M4P9GGKC8QWWX"   , group=>"BabyAnimals"                             , subset=>1},
 "2cedebb6f882417ead2373ad7a5baa9a" => {id=>"M2A2YKYSMWPTMP"  , group=>"BabyAnimals"                             , subset=>2},
 "4b34474d514f50503736475957304e44" => {id=>"M2P2CBVJ4REKHB"  , group=>"Bathroom"                                , subset=>0},
 "958263588626481fad24aa9968aa7afe" => {id=>"M3J5I5KXRU25OJ"  , group=>"Bathroom"                                , subset=>1},
 "11018e318a184436978f28e07d5d4124" => {id=>"M3EWF9LXYDJ1P9"  , group=>"Bathroom"                                , subset=>2},
 "ff0d6fdbdd2944e1a4771e8d71d10ff8" => {id=>"M2R28W148K870F"  , group=>"Bathroom"                                , subset=>3},
 "dbd5304ba7a448faaa46d45c53cb35ff" => {id=>"M3RPVD15FF8K7D"  , group=>"Birds"                                   , subset=>0},
 "454b51626e2f43c1b3f64d390d66f791" => {id=>"M2JVVXDYTK4I9S"  , group=>"Birds"                                   , subset=>1},
 "e46b4424b2fc485ba45151d36b4362f6" => {id=>"MMEV9KRWVJIC8"   , group=>"Birds"                                   , subset=>2},
 "42373032395130483044564a5a564637" => {id=>"MJIUZXX1B5VD8"   , group=>"Boats"                                   , subset=>0},
 "7996a79b837946f69024c546348252be" => {id=>"MWRSLW6G3F9VL"   , group=>"Boats"                                   , subset=>1},
 "64c33fada4924a708c7e912c80e0e7b0" => {id=>"MJZJU7NN0HMZ3"   , group=>"Boats"                                   , subset=>2},
 "da36851ceaed4d80b6745f3750253c82" => {id=>"M3A9SNJWP76WZS"  , group=>"Body"                                    , subset=>0},
 "3570987ad6744bf0a570e264adda1083" => {id=>"M2ZC5SOSVLKOW5"  , group=>"Body"                                    , subset=>1},
 "1dcb5102b90a4a8d8ee6ed4134ab06b2" => {id=>"MPMXB7TSSZJHG"   , group=>"Body"                                    , subset=>2},
 "168eaf86d7ae46eb921420532a1c03a2" => {id=>"M3LISBHMZ8E6G8"  , group=>"Bollywood"                               , subset=>0},
 "58ae642f23504f9bb8028bec3e5914c4" => {id=>"M203VX7TBWBUXR"  , group=>"Bollywood"                               , subset=>1},
 "a728397042284911965fc4b1d551b13c" => {id=>"M33XXJYIOMM0W1"  , group=>"Bollywood"                               , subset=>2},
 "9df1863d425647ec97a27cc7b28b65da" => {id=>"M4M94DW4VWCKD"   , group=>"Boots"                                   , subset=>0},
 "9a64168c7b7148b28292b698bfc9d04b" => {id=>"M2KKZ79EEM7L33"  , group=>"Boots"                                   , subset=>1},
 "b00a5f5f1e0c439e9e63d6e8f0a723cd" => {id=>"M32FO1RH9T7VAE"  , group=>"Boots"                                   , subset=>2},
 "5376a84ac9f34eb49c66db3fc316a6a1" => {id=>"M29U47EL6SZG9H"  , group=>"Bridges"                                 , subset=>0},
 "5c84c3043a2f40b39133db7f462717b5" => {id=>"M2O371RUJ3V16X"  , group=>"Bridges"                                 , subset=>1},
 "8c5d5fee909a44928c9af3d19d7246a7" => {id=>"M3V4ZXGFRMUVCS"  , group=>"BritishRoyalFamily"                      , subset=>0},
 "7348e9e1a19c4b029cd6e621d983c9de" => {id=>"M33HK7R68UFVFG"  , group=>"BritishRoyalFamily"                      , subset=>1},
 "4c5555364f433834464d38443658385a" => {id=>"M3P0M63GVT1NL1"  , group=>"Buildings"                               , subset=>0},
 "4e9d8fbb01d948f8b287d5f6d0801f30" => {id=>"M1FKB2ODRSYBZT"  , group=>"Buildings"                               , subset=>1},
 "b4381a56e9134655b13ddbcc0fce1681" => {id=>"M5BBRROSJ2S7H"   , group=>"Buildings"                               , subset=>2},
 "3946455557514c43374956564159384c" => {id=>"M3J1M55T56JKRT"  , group=>"CarsCranesTrucksTrains"                  , subset=>0},
 "c7e8db9e696443ea857ec1092f9437ec" => {id=>"MO3KGQEHQDZW"    , group=>"CarsCranesTrucksTrains"                  , subset=>1},
 "b35a8521a3dd4644b464b07cae2b1a12" => {id=>"MMS4KZU4YMUZT"   , group=>"CarsCranesTrucksTrains"                  , subset=>2},
 "7bd2f1746453452fa883c270ef0761ff" => {id=>"M1GQ32EREQZA3M"  , group=>"Cats"                                    , subset=>0},
 "7fbe1236e7fd4daa85b28f2cd42f8541" => {id=>"M27YNCTZMR1CY6"  , group=>"Cats"                                    , subset=>1},
 "315a1901b2564d76bb8146bea276a5fa" => {id=>"M2G3WA2SAG38BQ"  , group=>"Cereals"                                 , subset=>0},
 "40a9b327884644c9b8632ffac6164ecb" => {id=>"MGQMYJE5N93ZW"   , group=>"Cereals"                                 , subset=>1},
 "f306d2f287434a9a8d6a2d2b9732aea0" => {id=>"M14CBV6S49OEQ"   , group=>"China"                                   , subset=>0},
 "dba50beb28414de08489b30cbecc638f" => {id=>"M3CKMRPYW1SRWK"  , group=>"China"                                   , subset=>1},
 "9c81b05cb48b4f5db63c2becaf203c6c" => {id=>"M1R7NNH06EJGR0"  , group=>"China"                                   , subset=>2},
 "3163a0ab8b1647c1b9e1f6b3dc100a26" => {id=>"M21871UXAXOZT4"  , group=>"Chocolate"                               , subset=>0},
 "b99f51797046467fba0d62e261eedaf1" => {id=>"M3VBCP3TPFDLDF"  , group=>"Chocolate"                               , subset=>1},
 "23625338a1ca4bccb83c05b38e7d3e82" => {id=>"M2D1IY6MWNMDDI"  , group=>"Chocolate"                               , subset=>2},
 "4a33781d00e041ef930f6f2c7fa78656" => {id=>"M32UP5WL9TRFMN"  , group=>"Christmas"                               , subset=>0},
 "95a793265b1f4374ba4ee22ee9370b52" => {id=>"M3T9D8HMAHPK3L"  , group=>"Christmas"                               , subset=>1},
 "35d81448243b41f4823205b8df6f28c2" => {id=>"M3SJFYW9S6TLDQ"  , group=>"Christmas"                               , subset=>2},
 "894aca337b96471fad304537bbbeb066" => {id=>"M1HN31TW527LT0"  , group=>"Cliffs"                                  , subset=>0},
 "666f509df0644370b763162a96f697a2" => {id=>"MTHBHY8V7WOJD"   , group=>"Cliffs"                                  , subset=>1},
 "4f47ff86f91344a4a9af48bf6ee75480" => {id=>"MMVK0JO4WJ6VD"   , group=>"Cliffs"                                  , subset=>2},
 "4d5343354d36494f324f414242585037" => {id=>"M1CR9B3E6KJZOS"  , group=>"CollectiveNounsInEnglish"                , subset=>0},
 "f06a037153204a93ad6093e8c1fe4250" => {id=>"M21VTN6PE4VD0M"  , group=>"CollectiveNounsInEnglish"                , subset=>1},
 "8fb61a18b71049828b60886db62d6137" => {id=>"M1SPQ4ON44PBUG"  , group=>"Colours"                                 , subset=>0},
 "766caef34d5041cfb92ba07139af4b2e" => {id=>"MLZZDPAZM3WYH"   , group=>"Colours"                                 , subset=>1},
 "0bea7615e3674ecfab16f8b918fa1f1a" => {id=>"M26I0LBIA03G1U"  , group=>"Colours"                                 , subset=>2},
 "4e380eaa927547319689f6d23648a89a" => {id=>"M2L0ET73NTWTX7"  , group=>"CoralReefFish"                           , subset=>0},
 "bbab0ba005554d2784122347dc7970f0" => {id=>"MJQ12MI1C8EQU"   , group=>"CoralReefFish"                           , subset=>1},
 "3c39786c1ba64621b1d03e35d2e7a889" => {id=>"MZTIR0KQIITTD"   , group=>"CoralReefFish"                           , subset=>2},
 "544a354f4a54484d4756433538513853" => {id=>"M150YUKHCRG89Z"  , group=>"CountActionToysInEnglish"                , subset=>0},
 "fc90f6a09bf54d1bbe5e0c8d58d3b0d3" => {id=>"M2417GVPD2RRIR"  , group=>"CountActionToysInEnglish"                , subset=>1},
 "5541504e4f57564c4c5949554a434d46" => {id=>"M2960U7GG5583R"  , group=>"CountAnimalsInEnglish"                   , subset=>0},
 "af0e195519884f75852e1cd30ca274d9" => {id=>"M1HVPZLY6RD386"  , group=>"CountAnimalsInEnglish"                   , subset=>1},
 "4251473039364833444a4e4d46563347" => {id=>"M3JKYQ5QX30L6"   , group=>"CountChocolatesInEnglish"                , subset=>0},
 "d04b5f8aea984c7cb910182a0810e776" => {id=>"M2PDJEQK6NGUUJ"  , group=>"CountChocolatesInEnglish"                , subset=>1},
 "50b3b38098f6494f8f316e6ce345d497" => {id=>"M2OGIF4OX9HNFD"  , group=>"CountChocolatesInEnglish"                , subset=>2},
 "4c4a49324644314b4245485755354e4f" => {id=>"M1VWEKFYEZ3GK3"  , group=>"CountDogsInEnglish"                      , subset=>0},
 "a6fbe1e16add4f99a0a3aa973a6a4cdb" => {id=>"M1DIAH8SHQU577"  , group=>"CountDogsInEnglish"                      , subset=>1},
 "57395941374c434d394f574e4b485254" => {id=>"M25ADOJ7XIUGNI"  , group=>"CountDollsInEnglish"                     , subset=>0},
 "2d561f1c42194e39a17766d94251a7f4" => {id=>"M1T7LC1SSH3BPO"  , group=>"CountDollsInEnglish"                     , subset=>1},
 "b9726d402cdf4ec5aae52246f63283bf" => {id=>"M3SPTOO70IP8Z5"  , group=>"CountDollsInEnglish"                     , subset=>2},
 "b6587805d67e4d45b7f5099e50607915" => {id=>"M1IPDVUMPJDS3G"  , group=>"CountEuros"                              , subset=>0},
 "d3b6827906b94d88a5d71dd6d30d4177" => {id=>"M37HK57JONFGJN"  , group=>"CountEuros"                              , subset=>1},
 "1568fa5666224c60ae622cfd9c443842" => {id=>"M2RPKGJCD2HJYB"  , group=>"CountEuros"                              , subset=>2},
 "574d4d314643413836334d5746494b4b" => {id=>"M3FGYVMMJQVL1S"  , group=>"CountFlowersInEnglish"                   , subset=>0},
 "b38cfcf5277f4f578dcf9a0421b842d0" => {id=>"M2I8GV1OQEFJV1"  , group=>"CountFlowersInEnglish"                   , subset=>1},
 "475942484e5a554657595356524f5748" => {id=>"M12RYVCL938VFI"  , group=>"CountSoftToysInEnglish"                  , subset=>0},
 "17419d04e6684870bbb9a7f830b0aef6" => {id=>"M3I20VCMJLWWYY"  , group=>"CountSoftToysInEnglish"                  , subset=>1},
 "5759426de08348fc8d8ecd57ef04d32a" => {id=>"MVZ3MSL5YZPD9"   , group=>"CountSoftToysInEnglish"                  , subset=>2},
 "4c324c4d394930344143555959304949" => {id=>"M3OJABJUWMIKMV"  , group=>"CountTeddyBearsInEnglish"                , subset=>0},
 "28433f26bbdf4aa99094472e4716cdac" => {id=>"M1VS93LIHC9I3L"  , group=>"CountTeddyBearsInEnglish"                , subset=>1},
 "54355a5846374230355849324f555657" => {id=>"M1HF8KA11J7D5Z"  , group=>"CountToyDogsInEnglish"                   , subset=>0},
 "7cea90a8e2ca481a889fc073bb81c2f5" => {id=>"M2UJH4UFLMY484"  , group=>"CountToyDogsInEnglish"                   , subset=>1},
 "4b494d3351595147565039384251494d" => {id=>"M2ZSDZXB8MKWY9"  , group=>"Days"                                    , subset=>0},
 "849354f5ffdb4650adb4b765e756f1f2" => {id=>"M36KGUICIX1B0R"  , group=>"Days"                                    , subset=>1},
 "5cae26a0e04e4f0e9385b9caaecca93e" => {id=>"MCD9FX3ZPFXG"    , group=>"DeathValley"                             , subset=>0},
 "dd37c4425b5949bebf5f6ab51ec8996f" => {id=>"M3PPH8RQB0Q5F6"  , group=>"DeathValley"                             , subset=>1},
 "1ae6480e46544556a37f235b8c71cf2d" => {id=>"M34B74XAXVDC5"   , group=>"Dogs"                                    , subset=>0},
 "36050226eec14a05aa65f79be051bd22" => {id=>"M32MARZZR34L4V"  , group=>"Dogs"                                    , subset=>1},
 "3982f3bf8e804462b86330af1df5832d" => {id=>"M30NL9D51FKV50"  , group=>"Dogs"                                    , subset=>2},
 "e25d419ce4bd446892250d9404ee482a" => {id=>"M223B8UK4JWK8U"  , group=>"Dogs"                                    , subset=>3},
 "5babc2dde98146819c1621c87bdb35d0" => {id=>"MZ7H83632X8E1"   , group=>"Dogs50"                                  , subset=>0},
 "241db870c70c4c5c909238c754f9c3b6" => {id=>"M39EDE1MQG4DCN"  , group=>"Dogs50"                                  , subset=>1},
 "feb8674b4bc84b5f87d4cf4607ed617e" => {id=>"M1DKZ4MFJW405K"  , group=>"Dogs50"                                  , subset=>2},
 "e3e08ffc532f4c8db512fb179d518456" => {id=>"M2DABWXFZCBJ4Z"  , group=>"Dunloe"                                  , subset=>0},
 "00c080b430404fabaac99e3bf8fa2f7e" => {id=>"M3Q72FBI2LU11A"  , group=>"Dunloe"                                  , subset=>1},
 "9e8232fc9a7f4b068dddb7b5671dcb10" => {id=>"MXAB37YB7WKHR"   , group=>"Eyes"                                    , subset=>0},
 "46e18d8348ce4aa1b9d3778509cf3fc0" => {id=>"M26GRCUBTTHQJ5"  , group=>"Eyes"                                    , subset=>1},
 "fbfe12162cc34b6eb477bcb5646ba3cb" => {id=>"M3VML01ZLNA8T4"  , group=>"Eyes"                                    , subset=>2},
 "5031353437524c5a4f4d4d4d3330384e" => {id=>"M3IS5QF8KPISBF"  , group=>"FamousCityLandmarks"                     , subset=>0},
 "92853fa204da4acc890194fd6dabd527" => {id=>"M3V6WA9A4IX4HL"  , group=>"FamousCityLandmarks"                     , subset=>1},
 "407adfb74bd0421bb8798c386eeb596f" => {id=>"M2PQL6WZI5M6GS"  , group=>"FamousCityLandmarks"                     , subset=>2},
 "88ab8e923490495083ef078871410fd1" => {id=>"M1IPFRZ9NYHCWZ"  , group=>"FamousCityLandmarks"                     , subset=>3},
 "54474d4c4658363352384c48384b5750" => {id=>"MQQW0PHB5IHSE"   , group=>"FamousLondonLandmarks"                   , subset=>0},
 "5ea99ad77828458d9918e985a5ec43ab" => {id=>"M21C9GPQBQGRL"   , group=>"FamousLondonLandmarks"                   , subset=>1},
 "971e2fb0adf34c9bb05e296b2ccab8e3" => {id=>"M251RZIRJ1IWXI"  , group=>"FamousLondonLandmarks"                   , subset=>2},
 "a8bd385cff114c8e9ccf3463b203db9e" => {id=>"M3JGFNMSLEKERX"  , group=>"FamousLondonLandmarks"                   , subset=>3},
 "335656324a4a4e573653485544474d41" => {id=>"M3MN3FS17U12ZK"  , group=>"FlowerAlphabet"                          , subset=>0},
 "2ba07a45bf924874a68aa77b747560d2" => {id=>"M3EAM983OU6IXQ"  , group=>"FlowerAlphabet"                          , subset=>1},
 "0b7a1a32a8374d01a24875197e2cc5e6" => {id=>"M1O4M8OMY9DEV4"  , group=>"FlowerAlphabet"                          , subset=>2},
 "665dffda881d47a08c754cfcb27a38fb" => {id=>"M32BQ46IBSGVHN"  , group=>"FlowerAlphabet"                          , subset=>3},
 "8223c719bf264ba08f82c3d73f746ceb" => {id=>"M2YF0VT145IU7S"  , group=>"Fractions"                               , subset=>0},
 "d045ef4038964ac3a5e1ccf1a33bdf0f" => {id=>"M3D74PH8EN55TD"  , group=>"Fractions"                               , subset=>1},
 "82bb739bc06048e7b096d62263aa6ee3" => {id=>"MZH5DVS1QD0W5"   , group=>"Fruits"                                  , subset=>0},
 "3c49e9c14a104e4396cde6f4fdaa0d64" => {id=>"M23BJP9U1OTGX7"  , group=>"Fruits"                                  , subset=>1},
 "ea6c8950adb14acab62c3e931406db46" => {id=>"M3NWZ7ZLHL1WQK"  , group=>"Fruits"                                  , subset=>2},
 "3144315447525255563746504b454e41" => {id=>"M3PLGOATOXJIIH"  , group=>"FunFair"                                 , subset=>0},
 "3574ef1863c04f50aa0cf68e789f34ce" => {id=>"M3HVATC3C207CV"  , group=>"FunFair"                                 , subset=>1},
 "aa3e98ed424146d1ae00fa819428d27d" => {id=>"M2TDK84XPMUXY"   , group=>"FunFair"                                 , subset=>2},
 "9e1a7f86bcb64dc8acabf6503392b6b3" => {id=>"MZARCACSNFG2U"   , group=>"FunFair"                                 , subset=>3},
 "ffb6ed90a09e4690ae66310ce984f921" => {id=>"M2I82NERCW2OKN"  , group=>"Functions"                               , subset=>0},
 "b0b2e6ba8bad4513929734af43b97b0c" => {id=>"M1L7LJKVDOM1AK"  , group=>"Functions"                               , subset=>1},
 "b3beb00dcda947f6ac2ae6ff793bb0cc" => {id=>"MWZHGP4A7VG00"   , group=>"Functions"                               , subset=>2},
 "565a0934fcb84f0a9c737307f7a4381a" => {id=>"M1CJ5TL01GA7EX"  , group=>"Functions"                               , subset=>3},
 "334b4f5531353930564d4334364c4153" => {id=>"M3EUJZJLF2VJUS"  , group=>"GardenFlowers"                           , subset=>0},
 "f254438be5c342c397e7320db6fb07b9" => {id=>"M2S17KLC81DERH"  , group=>"GardenFlowers"                           , subset=>1},
 "e18cc4de21784b27afde1a7434615365" => {id=>"M1N965KGZXANFS"  , group=>"GardenFlowers"                           , subset=>2},
 "d1e145618fbe4e02b15f865d7a33018b" => {id=>"M36QZNA5SR6XN0"  , group=>"Gcd"                                     , subset=>0},
 "d1e145618fbe4e02b15f865d7a33018b" => {id=>"M36QZNA5SR6XN0"  , group=>"Gcd"                                     , subset=>1},
 "565831564b57354844374f3950475548" => {id=>"M3FKE91R0FN4D9"  , group=>"GeographyManmadeFeatures"                , subset=>0},
 "e9063c7a7a304d14ab02292d10bef7b6" => {id=>"M1QARD9PMN6LY5"  , group=>"GeographyManmadeFeatures"                , subset=>1},
 "ef81e34601064dcd9f29901223a7d50c" => {id=>"M2EDOG7T2P8WMU"  , group=>"GeographyManmadeFeatures"                , subset=>2},
 "375757454545474144525956315a4f35" => {id=>"M2Z3AO4E10HNT1"  , group=>"GeographyNaturalFeatures"                , subset=>0},
 "28eddf17794d46dbaedb64f3966c78b0" => {id=>"M1YDXAO7FG48TG"  , group=>"GeographyNaturalFeatures"                , subset=>1},
 "a0e78e19af6c44f9b758b3180ad14cec" => {id=>"MRPYBQ9ME00TV"   , group=>"GeographyNaturalFeatures"                , subset=>2},
 "a3b15b3ebdaf4fd48bec4fa0698a54ec" => {id=>"M3TM5HV2FH42IK"  , group=>"GeometricShapes"                         , subset=>0},
 "7ddde72d668d4664847da5a0ffbd6e00" => {id=>"M9YLFKN0LIYT1"   , group=>"GeometricShapes"                         , subset=>1},
 "82ffe2f9688a47db833cedfe611f8ce2" => {id=>"M1R805HG3MLFRL"  , group=>"GeometricShapes"                         , subset=>2},
 "65d2ea1cb6874ff2abf00bf4782875b6" => {id=>"M2FARI1SHABMPC"  , group=>"Glacier"                                 , subset=>0},
 "6531bb5232614d9c9893ed0cc792852f" => {id=>"M2Y21WHGQOANK9"  , group=>"Glacier"                                 , subset=>1},
 "57334b345556334e4a4858564f433132" => {id=>"M1V7NT6HA06O88"  , group=>"GreatOlympians"                          , subset=>0},
 "590f93acba4642f193f5de7e29e6c214" => {id=>"M2OXFC9SSOQZTT"  , group=>"GreatOlympians"                          , subset=>1},
 "8232ae0c50e34063a1b013b2f6ef14f8" => {id=>"MA088AZY9YSHV"   , group=>"GreatOlympians"                          , subset=>2},
 "e34590b2ceb545cd9334b0c06c2c2567" => {id=>"M8EIHRE0KOA0Q"   , group=>"GreatOlympians"                          , subset=>3},
 "5445564636365036375a39304a545a33" => {id=>"M17BAUJVTJQMWA"  , group=>"GreatSportsCars"                         , subset=>0},
 "ac38b7fda78648d48336c11c4475facc" => {id=>"M3UWC5P6474UKA"  , group=>"GreatSportsCars"                         , subset=>1},
 "7797518d2f5042aba9b41525a6065324" => {id=>"M13VU5CA2CQI25"  , group=>"GreatSportsCars"                         , subset=>2},
 "0251c8e4a0b74ab6a5f2277219303e85" => {id=>"M1H84OFLQ41AEO"  , group=>"GreatSportsCars"                         , subset=>3},
 "d9ecd0b5e84d4855aca628177b70a041" => {id=>"M1YYQTAZGO00ML"  , group=>"House"                                   , subset=>0},
 "c41da47e089d4724a0bcb059cd9f677c" => {id=>"M1MNBBGCW2DXYC"  , group=>"House"                                   , subset=>1},
 "fa2adfc1398c4023a427dbfb21a0f2ca" => {id=>"MYFBT03H86VH8"   , group=>"House"                                   , subset=>2},
 "faf82090237b4f09964cd84f05f4f814" => {id=>"M3H5XCL6AXEHBA"  , group=>"HowHeavyAmI"                             , subset=>0},
 "d784267b11414c5f8f3d26357cecb8a1" => {id=>"M18N4K3CPUSFSP"  , group=>"HowHeavyAmI"                             , subset=>1},
 "0e97ad83f8764af4bd480b80e983fd78" => {id=>"M1UQYNQX9F91XJ"  , group=>"HowHeavyAmI"                             , subset=>2},
 "c5e3b796ad6f48f79c334aac300e3643" => {id=>"M26H4GCNJ3ZJ93"  , group=>"HowMuchPowerDoIUse"                      , subset=>0},
 "eda6557adc1a4700b75c25601183092e" => {id=>"M1NSWE1SJLNMDQ"  , group=>"HowMuchPowerDoIUse"                      , subset=>1},
 "cdb9f3caca944e2d9420bc5752ed1566" => {id=>"M1X719Y61OB4S6"  , group=>"Jets"                                    , subset=>0},
 "45d5a5e179e24f75b106035169128a6e" => {id=>"M3E1QH6N4MP2Q8"  , group=>"Jets"                                    , subset=>1},
 "adf276fa7ec34769aa847bf3caf1033f" => {id=>"M1J7B6PEWTB8ZI"  , group=>"Jets"                                    , subset=>2},
 "652c2ee6813f4ba7bb19f00b507f8824" => {id=>"M301TXRH1L3IIY"  , group=>"India"                                   , subset=>0},
 "8ca523ab90574cbba718a523f9ffe409" => {id=>"M3VEW9WY4IEGZ5"  , group=>"India"                                   , subset=>1},
 "a140c9f509414f0785d232d9d51538ff" => {id=>"MSZ01GMGYYT04"   , group=>"India"                                   , subset=>2},
 "0fdca8fe6b6a4cc884a58f698fc5c396" => {id=>"M3IVZ7F2OS3477"  , group=>"LakeDistrict"                            , subset=>0},
 "9ef594b028a046c0b711afb7861e5cdf" => {id=>"M9UJIL15P9IEV"   , group=>"LakeDistrict"                            , subset=>1},
 "9db03008778647718392c89b112eac4f" => {id=>"M3CY5GLQIPKRT3"  , group=>"LakeDistrict"                            , subset=>2},
 "372c9e7fc30942c58b720afbefdd55f7" => {id=>"MFZACF4VKOWHW"   , group=>"ManOnTheMoon"                            , subset=>0},
 "2b9aaf3805d24b25872ad4eb58967c58" => {id=>"M3SJ471L2RJAV2"  , group=>"ManOnTheMoon"                            , subset=>1},
 "5270ed6bf61b4065a5c0cabd27a76d85" => {id=>"M2JMBAWZ8XQB2O"  , group=>"ManOnTheMoon"                            , subset=>2},
 "edf61a03e93a48a9bbb9a0b19abc8350" => {id=>"M1UKXK0LM7WLR9"  , group=>"MarineAquariumFish"                      , subset=>0},
 "1d145524a7504626ad04be6bf424bd83" => {id=>"M11BI2A2CGZ633"  , group=>"MarineAquariumFish"                      , subset=>1},
 "2a174833c3c2467eabd5df06545f2944" => {id=>"M2U153R5SA6IY4"  , group=>"MarineAquariumFish"                      , subset=>2},
 "445939464b474a574238324d364c5132" => {id=>"M3CIW6CJJH9WNZ"  , group=>"MonthsOfTheYearInEnglish"                , subset=>0},
 "d3c7b689b45d4432ada25140c17cd8a5" => {id=>"M1269C31K5KN8X"  , group=>"MonthsOfTheYearInEnglish"                , subset=>1},
 "a3367cd2c107400299c52ddcafde4eb0" => {id=>"M1RHZXKLC45OI8"  , group=>"Noses"                                   , subset=>0},
 "b31bede41c344fddb8f906eddd37662b" => {id=>"M2GZGVTZYQ2TNH"  , group=>"Noses"                                   , subset=>1},
 "054966d749b74a7784c78a7f89342055" => {id=>"M2K0WVP52M7UYB"  , group=>"Noses"                                   , subset=>2},
 "fb01cf9c7c8c4815867b0f874b9ca7a5" => {id=>"M29ILCXOSLL4DS"  , group=>"OodlesOfAnimals"                         , subset=>0},
 "e84623d97cf24ba1a19dcc3e80062ddd" => {id=>"M9RUGA15MX0ID"   , group=>"OodlesOfAnimals"                         , subset=>1},
 "379c6794bed849cb9f81ba99196e1aff" => {id=>"M2VIMEANAX6I8M"  , group=>"OodlesOfAnimals"                         , subset=>2},
 "37325441434d39494f37414e434d3938" => {id=>"M352B2VRNIFZST"  , group=>"OrganicMolecules"                        , subset=>0},
 "f0c66eb438b5434c82a61fa70ed1ee06" => {id=>"M1ISQJDMBJ6QRF"  , group=>"OrganicMolecules"                        , subset=>1},
 "abde77df56424fb68510beb7b1376471" => {id=>"M2A1KOB6OEVEPA"  , group=>"OrganicMolecules"                        , subset=>2},
 "dcc4522c52064b6590909420cf5d88ae" => {id=>"M2QT3FFEHJQ9PI"  , group=>"OrganicMolecules"                        , subset=>3},
 "9e785ac46ac84267b3e1cdc3795ff5d3" => {id=>"M1VV45ZSL6KL6H"  , group=>"Parks"                                   , subset=>0},
 "0884529f6d9f4f3f9aa331598b63678c" => {id=>"M1YZZ6DZNRS1J8"  , group=>"Parks"                                   , subset=>1},
 "338ca79407cc4afe9740928ae0849f37" => {id=>"M3QM5R1KWUNO2B"  , group=>"Parks"                                   , subset=>2},
 "2711d6129bab43659ef2e6a60833db8b" => {id=>"M3PUD4SK0GEYOS"  , group=>"Past"                                    , subset=>0},
 "d565464ad0a24b8c9109cb0f562d934d" => {id=>"M6PSRW30TK574"   , group=>"Past"                                    , subset=>1},
 "9f32f382a6bd4b089902e817492097b5" => {id=>"M8JTZAH092IV"    , group=>"Past"                                    , subset=>2},
 "487f7285582346b084a1377a5c378dcc" => {id=>"M16G59O0OTBEUY"  , group=>"Past"                                    , subset=>3},
 "a05691c8369d46d2a2fc305ccaa26f57" => {id=>"M9FQGKQZW4YQ4"   , group=>"PawsAndClaws"                            , subset=>0},
 "7137e387bd5c4e21acd5c299af208a2f" => {id=>"M1BN5UWOSLQRK4"  , group=>"PawsAndClaws"                            , subset=>1},
 "7d876c86c7554783bf96d0a09ff24bca" => {id=>"M14U5A7S9JCW6B"  , group=>"PawsAndClaws"                            , subset=>2},
 "9492294576744ee89720f091534be581" => {id=>"M2788ORZR8GJGD"  , group=>"Penguins"                                , subset=>0},
 "798fa87305e44303bb97b4743bfbe58f" => {id=>"MEHP2OWZRADVN"   , group=>"Penguins"                                , subset=>1},
 "cdda38e3e3dc466e942fc373cf7ddd9f" => {id=>"MXAJIMHYKCTX7"   , group=>"PlusOrMinus"                             , subset=>0},
 "513658e3226a4c219fe49b4db244b7b2" => {id=>"M3EPDEJVAKD10S"  , group=>"PlusOrMinus"                             , subset=>1},
 "b94a69c9de974e22a096be2fc045ab55" => {id=>"M1HK156ES1FHJ1"  , group=>"PlusOrMinus"                             , subset=>2},
 "49464439334c33484b33443336493949" => {id=>"M8WBD3SW00RS7"   , group=>"PuppyDogBreedsOne"                       , subset=>0},
 "e623ee3a6fe348428b024ae0a52c0bce" => {id=>"M2NUZY0H5BFGVZ"  , group=>"PuppyDogBreedsOne"                       , subset=>1},
 "474e394b44494b4c4d38354459593149" => {id=>"M33B7XU6WIAOUK"  , group=>"PuppyDogBreedsTwo"                       , subset=>0},
 "ce384879793a4d0682be575c4ee9282a" => {id=>"M116250DOFARZ"   , group=>"PuppyDogBreedsTwo"                       , subset=>1},
 "5132524d47584259464d454135463532" => {id=>"M5UYN76442CPH"   , group=>"RhymingKitchen"                          , subset=>0},
 "55abd3edc4504147a9c28e85b1c2bed5" => {id=>"M2AOTBL30JIZ9Y"  , group=>"RhymingKitchen"                          , subset=>1},
 "ba6560c66a36454c80d1f7c64c2d5115" => {id=>"M3E6381YBUX4HL"  , group=>"RhymingKitchen"                          , subset=>2},
 "15549756e0ae4d039afd22e277d9a711" => {id=>"M1452NZA6DFKWA"  , group=>"RhymingKitchen"                          , subset=>3},
 "55ed09b642594d9088dad3880d08c774" => {id=>"M3RNHWR0L7T5VJ"  , group=>"Seasons"                                 , subset=>0},
 "e31f8969afed4b7aabd19e71e64c4f72" => {id=>"M29JNUBGZD0640"  , group=>"Seasons"                                 , subset=>1},
 "2dfca76f03444f88a0a4d238a410c71a" => {id=>"M1ZFGR4APUJZQD"  , group=>"Sharks"                                  , subset=>0},
 "6407c661b40c49b2ae59aa2814d9dce5" => {id=>"M3ESZM5OFZPKXG"  , group=>"Sharks"                                  , subset=>1},
 "360c25a4effd4341ad80fc5c44ba5a88" => {id=>"M7FIAU4XP6GP2"   , group=>"Sharks"                                  , subset=>2},
 "55485830365a46364849374847333551" => {id=>"M1J5WGYMFBC3I8"  , group=>"SignsoftheZodiac"                        , subset=>0},
 "d10a52d7237e4916bb3d6a1f7d4b7a84" => {id=>"M26K5MSGIGEE6J"  , group=>"SignsoftheZodiac"                        , subset=>1},
 "5338415a4b4233544d37413846425941" => {id=>"M150BM1D8MPKR"   , group=>"SoftToyAlphabet"                         , subset=>0},
 "05d8b8a1a4fc49e492aa2e9711c9ed8b" => {id=>"M1CGYGLDW2M7A"   , group=>"SoftToyAlphabet"                         , subset=>1},
 "d2b794b4400c431289a17da3eabf111b" => {id=>"M131A4PHOPRYE4"  , group=>"SoftToyAlphabet"                         , subset=>2},
 "878c6a18874242aea0d458b48d759d17" => {id=>"M3F7G01RG1NBHO"  , group=>"Subtraction"                             , subset=>0},
 "878c6a18874242aea0d458b48d759d17" => {id=>"M3F7G01RG1NBHO"  , group=>"Subtraction"                             , subset=>1},
 "30a321ec286c4e95b1271a76631d8dca" => {id=>"M2LRTWQPXJ3PT0"  , group=>"SunMoonsPlanets"                         , subset=>0},
 "2f49559cbde74cb7a193fb2bccb5be1e" => {id=>"M292TVEXKR4VJY"  , group=>"SunMoonsPlanets"                         , subset=>1},
 "9ffa6eda39084839a29cc39b1e2eb9bd" => {id=>"M2BRZTFE9JOFKA"  , group=>"SunMoonsPlanets"                         , subset=>2},
 "facd47c477db4a949919f0dc8a8f8323" => {id=>"M2Q15ZSBZLK2WM"  , group=>"SuperBirds"                              , subset=>0},
 "ffac014645334f99ab73685e1d81eca6" => {id=>"M3KSEMZZHE7LGV"  , group=>"SuperBirds"                              , subset=>1},
 "09d50ac30a7c49f6bf6cdb586106cf01" => {id=>"M1SJPO6MSJHHK2"  , group=>"SuperFish"                               , subset=>0},
 "e219a78733be4638a754e8fbcc3e2d76" => {id=>"M2PZQSG9KBQPDA"  , group=>"SuperFish"                               , subset=>1},
 "a9620875f97d48f288021680bbe7008f" => {id=>"MV6JOW4TQ9QEA"   , group=>"SuperMammals"                            , subset=>0},
 "75178ba6d12b4bac890a244dbe385862" => {id=>"M22NEF46J6357I"  , group=>"SuperMammals"                            , subset=>1},
 "c07a51b31d13407fbd21e567d4a5bc20" => {id=>"M2MQ3U18KK31JR"  , group=>"TeddyBearsInAction"                      , subset=>0},
 "ed2fc1fcb8144b7897b9364483cb95a5" => {id=>"M35N9GMI0LMK5E"  , group=>"TeddyBearsInAction"                      , subset=>1},
 "5649454f53544e395751343732315543" => {id=>"M30MYODE1TGP1Q"  , group=>"TellTheTime"                             , subset=>0},
 "ebf59772d0b64cd5a44c23d6e06b79e2" => {id=>"M28NURKX7LL0D5"  , group=>"TellTheTime"                             , subset=>1},
 "0e760f2c741c450b87f062ee2c6643b9" => {id=>"M1OIALTDN3WXB9"  , group=>"TellTheTimeTwo"                          , subset=>0},
 "17b527f53106407c902ebbbbb154921f" => {id=>"M3VHD8XITTHOUQ"  , group=>"TellTheTimeTwo"                          , subset=>1},
 "10e51da7c14b41de9fcc97ca6af43965" => {id=>"M3JP8BTK1EDMOZ"  , group=>"TestCricketersAustralia"                 , subset=>0},
 "3e8457ac16054e3984a20d93058e21dd" => {id=>"M3LMFO6VA65ZAA"  , group=>"TestCricketersAustralia"                 , subset=>1},
 "dee6efdd059648aba3dc3faa39bec34e" => {id=>"M1XNC1H8WVN5EK"  , group=>"TestCricketersAustralia"                 , subset=>2},
 "4392dc4805dd421a80e5cfa366072e42" => {id=>"M10X7YW49W93GP"  , group=>"TestCricketersIndia"                     , subset=>0},
 "9b434b8ca8f342c9bcb9d8f0fa2b0f56" => {id=>"M1ULQIDBL8HYAF"  , group=>"TestCricketersIndia"                     , subset=>1},
 "c749e796bd6b4026a1bdb485913d7f83" => {id=>"M3BTO7DNGIYYCH"  , group=>"TestCricketersIndia"                     , subset=>2},
 "453030453436344b45554d4842475355" => {id=>"MFK3GNJWXP4J2"   , group=>"TheNumbersFrom1To100InEnglish"           , subset=>0},
 "3685b0ee8e194d6bb356e2e3e4a20f69" => {id=>"M1XAIJP5FZ62RB"  , group=>"ToBeOrNotToBe"                           , subset=>0},
 "a1d0680dc2cf44c8bbf48f974a6787c4" => {id=>"M3PKE5T90YRKBT"  , group=>"ToBeOrNotToBe"                           , subset=>1},
 "363849385248555257424c424336474d" => {id=>"MIS749WZ6SZJT"   , group=>"Top10FastMotorBikes"                     , subset=>0},
 "a6b1c2e8476c4affa9caee222f4b7fe9" => {id=>"M31VERK44PF4PU"  , group=>"Top10FastMotorBikes"                     , subset=>1},
 "364e4b554e55524642494d3932414a4f" => {id=>"M2TDQP1J52XAVW"  , group=>"Top10HighestMountains"                   , subset=>0},
 "694713fe809145109375cc341a3acbf7" => {id=>"M3CWAIAFFTXUJQ"  , group=>"Top10HighestMountains"                   , subset=>1},
 "95848c851abb4e8091fbb4052ea7d45e" => {id=>"M1X532YVK2GCN2"  , group=>"Top10HighestMountains"                   , subset=>2},
 "0ebd00f6d1164a89bf8875e8e470962b" => {id=>"M7IJ54LTNE4CH"   , group=>"Top10TallestAsiaPacificRollerCoasters"   , subset=>0},
 "b3caf7b8660f4418be7a486bee10cc17" => {id=>"MX2AXZZMX08ER"   , group=>"Top10TallestAsiaPacificRollerCoasters"   , subset=>1},
 "01992f48cc274625a3fb191ae76f0a8f" => {id=>"M27P1NAEU4D98K"  , group=>"Top10TallestAsiaPacificRollerCoasters"   , subset=>2},
 "a60a8310833249e7afd4f6c36e1a3f00" => {id=>"M1RQIL9BKRLRVG"  , group=>"Top10TallestEuropeanRollerCoasters"      , subset=>0},
 "03c1716dd49748b796dd6c5c88c6f243" => {id=>"M1IS0J6T1ETEAX"  , group=>"Top10TallestEuropeanRollerCoasters"      , subset=>1},
 "68c41ed75db94d468450b10038e63b24" => {id=>"M2VAWX19WA2SI9"  , group=>"Top10TallestEuropeanRollerCoasters"      , subset=>2},
 "4d4454315247354c574c353832344c57" => {id=>"M1PJAC7JVEEMAB"  , group=>"Top10TallestFerrisWheels"                , subset=>0},
 "9707e280a930482da0fa241708d229b3" => {id=>"M39SBPD6PXW71S"  , group=>"Top10TallestFerrisWheels"                , subset=>1},
 "3398108c8eb64017a9138226b0e00e6d" => {id=>"MTQGRHXGJSNQI"   , group=>"Top10TallestFerrisWheels"                , subset=>2},
 "ddab4dea540441109b73f5314700f49e" => {id=>"MZAJCRUW8DO5E"   , group=>"Top10TallestNorthAmericanRollerCoasters" , subset=>0},
 "a5ea643393a348d2b7062e7f3d6d3e1e" => {id=>"M2RG5B52J0PJU2"  , group=>"Top10TallestNorthAmericanRollerCoasters" , subset=>1},
 "af0949ac44b6477a92bf17c5427d40f4" => {id=>"M2IW6QHEZ78KI2"  , group=>"Top10TallestNorthAmericanRollerCoasters" , subset=>2},
 "534e384d49584949513350514d4c5957" => {id=>"M1XXZPAI3MW5W8"  , group=>"Top10TallestRollerCoasters"              , subset=>0},
 "44ed024a9c724da9bb2acbf836cbe223" => {id=>"M2F7GLDMQRJUFJ"  , group=>"Top10TallestRollerCoasters"              , subset=>1},
 "37a834b6a77f4ca5abcf9107d2672d24" => {id=>"M35CRU4JGD1427"  , group=>"Top10TallestRollerCoasters"              , subset=>2},
 "504542485a494f4e53364c5753584452" => {id=>"M2SGG36414P8LS"  , group=>"Top10TallestTowers"                      , subset=>0},
 "a0c4b66663f042b9a05b10ed95762550" => {id=>"M26JS32GHQE6N"   , group=>"Top10TallestTowers"                      , subset=>1},
 "134f381985cc4b12a0b6a635f43c89c1" => {id=>"M3PQYE3V7HHJCH"  , group=>"Top20HorseBreeds"                        , subset=>0},
 "b57ecaf903ff42bc980f655340e81737" => {id=>"M3M4BU63S550U4"  , group=>"Top20HorseBreeds"                        , subset=>1},
 "ce04b190dbf74179be246c318a405943" => {id=>"M2781ZWRPG18Y6"  , group=>"Top20HorseBreeds"                        , subset=>2},
 "31415254494433313341455536334f43" => {id=>"MNV44225UK12Z"   , group=>"ToyTransportAlphabet"                    , subset=>0},
 "b3fc1d9e0a3a47c683479c4446b9bb1c" => {id=>"M1AIMRPRGRR23D"  , group=>"ToyTransportAlphabet"                    , subset=>1},
 "4833513744505a47354d323054303036" => {id=>"M3GAXZO3UTDC5C"  , group=>"TraceNumbers09"                          , subset=>0},
 "2a4ea2da47334d238af7a78c18e11f2f" => {id=>"M3SBF6KNV7ODY8"  , group=>"TraceNumbers09"                          , subset=>1},
 "56475151325041344f39584a4d315450" => {id=>"M1N48ZAER9UAEK"  , group=>"TransportAlphabet"                       , subset=>0},
 "960ba166058442058b47eafca2c2ab13" => {id=>"MVMLJZKX4EPCH"   , group=>"TransportAlphabet"                       , subset=>1},
 "ec2b5f006f864be3a61fc1d5dcc90d5e" => {id=>"M1UC4UF0BTP6PI"  , group=>"TransportAlphabet"                       , subset=>2},
 "21d601bce2494ef5afe71dc7c52554fe" => {id=>"M30SNK9T1PTYU"   , group=>"TransportAlphabet"                       , subset=>3},
 "a7b03594d2704f0f852a9b5794463b1f" => {id=>"M254CFPRV8QZ2C"  , group=>"Trees"                                   , subset=>0},
 "7a90f00294a94800998fd806b8bfb250" => {id=>"MJ3OUGI3HDQ6F"   , group=>"Trees"                                   , subset=>1},
 "44dc88fd108148d682582eefe21f4c95" => {id=>"M3CZVRASCCFDC2"  , group=>"Trees"                                   , subset=>2},
 "196e74ab0bd144d8998f6a8b61f7a2d2" => {id=>"M3BOV3I711MB8I"  , group=>"Waterfalls"                              , subset=>0},
 "f32e9802ae02443085ad50501f1f105c" => {id=>"M2QK1CBBPISBLI"  , group=>"Waterfalls"                              , subset=>1},
 "b35017a31fbe4e26aa39d108a65d14e1" => {id=>"M1A5IOGGDGNECU"  , group=>"Waterfalls"                              , subset=>2},
 "335a4c54423145455143435258584457" => {id=>"MPQF7HO7XXKR3"   , group=>"WeatherVanes"                            , subset=>0},
 "ba1140a401d64f519e20772054a5f3e3" => {id=>"M2KSVH4IW9PXE9"  , group=>"WeatherVanes"                            , subset=>1},
 "584e54565431504159304c36484f3636" => {id=>"MRJH2NJ1USEL8"   , group=>"WildAnimals"                             , subset=>0},
 "edfab9691a8c4dccad17cc7e285d4780" => {id=>"MLJP3SSYQZVUK"   , group=>"WildAnimals"                             , subset=>1},
 "10f32b4fb96b4d04ab67f472b39cd22f" => {id=>"M2TNFEEBSMU9HP"  , group=>"WildAnimals"                             , subset=>2},
 "43364151524437574857563234454945" => {id=>"M2X3SE1IZX4YOH"  , group=>"WildFlowers"                             , subset=>0},
 "3dedda43712947748417118b029e00af" => {id=>"MF2BR88IMLANY"   , group=>"WildFlowers"                             , subset=>1},
 "19c4b031d1864421ac255ef25b4cc003" => {id=>"M1KZ2PLWCWQIYR"  , group=>"WildFlowers"                             , subset=>2},
 "4431425341553455465453584e593744" => {id=>"MNCQQHLPEJHA2"   , group=>"WordEndings"                             , subset=>0},
 "4062e3146bf74b7fbda3bd7916a134c3" => {id=>"M1MGX0CMHHK1F6"  , group=>"WordEndings"                             , subset=>1},
 "8b94629ba5c644088beccd08342def5e" => {id=>"M7JAYXTJ8XLS8"   , group=>"WordEndings"                             , subset=>2},
 "1f793342eadf406688de8b6f0cc41301" => {id=>"M13XI6353S4ZRK"  , group=>"WordEndings"                             , subset=>3},
 "1ae63c38064f49a4ad416c4c447af05d" => {id=>"M2COU2XHBB9R5U"  , group=>"Yawning"                                 , subset=>0},
 "20f8e6e76e304a5389e622ae98baf41e" => {id=>"MYSW6YMG4MSB9"   , group=>"Yawning"                                 , subset=>1},
 "5652fd8d0acd43b09ca4b2347675c600" => {id=>"M2C8482FURDBBT"  , group=>"Yawning"                                 , subset=>2},
 "19684a48a28b47b9821c1e790ea07df3" => {id=>"M1MD3NDSJ01QKV"  , group=>"Yosemite"                                , subset=>0},
 "be5114fcc22248c3bf31bbe2ff2ab5fb" => {id=>"M25C3QVUDKG15O"  , group=>"Yosemite"                                , subset=>1},
 }}

sub amazonKeysToIds20150521()
{{
 "584a524254344f333136374e46594c30" => {id=>"M1YMQ3VA7J5JJ1"  , group=>"A3LetterWords"                   , subset=>0},
 "89d952d879254092905fa91a8804baa9" => {id=>"M207C5Z28NUTE4"  , group=>"A3LetterWords"                   , subset=>1},
 "8274b00d6c30427792081ff35632eed9" => {id=>"M1TDSN3LRUL2LA"  , group=>"A3LetterWords"                   , subset=>2},
 "1189f53553e04db59d7e0c9d5e19959b" => {id=>"MG07X7KDM56DW"   , group=>"A3LetterWords"                   , subset=>3},
 "d6e060dd5dd449c9a34f04e55bad7590" => {id=>"M1LIP86WAN125Y"  , group=>"A4LetterWords"                   , subset=>0},
 "47cb0a6ba9974afca49a6d4f82bc8bb7" => {id=>"MRI71HIR0UJII"   , group=>"A4LetterWords"                   , subset=>1},
 "73d178bb019a49039faffdc884eb8f18" => {id=>"M1VSEGW6PZXNAP"  , group=>"A4LetterWords"                   , subset=>2},
 "db4f710b712241a191e809ebf7226ca8" => {id=>"M3PSHALL8MQ1BO"  , group=>"A4LetterWords"                   , subset=>3},
 "102facf9db274bec9909c86adae4d435" => {id=>"M1GSYIEIQR0BNV"  , group=>"A5LetterWords"                   , subset=>0},
 "c3d294d657be408e94cf8253b69e9361" => {id=>"M1FTF9PCGFMIHS"  , group=>"A5LetterWords"                   , subset=>1},
 "0caf2d39babb47f89ca5eab5fba9b89d" => {id=>"M1C4BUOCNED30H"  , group=>"A5LetterWords"                   , subset=>2},
 "b361d83bc841417290d529943000dcac" => {id=>"M3C5CTAJDUIBG"   , group=>"A5LetterWords"                   , subset=>3},
 "9935300482b440e48a8d3d0a21038db2" => {id=>"M3EGMAVDSXBVF3"  , group=>"Adjectives"                      , subset=>0},
 "59ed0a24eb1d4d8c862f2fe5a458e86f" => {id=>"M1AT24SFSE2PZH"  , group=>"Adjectives"                      , subset=>1},
 "61c1bf87b63c45eb9c86af4d1e7558c4" => {id=>"M3H3JJRW6Q8UNX"  , group=>"Adjectives"                      , subset=>2},
 "3cf14d4a8fa44be598c696b71d92edcd" => {id=>"M3IWJR0PNO3623"  , group=>"Adjectives"                      , subset=>3},
 "56464959503442304b33465841555351" => {id=>"M2HUAQNBOL64V1"  , group=>"Alphabet"                        , subset=>0},
 "607ea2ece533418bb4e85a90ca1a37ba" => {id=>"M1Q8X3LZ2LNHF2"  , group=>"Alphabet"                        , subset=>1},
 "b203c49b1075490793dddf2b89722207" => {id=>"M3O84065T990BY"  , group=>"Alphabet"                        , subset=>2},
 "5a689133b5c9411f9d4c380e704eca6e" => {id=>"M2SR2XWIRSWBXL"  , group=>"Alphabet"                        , subset=>3},
 "ba4c21539a154bf39946e8a8df0b2908" => {id=>"M3FDBDWWU0BNQH"  , group=>"AlpineFlowers"                   , subset=>0},
 "776e5751f8934f25808178748c114870" => {id=>"MZZJ63RV7OSN1"   , group=>"AlpineFlowers"                   , subset=>1},
 "92ebfa6280d94dc8b33d257a5d9d04eb" => {id=>"M1I1TTPV09QNHC"  , group=>"AlpineFlowers"                   , subset=>2},
 "584a53534a52474f323430544f314d37" => {id=>"M1N6Y4L5G5Q0TX"  , group=>"AnimalAlphabet"                  , subset=>0},
 "e89ec324363f4dac8b34364a70449679" => {id=>"M3LDG1B4KCCEOV"  , group=>"AnimalAlphabet"                  , subset=>1},
 "07cd1b75f13b4bef81326d2a950b08e7" => {id=>"M2M3XQN7TNBGX7"  , group=>"AnimalAlphabet"                  , subset=>2},
 "395258324f5a535a345535314657494b" => {id=>"M3GHHB60ZMIVUM"  , group=>"AnotherDayAnotherSunset"         , subset=>0},
 "95e987de8cb64bacba2f7936a5e739c7" => {id=>"M1CH2JEOEGYSBX"  , group=>"AnotherDayAnotherSunset"         , subset=>1},
 "1c18075eff5e4bb8a62d3d4053f7f59a" => {id=>"M25CQMZSHKD0WG"  , group=>"Antarctica"                      , subset=>0},
 "922693e3f2344deb93afe6b40692bfad" => {id=>"M36OT0XDW1U36"   , group=>"Antarctica"                      , subset=>1},
 "ca1aec92cedc4d4c84bcf14a990be710" => {id=>"M3JW2FI0T02QLL"  , group=>"Antarctica"                      , subset=>2},
 "53bede68c4b744ecbfcaafc9b62fbe14" => {id=>"MZL264X79KKX4"   , group=>"Apes"                            , subset=>0},
 "fe4c73ae72fb4f51886294937dbe25c9" => {id=>"M13LSXU3YBUM3V"  , group=>"Apes"                            , subset=>1},
 "013349d4f44c46f7b44ff5b210de7aae" => {id=>"M1YHANUONJIYK"   , group=>"Arches"                          , subset=>0},
 "60686ac8dbfd4049bf283c47d4b785a3" => {id=>"M3GRFVTNJNGGYX"  , group=>"Arches"                          , subset=>1},
 "9d04d5e9565143beaa563b6b54593716" => {id=>"M2IEGZKD7YA5EC"  , group=>"Arctic"                          , subset=>0},
 "faac4764634f423096c1ce790ef14567" => {id=>"MSUTEHUHHAMVJ"   , group=>"Arctic"                          , subset=>1},
 "e5239978671442f48133b38898507152" => {id=>"M3SVMRIV26A4A"   , group=>"Arctic"                          , subset=>2},
 "e78275bfed9549278c34587e582c7efe" => {id=>"M2687EA8I2HC1F"  , group=>"BabyAnimals"                     , subset=>0},
 "87b91e67afee497ca562124f600b49c2" => {id=>"M25CEO0NYJT7XP"  , group=>"BabyAnimals"                     , subset=>1},
 "2cedebb6f882417ead2373ad7a5baa9a" => {id=>"M2H6LLU3NVR8LX"  , group=>"BabyAnimals"                     , subset=>2},
 "4b34474d514f50503736475957304e44" => {id=>"MMAVS9R5DHWGX"   , group=>"Bathroom"                        , subset=>0},
 "958263588626481fad24aa9968aa7afe" => {id=>"MOFKYLNERSNYL"   , group=>"Bathroom"                        , subset=>1},
 "11018e318a184436978f28e07d5d4124" => {id=>"M2IVBV3BKJIW3W"  , group=>"Bathroom"                        , subset=>2},
 "ff0d6fdbdd2944e1a4771e8d71d10ff8" => {id=>"M2DM6T5123OPAW"  , group=>"Bathroom"                        , subset=>3},
 "dbd5304ba7a448faaa46d45c53cb35ff" => {id=>"M2N4Q7OLMVXU0J"  , group=>"Birds"                           , subset=>0},
 "454b51626e2f43c1b3f64d390d66f791" => {id=>"M1UZNBFCVJ5CM0"  , group=>"Birds"                           , subset=>1},
 "e46b4424b2fc485ba45151d36b4362f6" => {id=>"M3SW1Y07D5HUGI"  , group=>"Birds"                           , subset=>2},
 "42373032395130483044564a5a564637" => {id=>"M3EB5JCPPD8HZX"  , group=>"Boats"                           , subset=>0},
 "7996a79b837946f69024c546348252be" => {id=>"MDRWE8Q6EEE74"   , group=>"Boats"                           , subset=>1},
 "64c33fada4924a708c7e912c80e0e7b0" => {id=>"M11AQK9CWT7RNR"  , group=>"Boats"                           , subset=>2},
 "da36851ceaed4d80b6745f3750253c82" => {id=>"M3LOFCHL2F4FTU"  , group=>"Body"                            , subset=>0},
 "3570987ad6744bf0a570e264adda1083" => {id=>"M1JL9FY9ZUL6QK"  , group=>"Body"                            , subset=>1},
 "1dcb5102b90a4a8d8ee6ed4134ab06b2" => {id=>"MNNIMXL0YR054"   , group=>"Body"                            , subset=>2},
 "168eaf86d7ae46eb921420532a1c03a2" => {id=>"M37YGMIGI257JU"  , group=>"Bollywood"                       , subset=>0},
 "58ae642f23504f9bb8028bec3e5914c4" => {id=>"M25VHVO48ZY8CL"  , group=>"Bollywood"                       , subset=>1},
 "a728397042284911965fc4b1d551b13c" => {id=>"MK3Z8062LYPK6"   , group=>"Bollywood"                       , subset=>2},
 "9df1863d425647ec97a27cc7b28b65da" => {id=>"M1A2DS928ZVKMU"  , group=>"Boots"                           , subset=>0},
 "9a64168c7b7148b28292b698bfc9d04b" => {id=>"MO46Q9G58CTH4"   , group=>"Boots"                           , subset=>1},
 "b00a5f5f1e0c439e9e63d6e8f0a723cd" => {id=>"M1RMJY8PD5AZJT"  , group=>"Boots"                           , subset=>2},
 "5376a84ac9f34eb49c66db3fc316a6a1" => {id=>"M1SQMORBFBLPAW"  , group=>"Bridges"                         , subset=>0},
 "5c84c3043a2f40b39133db7f462717b5" => {id=>"MIL3PGBTD9K5D"   , group=>"Bridges"                         , subset=>1},
 "8c5d5fee909a44928c9af3d19d7246a7" => {id=>"M2ZQHG363ABX7O"  , group=>"BritishRoyalFamily"              , subset=>0},
 "7348e9e1a19c4b029cd6e621d983c9de" => {id=>"M113WF3YJIOO6P"  , group=>"BritishRoyalFamily"              , subset=>1},
 "4c5555364f433834464d38443658385a" => {id=>"M39QQB2BSNEVF6"  , group=>"Buildings"                       , subset=>0},
 "4e9d8fbb01d948f8b287d5f6d0801f30" => {id=>"M26Q3FF1UVGGG3"  , group=>"Buildings"                       , subset=>1},
 "b4381a56e9134655b13ddbcc0fce1681" => {id=>"M1R0K1A7PBNFEM"  , group=>"Buildings"                       , subset=>2},
 "3946455557514c43374956564159384c" => {id=>"M4Y0CQI780MV7"   , group=>"CarsCranesTrucksTrains"          , subset=>0},
 "c7e8db9e696443ea857ec1092f9437ec" => {id=>"M3HLEPPMZZPMUA"  , group=>"CarsCranesTrucksTrains"          , subset=>1},
 "b35a8521a3dd4644b464b07cae2b1a12" => {id=>"M2WPU7MVLNJJQY"  , group=>"CarsCranesTrucksTrains"          , subset=>2},
 "7bd2f1746453452fa883c270ef0761ff" => {id=>"MW02KXK58GUAJ"   , group=>"Cats"                            , subset=>0},
 "7fbe1236e7fd4daa85b28f2cd42f8541" => {id=>"M30C0AG97BPSRX"  , group=>"Cats"                            , subset=>1},
 "315a1901b2564d76bb8146bea276a5fa" => {id=>"M55LGTG5YZP1R"   , group=>"Cereals"                         , subset=>0},
 "40a9b327884644c9b8632ffac6164ecb" => {id=>"M29VN6DXAMVIOV"  , group=>"Cereals"                         , subset=>1},
 "f306d2f287434a9a8d6a2d2b9732aea0" => {id=>"M1O0RDG5R1Q80O"  , group=>"China"                           , subset=>0},
 "dba50beb28414de08489b30cbecc638f" => {id=>"M158KD4Q8XIY3Q"  , group=>"China"                           , subset=>1},
 "9c81b05cb48b4f5db63c2becaf203c6c" => {id=>"M1BVUULBYV1XYV"  , group=>"China"                           , subset=>2},
 "3163a0ab8b1647c1b9e1f6b3dc100a26" => {id=>"M10SS94VZNX7P4"  , group=>"Chocolate"                       , subset=>0},
 "b99f51797046467fba0d62e261eedaf1" => {id=>"MSL6GGTGUULMD"   , group=>"Chocolate"                       , subset=>1},
 "23625338a1ca4bccb83c05b38e7d3e82" => {id=>"M3CUSE40NADBJJ"  , group=>"Chocolate"                       , subset=>2},
 "4a33781d00e041ef930f6f2c7fa78656" => {id=>"M2QWO3G3HKY0JL"  , group=>"Christmas"                       , subset=>0},
 "95a793265b1f4374ba4ee22ee9370b52" => {id=>"MJR4483GEKS1H"   , group=>"Christmas"                       , subset=>1},
 "35d81448243b41f4823205b8df6f28c2" => {id=>"M3998GW3IW9D53"  , group=>"Christmas"                       , subset=>2},
 "894aca337b96471fad304537bbbeb066" => {id=>"M38ETKTXZJM2OM"  , group=>"Cliffs"                          , subset=>0},
 "666f509df0644370b763162a96f697a2" => {id=>"MGS53MFPS0QVE"   , group=>"Cliffs"                          , subset=>1},
 "4f47ff86f91344a4a9af48bf6ee75480" => {id=>"M209EYM52D7SJ8"  , group=>"Cliffs"                          , subset=>2},
 "4d5343354d36494f324f414242585037" => {id=>"MAXVLU62Y3CN3"   , group=>"CollectiveNounsInEnglish"        , subset=>0},
 "f06a037153204a93ad6093e8c1fe4250" => {id=>"M1VA0DZQJT56DU"  , group=>"CollectiveNounsInEnglish"        , subset=>1},
 "8fb61a18b71049828b60886db62d6137" => {id=>"M2KSPAUCXNXWXS"  , group=>"Colours"                         , subset=>0},
 "766caef34d5041cfb92ba07139af4b2e" => {id=>"M1BQ6T7UQC3L6Y"  , group=>"Colours"                         , subset=>1},
 "0bea7615e3674ecfab16f8b918fa1f1a" => {id=>"MHLKJJPJK4C7G"   , group=>"Colours"                         , subset=>2},
 "4e380eaa927547319689f6d23648a89a" => {id=>"MT2O74LNZFYTC"   , group=>"CoralReefFish"                   , subset=>0},
 "bbab0ba005554d2784122347dc7970f0" => {id=>"MSYNNTEO34GQX"   , group=>"CoralReefFish"                   , subset=>1},
 "3c39786c1ba64621b1d03e35d2e7a889" => {id=>"M2RPQ35MGOTUY4"  , group=>"CoralReefFish"                   , subset=>2},
 "544a354f4a54484d4756433538513853" => {id=>"M3MWAI3I6WQ0UR"  , group=>"CountActionToysInEnglish"        , subset=>0},
 "fc90f6a09bf54d1bbe5e0c8d58d3b0d3" => {id=>"MYE7WYRG3ORVH"   , group=>"CountActionToysInEnglish"        , subset=>1},
 "5541504e4f57564c4c5949554a434d46" => {id=>"M2CFAGFJ9D4F8V"  , group=>"CountAnimalsInEnglish"           , subset=>0},
 "af0e195519884f75852e1cd30ca274d9" => {id=>"M23BBGJORNTW1M"  , group=>"CountAnimalsInEnglish"           , subset=>1},
 "4251473039364833444a4e4d46563347" => {id=>"M1HVC07D7JSGAE"  , group=>"CountChocolatesInEnglish"        , subset=>0},
 "d04b5f8aea984c7cb910182a0810e776" => {id=>"M3OKXKINMJQPLA"  , group=>"CountChocolatesInEnglish"        , subset=>1},
 "50b3b38098f6494f8f316e6ce345d497" => {id=>"M3UK5M41B06QDR"  , group=>"CountChocolatesInEnglish"        , subset=>2},
 "4c4a49324644314b4245485755354e4f" => {id=>"M3KUGPYKAJ2TXJ"  , group=>"CountDogsInEnglish"              , subset=>0},
 "a6fbe1e16add4f99a0a3aa973a6a4cdb" => {id=>"M2ZIF0GXAG5UA8"  , group=>"CountDogsInEnglish"              , subset=>1},
 "57395941374c434d394f574e4b485254" => {id=>"M1O0CIJE7GPECC"  , group=>"CountDollsInEnglish"             , subset=>0},
 "2d561f1c42194e39a17766d94251a7f4" => {id=>"MVCIPWV0YTOL7"   , group=>"CountDollsInEnglish"             , subset=>1},
 "b9726d402cdf4ec5aae52246f63283bf" => {id=>"M2TVX5EA1P3CWT"  , group=>"CountDollsInEnglish"             , subset=>2},
 "b6587805d67e4d45b7f5099e50607915" => {id=>"M1IPDVUMPJDS3G"  , group=>"CountEuros"                      , subset=>0},
 "d3b6827906b94d88a5d71dd6d30d4177" => {id=>"M37HK57JONFGJN"  , group=>"CountEuros"                      , subset=>1},
 "1568fa5666224c60ae622cfd9c443842" => {id=>"M2RPKGJCD2HJYB"  , group=>"CountEuros"                      , subset=>2},
 "574d4d314643413836334d5746494b4b" => {id=>"M3W3SD5HN4TPP1"  , group=>"CountFlowersInEnglish"           , subset=>0},
 "b38cfcf5277f4f578dcf9a0421b842d0" => {id=>"M18C6J58KJUCKP"  , group=>"CountFlowersInEnglish"           , subset=>1},
 "475942484e5a554657595356524f5748" => {id=>"M132SU3SH5N90Z"  , group=>"CountSoftToysInEnglish"          , subset=>0},
 "17419d04e6684870bbb9a7f830b0aef6" => {id=>"M2ZFPFK3TZW3TI"  , group=>"CountSoftToysInEnglish"          , subset=>1},
 "5759426de08348fc8d8ecd57ef04d32a" => {id=>"M19QWKGYQEW4S7"  , group=>"CountSoftToysInEnglish"          , subset=>2},
 "4c324c4d394930344143555959304949" => {id=>"MT3KFSLSWH5XB"   , group=>"CountTeddyBearsInEnglish"        , subset=>0},
 "28433f26bbdf4aa99094472e4716cdac" => {id=>"MO3UM20HM8M7N"   , group=>"CountTeddyBearsInEnglish"        , subset=>1},
 "54355a5846374230355849324f555657" => {id=>"M329ZTDHEMAXZX"  , group=>"CountToyDogsInEnglish"           , subset=>0},
 "7cea90a8e2ca481a889fc073bb81c2f5" => {id=>"M1SXEPGV825C1M"  , group=>"CountToyDogsInEnglish"           , subset=>1},
 "4b494d3351595147565039384251494d" => {id=>"M28FYC9GTNQDAN"  , group=>"Days"                            , subset=>0},
 "849354f5ffdb4650adb4b765e756f1f2" => {id=>"M1EQ0DDER5IWZR"  , group=>"Days"                            , subset=>1},
 "5cae26a0e04e4f0e9385b9caaecca93e" => {id=>"MXGJMGISJW85L"   , group=>"DeathValley"                     , subset=>0},
 "dd37c4425b5949bebf5f6ab51ec8996f" => {id=>"M1LD710CYFFHKJ"  , group=>"DeathValley"                     , subset=>1},
 "1ae6480e46544556a37f235b8c71cf2d" => {id=>"M2482K5XQVAVOS"  , group=>"Dogs"                            , subset=>0},
 "36050226eec14a05aa65f79be051bd22" => {id=>"M3LIPBASMPFHA7"  , group=>"Dogs"                            , subset=>1},
 "3982f3bf8e804462b86330af1df5832d" => {id=>"M32OLSNFRPPJFM"  , group=>"Dogs"                            , subset=>2},
 "e25d419ce4bd446892250d9404ee482a" => {id=>"MD8BT8M90B706"   , group=>"Dogs"                            , subset=>3},
 "5babc2dde98146819c1621c87bdb35d0" => {id=>"M1P2FJOLQPC5FX"  , group=>"Dogs50"                          , subset=>0},
 "241db870c70c4c5c909238c754f9c3b6" => {id=>"M3ORC6RUPSSGN8"  , group=>"Dogs50"                          , subset=>1},
 "feb8674b4bc84b5f87d4cf4607ed617e" => {id=>"M2EDY2CMMBEILA"  , group=>"Dogs50"                          , subset=>2},
 "e3e08ffc532f4c8db512fb179d518456" => {id=>"M23K7IW5DLJMLP"  , group=>"Dunloe"                          , subset=>0},
 "00c080b430404fabaac99e3bf8fa2f7e" => {id=>"M2BY9E78G093ZV"  , group=>"Dunloe"                          , subset=>1},
 "9e8232fc9a7f4b068dddb7b5671dcb10" => {id=>"M26FSB81V2S7H7"  , group=>"Eyes"                            , subset=>0},
 "46e18d8348ce4aa1b9d3778509cf3fc0" => {id=>"M164V21VV7J8KT"  , group=>"Eyes"                            , subset=>1},
 "fbfe12162cc34b6eb477bcb5646ba3cb" => {id=>"M23CUGAI58XCFA"  , group=>"Eyes"                            , subset=>2},
 "5031353437524c5a4f4d4d4d3330384e" => {id=>"M3G15XO15IJHXT"  , group=>"FamousCityLandmarks"             , subset=>0},
 "92853fa204da4acc890194fd6dabd527" => {id=>"M2LRC9WMU4JUGV"  , group=>"FamousCityLandmarks"             , subset=>1},
 "407adfb74bd0421bb8798c386eeb596f" => {id=>"MZGST0O4B9T00"   , group=>"FamousCityLandmarks"             , subset=>2},
 "88ab8e923490495083ef078871410fd1" => {id=>"M3LB15TK2PRUG"   , group=>"FamousCityLandmarks"             , subset=>3},
 "54474d4c4658363352384c48384b5750" => {id=>"MX9J2KSAE4PDQ"   , group=>"FamousLondonLandmarks"           , subset=>0},
 "5ea99ad77828458d9918e985a5ec43ab" => {id=>"M5H02EQQCQJJ"    , group=>"FamousLondonLandmarks"           , subset=>1},
 "971e2fb0adf34c9bb05e296b2ccab8e3" => {id=>"MH81NNPTXMI5C"   , group=>"FamousLondonLandmarks"           , subset=>2},
 "a8bd385cff114c8e9ccf3463b203db9e" => {id=>"M1P2EM8THQPX4T"  , group=>"FamousLondonLandmarks"           , subset=>3},
 "335656324a4a4e573653485544474d41" => {id=>"M1C4JVLU5WHBET"  , group=>"FlowerAlphabet"                  , subset=>0},
 "2ba07a45bf924874a68aa77b747560d2" => {id=>"M2USJ5FL4SFLCQ"  , group=>"FlowerAlphabet"                  , subset=>1},
 "0b7a1a32a8374d01a24875197e2cc5e6" => {id=>"M2NNNYWS8XYWX6"  , group=>"FlowerAlphabet"                  , subset=>2},
 "665dffda881d47a08c754cfcb27a38fb" => {id=>"MF7HDFLOCCAYT"   , group=>"FlowerAlphabet"                  , subset=>3},
 "82bb739bc06048e7b096d62263aa6ee3" => {id=>"M3SQPM4R9BPO56"  , group=>"Fruits"                          , subset=>0},
 "3c49e9c14a104e4396cde6f4fdaa0d64" => {id=>"MVSC9A5R8UCF"    , group=>"Fruits"                          , subset=>1},
 "ea6c8950adb14acab62c3e931406db46" => {id=>"M20STKQ8BVVXWV"  , group=>"Fruits"                          , subset=>2},
 "3144315447525255563746504b454e41" => {id=>"M16V11VB90XCVF"  , group=>"FunFair"                         , subset=>0},
 "3574ef1863c04f50aa0cf68e789f34ce" => {id=>"M27A8R999JXK5E"  , group=>"FunFair"                         , subset=>1},
 "aa3e98ed424146d1ae00fa819428d27d" => {id=>"M3UBV3A1QQNS38"  , group=>"FunFair"                         , subset=>2},
 "9e1a7f86bcb64dc8acabf6503392b6b3" => {id=>"M2JN2UG4J4GKNY"  , group=>"FunFair"                         , subset=>3},
 "ffb6ed90a09e4690ae66310ce984f921" => {id=>"M1DAA8NSOL5IH3"  , group=>"Functions"                       , subset=>0},
 "b0b2e6ba8bad4513929734af43b97b0c" => {id=>"M4PRIOHNYHY4D"   , group=>"Functions"                       , subset=>1},
 "b3beb00dcda947f6ac2ae6ff793bb0cc" => {id=>"M129030UUDUA85"  , group=>"Functions"                       , subset=>2},
 "565a0934fcb84f0a9c737307f7a4381a" => {id=>"M3AVB6ZY3O9S3F"  , group=>"Functions"                       , subset=>3},
 "334b4f5531353930564d4334364c4153" => {id=>"M1SB9RUN8RY2HE"  , group=>"GardenFlowers"                   , subset=>0},
 "f254438be5c342c397e7320db6fb07b9" => {id=>"M1GZS9WYA8HYYM"  , group=>"GardenFlowers"                   , subset=>1},
 "e18cc4de21784b27afde1a7434615365" => {id=>"M3OA10HOVBHQJ7"  , group=>"GardenFlowers"                   , subset=>2},
 "565831564b57354844374f3950475548" => {id=>"M3V16VPG7T2IMS"  , group=>"GeographyManmadeFeatures"        , subset=>0},
 "e9063c7a7a304d14ab02292d10bef7b6" => {id=>"M1RGR0VMM8F2XY"  , group=>"GeographyManmadeFeatures"        , subset=>1},
 "ef81e34601064dcd9f29901223a7d50c" => {id=>"MGA8GGTFLR9JB"   , group=>"GeographyManmadeFeatures"        , subset=>2},
 "375757454545474144525956315a4f35" => {id=>"MLLZYT5HCPIW0"   , group=>"GeographyNaturalFeatures"        , subset=>0},
 "28eddf17794d46dbaedb64f3966c78b0" => {id=>"M12W2BT0XT7FD6"  , group=>"GeographyNaturalFeatures"        , subset=>1},
 "a0e78e19af6c44f9b758b3180ad14cec" => {id=>"M8VJ3T9J7ANJG"   , group=>"GeographyNaturalFeatures"        , subset=>2},
 "a3b15b3ebdaf4fd48bec4fa0698a54ec" => {id=>"M2BM54FWFJ63CY"  , group=>"GeometricShapes"                 , subset=>0},
 "7ddde72d668d4664847da5a0ffbd6e00" => {id=>"M2W0CYGARD7KCK"  , group=>"GeometricShapes"                 , subset=>1},
 "82ffe2f9688a47db833cedfe611f8ce2" => {id=>"M318D8ABZ77AG5"  , group=>"GeometricShapes"                 , subset=>2},
 "65d2ea1cb6874ff2abf00bf4782875b6" => {id=>"M36S2UKKC7X7LC"  , group=>"Glacier"                         , subset=>0},
 "6531bb5232614d9c9893ed0cc792852f" => {id=>"M2XV1NXYNTNRFB"  , group=>"Glacier"                         , subset=>1},
 "57334b345556334e4a4858564f433132" => {id=>"M5UY37DHZZS9O"   , group=>"GreatOlympians"                  , subset=>0},
 "590f93acba4642f193f5de7e29e6c214" => {id=>"M91BS4ZV6VTP7"   , group=>"GreatOlympians"                  , subset=>1},
 "8232ae0c50e34063a1b013b2f6ef14f8" => {id=>"M3GNA35OMF77YQ"  , group=>"GreatOlympians"                  , subset=>2},
 "e34590b2ceb545cd9334b0c06c2c2567" => {id=>"M1CE540ZH6TLFW"  , group=>"GreatOlympians"                  , subset=>3},
 "5445564636365036375a39304a545a33" => {id=>"M1RERZR6S3C5ZL"  , group=>"GreatSportsCars"                 , subset=>0},
 "ac38b7fda78648d48336c11c4475facc" => {id=>"M2E2BYEUGLK133"  , group=>"GreatSportsCars"                 , subset=>1},
 "7797518d2f5042aba9b41525a6065324" => {id=>"M3T4XYO0F7LMUN"  , group=>"GreatSportsCars"                 , subset=>2},
 "0251c8e4a0b74ab6a5f2277219303e85" => {id=>"MHW9U5JW0RJKN"   , group=>"GreatSportsCars"                 , subset=>3},
 "d9ecd0b5e84d4855aca628177b70a041" => {id=>"MM6SW0O42HO73"   , group=>"House"                           , subset=>0},
 "c41da47e089d4724a0bcb059cd9f677c" => {id=>"M1T833RSRV4QOD"  , group=>"House"                           , subset=>1},
 "fa2adfc1398c4023a427dbfb21a0f2ca" => {id=>"M3RTXQECG8T8WX"  , group=>"House"                           , subset=>2},
 "faf82090237b4f09964cd84f05f4f814" => {id=>"M3PM6NWT287ULP"  , group=>"HowHeavyAmI"                     , subset=>0},
 "d784267b11414c5f8f3d26357cecb8a1" => {id=>"M2HR4UYIX58GTL"  , group=>"HowHeavyAmI"                     , subset=>1},
 "0e97ad83f8764af4bd480b80e983fd78" => {id=>"M3URLXGBAHVYOR"  , group=>"HowHeavyAmI"                     , subset=>2},
 "c5e3b796ad6f48f79c334aac300e3643" => {id=>"M2P9C1RXVATG5X"  , group=>"HowMuchPowerDoIUse"              , subset=>0},
 "eda6557adc1a4700b75c25601183092e" => {id=>"M2OOPJRH6T800E"  , group=>"HowMuchPowerDoIUse"              , subset=>1},
 "652c2ee6813f4ba7bb19f00b507f8824" => {id=>"M3P6EUYR49ZOIJ"  , group=>"India"                           , subset=>0},
 "8ca523ab90574cbba718a523f9ffe409" => {id=>"MTS8X14P8A6K7"   , group=>"India"                           , subset=>1},
 "a140c9f509414f0785d232d9d51538ff" => {id=>"M2L2OAIO70FF42"  , group=>"India"                           , subset=>2},
 "0fdca8fe6b6a4cc884a58f698fc5c396" => {id=>"M1Z445Y6G73IVC"  , group=>"LakeDistrict"                    , subset=>0},
 "9ef594b028a046c0b711afb7861e5cdf" => {id=>"M12D5UGC2KZLD8"  , group=>"LakeDistrict"                    , subset=>1},
 "9db03008778647718392c89b112eac4f" => {id=>"M2W8QY8Z7IKSKW"  , group=>"LakeDistrict"                    , subset=>2},
 "372c9e7fc30942c58b720afbefdd55f7" => {id=>"M3W0VXJIPU7GIP"  , group=>"ManOnTheMoon"                    , subset=>0},
 "2b9aaf3805d24b25872ad4eb58967c58" => {id=>"M2B2N3866BD2EM"  , group=>"ManOnTheMoon"                    , subset=>1},
 "5270ed6bf61b4065a5c0cabd27a76d85" => {id=>"MXQH44DB0NVOH"   , group=>"ManOnTheMoon"                    , subset=>2},
 "edf61a03e93a48a9bbb9a0b19abc8350" => {id=>"M3UC6ZGI1V6ZY3"  , group=>"MarineAquariumFish"              , subset=>0},
 "1d145524a7504626ad04be6bf424bd83" => {id=>"MU8KI8HCIEAFE"   , group=>"MarineAquariumFish"              , subset=>1},
 "2a174833c3c2467eabd5df06545f2944" => {id=>"M3L6PFH3BFCFHS"  , group=>"MarineAquariumFish"              , subset=>2},
 "445939464b474a574238324d364c5132" => {id=>"M44GZW8J0MFOQ"   , group=>"MonthsOfTheYearInEnglish"        , subset=>0},
 "d3c7b689b45d4432ada25140c17cd8a5" => {id=>"MIH7IHBTU3UIW"   , group=>"MonthsOfTheYearInEnglish"        , subset=>1},
 "a3367cd2c107400299c52ddcafde4eb0" => {id=>"MYRWALG1QYYP9"   , group=>"Noses"                           , subset=>0},
 "b31bede41c344fddb8f906eddd37662b" => {id=>"M1YTQPCS4CO51Y"  , group=>"Noses"                           , subset=>1},
 "054966d749b74a7784c78a7f89342055" => {id=>"M1DPQWPEYTMY0"   , group=>"Noses"                           , subset=>2},
 "fb01cf9c7c8c4815867b0f874b9ca7a5" => {id=>"M2C7GLUB2WU5YS"  , group=>"OodlesOfAnimals"                 , subset=>0},
 "e84623d97cf24ba1a19dcc3e80062ddd" => {id=>"MMBHT7D374IAQ"   , group=>"OodlesOfAnimals"                 , subset=>1},
 "379c6794bed849cb9f81ba99196e1aff" => {id=>"MH7C106E9DGT9"   , group=>"OodlesOfAnimals"                 , subset=>2},
 "37325441434d39494f37414e434d3938" => {id=>"M17J82Y5ZO3WS8"  , group=>"OrganicMolecules"                , subset=>0},
 "f0c66eb438b5434c82a61fa70ed1ee06" => {id=>"M3S5G3CIFVDTM5"  , group=>"OrganicMolecules"                , subset=>1},
 "abde77df56424fb68510beb7b1376471" => {id=>"M1JPPLSB5B9NLU"  , group=>"OrganicMolecules"                , subset=>2},
 "dcc4522c52064b6590909420cf5d88ae" => {id=>"M2L0YOJQX9L76E"  , group=>"OrganicMolecules"                , subset=>3},
 "9e785ac46ac84267b3e1cdc3795ff5d3" => {id=>"M272H1T028GIY4"  , group=>"Parks"                           , subset=>0},
 "0884529f6d9f4f3f9aa331598b63678c" => {id=>"M2AV4CQS8JAZSV"  , group=>"Parks"                           , subset=>1},
 "338ca79407cc4afe9740928ae0849f37" => {id=>"M2LDGFTASN93Y9"  , group=>"Parks"                           , subset=>2},
 "a05691c8369d46d2a2fc305ccaa26f57" => {id=>"MV62JSY6UUY3Z"   , group=>"PawsAndClaws"                    , subset=>0},
 "7137e387bd5c4e21acd5c299af208a2f" => {id=>"M19MQZGDT4AS91"  , group=>"PawsAndClaws"                    , subset=>1},
 "7d876c86c7554783bf96d0a09ff24bca" => {id=>"M2OMMQMD51G4PM"  , group=>"PawsAndClaws"                    , subset=>2},
 "9492294576744ee89720f091534be581" => {id=>"M1SXFYT8BG3NZU"  , group=>"Penguins"                        , subset=>0},
 "798fa87305e44303bb97b4743bfbe58f" => {id=>"MXEQ98L0IF8OM"   , group=>"Penguins"                        , subset=>1},
 "49464439334c33484b33443336493949" => {id=>"MVA9E7JI86XFL"   , group=>"PuppyDogBreedsOne"               , subset=>0},
 "e623ee3a6fe348428b024ae0a52c0bce" => {id=>"MEE6JEQVG9HIK"   , group=>"PuppyDogBreedsOne"               , subset=>1},
 "474e394b44494b4c4d38354459593149" => {id=>"M1CL147ANIQ2E3"  , group=>"PuppyDogBreedsTwo"               , subset=>0},
 "ce384879793a4d0682be575c4ee9282a" => {id=>"MT4TWE2RQH8JS"   , group=>"PuppyDogBreedsTwo"               , subset=>1},
 "5132524d47584259464d454135463532" => {id=>"M24PSIS6L142JW"  , group=>"RhymingKitchen"                  , subset=>0},
 "55abd3edc4504147a9c28e85b1c2bed5" => {id=>"M2MZ45HKK3NK8H"  , group=>"RhymingKitchen"                  , subset=>1},
 "ba6560c66a36454c80d1f7c64c2d5115" => {id=>"M3NXE9DS2B5BUK"  , group=>"RhymingKitchen"                  , subset=>2},
 "15549756e0ae4d039afd22e277d9a711" => {id=>"MU7RZLJBJ7MU4"   , group=>"RhymingKitchen"                  , subset=>3},
 "55ed09b642594d9088dad3880d08c774" => {id=>"M3RNHWR0L7T5VJ"  , group=>"Seasons"                         , subset=>0},
 "e31f8969afed4b7aabd19e71e64c4f72" => {id=>"M29JNUBGZD0640"  , group=>"Seasons"                         , subset=>1},
 "2dfca76f03444f88a0a4d238a410c71a" => {id=>"MWQYXBLYWIN6N"   , group=>"Sharks"                          , subset=>0},
 "6407c661b40c49b2ae59aa2814d9dce5" => {id=>"MQCGJFZPKOV1G"   , group=>"Sharks"                          , subset=>1},
 "360c25a4effd4341ad80fc5c44ba5a88" => {id=>"MW1MLM073ICSL"   , group=>"Sharks"                          , subset=>2},
 "55485830365a46364849374847333551" => {id=>"M22024DAHZWH47"  , group=>"SignsoftheZodiac"                , subset=>0},
 "d10a52d7237e4916bb3d6a1f7d4b7a84" => {id=>"MXBTTMDCUSPUB"   , group=>"SignsoftheZodiac"                , subset=>1},
 "5338415a4b4233544d37413846425941" => {id=>"M37MCIXPVZG0VW"  , group=>"SoftToyAlphabet"                 , subset=>0},
 "05d8b8a1a4fc49e492aa2e9711c9ed8b" => {id=>"M3SJSUDKSTY38Z"  , group=>"SoftToyAlphabet"                 , subset=>1},
 "d2b794b4400c431289a17da3eabf111b" => {id=>"M1A7RV4Y2CEDPQ"  , group=>"SoftToyAlphabet"                 , subset=>2},
 "30a321ec286c4e95b1271a76631d8dca" => {id=>"M3NIK4DZWJ2174"  , group=>"SunMoonsPlanets"                 , subset=>0},
 "2f49559cbde74cb7a193fb2bccb5be1e" => {id=>"M3U8FHU8IMODYT"  , group=>"SunMoonsPlanets"                 , subset=>1},
 "9ffa6eda39084839a29cc39b1e2eb9bd" => {id=>"M1M5MICE8J4R72"  , group=>"SunMoonsPlanets"                 , subset=>2},
 "facd47c477db4a949919f0dc8a8f8323" => {id=>"MWO5LHLDK86V0"   , group=>"SuperBirds"                      , subset=>0},
 "ffac014645334f99ab73685e1d81eca6" => {id=>"M2E5LRVG7LT52K"  , group=>"SuperBirds"                      , subset=>1},
 "09d50ac30a7c49f6bf6cdb586106cf01" => {id=>"ME463CB9V8T90"   , group=>"SuperFish"                       , subset=>0},
 "e219a78733be4638a754e8fbcc3e2d76" => {id=>"M1C3I7IKXSGDCU"  , group=>"SuperFish"                       , subset=>1},
 "a9620875f97d48f288021680bbe7008f" => {id=>"M1R5JXB66VOL79"  , group=>"SuperMammals"                    , subset=>0},
 "75178ba6d12b4bac890a244dbe385862" => {id=>"M21DFKB1DSFWTR"  , group=>"SuperMammals"                    , subset=>1},
 "c07a51b31d13407fbd21e567d4a5bc20" => {id=>"M31MP20YYZS33L"  , group=>"TeddyBearsInAction"              , subset=>0},
 "ed2fc1fcb8144b7897b9364483cb95a5" => {id=>"M1QFRDC1OIQOAL"  , group=>"TeddyBearsInAction"              , subset=>1},
 "5649454f53544e395751343732315543" => {id=>"M37YUTZ8DNJF72"  , group=>"TellTheTime"                     , subset=>0},
 "ebf59772d0b64cd5a44c23d6e06b79e2" => {id=>"MHK04KEE44Y2N"   , group=>"TellTheTime"                     , subset=>1},
 "0e760f2c741c450b87f062ee2c6643b9" => {id=>"M3OJ1IQVYI5NWX"  , group=>"TellTheTimeTwo"                  , subset=>0},
 "17b527f53106407c902ebbbbb154921f" => {id=>"MZV2PPSXJ04RA"   , group=>"TellTheTimeTwo"                  , subset=>1},
 "10e51da7c14b41de9fcc97ca6af43965" => {id=>"MPVB56X79CPYI"   , group=>"TestCricketersAustralia"         , subset=>0},
 "3e8457ac16054e3984a20d93058e21dd" => {id=>"MUFT9F26YBTIS"   , group=>"TestCricketersAustralia"         , subset=>1},
 "dee6efdd059648aba3dc3faa39bec34e" => {id=>"M10YJILU59LJVN"  , group=>"TestCricketersAustralia"         , subset=>2},
 "4392dc4805dd421a80e5cfa366072e42" => {id=>"M3T5DW8UAE3H4C"  , group=>"TestCricketersIndia"             , subset=>0},
 "9b434b8ca8f342c9bcb9d8f0fa2b0f56" => {id=>"M1ULQIDBL8HYAF"  , group=>"TestCricketersIndia"             , subset=>1},
 "c749e796bd6b4026a1bdb485913d7f83" => {id=>"M3BTO7DNGIYYCH"  , group=>"TestCricketersIndia"             , subset=>2},
 "453030453436344b45554d4842475355" => {id=>"M1RCHLE7LL1HGU"  , group=>"TheNumbersFrom1To100InEnglish"   , subset=>0},
 "453030453436344b45554d4842475355" => {id=>"M1RCHLE7LL1HGU"  , group=>"TheNumbersFrom1To100InEnglish"   , subset=>1},
 "3685b0ee8e194d6bb356e2e3e4a20f69" => {id=>"M2BT1KN5BSALNH"  , group=>"ToBeOrNotToBe"                   , subset=>0},
 "a1d0680dc2cf44c8bbf48f974a6787c4" => {id=>"M16VN83SUPV4GS"  , group=>"ToBeOrNotToBe"                   , subset=>1},
 "363849385248555257424c424336474d" => {id=>"M1QZA6SFZ5LQDI"  , group=>"Top10FastMotorBikes"             , subset=>0},
 "a6b1c2e8476c4affa9caee222f4b7fe9" => {id=>"M1E1H63ZIHFJME"  , group=>"Top10FastMotorBikes"             , subset=>1},
 "364e4b554e55524642494d3932414a4f" => {id=>"M1AJVCX0KNRSKB"  , group=>"Top10HighestMountains"           , subset=>0},
 "694713fe809145109375cc341a3acbf7" => {id=>"M31LOQ27HFBK6W"  , group=>"Top10HighestMountains"           , subset=>1},
 "95848c851abb4e8091fbb4052ea7d45e" => {id=>"M3HPOP8QJY94QC"  , group=>"Top10HighestMountains"           , subset=>2},
 "0ebd00f6d1164a89bf8875e8e470962b" => {id=>"MP6560W0ZSMTR"   , group=>"Top10TallestAsiaPacificRollerCoasters", subset=>0},
 "b3caf7b8660f4418be7a486bee10cc17" => {id=>"M39RP1RNBZCDUK"  , group=>"Top10TallestAsiaPacificRollerCoasters", subset=>1},
 "01992f48cc274625a3fb191ae76f0a8f" => {id=>"M2K6RUNFZKE37L"  , group=>"Top10TallestAsiaPacificRollerCoasters", subset=>2},
 "a60a8310833249e7afd4f6c36e1a3f00" => {id=>"M30OWV0XWF8X9Q"  , group=>"Top10TallestEuropeanRollerCoasters", subset=>0},
 "03c1716dd49748b796dd6c5c88c6f243" => {id=>"M1SBHAMU87THBA"  , group=>"Top10TallestEuropeanRollerCoasters", subset=>1},
 "68c41ed75db94d468450b10038e63b24" => {id=>"M1XX2Y5D31HNXD"  , group=>"Top10TallestEuropeanRollerCoasters", subset=>2},
 "4d4454315247354c574c353832344c57" => {id=>"M1BUGR1BKSC6Q4"  , group=>"Top10TallestFerrisWheels"        , subset=>0},
 "9707e280a930482da0fa241708d229b3" => {id=>"MGAVFAQN0SG6T"   , group=>"Top10TallestFerrisWheels"        , subset=>1},
 "3398108c8eb64017a9138226b0e00e6d" => {id=>"MZS1T0WXLF1L4"   , group=>"Top10TallestFerrisWheels"        , subset=>2},
 "ddab4dea540441109b73f5314700f49e" => {id=>"M1QVTEIL1SLQVI"  , group=>"Top10TallestNorthAmericanRollerCoasters", subset=>0},
 "a5ea643393a348d2b7062e7f3d6d3e1e" => {id=>"M3SFX45G1K4DJE"  , group=>"Top10TallestNorthAmericanRollerCoasters", subset=>1},
 "af0949ac44b6477a92bf17c5427d40f4" => {id=>"M25KLUJTXF2P75"  , group=>"Top10TallestNorthAmericanRollerCoasters", subset=>2},
 "534e384d49584949513350514d4c5957" => {id=>"M30DRQ8RH9FFTE"  , group=>"Top10TallestRollerCoasters"      , subset=>0},
 "44ed024a9c724da9bb2acbf836cbe223" => {id=>"M12BKT2GMI6KWZ"  , group=>"Top10TallestRollerCoasters"      , subset=>1},
 "37a834b6a77f4ca5abcf9107d2672d24" => {id=>"M3NIYQC3J36GW1"  , group=>"Top10TallestRollerCoasters"      , subset=>2},
 "504542485a494f4e53364c5753584452" => {id=>"M2SGG36414P8LS"  , group=>"Top10TallestTowers"              , subset=>0},
 "a0c4b66663f042b9a05b10ed95762550" => {id=>"M26JS32GHQE6N"   , group=>"Top10TallestTowers"              , subset=>1},
 "134f381985cc4b12a0b6a635f43c89c1" => {id=>"M1X8F0VTKSRH0A"  , group=>"Top20HorseBreeds"                , subset=>0},
 "b57ecaf903ff42bc980f655340e81737" => {id=>"M1ELHTHBTUZF3B"  , group=>"Top20HorseBreeds"                , subset=>1},
 "ce04b190dbf74179be246c318a405943" => {id=>"M2P3IBMY5I8JUU"  , group=>"Top20HorseBreeds"                , subset=>2},
 "31415254494433313341455536334f43" => {id=>"M2FDUUOPEGBMM1"  , group=>"ToyTransportAlphabet"            , subset=>0},
 "b3fc1d9e0a3a47c683479c4446b9bb1c" => {id=>"M17OKEDMRTZYT1"  , group=>"ToyTransportAlphabet"            , subset=>1},
 "4833513744505a47354d323054303036" => {id=>"MEZDE1FWBHBI1"   , group=>"TraceNumbers09"                  , subset=>0},
 "2a4ea2da47334d238af7a78c18e11f2f" => {id=>"M5JUQ15CKT73M"   , group=>"TraceNumbers09"                  , subset=>1},
 "56475151325041344f39584a4d315450" => {id=>"M30N5D6C9UOS02"  , group=>"TransportAlphabet"               , subset=>0},
 "960ba166058442058b47eafca2c2ab13" => {id=>"M2DU48LZDBWSY4"  , group=>"TransportAlphabet"               , subset=>1},
 "ec2b5f006f864be3a61fc1d5dcc90d5e" => {id=>"M20HKC6OZJGY9O"  , group=>"TransportAlphabet"               , subset=>2},
 "21d601bce2494ef5afe71dc7c52554fe" => {id=>"MX9318ASQLGOJ"   , group=>"TransportAlphabet"               , subset=>3},
 "a7b03594d2704f0f852a9b5794463b1f" => {id=>"M32HVV2RI5OADM"  , group=>"Trees"                           , subset=>0},
 "7a90f00294a94800998fd806b8bfb250" => {id=>"M1C045ED8B34UW"  , group=>"Trees"                           , subset=>1},
 "44dc88fd108148d682582eefe21f4c95" => {id=>"M1PQYKB0YX5XOB"  , group=>"Trees"                           , subset=>2},
 "196e74ab0bd144d8998f6a8b61f7a2d2" => {id=>"M2NNADEBXO554W"  , group=>"Waterfalls"                      , subset=>0},
 "f32e9802ae02443085ad50501f1f105c" => {id=>"M3GGMAK74GG9ME"  , group=>"Waterfalls"                      , subset=>1},
 "b35017a31fbe4e26aa39d108a65d14e1" => {id=>"M2L9MYUHKL9ABD"  , group=>"Waterfalls"                      , subset=>2},
 "335a4c54423145455143435258584457" => {id=>"M1JVIIQN9US43W"  , group=>"WeatherVanes"                    , subset=>0},
 "ba1140a401d64f519e20772054a5f3e3" => {id=>"M3SOI689K8MOOU"  , group=>"WeatherVanes"                    , subset=>1},
 "584e54565431504159304c36484f3636" => {id=>"M3PHPI051H7V6M"  , group=>"WildAnimals"                     , subset=>0},
 "edfab9691a8c4dccad17cc7e285d4780" => {id=>"M1M92JE80B0SII"  , group=>"WildAnimals"                     , subset=>1},
 "10f32b4fb96b4d04ab67f472b39cd22f" => {id=>"M3Q4001VAKD00X"  , group=>"WildAnimals"                     , subset=>2},
 "43364151524437574857563234454945" => {id=>"M2BS21VRS9BUNS"  , group=>"WildFlowers"                     , subset=>0},
 "3dedda43712947748417118b029e00af" => {id=>"M3J15T3OHRNBHC"  , group=>"WildFlowers"                     , subset=>1},
 "19c4b031d1864421ac255ef25b4cc003" => {id=>"M3TW3Y0RGT2GM1"  , group=>"WildFlowers"                     , subset=>2},
 "4431425341553455465453584e593744" => {id=>"M3G72TAODJPB3N"  , group=>"WordEndings"                     , subset=>0},
 "4062e3146bf74b7fbda3bd7916a134c3" => {id=>"M2NH69W3GGYWX9"  , group=>"WordEndings"                     , subset=>1},
 "8b94629ba5c644088beccd08342def5e" => {id=>"M131AQPYPG72I6"  , group=>"WordEndings"                     , subset=>2},
 "1f793342eadf406688de8b6f0cc41301" => {id=>"MYJ473E44AB78"   , group=>"WordEndings"                     , subset=>3},
 "1ae63c38064f49a4ad416c4c447af05d" => {id=>"MBG2KJ5522L5N"   , group=>"Yawning"                         , subset=>0},
 "20f8e6e76e304a5389e622ae98baf41e" => {id=>"M1EAIPRMWDR3ER"  , group=>"Yawning"                         , subset=>1},
 "5652fd8d0acd43b09ca4b2347675c600" => {id=>"M1XMXP2JIHBXMT"  , group=>"Yawning"                         , subset=>2},
 "19684a48a28b47b9821c1e790ea07df3" => {id=>"M2LYHFAITFXIYO"  , group=>"Yosemite"                        , subset=>0},
 "be5114fcc22248c3bf31bbe2ff2ab5fb" => {id=>"M1OVUR4RQGMQTH"  , group=>"Yosemite"                        , subset=>1},
 }}

#-------------------------------------------------------------------------------
# One liners - slowly being replaced by the first line of the app descriptions
#-------------------------------------------------------------------------------

sub oneLiners
 {+{
A3LetterWords=>                           "Multi-coloured Bubble Writing and Tracing combine with 60 photos of everyday objects to teach you 60 common three-letter words in English.",
A4LetterWords=>                           "Multi-coloured Bubble Writing and Tracing combine with 90 photos of everyday objects to teach you 90 common four-letter words in English.",
A5LetterWords=>                           "Multi-coloured Bubble Writing and Tracing combine with 70 photos of everyday objects to teach you 70 common five-letter words in English.",
Addition=>                                "Learn to add numbers together easily!  Avoid the tedium of learning by rote the 110 sums like 4 + 5 = 9 needed to add decimal numbers by using the handy, labour saving technique illustrated in this animation!",
Adjectives=>                              "Fat and Thin, Big and Small, Black and White, Hot and Cold, Wet and Dry, Young and Old and many more! 200 photos teach you 100 common adjectives used today in the English language. With short rhymes to help you to remember all the adjectives. It's fun, easy and compulsive!",
Alphabet=>                                "Multi-coloured Bubble Writing and Tracing combine with 80 photos of common objects to teach you the letters of the English alphabet from A to Z, both uppercase and lowercase. An easy way to learn the alphabet!",
AlpineFlowers=>                           "Spring Pasque Flower, King of the Alps, Trumpet Gentian, Alpine Toadflax, Glacier Crowfoot and many more!  172 photos of exquisite Alpine flowers teach you to recognize 172 species found in the Alpine regions of Europe, with interesting facts about each plant.",
AnimalAlphabet=>                          "Multi-coloured Bubble Writing and Tracing combine with 54 photos of wild animals to teach you the letters of the English alphabet from A to Z, both uppercase and lowercase. An easy way to learn the alphabet!",
AnotherDayAnotherSunset=>                 qq("Carrauntoohil", "Happy Days" and "Adios Amigos". Just 3 of the 10 featured tracks by renowned composer, David J Bevan. This album gives a flavour of his music used in all Appa-Apps games.),
Antarctica=>                              "Macaroni Penguin, Leopard Seal, Killer Whale, Wandering Albatross, Antarctic Tern and many more!  102 beautiful photos teach you all about the wild animals which inhabit the most hostile region on the planet, with interesting facts about each animal.",
Apes=>                                    "Gibbons, orangutans, bonobos, chimpanzees, gorillas and humans. We are all apes!  Learn about these amazing animals with 30 stunning photos and lots of interesting information on all aspects of their lives.",
Arches=>                                  "Delicate Arch, Devil's Garden, Fiery Furnace, Tower of Babel, The Organ and many more! How well do you know Arches National Park? Did you know that it has more than 2,000 sandstone arches? 40 photos introduce you to all the major features of the USA's spectacular park in Utah. With interesting facts about each one",
Arctic=>                                  "Arctic Wolf, Polar Bear, Ringed Seal, Killer Whale, Snowy Owl, Arctic Tern and many more!  120 beautiful photos teach you all about the wild animals which inhabit one of the most hostile regions on the planet, with interesting facts about each animal.",
BabyAnimals=>                             "Calf, chick, kitten, puppy, duckling, kid, infant, fawn and many more! 60 photos of adorable baby animals and their mothers teach you the common English words used to describe a wide range of baby animals.",
Bathroom=>                                "Basin, Shower, Soap, Flannel, Razor, Shampoo, Toothbrush, Hair Dryer and many more! 70 colourful photos teach you the English names of 70 common items found in a bathroom.",
Birds=>                                   "Peacocks and Puffins, Parrots and Macaws: an app full of eye catching photos of colourful tropical birds to teach you to recognize these beautiful birds when you see in the world around you.",
Boats=>                                   "Yacht, Ferry, Lifeboat, Tanker, Tug, Dinghy, Gondola, Frigate, Cruise Ship and many more! 50 colourful photos teach you the English names of 50 different types of ships and boats.",
Body=>                                    "Shoulder, Teeth, Elbow, Big Toe, Neck, Ankle, Eyelashes and many more!  70 eye-catching photos teach you the common English names of parts of the human body.",
Bollywood=>                               "Aishwarya Rai, Ajay Devgan, Amrita Rao, Hrithik Roshan and many more! How much do you know about your favourite Bollywood film stars? This educational game uses 76 high-resolution photos to teach you to recognise 61 famous actors and actresses from Bollywood. With interesting facts about each one.",
Boots=>                                   "Moccasins, Ugg Boots, Tap Shoes, Calf-length Boots, Clogs, Espadrilles, Sneakers and many more!  60 colourful photos teach you the English names of 60 different types of boots and shoes used in sport, fashion, work and play, together with facts about each one.",
Bridges=>                                 "Zoom through the Golden Gate, cross the Oresund Bridge from Denmark to Sweden, or pan over the Firth of Forth through these wonderful panoramas of the most famous and beautiful bridges in the World!",
BritishRoyalFamily=>                      "Learn about the British Royal Family from the grandparents of Queen Elizabeth II to her current grandchildren. 23 photos and 203 facts tell the story of this unique family over the past 100 years.",
Buildings=>                               "Cottage, Factory, Hotel, Mosque, School, Theatre, Lighthouse, Castle and many more!  50 colourful photos teach you the English names of 50 different types of building found in both town and country.",
CarsCranesTrucksTrains=>                  "Airplane, Bus, Caravan, Tractor, Tram, Rickshaw, Racing Bike, Helicopter and many more!  50 colourful photos teach you the English names of 50 different types of vehicle and mode of transport.",
CarsCranesTrucksTrainsGerman=>            "Clearly and slowly spoken names and facts about cars and trucks in German",
Cats=>                                    "Abyssinian, Burmese, Maine Coon, Persian, Norwegian Forest, Siamese, Russian Blue and many more!  40 photos of adorable kittens and adult cats teach you to recognize the world's top 20 favourite breeds of cat, with interesting facts about each breed.",
Cereals=>                                 "Barley, Buckwheat, Maize, Millet, Oats, Rice, Rye, Sorghum, Triticale and Wheat.  50 photos teach you to recognize the world's top 10 cereals in production today.  Lots of interesting facts such as worldwide production, where they are grown, and how you eat them.",
China=>                                   "Palaces and temples, monuments and tombs, modern and ancient buildings, great cities mighty rivers, mountains and plains, see the splendour that is China, learn to recognise its most famous landmarks, enjoy its varied cultures, imbibe its 2,500 year old history and admire its achievements in this modern era as it transforms itself from the square earth to the round sky.",
Chocolate=>                               "Black Forest Gateau, Bourbon Biscuit, Chocolate Brownie, Truffles, Easter Eggs, Millionaire's Shortbread and many more!  50 mouth-watering photos of chocolate in all its many forms teach you to recognize 50 popular cakes, biscuits, drinks and sweets.  Facts too!",
Christmas=>                               "Santa Claus, Christmas Crackers, Reindeer, Mince Pies, Holly, Carols, Fairy Lights and many more! 70 colouful photos teach you about the many traditions associated with Christmas and the festive season, with lots of interesting information about why Christmas is such a special time of year!",
Cliffs=>                                  "Devil's Tower, Torres del Paine, Shiprock, Half Dome, Mitre Peak, Matterhorn,  Trango Towers and many more!  50 spectacular high-resolution photos teach you about some of the highest cliff faces in the world. Lots of interesting facts too such as location, height and who first climbed them.",
CollectiveNounsInEnglish=>                "Pile of logs, Nest of Eggs, Bunch of grapes, Ring of keys, Fleet of cars and many more! 26 colourful sketches teach you 26 common collective nouns used in everyday English. An easy way to increase vocabulary!",
Colours=>                                 "Blue, Black, Brown, Yellow, Gold, Silver, Orange, Red, Green and many more!  140 colourful photos of everyday objects teach you the English names of 14 common colours.",
CoralReefFish=>                           "Triggerfish, Parrotfish, Snappers, Boxfish, Lionfish, Rays, Tangs and many more! This educational game uses 50 stunning photos to introduce you to the weird and wonderful world of fish that live on coral reefs around the world.",
CountActionToysInEnglish=>                "An easy way to learn numbers using 10 photos of children's action toys. This game shows you how to trace numbers with multi-coloured Bubble Writing in order to learn to count in English from 1 to 10.",
CountAnimalsInEnglish=>                   "An easy way to learn numbers using 10 photos of attractive animals. This game shows you how to trace numbers with multi-coloured Bubble Writing in order to learn to count in English from 1 to 10.",
CountChocolatesInEnglish=>                "An easy way to learn numbers using 20 photos of delicious chocolates. This game shows you how to trace numbers with multi-coloured Bubble Writing in order to learn to count in English from 1 to 20.",
CountDogsInEnglish=>                      "An easy way to learn numbers using 10 photos of attractive dogs. This game shows you how to trace numbers with multi-coloured Bubble Writing in order to learn to count in English from 1 to 10.",
CountDollsInEnglish=>                     "An easy way to learn numbers using 20 photos of pretty dolls. This game shows you how to trace numbers with multi-coloured Bubble Writing in order to learn to count in English from 1 to 20.",
CountEuros=>                              "An easy way to learn how to count and use money in Europe. The coins used by the Euro monetary system can be difficult to recognize if you are in a hurry to check out, but this app gives you the practice that you need to count your change or to give the right amount of money with confidence.",
CountFlowersInEnglish=>                   "An easy way to learn numbers using 10 photos of beautiful flowers. This game shows you how to trace numbers with multi-coloured Bubble Writing in order to learn to count in English from 1 to 10.",
CountFlowersInGerman=>                    "An easy way to learn to count in German using 10 photos of beautiful flowers. This game shows you how to trace numbers with multi-coloured Bubble Writing in order to learn to count in German from 1 to 10.",
CountSoftToysInEnglish=>                  "An easy way to learn numbers using 10 photos of cuddly soft toys. This game shows you how to trace numbers with multi-coloured Bubble Writing in order to learn to count in English from 1 to 10.",
CountTeddyBearsInEnglish=>                "An easy way to learn numbers using 20 photos of adorable Teddy Bears. This game shows you how to trace numbers with multi-coloured Bubble Writing in order to learn to count in English from 1 to 20.",
CountToyDogsInEnglish=>                   "An easy way to learn numbers using 20 photos of cute toy dogs. This game shows you how to trace numbers with multi-coloured Bubble Writing in order to learn to count in English from 1 to 20.",
Day=>                                     "Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday",
Days=>                                    "Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.  Seven beautiful photos teach you the names of the days of the week in English.",
DaysGerman=>                              "Sonnabend or Sonntag? Seven beautiful photos matched with clearly spoken phrases teach you the names of the days of the week in German.",
DeathValley=>                             "Golden Canyon, Furnace Creek, Devil's Golf Course, Red Cathedral, Badwater Basin and many more! How well do you know Death Valley? Did you know that it has salt flats, sand dunes, badlands, valleys, canyons and mountains? 40 photos introduce you to the major features of the largest national park in the USA outside Alaska. With interesting facts about each one.",
Dogs50=>                                  "Basset Hound, Boxer, Cairn Terrier, Dachshund, Golden Retriever, Maltese, Pug and many more!   50 colourful photos teach you to recognize the world's top 50 favourite breeds of dog, with interesting facts about each breed.",
Dogs=>                                    "American Bulldog, Border Collie, Chihuahua, Dalmatian, Newfoundland, Rottweiler, Scottish Terrier and many more!   148 photos of adorable puppies and the adult dogs they become, teach you to recognize 74 breeds of dog, with interesting facts about each breed.",
Dunloe=>                                  "Thrilling, high-speed bicycle ride through the Gap of Dunloe in SW Ireland. 50 beautiful photos and stunning video clips take you through inspiring scenery on a switchback trail. Correctly identify all the photos to watch the complete video footage of the exciting journey.",
Eyes=>                                    "Cat, Squid, Elephant, Chameleon, Fly, Owl, Hippopotamus, Tiger, Human and many more!  50 eye-catching photos teach you about the fascinating variety of eyes to be found in the Animal Kingdom, with interesting facts about each type of eye.",
FamousCityLandmarks=>                     "London, Paris, New York, Beijing, Rome, Sydney, Venice, Barcelona and many more!  81 eye-catching photos teach you to recognise the famous landmarks of 27 of the world's greatest cities, with many interesting facts about each one.",
FamousLondonLandmarks=>                   "Big Ben, Houses of Parliament, Buckingham Palace, St. Paul's Cathedral, Harrods and many more!  174 photos teach you to recognize 58 famous landmarks of one the most famous cities in the world, with many interesting facts about each one.",
FlowerAlphabet=>                          "Multi-coloured Bubble Writing and Tracing combine with 70 photos of beautiful flowers to teach you the letters of the English alphabet from A to Z, both uppercase and lowercase. An easy way to learn the alphabet!",
Fruits=>                                  "Apricot, Banana, Cherry, Fig, Guava, Mango, Papaya, Strawberry, Watermelon and many more!  100 colourful photos teach you to recognize over 50 of the world's most popular fruits and berries, with interesting facts about each one.",
Fractions=>                               "An introduction to fractions using eggs to demonstrate elementary concepts such as full, empty, as many as, times as many as to help students gain a visual understanding of fractions and their application to everyday objects.  Students also learn to recognize phrases in spoken English relating to fractional quantities as they are used in conversation.",
FunFair=>                                 "Big Wheel, Ghost Train, Dodgems, Helter Skelter, Galloping Horses, Rifle Range, Candy Floss and much more!  132 photos in colourful sequences teach you common English words and expressions through a visit to the Fun Fair.",
Functions=>                               "y = x, sin(x), cos(x), tan(x), exp(x), log(x) and sinc(x) and more!  60 images teach you to recognize the graphs of the basic mathematical functions, and their reciprocals, reflections and powers.  Useful for students of mathematics and anyone studying calculus.",
GardenFlowers=>                           "Azalea, Begonia, Carnation, Dahlia, Geranium, Hibiscus, Rose, Iris, Lilac and many more!  50 photos of beautiful flowers teach you the English names of 50 common flowers found in an English garden.",
Gcd=>                                     "See the Euclidean Algorithm in action as it quickly locates the greatest common divisor of two numbers. This animation will give you an excellent visual understanding of one of the most important ideas in the Mathematics of Algebra.  And once you can see what is happening, the symbolic representation in your algebra text book will make much more sense.",
GeographyManmadeFeatures=>                "Airport, Aqueduct, Bridge, Tunnel, Lake, Reservoir, Pylon, Dam, Harbour and many more!  50 colourful photos teach you to recognize 50 geographical features created by man, with interesting facts about each one.",
GeographyNaturalFeatures=>                "Glacier, Jungle, Headland, Erratic, Mountain, Waterfall, Cliff, Ridge and many more!  50 photos teach you to recognize 50 geographical features found in nature, with interesting facts about each one.",
GeometricShapes=>                         "Cone, Decagram, Cylinder, Pyramid, Rhombus, Pentagon, Circle, Tetrahedron, Kite and many more!  Learn to recognise the most common two and three dimensional geometric shapes that we encounter in our daily lives. Colourful images teach you 40 shapes with useful facts about each one.",
Glacier=>                                 "Grinnell Glacier, Garden Wall, Bearhat Mountain, Going-to-the-Sun Road, Lake McDonald, Highline Trail and many more! How well do you know Glacier National Park? Did you know that it has over 700 miles of hiking trails and over 130 named lakes? 40 photos introduce you to the major features of one of the USA's most famous national parks. With interesting facts about each one.",
GreatOlympians=>                          "Muhammad Ali, Nadia Comaneci, Jesse Owens, Emil Zatopek, Michael Phelps and many more!  50 photos teach you to recognize 50 of the world's greatest athletes from both Summer and Winter Olympic Games, with interesting facts about each one.",
GreatSportsCars=>                         "Ferrari, Lamborghini, Maserati, Bugatti, Ford, Chevrolet, McLaren, Porsche and many more!  100 stunning photos teach you to recognise 20 of the world's fastest sports cars in commercial production, with interesting facts about each one.",
Greek=>                                   "The Greek Alphabet is a major source of technical symbols used in many fields of knowledge such as mathematics, science, engineering and finance to represent the special constants, functions and variables used in the mathematical formulae that describe the most important ideas associated with each of these areas of intellectual endeavour.",
House=>                                   "I just adore, your new front door. Be careful not to bump your head, when you sit up in a bunk bed. Can you foretell, who'll ring your bell? Can you see me, on your TV? This is an educational game to help you recognize the names of items found in and around a house in spoken English.  Each item has an associated rhyme which gives an example of the word in action and helps you to remember how to use the word yourself in English conversation. Ideal for students learning to speak English either as a first or a second language.",
HowHeavyAmI=>                             "Which animal weighs a massive 170 tonnes or a tiny 12 g? How much does the heaviest snake, the heaviest insect or the heaviest land animal weigh? 40 high-resolution photos of animals teach you about the wide range of weights in the animal kingdom. Lots of facts too.",
HowMuchPowerDoIUse=>                      "Which household appliance uses a massive 5 KW of electricity or a tiny 5W? How much power does a kettle, a laptop, a breadmaker, a hair dryer or an aquarium use?  35 photos of common electrical appliances teach you which gadgets guzzle electricity and which do not.  Become an expert on just how much power you use in your home!",
India=>                                   "Palaces and Temples, monuments and tombs, modern and ancient buildings, see India's most famous city landmarks and learn to recognize them",
Jets=>                                    "Mig-29 or F-35 Lightning, which aircraft can climb faster?  F-22 Raptor versus Typhoon, which aircraft would win in a dogfight?  U2 or Blackbird, which plane flew higher? How long did it take Concorde to fly around the World?  Every year, aircraft become more  expensive amd more sopisticated. This app shows you how they have changed in one life time from canvas glued to wood through aluminium all the way to titanium.",
LakeDistrict=>                            "Where lakes and mountains, rivers and hills combine to form England's most beautiful landscapes. Nominated to become a World Heritage Cultural Landscape.  Learn to recognize the mountains and lakes of the Lake District before you visit and then enjoy them all over again when you come home from the hills.",
ManOnTheMoon=>                            "Relive the excitement and drama of the Apollo 11 mission to the moon in 1969. See the Saturn V rocket being assembled, follow the astronauts through training, watch them fly to the moon and return safely to earth. With 75 photos and 296 facts which tell the story of mankind's finest hour!",
MarineAquariumFish=>                      "Surgeonfish, Clownfish, Angelfish, Gobies, Puffers, Wrasse, Tangs and many more!  52 stunning photos introduce you to the colourful world of tropical fish. Enjoy the virtual aquarium on your phone as you learn the names of each fish and read interesting facts about each one.",
MonthsOfTheYearInEnglish=>                "January, February, March, April, May, June, July, August, September, October, November, December.  12 photos of beautiful landscapes teach you the names of the 12 months of the year, in English.",
MonthsOfTheYearInGerman=>                 "Twelve beautiful photos of seasonal landscapes teach you the names of the twelve months of the year in German.",
Noses=>                                   "Baboon, Cheetah, Eagle, Hippo, Iguana, Panda, Salamander, Tortoise and many more! From amphibians and fish to reptiles, birds and mammals, this educational game uses 50 eye-catching photos to teach you about the fascinating variety of noses to be found in the Animal Kingdom, with lots of interesting information about these different types of nose.",
OrganicMolecules=>                        "Caffeine, acetone, ammonia, benzene, ethane, methanol and many more!      This game teaches you to recognise 34 common organic molecules with their chemical structures and formulae, with interesting facts about each one.",
OodlesOfAnimals=>                         "Herd of elephants, team of dogs, brood of chicks, swarm of bees, litter of puppies and many more! 50 colourful photos teach you the common English words used to describe many different groups of animals.",
Parks=>                                   "Yellowstone, Grand Canyon, Death Valley, Yosemite, Grand Teton, Glacier and many more! How well do you know your American national parks? Which is the largest, the oldest, the most visited, has the world's biggest tree and biggest volcano, or the longest cave? 105 photos introduce you to 21 of the most popular, with interesting facts about each one. ",
Past=>                                     "\"I was seen in the sea by a shark that saw me\". The most commonly used verbs  in English have irregular past participles such as gone, make, wrote. This  app uses amusing nonsense rhymes, alliteration, word association and  dramatic images to teach you to recognize all the commonly used irregular  past participles that you will encounter in every day spoken English.",
PawsAndClaws=>                            "Alligator, Camel, Duck, Elephant, Gecko, Horse, Mole, Penguin, Turtle and many more! From amphibians and reptiles to birds and mammals, this educational game uses 50 eye-catching photos to teach you about the fascinating variety of feet to be found in the Animal Kingdom, with lots of interesting information about these different types of paws and claws!",
Penguins=>                                "Emperor, King, Gentoo, Macaroni, Adelie and Chinstrap.  36 beautiful photos teach you to recognize the 6 species of penguin that live in the Antarctic region, with many interesting facts about each species.",
PeriodicTable=>                           "Gold, Uranium, Helium, Fluorine, Iron, Magnesium, Barium, Sulfur, Lead and many more!  92 images showing the symbol for each chemical element with its atomic number and atomic mass, teach you to recognize the first 92 elements of the Periodic Table.  Lots of interesting facts about each element.",
PlusOrMinus=>                             "This educational game teaches students to recognize and perform addition and subtraction in spoken English. It follows on from 'The Numbers from 1 to 100 in English' and is a prelude to learning to multiply and divide in spoken English. Students hears addition and subtraction problems involving a number between one and one hundred and a number between one and ten to which they must pick the right answer from the possibilities displayed. Erroneous answers are corrected by showing the student an animated procedure for performing addition or subtraction which requires only the ability to count up or down in English.",
PuppyDogBreedsOne=>                       "Beagle, Boxer, Dalmatian, Poodle, Spaniel and many more!  74 photos of charming toy puppies teach you to recognise 24 different breeds of dog, with interesting facts about each breed.",
PuppyDogBreedsTwo=>                       "Afghan, Beagle, Chihuahua, Dalmatian, Pekinese, Terrier and many more!  71 photos of charming toy puppies teach you to recognise 24 different breeds of dog, with interesting facts about each breed.",
RhymingKitchen=>                          "Crockery, Freezer, Cafetiere, Ladle, Microwave, Sandwich Toaster, Oven and many more!  80 colourful photos teach you the English names of 80 different items found in a kitchen, with 80 humorous rhymes to help you remember them.",
Seasons=>                                 "Winter or Summer, Spring or Fall, I can tell you something about them all. Learn useful sayings and phrases in English describing the four seasons on the planet Earth and their importance in our daily lives!",
Sharks=>                                  "50 eye-catching photos teach you to recognise the amazing sharks which live in the oceans of our planet, with lots of interesting information about each wonderful animal!",
SignsoftheZodiac=>                        "Pisces, Aries, Gemini, Scorpio, Aquarius, Taurus, Capricorn, Cancer, Leo, Libra, Sagittarius and Virgo.  24 images teach you to recognize the 12 signs of the Zodiac and their 12 symbols, with lots of information about the characteristics of each Zodiac sign.",
SoftToyAlphabet=>                         "Multi-coloured Bubble Writing and Tracing combine with 54 photos of cuddly soft toys to teach you the letters of the English alphabet from A to Z, both uppercase and lowercase. An easy way to learn the alphabet!",
Subtraction=>                             "Learn to subtract numbers easily!  Avoid the tedium of learning by rote the 110 subtractions like 14 - 5 = 9 needed to subtract decimal numbers by using the handy, labour saving technique illustrated in this animation!",
SunMoonsPlanets=>                         "Mars, Jupiter, Neptune, Mercury, Venus, Earth, Saturn and Uranus.  27 inspiring NASA photos teach you to recognize the 8 planets of our Solar System together with many of their moons.  Lots of interesting facts about each planet and moon.",
SuperBirds=>                              "Which bird is the highest flying, deepest diving, most intelligent or furthest migrating, or has the longest beak or biggest nest?  40 colourful photos of super birds teach you 20 common English superlatives which describe super birds from all around the world. Lots of great facts too.",
SuperFish=>                               "Which fish is the fastest swimming, longest living, most venomous or strangest looking, or has the largest teeth or strongest bite?  20 colourful photos of super fish teach you 12 common English superlatives which describe super fish from all around the world. Lots of great facts too.",
SuperMammals=>                            "Which mammal is the largest, tallest, fastest, heaviest, loudest or furthest migrating, or has the biggest mouth or the best hearing? 32 colourful photos teach you 16 common English superlatives, which describe super mammals from all around the world. Lots of great facts too.",
TeddyBearsInAction=>                      "34 photos of adorable Teddy Bears teach you 34 common verbs used in the English language, such as climbing, driving, drinking, cuddling, talking, waving, writing, working, sleeping, playing, sitting and many more commonly used action words!",
TellTheTime=>                             qq(This game uses 23 clock photos to teach you all the English phrases you will ever need to know, such as" One o'clock"," half past five"," quarter to six"," twenty past eight" or" ten to three". An easy way to learn how to tell the time for English language students and children.),
TellTheTimeGerman=>                       qq(Fünf vor halb zwölf! This game uses 23 photos of clocks to teach you the German phrases you need to know to recognize and tell the time in German.),
TellTheTimeTwo=>                          qq(Learn to tell the time in English, with 50 colourful photos of clocks from around the world! Become familiar with the different ways of saying the time, such as "twelve thirty" and "half past twelve".),
TestCricketersAustralia=>                 "Shane Warne, Ricky Ponting, Glenn McGrath, Matthew Hayden, Justin Langer, and many more!  76 photos of Australian Test cricketers to teach you to recognize 40 of the greatest players from the past 20 years, with interesting facts about each one.",
TestCricketersIndia=>                     "Sachin Tendulkar, V.V.S. Laxman, Rahul Dravid, Sourav Ganguly, Mahendra Singh Dhoni and many more!  65 photos of Indian Test cricketers to teach you to recognize 40 of the greatest players from the past 20 years, with interesting facts about each one.",
TheNumbersFrom1To100InEnglish=>           "This game teaches you to read and write numbers from 1 to 100, using multi-coloured Bubble Writing and Tracing.  Learn which numbers come before and after each other, and trace the numbers to make the music louder. Great for small children!",
TheNumbersFrom1To100InFrench=>            "If you have recently moved to France from another country, perhaps to work on fusion at the International Thermonuclear Experimental Reactor at Cadarache, you might find it very useful to know how to recognize the numbers from 1 to 100 in spoken French.",
TheNumbersFrom1To100InGerman=>            "If you have recently moved to Germany from another country, you might find it very useful to know the numbers from 1 to 100 in German, to be able to recognize them in spoken conversation, to be able to read their written forms and to be able to say them, as numbers occur frequently in every day life, such as in shopping where they represent weights and quantities of produce and amounts of money or in travel where to numbers are used to represent times, or at work where German prowess in manufacturing makes the ability to understand numbers in German absolutely crucial. This educational app teaches you to recognize the numbers from 1 to 100 in spoken German, how to read them in written form and how to write them using spectacular multi-coloured bubble-writing. Trace the numbers to make the music more audible. Race mode tests your comprehension at speed with your best time ever being rewarded with an Appa Apps Racing Certificate as proof of your achievement.",
ToBeOrNotToBe=>                           "To be or not to be? That is the question. Learn to recite the most famous soliloquy in the English Language.",
Top10FastMotorBikes=>                     "Suzuki Hayabusa, Honda Super Blackbird, Ducati 1098, Kawasaki Ninja ZX-14 and many more!  10 eye-catching photos teach you to recognise 10 of the fastest and most iconic motorbikes in commercial production, with many interesting facts about each one.",
Top10HighestMountains=>                   "Everest, K2, Kangchenjunga, Lhotse, Makalu, Cho Oyu, Dhaulagiri, Manaslu, Nanga Parbat and Annapurna.  50 inspiring photos teach you to recognise the top 10 highest mountains in the world, with interesting facts about each summit.",
Top10TallestEuropeanRollerCoasters=>      "Colossos, Expedition GeForce, iSpeed, Jubilee Odyssey, Stealth and more!  60 stunning photos and 8 videos combine to teach you the names of Europe's top 10 tallest roller coasters. Experience the thrill of the ride with exciting video clips which increase in length as your game playing skills improve!  Lots of facts too.",
Top10TallestAsiaPacificRollerCoasters=>   "Eejanaika, Dodonpa, BuzzSaw, Fujiyamas, Takabisha, Thunder Dolphin and much more! 33 stunning photos teach you to recognize the names of the top 10 tallest roller coasters in the Asia-Pacific region, with interesting facts about each coaster.",
Top10TallestNorthAmericanRollerCoasters=> "Desperado, El Toro, Goliath, Intimidator 305, Top Thrill Dragster and more!  50 stunning photos and 8 videos combine to teach you the names of North America's top 10 tallest roller coasters. Experience the thrill of the ride with exciting video clips which increase in length as your game playing skills improve!  Lots of facts too.",
Top10TallestFerrisWheels=>                "Singapore Flyer, Star of Nanchang, Southern Star, London Eye, Daikanransha and more!  31 spectacular photos teach you to recognise the top 10 tallest ferris wheels in the world, with interesting facts about each giant wheel.",
Top10TallestRollerCoasters=>              "Kingda Ka, Top Thrill Dragster, Millennium Force, Tower of Terror II, Intimidator 305 and many more!  27 exciting photos teach you to recognise the top 10 tallest roller coasters in the world, with interesting facts about each mammoth structure.",
Top10TallestTowers=>                      "Burj Khalifa, Abraj-al-Bait Towers, Taipei 101, Petronas Towers, Zifeng Tower, Kingkey 100 and more!  10 inspiring photos teach you to recognize the top 10 tallest towers in the world today, with exciting facts about each classic skyscraper. You will also learn how to recognize superlatives and the ordinal numbers from 1 to 10 in spoken English. Who knew skyscrapers could be so interesting?",
Top20HorseBreeds=>                        "Arabian, Appaloosa, Icelandic, American Saddlebred, Mustang, Tennessee Walking Horse, Paso Fino and many more!  58 beautiful photos teach you about the world's top 20 favourite breeds of horse, with many interesting facts.",
ToyTransportAlphabet=>                    "Multi-coloured Bubble Writing and Tracing combine with 26 photos of children's toys to teach you the letters of the English alphabet from A to Z, both uppercase and lowercase. An easy way to learn the alphabet!",
TraceNumbers09=>                          "This game teaches you to read and write numbers from 0 to 9, using multi-coloured Bubble Writing and Tracing.  Learn which numbers come before and after each other, and trace the numbers to make the music louder.   Great for small children!",
TraceNumbers09InCantonese=>               "Learn to recognize the numbers from 0 to 9 in spoken Cantonese Chinese.",
TraceNumbers09InMandarin=>                "Learn to recognize the numbers from 0 to 9 in spoken Mandarin Chinese.",
TraceNumbers09InGerman=>                  "If you have recently moved to Germany from another country, you might find it very useful to know the numbers from 1 to 100 in German, to be able to recognize them in spoken conversation, to be able to read their written forms and to be able to say them, as numbers occur frequently in every day life, such as in shopping where they represent weights and quantities of produce and amounts of money or in travel where to numbers are used to represent times, or at work where German prowess in manufacturing makes the ability to understand numbers in German absolutely crucial. This educational app teaches you to recognize the numbers from 1 to 100 in spoken German, how to read them in written form and how to write them using spectacular multi-coloured bubble-writing. Trace the numbers to make the music more audible. Race mode tests your comprehension at speed with your best time ever being rewarded with an Appa Apps Racing Certificate as proof of your achievement.",
TransportAlphabet=>                       "Multi-coloured Bubble Writing and Tracing combine with 80 photos of different modes of transport to teach you the letters of the English alphabet from A to Z, both uppercase and lowercase. An easy way to learn the alphabet!",
Trees=>                                   "Oak, Ash, Yew or Lime? Which tree grows for the longest time? Is a Black Gum gummy?  Should you ever make honey from a Honey Locust Tree? Do you know which wood would have been used to make Wotan's spear or the English bows at Agincourt?  Or what kind of tree Ab Lincoln split to make posts and rails? Where is the World's most northerly Olive Tree grove? Do horses like Horse Chestnuts? This educational game uses 50 colorful photos to teach you about the common trees you will see all around you and helps you to recognize them by their shapes, their flowers and their leaves.",
Waterfalls=>                              "Relax to the beautiful sound of falling water.  See if you can recognise each waterfall by the sound it makes, select the correct photo and then enjoy a short video of that waterfall.  The game features 11 photos and videos of different waterfalls in SW Ireland.",
WeatherVanes=>                            "Multi-coloured Bubble Writing and Tracing combine with 26 novel photos of weather vanes to teach you the letters of the English alphabet from A to Z, both uppercase and lowercase. An easy way to learn the alphabet!",
WildAnimals=>                             "Seal, Monkey, Swan, Zebra, Lion, Tiger, Frog, Bat, Kangaroo, Hippopotamus, Elephant and many more! 50 colourful photos teach you to recognise 50 wild animals, and to learn their names in English.",
WildAnimalsGerman=>                       "Löwen und Tiger! Gorgeous photos of wild animals teach the names of 50 different wild animals in clearly and slowly spoken German.",
WildFlowers=>                             "Avens, Bellflower, Columbine, Eyebright, Gentian, Teasel, Soapwort and many more!  50 beautiful photos teach you to recognise 50 common wild flowers found in Europe, and to learn their names in English.",
WildFlowersGerman=>                       "Avens, Bellflower, Columbine, Eyebright, Gentian, Teasel, Soapwort and many more! Fifty beautiful photos teach you to recognise common wild flowers found in Europe, and to learn their names in German.",
WordEndings=>                             "-ar (car, jar), -and (hand, sand), -eel (wheel, heel), -ee (bee, tree), -oor (door, floor) and many more!  90 photos of everyday objects teach you 45 word endings that are commonly used in the English language.  Great for children learning to read!",
Yawning=>                                 "Alligator, Baboon, Cheetah, Ferret, Giraffe, Hippopotamus, Otter, Tortoise and many more!  50 amusing and eye-catching photos of animals yawning teach you the English names of a wide variety of animals.  Great for children learning to read!",
Yosemite=>                                "El Capitan, Half Dome, Nevada Fall, Glacier Point, Grizzly Giant, Mirror Lake and many more! How well do you know Yosemite? Did you know that it has deep valleys, vast meadows, spectacular waterfalls, towering granite cliffs and Giant Sequoia trees? 40 photos introduce you to the major features of one of the USA's most famous national parks. With interesting facts about each one.",
 }}

#-------------------------------------------------------------------------------
# Descriptions for each app
#-------------------------------------------------------------------------------

sub appDescriptions()
 {+{

A3LetterWords=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. This game uses 60 photos to teach students to recognize and write 60 common three-letter words.

Students hear a three-letter word spoken, they choose the matching photo and then trace the word on the touch screen. Students are encouraged to trace words by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 60 three-letter words
• 60 photos
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.  No Internet connection is required.
END

A4LetterWords=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. This game uses 90 photos to teach students to recognize and write 90 common four-letter words.

Students hear a four-letter word spoken, they choose the matching photo and then trace the word on the touch screen. Students are encouraged to trace words by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 90 four-letter words
• 90 photos
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.  No Internet connection is required.
END

A5LetterWords=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. This game uses 70 photos to teach students to recognize and write 70 common five-letter words.

Students hear a five-letter word spoken, they choose the matching photo and then trace the word on the touch screen. Students are encouraged to trace words by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 70 five-letter words
• 70 photos
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.  No Internet connection is required.
END

Addition=><<'END',
Learn to add numbers together easily!  Avoid the tedium of learning by rote the 110 sums like 4 + 5 = 9 needed to add decimal numbers by using the handy, labour saving technique illustrated in this animation.

• Animation to show you how to add decimal numbers
• Slide to each point in the animation
• Tap left and right for more simpler or more complex examples
• No in app advertizing
END

Adjectives=><<'END',
An introduction to adjectives suitable for students from grade 1 onwards and those studying English as a second language. This educational game uses 200 photos to teach 100 common adjectives. Each adjective has its own short rhyme to give students a memorable example of how to use that adjective.

Students hear an adjective and have to select the matching photo. When they do, they hear a two-line rhyme containing the adjective in the second line. The next time the photo is displayed, they hear the first line of the rhyme, to prompt them to remember the second line and hence the correct adjective. As the game progresses, there is an increasing pause between delivery of the two lines. This encourages the student to remember the second line and hence, how to use the adjective correctly in an English phrase.

After six right in a row race mode starts automatically: it uses the adjectives and rhymes to test the students' memory and comprehension of material already covered, before continuing with new adjectives.  At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any adjectives that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new adjectives and rhymes by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 200 photos and 100 adjectives
• 100 rhymes to help students remember the adjectives
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.  No Internet connection is required.
END

Alphabet=><<'END',
This educational game uses 80 photos of common objects to teach the 26 letters of the English alphabet from A to Z, both uppercase and lowercase. Suitable for students from grade 1 onwards, and  those studying English as a second language.

Students hear a word spoken, they choose the matching photo and then trace the first letter of the word on the touch screen. Students are encouraged to trace letters by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the letters just covered, before continuing with new letters. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any letters that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new letters by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 80 photos of common objects
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all 26 letters in sequence, both uppercase and lowercase
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.  No Internet connection is required.
END

AlpineFlowers=><<'END',
Spring Pasque Flower, King of the Alps, Trumpet Gentian, Alpine Toadflax, Glacier Crowfoot and many more! From river banks and alpine meadows to scree slopes and mountain tops, this educational game uses 172 photos of exquisite Alpine wild flowers, to teach you to recognize 172 species which grow in the Alpine regions of Europe. With lots of useful facts such as where each plant grows, at what altitude, and to which plant family it belongs.

• Entertaining game to teach you about the wild flowers of the Alps
• 172 photos
• Lots of interesting facts for each species
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Wild Flowers of the Alps" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the flowers in sequence, both by colour and alphabetically. Simply slide through the images with your finger on the screen, horizontally, vertically or diagonally. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.  No Internet connection is required.
END

AnimalAlphabet=><<'END',
This educational game uses 54 photos of animals to teach the 26 letters of the English alphabet from A to Z, both uppercase and lowercase. Suitable for students from grade 1 onwards, and  those studying English as a second language.

Students hear a word spoken, they choose the matching photo and then trace the first letter of the word on the touch screen. Students are encouraged to trace letters by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the letters just covered, before continuing with new letters. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any letters that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new letters by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 54 photos of animals
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all 26 letters in sequence, both uppercase and lowercase
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.  No Internet connection is required.
END

AnotherDayAnotherSunset=><<'END',
•  Favorite Appa-Apps music tracks from renowned composer David J Bevan
•  10 extended sound tracks of popular music
•  Includes "Carrauntoohil" and "Another Day, Another Sunset"
•  Beautiful photos for easy music selection

Enjoy the extended sound tracks of the music used in the popular games by Appa-Apps. Featuring "Carrauntoohil", "Another Day, Another Sunset", "Happy Days", "Adios Amigos" and other tracks you will be sure to recognize. Composed by renowned musician David J Bevan. 10 Tracks, 18 minutes.

10 beautiful photos make selection of each track quick and easy. Either select and play individual tracks, or let our app play you a random selection.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Antarctica=><<'END',
An educational game about the wild animals of Antarctica, suitable for students studying Geography and Biology from grade 5 onwards. This game uses 102 photos to introduce students to 34 of the animals which inhabit the most hostile region on the planet. With interesting spoken facts about each one, such as diet, average life span, population and predators.

Students hear a name or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 102 photos of Antarctic wild animals
• Spoken facts about each animal
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Apes=><<'END',
An educational game about the family of primates called Apes, suitable for students studying Biology from grade 5 onwards. This game uses 30 photos to introduce students to gibbons, orangutans, bonobos, chimpanzees, gorillas and humans, with interesting spoken facts on all aspects of their lives.

Students hear a name or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 30 photos of apes
• Spoken facts about each ape
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Arches=><<'END',
Delicate Arch, Devil's Garden, Fiery Furnace, Tower of Babel, The Organ and many more! How well do you know Arches National Park? Did you know that it has more than 2,000 sandstone arches? This educational game uses 40 photos to introduce you to all the major features of the USA's spectacular park in Utah. With interesting facts about each one.

• Entertaining game to introduce you to the USA's spectacular national park in Utah
• 40 photos
• Interesting spoken facts about each feature
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Arches National Park USA" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Arctic=><<'END',
An educational game about the wild animals of the Arctic, suitable for students studying Geography and Biology from grade 5 onwards. This game uses 120 photos to introduce students to 40 of the animals which inhabit one of the most hostile regions on the planet. With interesting spoken facts about diet, average life span, population and predators.

Students hear a name or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 120 photos of Arctic wild animals
• Spoken facts about each animal
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

BabyAnimals=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. This game uses 60 photos of baby animals and their mothers to teach students the common English words used to describe a wide range of baby animals such as calf, chick, kitten, puppy, duckling, kid, infant and fawn.

Students hear a word spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 60 photos of baby animals and their mothers
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Bathroom=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. This game uses 70 photos to teach the names of 70 different items found in a bathroom.

Students hear a word spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 70 photos of items found in a bathroom
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Birds=><<'END',
Azure Kingfisher, Crimson Rosella, Rainbow Lorikeet, Scarlet Macaw, Golden Pheasant, Jamaican Tody and many more! How well do you know your birds? Do you know which bird uses its beak to climb trees, which bird can fly under water as well as in the air, and which bird uses sticks as tools? This educational game uses 46 photos to introduce you to the fascinating and brightly coloured birds which live around us. With interesting spoken facts about each one.

• Entertaining game to introduce you to the colourful birds which live around us
• 46 photos
• Interesting spoken facts about each feature
• Race Mode to test your memory
• Slideshow and Story Mode to show you all the photos and facts in sequence
• Easy on-screen gestures allow you to find Facts, Races, Race Results, Slideshow and Story Mode, Zoom and Pan, Sharing Mode, Quiet Mode, Wikipedia and Help.

"Nice Birds" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slideshow and Story Mode shows you all the photos and facts in sequence; simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan allows you to magnify the photos to see more detail. Sharing Mode allows you to share a copy of the paid version of this app with friends. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Boats=><<'END',
Yacht, Ferry, Lifeboat, Tanker, Tug, Dinghy, Gondola, Frigate, Cruise Ship and many more! Do you know your Canoe from your Catamaran and your Dinghy from your Dhow? This educational game uses 50 photos to teach you the names of 50 different types of ships and boats. With interesting spoken facts about each one.

• Entertaining game to teach you the names of 50 different types of ships and boats
• 50 photos
• Interesting spoken facts about each boat
• Great way to increase vocabulary for children and English language students
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Boats and Ships" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Body=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. This game uses 70 photos to teach the names of 70 different parts of the human body.

Students hear a word spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 70 photos of different parts of the body
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Bollywood=><<'END',
Aishwarya Rai, Ajay Devgan, Amrita Rao, Hrithik Roshan and many more! How much do you know about your favourite Bollywood film stars? This educational game uses 76 photos to teach you to recognise 61 famous actors and actresses from Bollywood. With interesting facts about each one.

• Entertaining game to introduce you to 61 famous Bollywood actors
• 76 photos
• Interesting spoken facts about each Bollywood star
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Quiet Mode, Wikipedia and Help.

"Stars of Bollywood" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Boots=><<'END',
An educational game about the many types of footwear used in work and leisure. Suitable for students studying Clothing, Textiles and Fashion from grades 10-12. This game uses 60 photos to introduce students to 60 different types of boots and shoes with interesting spoken facts about each one.

Students hear a name or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 60 photos of boots and shoes
• Spoken facts about each type of footwear
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Bridges=><<'END',
Zoom through the Golden Gate, cross the Oresund Bridge from Denmark to Sweden, or pan over the Firth of Forth through these wonderful panoramas of the most famous and beautiful bridges in the World!

• Entertaining game to teach you about 20 famous bridges from around the world
• 20 panoramic photos
• Lots of interesting facts
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Wikipedia and Help

"Bridges" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races and Tweet your friends with your best result. Slide show mode shows you all the photos and facts in a family tree sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

The paid version of this app has much higher resolution photos than the free version, you will need capable Android device to get the full motion experience.
END

BritishRoyalFamily=><<'END',
If you've always wanted to know more about the British Royal Family, then this educational game is for you!  23 members of the family are included, from the grandparents of Queen Elizabeth II to her current grandchildren. 23 photos and 203 facts tell the story of this unique family over the past 100 years.  With dates of all the important events, plus details of marriages, relationships, line of succession, and much more!

• Entertaining game to teach you 23 members of the British Royal Family
• 23 photos
• Lots of interesting facts - 203 in total
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Wikipedia and Help

"British Royal Family" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races and Tweet your friends with your best result. Slide show mode shows you all the photos and facts in a family tree sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Buildings=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 2 onwards and those studying English as a second language. This game uses 50 photos to teach the names of 50 different types of building found in both town and country.

Students hear a word spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of buildings
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CarsCranesTrucksTrains=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 2 onwards and those studying English as a second language. This game uses 50 photos to teach the names of 50 different types of vehicle in use around the world today. With simple spoken facts about each one.

Students hear a word or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words and facts just covered, before continuing with new words and facts. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of vehicles
• Simple spoken facts
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CarsCranesTrucksTrainsGerman=><<'END',

An educational game in German which uses colorful photos to teach the names of different types of vehicle in use around the world today with simple facts about each vehicle in clearly and slowly spoken German correctly enunciated by actor Wolfgang Binder. Ideal for developing vocabulary and basic phrases for students learning to both speak and recognize spoken German.

Students hear a word or fact spoken and choose the matching photo. They then hear more information in German which they will need to answer subsequent questions correctly.

After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words and facts just covered, before continuing with new words and facts. At the end of the race, students can see how well they have done relative to their other races and earn an Appa Apps Racing Certificate for their best time ever.

The app gradually focuses on any words and facts that the student has difficulty recognizing, and speeds up and adds more information as competence is gained to maintain interest. In contrast to Race Mode, Story Mode slowly introduces new words and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn. The game is controlled by on-screen gestures which are simple to demonstrate and easy to perform with a finger, elbow or foot. The game can also be played quietly without voice prompts.

Colorful photos of vehicles
Simple spoken facts in German
Race Mode tests memory and comprehension against the clock
Story Mode allows students to look, listen and learn
Slide-show Mode displays all the photos and facts in alphabetical order
Zoom and Pan Mode magnifies the images to see more detail
Easy on-screen gestures to control the game
Context-sensitive help

END

Cats=><<'END',
Abyssinian, Burmese, Maine Coon, Persian, Norwegian Forest, Siamese, Russian Blue and many more! This educational game uses 40 photos of adorable kittens and adult cats, to teach you to recognize the world's top 20 favourite breeds of cat. Enjoy the photos, identify the correct cat and listen to the spoken facts with each one.

• Entertaining game to teach you the world's top 20 favourite breeds of cat
• 40 photos of adorable kittens and the adult cats they become
• Lots of interesting facts about each cat breed
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Top 20 Cats and Kittens" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Cereals=><<'END',
An introduction to the world's top 10 cereals, suitable for students studying Geography and Biology from grade 5 onwards. This game uses 50 photos of crops, harvesting, grains and the foods they become for each of Barley, Buckwheat, Maize, Millet, Oats, Rice, Rye, Sorghum, Triticale and Wheat. With interesting spoken facts such as annual worldwide production and top producing countries.

Students hear a name or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of cereals
• Spoken facts about each cereal
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

China=><<'END',
Forbidden City, Great Wall of China, Yangtze River, Potala Palace, Terracotta Army and many more! How well do you know China? Did you know that it has the highest railway bridge, the deepest river canyon and the longest canal in the world? This educational game uses 50 photos to introduce you to the major features of one of the most fascinating countries on earth. With interesting spoken facts about each one.

• Entertaining game to introduce you to one of the most fascinating countries on earth
• 50 photos
• Interesting spoken facts about each feature
• Race Mode to test your memory
• Slideshow and Story Mode to show you all the photos and facts in sequence
• Easy on-screen gestures allow you to find Facts, Races, Race Results, Slideshow and Story Mode, Zoom and Pan, Shopping at Amazon, Sharing Mode, Quiet Mode, Wikipedia and Help.

"China" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slideshow and Story Mode shows you all the photos and facts in sequence; simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan allows you to magnify the photos to see more detail. Shopping at Amazon takes you to the Amazon website to see related items for sale. Sharing Mode allows you to share a copy of the paid version of this app with friends. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Chocolate=><<'END',
Black Forest Gateau, Bourbon Biscuit, Chocolate Brownie, Truffles, Easter Eggs, Millionaire's Shortbread and many more! Did you know that 1.5 million Cadbury chocolate eggs are manufactured every day? This educational game uses 50 mouth-watering photos of chocolate in all its many forms, to illustrate 50 popular cakes, biscuits, drinks and sweets made of chocolate. Lots of interesting facts too. If you love chocolate, then this app is for you!

• Entertaining game to teach you 50 delicious uses of chocolate
• 50 photos of mouth-watering foods and drinks
• Lots of interesting facts
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode and Help.

"World of Chocolate" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Christmas=><<'END',
Santa Claus, Christmas Crackers, Reindeer, Mince Pies, Holly, Carols, Fairy Lights and many more! This educational game uses 70 photos to teach you about the many traditions associated with Christmas and the festive season, with lots of interesting information about why Christmas is such a special time of year!

• Entertaining game to teach you about the traditions associated with Christmas and the festive season
• 70 photos
• Lots of interesting facts
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode and Help.

"Christmas" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Cliffs=><<'END',
Devil's Tower, Torres del Paine, Shiprock, Half Dome, Mitre Peak, Matterhorn, Troll Wall, Trango Towers and many more! This educational game uses 50 stunning photos to teach you about some of the highest and most spectacular cliff faces around the world. There are lots of interesting spoken facts too such as location, height and who first climbed them.

• Entertaining game to teach you about many spectacular cliffs of the world
• 50 cliff faces in 50 stunning photos
• Lots of interesting spoken facts
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Cliffs of the World" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CollectiveNounsInEnglish=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 2 onwards and those studying English as a second language. This game uses 26 sketches to teach students 26 collective nouns that are commonly used to describe different groups of objects, such as pile, nest, bunch, ring and fleet.

Students hear a collective noun spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the collective noun just covered, before continuing with new nouns. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any nouns that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new collective nouns by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 26 sketches
• 26 collective nouns
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the images in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

Colours=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. The game uses 140 photos of everyday objects to teach the names of 14 common colours.

Students hear the name of a colour and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the colours just covered, before continuing with new colours. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any colours that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new colours by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 140 photos of everyday objects
• 14 common colours
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CoralReefFish=><<'END',
Triggerfish, Parrotfish, Snappers, Boxfish, Lionfish, Rays, Tangs and many more! This educational game uses 50 stunning photos to introduce you to the weird and wonderful world of fish that live on coral reefs around the world. With lots of interesting information such as diet, average life span and defence mechanisms.

• Entertaining game to teach you about the fascinating fish that live on coral reefs around the world
• 50 stunning photos of colourful fish
• Lots of interesting facts
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Fish of the Coral Reef" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CountActionToysInEnglish=><<'END',
This educational game uses 10 photos of action toys to teach students to count in English from 1 to 10. Suitable for students from Kindergarten onwards, and those studying English as a second language.

Students hear a number spoken, they choose the matching photo and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 10 photos of action toys
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in numerical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CountAnimalsInEnglish=><<'END',
This educational game uses 10 photos of animals to teach students to count in English from 1 to 10. Suitable for students from Kindergarten onwards, and those studying English as a second language.

Students hear a number spoken, they choose the matching photo and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 10 photos of animals
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in numerical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

 The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CountChocolatesInEnglish=><<'END',
This educational game uses 20 photos of chocolates to teach students to count in English from 1 to 20. Suitable for students from Kindergarten onwards, and those studying English as a second language.

Students hear a number spoken, they choose the matching photo and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 20 photos of chocolates
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in numerical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CountDogsInEnglish=><<'END',
This educational game uses 10 photos of dogs to teach students to count in English from 1 to 10. Suitable for students from Kindergarten onwards, and those studying English as a second language.

Students hear a number spoken, they choose the matching photo and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 10 photos of dogs
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in numerical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CountDollsInEnglish=><<'END',
This educational game uses 20 photos of dolls to teach students to count in English from 1 to 20. Suitable for students from Kindergarten onwards, and those studying English as a second language.

Students hear a number spoken, they choose the matching photo and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 20 photos of dolls
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in numerical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CountEuros=><<'END',
Learn to count euros in Portuguese.
END

CountFlowersInEnglish=><<'END',
This educational game uses 10 photos of flowers to teach students to count in English from 1 to 10. Suitable for students from Kindergarten onwards, and those studying English as a second language.

Students hear a number spoken, they choose the matching photo and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 10 photos of flowers
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in numerical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

END

CountFlowersInGerman=><<'END',
This educational game uses 10 photos of flowers to teach students to count in German from 1 to 10.

Students hear a number spoken, they choose the matching photo with the corresponding number of flowers and then trace the number on the touch screen to make the music louder. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 10 photos of flowers
• Numbers spoken clearly and correctly in German by actor Wolfgang Binder
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in numerical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

CountSoftToysInEnglish=><<'END',
This educational game uses 10 photos of soft toys to teach students to count in English from 1 to 10. Suitable for students from Kindergarten onwards, and those studying English as a second language.

Students hear a number spoken, they choose the matching photo and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 10 photos of soft toys
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in numerical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CountTeddyBearsInEnglish=><<'END',
This educational game uses 20 photos of teddy bears to teach students to count in English from 1 to 20. Suitable for students from Kindergarten onwards, and those studying English as a second language.

Students hear a number spoken, they choose the matching photo and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 20 photos of teddy bears
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in numerical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising.    No Internet connection is required.
END

CountToyDogsInEnglish=><<'END',
This educational game uses 20 photos of toy dogs to teach students to count in English from 1 to 20. Suitable for students from Kindergarten onwards, and those studying English as a second language.

Students hear a number spoken, they choose the matching photo and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 20 photos of toy dogs
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in numerical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Days=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. This game uses 7 photos to teach the names of the days of the week.

Students hear a word spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 7 photos
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

DaysGerman=><<'END',
Learn to recognize and say the names of the week in spoken German.  Seven relevant photos with the matching day of the week spoken clearly and slowly by actor Wolfgang Binder help students recognize the crucial difference between Sonnabend and Sonntag!

Students hear a word spoken and choose the matching photo. After six right in a row Race Mode starts automatically. It asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any days that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use. The game can be played quietly without voice prompts if desired.

• A relevant photo for each day of the week
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

DeathValley=><<'END',
Golden Canyon, Furnace Creek, Devil's Golf Course, Red Cathedral, Badwater Basin and many more! How well do you know Death Valley? Did you know that it has salt flats, sand dunes, badlands, valleys, canyons and mountains? This educational game uses 40 photos to introduce you to the major features of the largest national park in the USA outside Alaska. With interesting facts about each one.

• Entertaining game to introduce you to the USA's largest national park outside Alaska
• 40 photos
• Interesting spoken facts about each feature
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Death Valley USA" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

Dogs=><<'END',
American Bulldog, Border Collie, Chihuahua, Dalmatian, Lhasa Apso, Newfoundland, Rottweiler, Scottish Terrier and many more! This educational game uses 148 photos of adorable puppies and the adult dogs they become, to teach you to recognize 74 breeds of dog. Enjoy the photos, identify the correct puppy or dog and listen to the spoken facts. Read lots of interesting information such as weight, temperament, why the breed was developed, and average life span.

• Entertaining game to teach you 74 different breeds of dogs
• 148 photos of puppies and the adult dogs they become
• Lots of interesting spoken facts about each dog breed
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Puppies and Dogs" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

Dogs50=><<'END',
Basset Hound, Boxer, Cairn Terrier, Dachshund, Golden Retriever, Maltese, Pug and many more! This educational game uses 50 photos to teach you to recognize the world's top 50 favourite breeds of dog. Enjoy the photos, identify the correct dog and listen to the spoken facts.

• Entertaining game to teach you the world's top 50 favourite breeds of dog
• 50 photos
• Lots of interesting spoken facts about each dog breed
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Top 50 Dog Breeds" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

Dunloe=><<'END',
• Novel game which takes you on a thrilling bicycle ride
• 41 photos of the beautiful Gap of Dunloe
• Video clips of the stunning journey
• Race Mode to test your memory
• Slide show mode to show you all the photos in sequence
• Easy on-screen gestures for Race Mode, Race Results, Slide show mode and Help

This thrilling, high-speed bicycle ride through the Gap of Dunloe in South-West Ireland, takes you through inspiring scenery on a switchback trail. The tiny road runs through a deep valley formed by a mighty glacier 20,000 years ago. This glacier carved a route through Ireland's highest mountain range leaving behind cliffs, waterfalls, rivers and lakes.

Start your journey at the mountain pass at the top of the valley. Then see if you can recognise places along the route as your zig-zag ride takes you through this magnificent chasm to the lake in the valley below.

Every time you correctly identify a photo, you will see a short video clip of the journey. As your skill increases, you will see more and more video footage until the entire journey is played for you to enjoy!

Test yourself in Race Mode to see if you can identify all the different photos at speed. At the end of the race, you can check how well you have done relative to your other races and Tweet your friends with your results. Slide show mode shows you all the photos in sequence.
END

Eyes=><<'END',
An educational game about the fascinating variety of eyes to be found in the Animal Kingdom, suitable for students studying Biology from grade 5 onwards. This game uses 50 photos of eyes from insects and fish to reptiles and mammals, with interesting facts about each one, such as why cats can see so well in the dark, and why jumping spiders are so good at hunting.

Students hear a name or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of animal eyes
• Spoken facts about each type of eye
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

FamousCityLandmarks=><<'END',
An educational game about famous landmarks found in the famous cities of the world, for students studying Geography from grade 5 onwards. This game uses 81 photos to show 27 landmarks from 3 different angles, with interesting facts about each one.

Students hear a landmark spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the landmarks just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any landmarks that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new landmarks by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 81 photos of 27 famous city landmarks
• Facts about each city landmark
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

FamousLondonLandmarks=><<'END',
Big Ben, Houses of Parliament, Buckingham Palace, St. Paul's Cathedral, Harrods. London is full of historic buildings, marvellous architecture and eye-catching landmarks. This entertaining and educational game uses 174 inspiring photos to teach you to recognise 58 of the most famous. Enjoy the photos and original music, listen to the names, and choose the correct images.

•  Entertaining game to teach you the most famous landmarks of one the most famous cities in the world
•  Learn to recognize each Famous London Landmark from three different perspectives
•  Lots of interesting facts
•  174 inspiring photos
•  Race Mode to test your memory
•  Slide show mode to show you all the photos and facts in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Help

"Famous London Landmarks" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode lets you use this app with or without voice prompts.
END

FlowerAlphabet=><<'END',
This educational game uses 70 photos of flowers to teach the 26 letters of the English alphabet from A to Z, both uppercase and lowercase. Suitable for students from grade 1 onwards, and  those studying English as a second language.

Students hear a word spoken, they choose the matching photo and then trace the first letter of the word on the touch screen. Students are encouraged to trace letters by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the letters just covered, before continuing with new letters. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any letters that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new letters by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 70 photos of flowers
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all 26 letters in sequence, both uppercase and lowercase
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Fractions=><<'END',

An introduction to fractions using eggs to demonstrate elementary concepts such as full, empty, as many as, times as many as to help students gain a visual understanding of fractions and their application to everyday objects.  Students also learn to recognize phrases in spoken English relating to fractional quantities as they are used in conversation.

Students hear a name or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 48 photos of eggs in different  fractional configurations
• Spoken facts about each configuration
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide and show Mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Fruits=><<'END',
An introduction to fruits and berries, suitable for students studying Geography and Biology from grade 5 onwards. This game uses 100 photos to illustrate over 50 of the world's most popular fruits and berries, with interesting spoken facts such as annual worldwide production, the top producing countries and nutritional content.

Students hear a name or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 100 photos of fruits and berries
• Spoken facts about each fruit and berry
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

FunFair=><<'END',
An educational game to teach students simple English phrases through a visit to the Fun Fair, suitable for students from grade 1 onwards and those studying English as a second language. This game uses colourful photo sequences, music and carefully spoken sentences to teach students common English words and expressions.

Students hear a description of something at the fun fair and then choose the matching photo.  When they have chosen the correct photo, they hear a memorable phrase about the content of the photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the material just covered, before continuing with new phrases and photos. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any material that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new phrases and photos, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 132 photos of a day at the fun fair
• Memorable phrases
• Race Mode tests memory and comprehension
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Functions=><<'END',
An introduction to mathematical functions, suitable for Mathematics students from grade 8 onwards. This educational game uses 60 images to help students to recognize the graphs of the basic mathematical functions, y = x, sin(x), cos(x), tan(x), exp(x), log(x) and sinc(x) and their reciprocals, reflections and powers.

Students hear the name of a function and choose the matching graph. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the functions just covered, before continuing with new functions. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any functions that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new functions by saying them as the graphs are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 60 graphs of 4 variations each of 15 mathematical functions
• Reciprocals, reflections and powers
• Race Mode tests memory and comprehension
• Story Mode allows students to look, listen and learn
• Slide show mode displays each function in its variations
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

GardenFlowers=><<'END',
Azalea, Begonia, Carnation, Dahlia, Geranium, Hibiscus, Rose, Iris, Lilac, Pink, Viola and many more. This educational game uses 50 beautiful photos to teach you the names of 50 common flowers found in an English garden. Enjoy the photos and original music, listen to the names, and choose the correct images.

•  Entertaining game to teach you 50 common flowers found in an English garden
•  50 photos
•  Race Mode to test your memory
•  Slide show mode to show you all the photos in sequence
•  Easy on-screen gestures for Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode and Help.

"Garden Flowers" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts.
END

Gcd=><<'END',
See the Euclidean Algorithm in action as it quickly locates the greatest common divisor of two numbers. This animation will give you an excellent visual understanding of one of the most important ideas in the Mathematics of Algebra.  And once you can see what is happening, the symbolic representation in your algebra text book will make much more sense.

• Animation to show you how to find the greatest common divisor of two numbers
• Slide to each point in the animation
• Tap left and right for more simpler or more complex examples
• No in app advertizing
END


GeographyManmadeFeatures=><<'END',
An introduction to man-made geographical features, suitable for students studying Geography from grade 6 onwards. This educational game uses 50 photos to illustrate 50 different features, with interesting facts about each one.

Students hear a feature spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the features just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any features that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new features by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of 50 man-made geographical features
• Interesting facts about each feature
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

GeographyNaturalFeatures=><<'END',
An introduction to natural geographical features, suitable for students studying Geography from grade 6 onwards. This educational game uses 50 photos to illustrate 50 different features, with interesting facts about each one.

Students hear a feature spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the features just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any features that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new features by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of 50 natural geographical features
• Interesting facts about each feature
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

GeometricShapes=><<'END',
An introduction to geometric shapes, suitable for Mathematics students from grade 4 onwards. This educational game uses 40 colourful images and spoken facts to teach students the most common two and three dimensional geometric shapes that we encounter in our daily lives.

Students hear the name of a geometric shape or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the shapes and facts just covered, before continuing with new shapes and facts. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any shapes and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new geometric shapes by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 40 geometric shapes
• Spoken facts about each geometric shape
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the images and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Glacier=><<'END',
Grinnell Glacier, Garden Wall, Bearhat Mountain, Going-to-the-Sun Road, Lake McDonald, Highline Trail and many more! How well do you know Glacier National Park? Did you know that it has over 700 miles of hiking trails and over 130 named lakes? This educational game uses 40 photos to introduce you to the major features of one of the USA's most famous national parks. With interesting spoken facts about each one.

• Entertaining game to introduce you to one of the USA's most famous national parks
• 40 photos
• Interesting spoken facts about each feature
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Glacier National Park USA" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

GreatOlympians=><<'END',
Muhammad Ali, Nadia Comaneci, Jesse Owens, Emil Zatopek, Michael Phelps and many more!  This educational game uses 50 photos to teach you to recognize 50 of the greatest athletes of both Summer and Winter Olympic Games. From Track and Field, Boxing and Swimming to Gymnastics, Show Jumping, Skiing and Speed Skating, all the world's greatest Olympians are here. Enjoy the photos and original music, listen to the names, and choose the correct images. Refer to the fact sheet with each photo for lots of interesting information.

•  Entertaining game to teach you 50 of the world's greatest athletes
•  50 great champions of both Summer and Winter Olympic Games
•  Lots of interesting information about each athlete
•  Race Mode to check your progress
•  Slide show mode to show you all the photos and facts in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Help

"Great Olympians" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode lets you use this app with or without voice prompts.
END

GreatSportsCars=><<'END',
Ferrari, Lamborghini, Maserati, Bugatti, Ford, Chevrolet, McLaren, Porsche and many more! This educational game uses 100 photos to teach you to recognize 20 of the world's fastest and most iconic sports cars in commercial production. See if you can recognize these cars from the front, side, rear, interior and engine - not as easy as you might think!  With lots of interesting facts such as top speed, transmission and engine size.

• Entertaining game to teach you to recognize 20 of the world's fastest sports cars
• 100 photos showing each iconic car from different angles and perspectives
• Lots of interesting facts
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Quiet Mode, Wikipedia and Help.

"Great Sports Cars" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

Greek=><<'END',
The Greek Alphabet is a major source of technical symbols used in many fields of knowledge such as mathematics, science, engineering and finance to represent the special constants, functions and variables used in the mathematical formulae that describe the most important ideas associated with each of these areas of intellectual endeavour: Alpha a helium nuclei, beta an electron, gamma a photon, being particles emitted in nuclear reactions. But alpha is also the active return on an investment in finance or the brightest star in a constellation in astronomy. Delta a difference, pi a ratio, theta an angle, phi the empty set, omega the first infinite ordinal in mathematics. Lambda a wavelength, mu a muon in physics. It is easier to read about these subjects if you can recognize, name and write these symbols confidently: if you want to be a mathematician or a venture capitalist steep yourself in these strange symbols until they are so familiar that you can forget that once, before you played this app, you did not know them.

• Recognize the letters of the Greek alphabet
• Say the letters of the Greek alphabet
• Write the letters of the Greek alphabet
• Lowercase and uppercase
• Race Mode to test your memory
• Slide show Mode to show you all the letters in sequence
END


House=><<'END',
I just adore, your new front door. Be careful not to bump your head, when you sit up in a bunk bed. Can you foretell, who'll ring your bell? Can you see me, on your TV? This is an educational game to help you recognize the names of items found in and around a house in spoken English.  Each item has an associated rhyme which gives an example of the word in action and helps you to remember how to use the word yourself in English conversation. Ideal for students learning to speak English either as a first or a second language.

Students hear a name or rhyme spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 60 colourful photos of things you find in and around a house
• Spoken rhymes about each item to help you remember them
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

HowHeavyAmI=><<'END',
An educational game about the relative weights of living things. Suitable for students studying Science from grade 4 onwards. This game uses 40 photos of animals to teach students about the wide range of weights to be found in the animal kingdom. Which animal weighs a massive 170 tonnes or a tiny 12 g? How much does the heaviest snake, the heaviest insect or the heaviest land animal weigh? With spoken facts about each one.

Students hear a name or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 40 photos of animals
• Spoken facts about each animal
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

HowMuchPowerDoIUse=><<'END',
An educational game about how much power is used by 35 common electrical appliances. Suitable for students studying Science from grade 5 onwards. Which household appliance uses a massive 5KW of electricity or a tiny 5W? How much power does a kettle, a laptop, a breadmaker, a hair dryer or an aquarium use?  This game enables students to discover the typical power rating of household appliances and so which guzzle electricity and which do not.

Students hear the name of an electrical appliance and choose the matching photo. They then hear more information about the power rating which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the electrical appliances and their power ratings just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any electrical appliances that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new electrical appliances and their power ratings by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 35 photos of common electrical appliances
• Power rating for each one
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and power ratings in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

India=><<'END',
Tah Mahal, India Gate, Howrah Bridge, Lotus Temple, Lake Palace, Imperial Towers, Tso Moriri Lake and many more! How well do you know India? Do you know which hotel was voted the most romantic, which is the top tourist attraction in Mumbai and which clock tower is modelled on London's Big Ben? This educational game uses 42 photos to introduce you to the major features of one of the most fascinating countries on earth. With interesting spoken facts about each one.

• Entertaining game to introduce you to one of the most fascinating countries on earth
• 42 photos
• Interesting spoken facts about each feature
• Race Mode to test your memory
• Slideshow and Story Mode to show you all the photos and facts in sequence
• Easy on-screen gestures allow you to find Facts, Races, Race Results, Slideshow and Story Mode, Zoom and Pan, Sharing Mode, Quiet Mode, Wikipedia and Help.

"India" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slideshow and Story Mode shows you all the photos and facts in sequence; simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan allows you to magnify the photos to see more detail. Sharing Mode allows you to share a copy of the paid version of this app with friends. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

Jets=><<'END',
Mig-29 or F-35 Lightning, which aircraft can climb faster?  F-22 Raptor versus Typhoon, which aircraft would win in a dogfight?  U2 or Blackbird, which plane flew higher? How long did it take Concorde to fly around the World?  Every year, aircraft become more  expensive amd more sopisticated. This app shows you how they have changed in one life time from canvas glued to wood through aluminium all the way to titanium.

• Entertaining game to teach you about planes, jets and helicopters.
• Interesting spoken facts about each aircraft
• Race Mode to test your memory
• Slideshow and Story Mode to show you all the photos and facts in sequence
• Easy on-screen gestures allow you to find Facts, Races, Race Results, Slideshow and Story Mode, Zoom and Pan, Sharing Mode, Quiet Mode, Wikipedia and Help.

"Jets" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slideshow and Story Mode shows you all the photos and facts in sequence; simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan allows you to magnify the photos to see more detail.  Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

ManOnTheMoon=><<'END',
This educational game uses 75 historic photos to document the Apollo 11 mission to the moon in 1969, and is suitable for History students from grade 4 onwards. Students can see the Saturn V rocket being assembled, follow the astronauts through training, watch them fly to the moon and return safely to earth. Includes original NASA recordings plus spoken facts.

Students hear a spoken description or fact and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the student's memory and comprehension of the material just covered, before continuing with new information  about the Apollo mission. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any information that the student has difficulty understanding, and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new facts about the Apollo mission by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 75 historic photos
• Spoken facts about each photo
• Historic NASA recordings
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in chronological order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

LakeDistrict=><<'END',
How well do you know the most visited national park in the United Kingdom? This mountainous region of North West England has the highest mountain and the deepest and longest lakes in England, together with beautiful villages linked by footpaths, sparkling rivers and tarns, and ancient bridges. William Wordsworth captured the beauty in his poetry, and the National Trust now owns one quarter of the total area for posterity. This educational game uses 106 stunning photos to illustrate many of the major features and attractions, with interesting facts about each one.

• Entertaining game about the Lake District National Park
• 106 spectacular photos
• Interesting spoken facts
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Lake District" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

MarineAquariumFish=><<'END',
Surgeonfish, Clownfish, Angelfish, Gobies, Puffers, Wrasse, Tangs and many more! This educational game uses 52 photos to introduce you to the colourful world of tropical fish. Enjoy the virtual aquarium on your phone as you learn the names of each fish. Read the facts for lots of interesting information about their lifestyle and where they live.

• Entertaining game to teach you about the fascinating fish that live in tropical oceans
• 52 photos of colourful fish
• Lots of interesting facts
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Marine Aquarium Fish" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

MonthsOfTheYearInEnglish=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. This game uses 12 seasonal photos to teach the names of the months of the year.

Students hear a word spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 12 seasonal photos
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END


MonthsOfTheYearInGerman=><<'END',
Twelve beautiful photos of seasonal landscapes teach you the names of the twelve months of the year in German, each month slowly, clearly and correctly spoken by actor Wolfgang Binder to help students recognize and use these names of the months correctly in spoken German.

Students hear a word spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 12 beautiful photos of seasonal landscapes
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Noses=><<'END',
An educational game about the fascinating variety of noses to be found in the Animal Kingdom, suitable for students studying Biology from grade 5 onwards. This game uses 50 photos of noses from amphibians and fish to reptiles, birds and mammals, with interesting facts about each one.

Students hear a name spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names just covered, before continuing with new names. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of animal noses
• Interesting facts about each type of nose
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

OodlesOfAnimals=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 2 onwards and those studying English as a second language. The game uses 50 photos to teach students 21 collective nouns that are commonly used to describe different groups of animals, such as shoal, colony, army, pack, flock, herd, brood, litter, swarm and troop.

Students hear a collective noun spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the collective noun just covered, before continuing with new nouns. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any nouns that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new collective nouns by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of groups of animals
• 21 collective nouns
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

OrganicMolecules=><<'END',
An introduction to organic molecules, suitable for Chemistry students from grade 9 onwards. This educational game uses diagrams of 34 molecular structures to teach students the most common organic molecules that we encounter in our daily lives. With spoken facts about each one such as common commercial and domestic usage.

Students hear the name of an organic molecule or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the molecules and facts just covered, before continuing with new molecules and facts. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any molecules and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new organic molecules by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 34 diagrams of 34 organic molecules
• Rotations and reflections of each molecule
• Spoken facts
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the molecules and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Parks=><<'END',
Yellowstone, Grand Canyon, Death Valley, Yosemite, Grand Teton, Glacier and many more! How well do you know your American national parks? Which is the largest, the oldest, the most visited, has the world's biggest tree and biggest volcano, or the longest cave? This educational game uses 105 spectacular photos to introduce you to 21 of the most popular national parks in the USA. With interesting facts about each one.

• Entertaining game to introduce you to 21 popular national parks in the USA
• 105 spectacular photos
• Interesting spoken facts about each National Park
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"National Parks USA" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

Past=><<'END',
"I was seen in the sea by a shark that saw me". The most commonly used verbs  in English have irregular past participles such as gone, make, wrote. This  app uses amusing nonsense rhymes, alliteration, word association and  dramatic images to teach you to recognize all the commonly used irregular  past participles that you will encounter in every day spoken English. The  amusing nonsense rhymes and alliteration not only help you to remember the  irregular past participles, but provide a template that you can use to  construct your own sentences in English, confident that you are expressing  yourself correctly and fluently using the appropriate irregular past  participle.

Students hear a spoken rhyme and choose the matching photo. After six right  in a row race mode starts automatically: it asks questions at speed to test  the students' memory and comprehension of the rhymes just covered, before  continuing with new ones. At the end of the race, students can see how well  they have done relative to their other races. The game gradually focuses on  any rhymes that the student has difficulty recognizing, and speeds up as  competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new rhymes by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• Educational and entertaining game to introduce you to 144 irregular past participles in English.
• 144 spectacular photos to link situations to specific verbs
• Amusing rhymes helps you remember the past participle for each verb
• Alliteration confirms that you have remembered the correct rhyme
• Word association extends your vocabulary to related words
• Amusing rhymes provides a template with which to construct new sentences
• Links to Wiktionary for each verb
• Race Mode to test your memory
• Slide show mode to show you all the verbs in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"The Irregular Past in English" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wiktionary for more information about each verb.
END

PawsAndClaws=><<'END',
An educational game about the fascinating variety of feet to be found in the Animal Kingdom, suitable for students studying Biology from grade 5 onwards. This game uses 50 photos of feet, paws and claws from amphibians and reptiles to birds and mammals, with interesting facts about each one, such as why elephants can walk silently, and why geckos can climb sheer glass walls.

Students hear a name spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names just covered, before continuing with new names. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of feet, paws and claws
• Interesting facts about each one
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Penguins=><<'END',
Emperor, King, Gentoo, Macaroni, Adelie and Chinstrap. This educational game uses 36 photos to teach you to recognize the 6 species of penguin that live in the Antarctic region. Enjoy the photos and original music, listen to the names, and choose the correct images. Read the facts with each photo for lots of interesting information, such as diet, average life span, population and predators.

• Entertaining game to teach you about the penguins that live in Antarctica
• Lots of interesting facts about each species of penguin
• 36 photos showing both adults and chicks
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode and Help.

"Penguins of Antarctica" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races and Tweet your friends with your best result. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you to play this game with or without voice prompts.
END

PlusOrMinus=><<'END',
This educational game teaches students to recognize and perform addition and subtraction in spoken English. It follows on from "The Numbers from 1 to 100 in English" and is a prelude to learning to multiply and divide in spoken English. Students hears addition and subtraction problems involving a number between one and one hundred and a number between one and ten to which they must pick the right answer from the possibilities displayed. Erroneous answers are corrected by showing the student an animated procedure for performing addition or subtraction which requires only the ability to count up or down in English.

After six answers right in a row race mode starts automatically: it asks questions rapidly to test the students' capability to perform addition and subtraction using spoken English at speed. At the end of the race, the student can see how well they have done relative to their other races. The game gradually focuses on any problems that the student has difficulty performing and speeds up as competence is gained.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use.

• Educational and entertaining game to introduce students to addition and subtraction problems stated in spoken English
• Animations to demonstrate addition and subtraction
• Race Mode to test the student's progress
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide Show Mode, Story Mode and Help.

END

PuppyDogBreedsOne=><<'END',
Beagle, Boxer, Dalmatian, Poodle, Spaniel, Terrier and many more!  This educational game uses 74 photos of charming toy puppies to teach you to recognize 24 breeds of dog. Enjoy the photos and original music, listen to the names, and choose the correct images. Read the facts with each photo for lots of interesting information, such as weight, temperament, why the breed was developed, and average life span.

•  Entertaining game to teach you 24 different breeds of dogs
•  Lots of interesting facts about each dog breed
•  74 photos of charming toy puppies
•  Race Mode to test your memory
•  Slide show mode to show you all the photos in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Help

"Model Puppy Dog Breeds No.1" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode lets you use this app with or without voice prompts.
END

PuppyDogBreedsTwo=><<'END',
Afghan, Beagle, Chihuahua, Dalmatian, Pekinese, Terrier and many more!  This educational game uses 71 photos of charming toy puppies to teach you to recognize 24 breeds of dog. Enjoy the photos and original music, listen to the names, and choose the correct images. Read the facts with each photo for lots of interesting information, such as weight, temperament, why the breed was developed, and average life span.

•  Entertaining game to teach you 24 different breeds of dogs
•  Lots of interesting facts about each dog breed
•  71 photos of charming toy puppies
•  Race Mode to test your memory
•  Slide show mode to show you all the photos and facts in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Help

"Model Puppy Dog Breeds No.2" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode lets you use this app with or without voice prompts.
END

RhymingKitchen=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. The game uses 80 photos and humourous rhymes to teach the names of 80 different items found in a kitchen.

Students hear a word spoken and choose the matching photo. They then hear a humourous rhyme to help them remember the word. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 80 photos of items found in a kitchen
• 80 humourous rhymes
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and rhymes in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help

Learn the Kitchen in words that rhyme, You'll find it saves a lot of time.
If all these words you can master, You'll speak English that much faster.
With 80 kitchen photographs, You're bound to have a lot of laughs.
Can-opener, dish washer, freezer, Cheese grater or lemon squeezer?
If all these words are new to you, Then here is what you have to do,
Download this game and play it through, So you can learn the kitchen too!
END

Seasons=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. This game uses 8 seasonal photos to teach the names of the four seasons, with simple spoken facts about each one.

Students hear a word or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words and facts just covered, before continuing with new words and facts. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 8 seasonal photos
• Simple spoken facts
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Sharks=><<'END',
An educational game about the sharks which live in the oceans of our planet, suitable for students studying Geography and Biology from grade 5 onwards. This game uses 50 photos to introduce students to 50 different species, with interesting spoken facts about each one.

Students hear a name or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of sharks
• Spoken facts about each animal
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

SignsoftheZodiac=><<'END',
Pisces, Aries, Gemini, Scorpio, Aquarius, Taurus, Capricorn, Cancer, Leo, Libra, Sagittarius, Virgo. This educational game teaches you the 12 signs of the Zodiac and their symbols. Enjoy the pictures and original music, listen to the names, and choose the correct images. Refer to the fact sheet which accompanies each picture for lots of interesting information such as birth dates, ruling planets, character traits, and compatibility with other zodiac signs.

•  Entertaining game to teach you the 12 signs of the Zodiac and their symbols
•  Lots of interesting facts about the characteristics of each Zodiac sign
•  Race Mode to check your progress
•  Slide show mode to show you all the signs, symbols and facts in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Help

"Signs of the Zodiac" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the signs, symbols and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode lets you use this app with or without voice prompts.
END

SoftToyAlphabet=><<'END',
This educational game uses 54 photos of soft toys to teach the 26 letters of the English alphabet from A to Z, both uppercase and lowercase. Suitable for students from grade 1 onwards, and those studying English as a second language.

Students hear a word spoken, they choose the matching photo and then trace the first letter of the word on the touch screen. Students are encouraged to trace letters by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the letters just covered, before continuing with new letters. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any letters that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new letters by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 54 photos of soft toys
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all 26 letters in sequence, both uppercase and lowercase
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Subtraction=><<'END',
Learn to subtract numbers easily!  Avoid the tedium of learning by rote the 110 subtractions like 14 - 5 = 9 needed to subtract decimal numbers by using the handy, labour saving technique illustrated in this animation!

• Animation to show you how to subtract decimal numbers
• Slide to each point in the animation
• Tap left and right for more simpler or more complex examples
• No in app advertizing
END

SunMoonsPlanets=><<'END',
An introduction to our fascinating Solar System, suitable for Science students from grade 5 onwards. This educational game uses 45 high-resolution NASA photos and spoken facts to teach students to recognize all eight planets together with many of their moons.

Students hear a planet, moon or fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the names and facts just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any names and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new names and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 45 NASA photos
• Spoken facts about each planet and moon
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

SuperBirds=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 2 onwards and those studying English as a second language. This game uses 40 photos to teach students 20 common superlatives, with spoken facts about each one. Which bird is the highest flying, deepest diving, most intelligent or furthest migrating, or has the longest beak or biggest nest?

Students hear a superlative or a fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the superlatives and facts just covered, before continuing with new superlatives and facts. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any superlatives and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new superlatives and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 20 photos of birds
• 12 common superlatives
• Spoken facts about each bird
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

SuperFish=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 2 onwards and those studying English as a second language. This game uses 20 photos to teach students 12 common superlatives, with spoken facts about each one. Which fish is the fastest swimming, longest living, most venomous or strangest looking, or has the largest teeth or strongest bite?

Students hear a superlative or a fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the superlatives and facts just covered, before continuing with new superlatives and facts. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any superlatives and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new superlatives and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 20 photos of fish
• 12 common superlatives
• Spoken facts about each fish
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

SuperMammals=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 2 onwards and those studying English as a second language. This game uses 32 photos to teach students 16 common superlatives, with spoken facts about each one. Which mammal is the largest, tallest, fastest, heaviest, loudest or furthest migrating, or has the biggest mouth or the best hearing?

Students hear a superlative or a fact spoken and choose the matching photo. They then hear more information which they will need to answer subsequent questions.  After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the superlatives and facts just covered, before continuing with new superlatives and facts. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any superlatives and facts that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new superlatives and facts by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 32 photos of mammals
• 16 common superlatives
• Spoken facts about each mammal
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos and facts in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

TeddyBearsInAction=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. This game uses 34 photos of Teddy Bears to teach students 34 common verbs used in the English language.

Students hear a verb spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the verb just covered, before continuing with new verbs. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any verbs that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new verbs by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 34 photos of Teddy Bears
• 34 common verbs
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

TellTheTime=><<'END',
An educational game to teach students how to tell the time, suitable for Mathematics students from grade 1 onwards and those studying English as a second language. This game uses 23 photos of clocks to teach useful phrases such as "one o'clock", "half past five", "quarter to six", "twenty past eight" or "ten to three".

Students hear a time spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the times just covered, before continuing with new times. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any times that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new times by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 23 photos of clocks
• 23 useful phrases
• Race Mode tests memory and comprehension
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in time sequence
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

TellTheTimeGerman=><<'END',
Fünf vor halb zwölf! This game uses 23 photos of clocks to teach you the German phrases you need to know to recognize and tell the time accurately in spoken German. Spare yourself the ignominy of arriving an hour late for dinner because you thought "halb sieben" is later than in fact it really is.

Students hear a time spoken and choose the matching clock photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the times just covered, before continuing with new times. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any times that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new times by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 23 photos of clocks
• Times spoken clearly and slowly in German
• Race Mode tests memory and comprehension
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in time sequence
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

TellTheTimeTwo=><<'END',
An educational game to teach students how to tell the time, suitable for Mathematics students from grade 1 onwards and those studying English as a second language. This game uses 50 photos of clocks and timepieces from around the world to illustrate the two common ways of saying the same time, such as "twelve thirty" and "half past twelve", or "five forty-five" and "quarter to six".  If students have enjoyed "Tell the Time", then "Tell the Time Two" will help to teach them more useful phrases.

Students hear a time spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the times just covered, before continuing with new times. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any times that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new times by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of clocks
• 50 useful phrases
• Race Mode tests memory and comprehension
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in time sequence
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

TestCricketersAustralia=><<'END',
Shane Warne, Ricky Ponting, Glenn McGrath, Matthew Hayden, Justin Langer, Michael Clarke, and many more! This game uses 76 photos of Australian Test cricketers to teach you to recognize 40 of the greatest players from the past 20 years. Enjoy the photos and original music, listen to the names, and choose the correct images. Read the facts for lots of information, such as number of Test matches played, runs scored, balls bowled and wickets taken.

• Entertaining game to teach you 40 Test Cricketers of Australia
• Lots of interesting facts about each cricketer
• 76 photos of many of Australia's greatest Test cricketers of the past 20 years
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Help

"Test Cricketers of Australia" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you to play this game with or without voice prompts.
END

TestCricketersIndia=><<'END',
Sachin Tendulkar, V.V.S. Laxman, Rahul Dravid, Sourav Ganguly, Mahendra Singh Dhoni and many more! This game uses 65 photos of Indian Test cricketers to teach you to recognize 40 of the greatest players from the past 20 years. Enjoy the photos and original music, listen to the names, and choose the correct images. Read the facts for lots of information, such as number of Test matches played, runs scored, balls bowled and wickets taken.

• Entertaining game to teach you 40 Cricketers of India
• Lots of interesting facts about each cricketer
• 65 photos of many of India's greatest Test cricketers of the past 20 years
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Help

"Test Cricketers of India" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you to play this game with or without voice prompts.
END

TheNumbersFrom1To100InEnglish=><<'END',
This educational game teaches students to recognize and write numbers from 1 to 100. Suitable for students from grade 1 onwards, and those studying English as a second language.

Students hear a number spoken, they choose the matching image and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the images are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• Teaches recognition and writing of numbers from 1 to 100
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the images in numerical order
• Easy on-screen gestures to control the game
• Context-sensitive help

END

TheNumbersFrom1To100InFrench=><<'END',
If you have recently moved to France from another country, perhaps to work on fusion at the International Thermonuclear Experimental Reactor at Cadarache, you might find it very useful to know how to recognize the numbers from 1 to 100 in spoken French, to be able to recognize them in conversation, to be able to read their written forms and to be able to say them, as these numbers occur frequently in every day life, such as in shopping where they represent weights and quantities of produce and amounts of money or in travel where to numbers are used to represent times, or at work where French prowess in nuclear engineering makes the ability to understand these numbers in spoken French absolutely crucial.

This educational app teaches you to recognize the numbers from 1 to 100 in spoken French, how to read them in written form and how to write them using spectacular multi-coloured bubble-writing. Trace the numbers to make the music more audible.

Race mode tests your comprehension at speed with your best time ever being rewarded with an Appa Apps Racing Certificate as proof of your achievement.

• Recognize the numbers from 1 to 100 in spoken French
• Learn the written forms of numbers in French
• Spectacular multi-coloured bubble-writing
• Trace the numbers to make the music more audible
• Appa Apps Racing Certificate for best time ever
END

TraceNumbers09=><<'END',
This game teaches students to recognize the numbers from 0 to 9 in spoken English. Each number is carefully spoken by three different native speakers of English so that students can quickly learn to recognize these useful words in a variety of conversational settings.

Students hear a number spoken, they choose the matching image and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the images are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• Teaches recognition and writing of numbers from 0 to 9
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the images in numerical order
• Easy on-screen gestures to control the game
• Context-sensitive help

END

TraceNumbers09InCantonese=><<'END',

This educational game teaches students to recognize the numbers from 0 to 9 in spoken Cantonese Chinese. Each number is spoken carefully and clearly by a native speaker of Mandarin Chinese to teach you how to recognize these words in normal conversation.

Students hear a number spoken, they choose the matching image and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the images are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• Teaches recognition and writing of numbers from 0 to 9 in Cantonese
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the images in numerical order
• Easy on-screen gestures to control the game
• Context-sensitive help

END

TraceNumbers09InMandarin=><<'END',

This educational game teaches students to recognize the numbers from 0 to 9 in spoken Mandarin Chinese. Each number is spoken carefully and clearly by a native speaker of Mandarin Chinese to teach you how to recognize these words in normal conversation.

Students hear a number spoken, they choose the matching image and then trace the number on the touch screen. Students are encouraged to trace numbers by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the numbers just covered, before continuing with new numbers. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any numbers that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new numbers by saying them as the images are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• Teaches recognition and writing of numbers from 0 to 9 in Mandarin
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the images in numerical order
• Easy on-screen gestures to control the game
• Context-sensitive help

END

Top10FastMotorBikes=><<'END',
Suzuki Hayabusa, Honda Super Blackbird, Ducati 1098, Kawasaki Ninja ZX-14 and many more! This educational game uses 25 photos to teach you the names of 10 of the fastest and most iconic motorbikes in commercial production. Enjoy the photos and original music, listen to the names, and choose the correct images.
Read the facts with each photo for lots of interesting information, including top speed, engine size and transmission.

•  Entertaining game to teach you about 10 of the fastest motorbikes in commercial production
•  Lots of interesting facts about each motorbike
•  25 photos
•  Race Mode to test your memory
•  Slide show mode to show you all the photos and facts in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode and Help.

"Top 10 Fast Motorbikes" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts.
END

ToBeOrNotToBe=><<'END',
To be or not to be? That is the question. Learn to recite the most famous soliloquy in the English Language.

•  Entertaining game to teach you to recite Hamlet's most famous words
•  15 photos
•  Race Mode to test your memory
•  Slide show mode to show you all the photos and phrases in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode and Help.

END

Top10HighestMountains=><<'END',
Everest, K2, Kangchenjunga, Lhotse, Makalu, Cho Oyu, Dhaulagiri, Manaslu, Nanga Parbat and Annapurna. This educational game uses 50 photos to teach you to recognize the world's 10 highest mountains. Enjoy the photos and original music, listen to the names, and choose the correct images. Read the facts with each photo for lots of interesting information, such as the height, when it was first climbed and by which mountaineer.

•  Entertaining game to teach you the top 10 highest mountains in the world
•  50 eye-catching photos
•  Lots of interesting facts about each mountain
•  Race Mode to test your memory
•  Slide show mode to show you all the photos and facts in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Help

"Top 10 Highest Mountains" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you play this game with or without voice prompts.
END

Top10TallestAsiaPacificRollerCoasters=><<'END',
Eejanaika, Dodonpa, BuzzSaw, Fujiyamas, Takabisha, Thunder Dolphin and much more! This educational game uses 33 stunning photos to introduce you to the top 10 tallest roller coasters in the Asia-Pacific region. Enjoy the photos and original music, listen to the names, and choose the correct images. Read the facts with each photo for lots of interesting information.

• Entertaining game about the top 10 tallest roller coasters in the Asia-Pacific region
• Lots of interesting facts about each type of roller coaster
• 33 exciting photos
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode and Help

"Top 10 Roller Coasters Asia" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races and Tweet your friends with your result. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you to play the game without voice prompts.
END

Top10TallestEuropeanRollerCoasters=><<'END',
Colossos, Expedition GeForce, iSpeed, Jubilee Odyssey, Stealth, Pepsi Max Big One, Shambhala and more! This educational game uses 8 videos and 60 stunning photos to introduce you to Europe's top 10 tallest roller coasters. Enjoy the photos and original music, listen to the names, and choose the correct images. Then experience the thrill of the ride in a front row seat! Exciting video clips increase in length as your game playing skills improve! Read the facts with each photo for lots of interesting information.

•  Entertaining game to introduce you to the top 10 tallest roller coasters in Europe
•  8 exciting all-action video clips give you a front row seat!
•  60 exciting photos
•  Lots of interesting facts about each type of roller coaster
•  Race Mode to test your memory
•  Slide show mode to show you all the photos and facts in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode and Help

"Top Roller Coasters Europe" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races and Tweet your friends with your result. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you to play the game without voice prompts.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising. No Internet connection is required.

ALL VIDEOS USED IN THIS APP ARE KINDLY PROVIDED BY
http://www.coasterforce.com
END

Top10TallestFerrisWheels=><<'END',
Singapore Flyer, Star of Nanchang, London Eye, Daikanransha and more! This educational game uses 31 eye-catching photos to introduce you to the top 10 tallest ferris wheels in the world today. Enjoy the photos and original music, listen to the names, and choose the correct images. Read the facts with each photo for lots of interesting information including height, number of capsules and seats, and much more!

• Entertaining game to introduce you to the top 10 tallest ferris wheels in the world
• Lots of interesting facts about each ferris wheel
• 31 eye-catching photos
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Help

"Top 10 Ferris Wheels" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode lets you use this app with or without voice prompts.
END

Top10TallestNorthAmericanRollerCoasters=><<'END',
Desperado, El Toro, Goliath, Intimidator 305, Top Thrill Dragster, Millennium Force and more! This educational game uses 8 videos and 50 stunning photos to introduce you to North America's top 10 tallest roller coasters. Enjoy the photos and original music, listen to the names, and choose the correct images. Then experience the thrill of the ride in a front row seat! Exciting video clips increase in length as your game playing skills improve! Read the facts with each photo for lots of interesting information.

•  Entertaining game to introduce you to the top 10 tallest roller coasters in North America
•  8 exciting all-action video clips give you a front row seat!
•  50 exciting photos
•  Lots of interesting facts about each type of roller coaster
•  Race Mode to test your memory
•  Slide show mode to show you all the photos and facts in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode and Help.

"Top Roller Coasters N.America" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races and Tweet your friends with your result. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode allows you to play the game without voice prompts.

The paid version of this app has much higher resolution photos than the free version. The free version has lower resolution photos and does contain advertising but no push advertising. No Internet connection is required.

ALL VIDEOS USED IN THIS APP ARE KINDLY PROVIDED BY  http://www.coasterforce.com
END

Top10TallestRollerCoasters=><<'END',

Kingda Ka, Top Thrill Dragster, Millennium Force, Tower of Terror II, Intimidator 305 and many more! This educational game uses 27 stunning photos to introduce you to the world's top 10 tallest roller coasters. Enjoy the photos, listen to the names, and choose the correct images. Then have fun checking your progress in Race Mode to see if you can recognize these terrific rides at speed, and try to beat your last best time. "Top 10 Tallest Roller Coasters" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

•  Entertaining game to introduce you to the top 10 tallest roller coasters in the world
•  Lots of interesting facts about each roller coaster
•  27 exciting colorful  photos
•  Race Mode to test your memory
•  Slide show mode to show you all the photos and facts in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode and Help.
END

Top10TallestTowers=><<'END',
Burj Khalifa, Abraj-al-Bait Towers, Taipei 101, Petronas Towers, Zifeng Tower, Kingkey 100 and more!  10 inspiring photos teach you to recognize the top 10 tallest towers in the world today, with exciting facts about each classic skyscraper. You will also learn how to recognize superlatives and the ordinal numbers from 1 to 10 in spoken English. Who knew skyscrapers could be so interesting? Enjoy the photos and original music, listen to the spoken names, numbers and facts then  choose the correct images.

•  Entertaining game about the world's top 10 tallest towers
•  Lots of interesting facts about each type of skyscraper
•  10 eye-catching photos
•  Race Mode to test your memory
•  Slide show mode to show you all the photos and facts in sequence
•  Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Quiet Mode, Help


"Top 10 Tallest Towers" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Quiet Mode lets you use this app with or without voice prompts.

END

Top20HorseBreeds=><<'END',
Arabian, Appaloosa, Icelandic, American Saddlebred, Mustang, Tennessee Walking Horse, Paso Fino and many more! This educational game uses 58 photos to teach you to recognise the world's top 20 favourite breeds of horse, with lots of interesting spoken facts about each wonderful animal.

• Entertaining game to teach you about the world's top 20 favourite breeds of horse
• 58 photos
• Lots of interesting spoken facts about each breed
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Top 20 Horse Breeds" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

ToyTransportAlphabet=><<'END',
This educational game uses 26 photos of children's toys to teach the 26 letters of the English alphabet from A to Z, both uppercase and lowercase. Suitable for students from grade 1 onwards, and  those studying English as a second language.

Students hear a word spoken, they choose the matching photo and then trace the first letter of the word on the touch screen. Students are encouraged to trace letters by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the letters just covered, before continuing with new letters. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any letters that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new letters by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 26 photos of children's toys
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all 26 letters in sequence, both uppercase and lowercase
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

TransportAlphabet=><<'END',
This educational game uses 80 photos of different modes of transport to teach the 26 letters of the English alphabet from A to Z, both uppercase and lowercase. Suitable for students from grade 1 onwards, and those studying English as a second language.

Students hear a word spoken, they choose the matching photo and then trace the first letter of the word on the touch screen. Students are encouraged to trace letters by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the letters just covered, before continuing with new letters. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any letters that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new letters by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 80 photos of different modes of transport
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all 26 letters in sequence, both uppercase and lowercase
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Trees=><<'END',
Oak, Ash, Yew or Lime? Which tree grows for the longest time? Is a Black Gum gummy?  Should you ever make honey from a Honey Locust Tree? Do you know which wood would have been used to make Wotan's spear or the English bows at Agincourt?  Or what kind of tree Ab Lincoln split to make posts and rails? Where is the World's most northerly Olive Tree grove? Do horses like Horse Chestnuts? This educational game uses 50 colorful photos to teach you about the common trees you will see all around you and helps you to recognize them by their shapes, their flowers and their leaves.

• Entertaining game to teach you to recognize 50 common trees
• 50 colourful high resolution photos
• Race Mode to test your memory
• Slide show mode to show you all the photos in sequence
• Easy on-screen gestures for Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Trees" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the flowers in sequence, both by colour and alphabetically. Simply slide through the images with your finger on the screen, horizontally, vertically or diagonally. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

Waterfalls=><<'END',
Relax to the beautiful sound of falling water. See if you can recognise each waterfall by the sound it makes, select the correct photo and then enjoy a short video of that waterfall. Test yourself in Race Mode to see if you can remember all the different sounds at speed. At the end of the race, you can check how well you have done relative to your other races and Tweet your friends with your results. Slide show mode shows you all the photos in sequence.

• Entertaining game featuring the sound of falling water
• 11 photos and videos of different waterfalls
• Race Mode to test your memory
• Slide show mode to show you all the photos in sequence
• Easy on-screen gestures for Race Mode, Race Results, Slide show mode and Help
END

WeatherVanes=><<'END',
This educational game uses 26 photos of weather vanes to teach the 26 letters of the English alphabet from A to Z, both uppercase and lowercase. Suitable for students from grade 1 onwards, and  those studying English as a second language.

Students hear a word spoken, they choose the matching photo and then trace the first letter of the word on the touch screen. Students are encouraged to trace letters by hearing more of the music as they trace. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the letters just covered, before continuing with new letters. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any letters that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new letters by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 26 photos of weather vanes
• Tracing with coloured Bubble Writing
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all 26 letters in sequence, both uppercase and lowercase
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

WeatherVanes=><<'END',
An educational game to teach useful vocabulary, suitable for students from grade 1 onwards and those studying English as a second language. This game uses 50 photos to teach the names of 50 different wild animals.

Students hear a word spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any words that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 50 photos of wild animals
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

WildAnimals=><<'END',
Lions and Tigers! This educational game uses 50 photos to teach you the names of 50 wild animals in English.

• Entertaining game to teach you to recognize 50 wild animals.
• 50 photos
• Race Mode to test your memory
• Slide show mode to show you all the photos in sequence
• Easy on-screen gestures for Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Wild Animals" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the animals in sequence, both by colour and alphabetically. Simply slide through the images with your finger on the screen, horizontally, vertically or diagonally. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

WildAnimalsGerman=><<'END',
Löwen und Tiger! This educational game uses 50 gorgeous photos of wild animals taken by well known wild life photographer Ruth Croome to teach the names of 50 different wild animals in clearly and slowly spoken German correctly enunciated by actor Wolfgang Binder. Ideal for developing vocabulary for students learning to both speak and recognize spoken German. Students hear a word spoken and choose the matching photo. After six right in a row race mode starts automatically: it asks questions at speed to test the student's memory and comprehension of the words just covered, before continuing with new words. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any animals that the student has difficulty recognizing and speeds up as competence is gained. By contrast to Race Mode, Story Mode slowly introduces new words by saying them as the photos are shown, allowing the student to quietly look, listen and learn. The game is controlled by on-screen gestures which are simple to demonstrate and easy to use. The game can be played quietly without voice prompts.

• 50 gorgeous photos of wild animals
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

WildFlowers=><<'END',
Avens, Bugle, Columbine, Eyebright, Gentian, Teasel, Soapwort, Thyme and many more! Do you know your Bellflower from your Bluebell, or your Thistle from your Thrift? This educational game uses 50 photos to teach you the names of 50 common wild flowers found in Europe.

• Entertaining game to teach you to recognize 50 common European wild flowers
• 50 photos
• Race Mode to test your memory
• Slide show mode to show you all the photos in sequence
• Easy on-screen gestures for Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Wild Flowers" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the flowers in sequence, both by colour and alphabetically. Simply slide through the images with your finger on the screen, horizontally, vertically or diagonally. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END

WildFlowersGerman=><<'END',
Avens, Bugle, Columbine, Eyebright, Gentian, Teasel, Soapwort, Thyme and many more! Do you know your Bellflower from your Bluebell, or your Thistle from your Thrift? This educational game uses fifty beautiful photos to teach you the names in German of common wild flowers found in Europe.  Each name is carefully and correctly enunciated by actor Wolfgang Binder.

"Wild Flowers" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the flowers in sequence, both by colour and alphabetically. Simply slide through the images with your finger on the screen, horizontally, vertically or diagonally. Zoom and Pan Mode allows you to magnify the photos and see more detail. Catalogue mode shows you a catalogue of all the flowers. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.

• Entertaining game to teach you to recognize common European wild flowers
• Fifty beautiful photos
• Spoken in correctly enunciated German
• Race Mode to test your memory
• Slide show mode to show you all the photos in sequence
• Easy on-screen gestures for Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

END

WordEndings=><<'END',
An introduction to common word-endings suitable for students from grade 2 onwards and those studying English as a second language. This educational game uses 90 photos of everyday objects to teach students 45 word-endings that are commonly used in the English language, such as -ar (car, jar), -and (hand, sand), -eel (wheel, heel), -ee (bee, tree) and -oor (door, floor).

Students hear a word-ending in use, and have to select a photo which contains an object which also uses the same word ending. When the matching photo has been chosen, students see and hear both words with the endings emphasised. After six right in a row race mode starts automatically: it asks questions at speed to test the students' memory and comprehension of the word-endings just covered, before continuing with new ones. At the end of the race, students can see how well they have done relative to their other races. The game gradually focuses on any word-endings that the student has difficulty recognizing and speeds up as competence is gained.

By contrast to Race Mode, Story Mode slowly introduces new word-endings by saying them as the photos are shown, allowing students to quietly look, listen and learn.

The game is controlled by on-screen gestures which are simple to demonstrate and easy to use, and the game can be played quietly without voice prompts.

• 90 photos paired to illustrate 45 common word-endings
• Race Mode tests memory and comprehension against the clock
• Story Mode allows students to look, listen and learn
• Slide show mode displays all the photos in alphabetical order
• Zoom and Pan Mode magnifies the images to see more detail
• Easy on-screen gestures to control the game
• Context-sensitive help
END

Yawning=><<'END',
Alligator, Baboon, Cheetah, Ferret, Giraffe, Hippopotamus, Otter, Tortoise and many more! This educational game uses 50 amusing photos of animals yawning to teach you the names of a wide variety of animals. Ideal if you are a student learning English or a parent helping your child to learn to read and increase their vocabulary. Enjoy the photos and original music, listen to the names, and choose the correct images.

• Entertaining game to teach you the names of 50 animals
• 50 amusing photos of animals yawning
• Helps to increase vocabulary for children and English language students
• Race Mode to test your memory
• Slide show mode to show you all the photos in sequence
• Easy on-screen gestures for Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode and Help.

"Animals Yawning" is both educational and fun. The game features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races and then Tweet your friends with your best result. Slide show mode shows you all the photos in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts.
END

Yosemite=><<'END',
El Capitan, Half Dome, Nevada Fall, Glacier Point, Grizzly Giant, Mirror Lake and many more! How well do you know Yosemite? Did you know that it has deep valleys, vast meadows, spectacular waterfalls, towering granite cliffs and Giant Sequoia trees? This educational game uses 40 photos to introduce you to the major features of one of the USA's most famous national parks. With interesting spoken facts about each one.

• Entertaining game to introduce you to one of the USA's most famous national parks
• 40 photos
• Interesting spoken facts about each feature
• Race Mode to test your memory
• Slide show mode to show you all the photos and facts in sequence
• Easy on-screen gestures for Facts, Race Mode, Race Results, Slide show mode, Story Mode, Zoom and Pan Mode, Quiet Mode, Wikipedia and Help.

"Yosemite USA" features Race Mode, which asks you questions at speed to test your memory. At the end of the race, you can check how well you have done relative to your other races. Slide show mode shows you all the photos and facts in sequence. Simply slide through the images with your finger on the screen, both horizontally and vertically. Zoom and Pan Mode allows you to magnify the photos and see more detail. Quiet Mode allows you to play this game with or without voice prompts. And you can quickly jump to the relevant page on Wikipedia for more information.
END
 }}

#-------------------------------------------------------------------------------
# Keywords for each app
#-------------------------------------------------------------------------------

sub appKeywords()
 {{
  Addition=>                                 [qw(English appaapps mathematics animation algebra addition)],
  A3LetterWords=>                            [qw(English appaapps words hear write trace recognize vocabulary)],
  A4LetterWords=>                            [qw(English appaapps words hear write trace recognize vocabulary)],
  A5LetterWords=>                            [qw(English appaapps words hear write trace recognize vocabulary)],
  Adjectives=>                               [qw(English adjectives rhyme)],
  Alphabet=>                                 [qw(English alphabet lowercase uppercase letters)],
  AlpineFlowers=>                            [qw(alpine flower pasque scree alps)],
  AnimalAlphabet=>                           [qw(English alphabet animals letters)],
  AnotherDayAnotherSunset=>                  [qw(appaapps music favorite happy)],
  Antarctica=>                               [qw(English appaapps antarctic geography biology)],
  Apes=>                                     [qw(English appaapps ape primate biology)],
  Arches=>                                   [qw(English appaapps arch sandstone utah park usa)],
  Arctic=>                                   [qw(English appaapps antarctic geography biology)],
  BabyAnimals=>                              [qw(English appaapps baby animal)],
  Bathroom=>                                 [qw(English appaapps bathroom travel)],
  Birds=>                                    [qw(English appaapps birds biology)],
  Boats=>                                    [qw(English appaapps boat ship transport)],
  Body=>                                     [qw(English appaapps human body)],
  Bollywood=>                                [qw(English appaapps india actor bollywood)],
  Boots=>                                    [qw(English appaapps clothing fashion shows boots)],
  Bridges=>                                  [qw(English appaapps bridges engineering civil golden gate)],
  BritishRoyalFamily=>                       [qw(English appaapps british royal family)],
  Buildings=>                                [qw(English appaapps town country buildings)],
  Calculus=>                                 [qw(English appaapps calculus differential differentiate integrate integral )],
  CarsCranesTrucksTrains=>                   [qw(English appaapps cars cranes trucks trains)],
  CarsCranesTrucksTrainsGerman=>             [qw(German  appaapps cars cranes trucks trains)],
  Cats=>                                     [qw(English appaapps top cats kittens)],
  Cereals=>                                  [qw(English appaapps top cereals)],
  China=>                                    [qw(English appaapps china)],
  Chocolate=>                                [qw(English appaapps chocolate)],
  Christmas=>                                [qw(English appaapps christmas)],
  Cliffs=>                                   [qw(English appaapps cliffs world)],
  CollectiveNounsInEnglish=>                 [qw(English appaapps collective nouns)],
  Colours=>                                  [qw(English appaapps world colour)],
  CoralReefFish=>                            [qw(English appaapps fish coral reef)],
  CountActionToysInEnglish=>                 [qw(English appaapps count action toys )],
  CountAnimalsInEnglish=>                    [qw(English appaapps count animals )],
  CountChocolatesInEnglish=>                 [qw(English appaapps count chocolates )],
  CountDogsInEnglish=>                       [qw(English appaapps count dogs )],
  CountDollsInEnglish=>                      [qw(English appaapps count dolls )],
  CountEuros=>                               [qw(English appaapps count euros)],
  CountFlowersInEnglish=>                    [qw(English appaapps count flowers )],
  CountFlowersInGerman=>                     [qw(German  appaapps count flowers )],
  CountSoftToysInEnglish=>                   [qw(English appaapps count soft toys )],
  CountTeddyBearsInEnglish=>                 [qw(English appaapps count teddy bears )],
  CountToyDogsInEnglish=>                    [qw(English appaapps count toy dogs )],
  Days=>                                     [qw(English appaapps days week)],
  DaysGerman=>                               [qw(German  appaapps days week)],
  DeathValley=>                              [qw(English appaapps death valley usa)],
  Dogs=>                                     [qw(English appaapps puppies dogs)],
  Dogs50=>                                   [qw(English appaapps top dog breeds)],
  Dunloe=>                                   [qw(English appaapps ride gap dunloe ireland)],
  Eyes=>                                     [qw(English appaapps animal eyes)],
  FamousCityLandmarks=>                      [qw(English appaapps famous city landmarks)],
  FamousLondonLandmarks=>                    [qw(English appaapps famous london landmarks)],
  FlowerAlphabet=>                           [qw(English appaapps easy flower alphabet)],
  Fractions=>                                [qw(English appaapps fractions)],
  Fruits=>                                   [qw(English appaapps fruits and berries)],
  FunFair=>                                  [qw(English appaapps day fun fair)],
  Functions=>                                [qw(English appaapps mathematical functions)],
  GardenFlowers=>                            [qw(English appaapps garden flowers)],
  Gcd=>                                      [qw(English appaapps mathematics animation algebra greatest common divisor)],
  GeographyManmadeFeatures=>                 [qw(English appaapps geography manmade features)],
  GeographyNaturalFeatures=>                 [qw(English appaapps geography natural features)],
  GeometricShapes=>                          [qw(English appaapps geometric shapes)],
  Glacier=>                                  [qw(English appaapps glacier national park usa)],
  GreatOlympians=>                           [qw(English appaapps great olympians)],
  GreatSportsCars=>                          [qw(English appaapps great sports cars)],
  Greek=>                                    [qw(Greek alpha beta gamma letters alphabet)],
  House=>                                    [qw(English appaapps house rooms garden inside outside)],
  HowHeavyAmI=>                              [qw(English appaapps how heavy )],
  HowMuchPowerDoIUse=>                       [qw(English appaapps how much power use)],
  Jets=>                                     [qw(English appaapps Jet plane helicopter hawk harrier raptor eagle falcon)],
  India=>                                    [qw(English appaapps india)],
  LakeDistrict=>                             [qw(English appaapps lake district)],
  ManOnTheMoon=>                             [qw(English appaapps man moon)],
  MarineAquariumFish=>                       [qw(English appaapps marine aquarium fish)],
  MonthsOfTheYearInEnglish=>                 [qw(English appaapps months year)],
  MonthsOfTheYearInGerman=>                  [qw(German  appaapps months year)],
  Noses=>                                    [qw(English appaapps noses)],
  OodlesOfAnimals=>                          [qw(English appaapps lots animals)],
  OrganicMolecules=>                         [qw(English appaapps organic molecules)],
  Parks=>                                    [qw(English appaapps national parks usa)],
  PawsAndClaws=>                             [qw(English appaapps paws claws)],
  Penguins=>                                 [qw(English appaapps penguins antarctica)],
  PlusOrMinus=>                              [qw(English appaapps maths math plus minus addition subtraction)],
  PuppyDogBreedsOne=>                        [qw(English appaapps model puppy dog breeds )],
  PuppyDogBreedsTwo=>                        [qw(English appaapps model puppy dog breeds )],
  RhymingKitchen=>                           [qw(English appaapps rhyming kitchen)],
  Seasons=>                                  [qw(English appaapps four seasons)],
  Sharks=>                                   [qw(English appaapps sharks)],
  SignsoftheZodiac=>                         [qw(English appaapps signs zodiac)],
  SoftToyAlphabet=>                          [qw(English appaapps easy soft toy alphabet)],
  Subtraction=>                              [qw(English appaapps mathematics animation algebra subtraction)],
  SunMoonsPlanets=>                          [qw(English appaapps sun moons planets)],
  SuperBirds=>                               [qw(English appaapps super birds)],
  SuperFish=>                                [qw(English appaapps super fish)],
  SuperMammals=>                             [qw(English appaapps super mammals)],
  TeddyBearsInAction=>                       [qw(English appaapps teddy bears action)],
  TellTheTime=>                              [qw(English appaapps tell time)],
  TellTheTimeGerman=>                        [qw(German  appaapps tell time)],
  TellTheTimeTwo=>                           [qw(English appaapps tell time two)],
  TestCricketersAustralia=>                  [qw(English appaapps test cricketers australia)],
  TestCricketersIndia=>                      [qw(English appaapps test cricketers india)],
  TheNumbersFrom1To100InEnglish=>            [qw(English appaapps numbers 100)],
  TheNumbersFrom1To100InFrench=>             [qw(French  appaapps numbers 100)],
  ToBeOrNotToBe=>                            [qw(English appaapps hamlet shakespeare to be or not)],
  Top10FastMotorBikes=>                      [qw(English appaapps top fast motor bikes)],
  Top10HighestMountains=>                    [qw(English appaapps top highest mountains)],
  Top10TallestAsiaPacificRollerCoasters=>    [qw(English appaapps top tallest asia pacific roller coasters)],
  Top10TallestEuropeanRollerCoasters=>       [qw(English appaapps top tallest european roller coasters)],
  Top10TallestFerrisWheels=>                 [qw(English appaapps top tallest ferris wheels)],
  Top10TallestNorthAmericanRollerCoasters=>  [qw(English appaapps top tallest north american roller coasters)],
  Top10TallestRollerCoasters=>               [qw(English appaapps top tallest roller coasters)],
  Top10TallestTowers=>                       [qw(English appaapps top tallest towers)],
  Top20HorseBreeds=>                         [qw(English appaapps top horse breeds)],
  ToyTransportAlphabet=>                     [qw(English appaapps easy toy transport alphabet)],
  TraceNumbers09=>                           [qw(English appaapps learning spoken trace numbers)],
  TraceNumbers09InCantonese=>                [qw(Cantonese Chinese learning spoken trace numbers)],
  TraceNumbers09InMandarin=>                 [qw(Mandarin Chinese learning spoken trace numbers)],
  TraceNumbers09InGerman=>                   [qw(German learning numbers teaching)],
  Trees=>                                    [qw(English appaapps trees shrubs flowers bushes)],
  TransportAlphabet=>                        [qw(English appaapps easy transport alphabet)],
  Waterfalls=>                               [qw(English appaapps waterfalls)],
  WeatherVanes=>                             [qw(English appaapps easy weather vane alphabet)],
  WildAnimals=>                              [qw(English appaapps wild animals)],
  WildAnimalsGerman=>                        [qw(German  appaapps wild animals Bat Elephant Frog Hippopotamus Kangaroo Lion Monkey Seal Swan Tiger Zebra amphibian animals bird carnivore fauna fish insect mammal predator raptor reptile safari wild zoo)],
  WildFlowers=>                              [qw(English appaapps wild flowers)],
  WildFlowersGerman=>                        [qw(German  appaapps wild flowers)],
  WordEndings=>                              [qw(English appaapps common word endings)],
  Yawning=>                                  [qw(English appaapps animals yawning)],
  Yosemite=>                                 [qw(English appaapps yosemite national park usa)],
 }}

#-------------------------------------------------------------------------------
# Vodafone product ids for each app
#-------------------------------------------------------------------------------

sub vodafoneCodes
 {{
  A3LetterWords                           => { 1 => "Appa_12655907", 2 => "Appa_12655980", 3 => "Appa_12656097" },
  A4LetterWords                           => { 1 => "Appa_12656153", 2 => "Appa_12656161", 3 => "Appa_12656279" },
  A5LetterWords                           => { 1 => "Appa_12656316", 2 => "Appa_12656326", 3 => "Appa_12656409" },
  Adjectives                              => { 1 => "Appa_12656517", 2 => "Appa_12656531", 3 => "Appa_12656667" },
  AlpineFlowers                           => { 1 => "Appa_12656889", 2 => "Appa_12656951" },
  AnimalAlphabet                          => { 1 => "Appa_12656946", 2 => "Appa_12657052" },
  AnotherDayAnotherSunset                 => { 1 => "Appa_12657081" },
  Antarctica                              => { 2 => "Appa_12657254" },
  Apes                                    => { 1 => "Appa_12657255" },
  Arches                                  => { 1 => "Appa_12657370" },
  Arctic                                  => { 1 => "Appa_12657467", 2 => "Appa_12657605" },
  BabyAnimals                             => { 1 => "Appa_12657424", 2 => "Appa_12657596" },
  Bathroom                                => { 1 => "Appa_12657647", 2 => "Appa_12657749", 3 => "Appa_12657767" },
  Boats                                   => { 1 => "Appa_12657947", 2 => "Appa_12658031" },
  Body                                    => { 1 => "Appa_12658073", 2 => "Appa_12658121" },
  Bollywood                               => { 1 => "Appa_12658197", 2 => "Appa_12658248" },
  Boots                                   => { 1 => "Appa_12658306", 2 => "Appa_12658396" },
  BritishRoyalFamily                      => { 1 => "Appa_12658429" },
  Buildings                               => { 1 => "Appa_12658486", 2 => "Appa_12658559" },
  CarsCranesTrucksTrains                  => { 1 => "Appa_12658616", 2 => "Appa_12658658" },
  Cats                                    => { 1 => "Appa_12658739" },
  Cereals                                 => { 1 => "Appa_12658811" },
  China                                   => { 1 => "Appa_12658841", 2 => "Appa_12658934" },
  Chocolate                               => { 1 => "Appa_12659002", 2 => "Appa_12659013" },
  Christmas                               => { 1 => "Appa_12659133", 2 => "Appa_12659197" },
  Cliffs                                  => { 1 => "Appa_12659194", 2 => "Appa_12659302" },
  CollectiveNounsInEnglish                => { 1 => "Appa_12659348" },
  Colours                                 => { 1 => "Appa_12659401", 2 => "Appa_12659514" },
  CoralReefFish                           => { 1 => "Appa_12659511", 2 => "Appa_12659625" },
  CountActionToysInEnglish                => { 1 => "Appa_12659664" },
  CountAnimalsInEnglish                   => { 1 => "Appa_12659668" },
  CountChocolatesInEnglish                => { 1 => "Appa_12659797", 2 => "Appa_12659818" },
  CountDogsInEnglish                      => { 1 => "Appa_12659816" },
  CountDollsInEnglish                     => { 1 => "Appa_12659956", 2 => "Appa_12659970" },
  CountFlowersInEnglish                   => { 1 => "Appa_12660114" },
  CountSoftToysInEnglish                  => { 1 => "Appa_12660182", 2 => "Appa_12660271" },
  CountTeddyBearsInEnglish                => { 1 => "Appa_12660276" },
  CountToyDogsInEnglish                   => { 1 => "Appa_12660348" },
  Days                                    => { 1 => "Appa_12660401" },
  DeathValley                             => { 1 => "Appa_12660470" },
  Dogs                                    => { 1 => "Appa_12660517", 2 => "Appa_12660573", 3 => "Appa_12660637" },
  Dogs50                                  => { 1 => "Appa_12660692", 2 => "Appa_12660749" },
  Dunloe                                  => { 1 => "Appa_12660825" },
  Eyes                                    => { 1 => "Appa_12660867", 2 => "Appa_12660922" },
  FamousCityLandmarks                     => { 1 => "Appa_12660977", 2 => "Appa_12661034", 3 => "Appa_12661076" },
  FamousLondonLandmarks                   => { 1 => "Appa_12661150", 2 => "Appa_12661203", 3 => "Appa_12661261" },
  FlowerAlphabet                          => { 1 => "Appa_12661318", 3 => "Appa_12661418" },
  Fruits                                  => { 1 => "Appa_12661521", 2 => "Appa_12661584" },
  Functions                               => { 1 => "Appa_12661772", 2 => "Appa_12661878", 3 => "Appa_12661932" },
  FunFair                                 => { 1 => "Appa_12661600", 2 => "Appa_12661720", 3 => "Appa_12661778" },
  GardenFlowers                           => { 1 => "Appa_12661935", 2 => "Appa_12662050" },
  GeographyManmadeFeatures                => { 1 => "Appa_12662108", 2 => "Appa_12662111" },
  GeographyNaturalFeatures                => { 1 => "Appa_12662235", 2 => "Appa_12662275" },
  GeometricShapes                         => { 1 => "Appa_12662284", 2 => "Appa_12662398" },
  Glacier                                 => { 1 => "Appa_12662472" },
  GreatOlympians                          => { 1 => "Appa_12662446", 2 => "Appa_12662573", 3 => "Appa_12662596" },
  GreatSportsCars                         => { 1 => "Appa_12662658", 2 => "Appa_12662750", 3 => "Appa_12662769" },
  HowHeavyAmI                             => { 1 => "Appa_12662840", 2 => "Appa_12662902" },
  HowMuchPowerDoIUse                      => { 1 => "Appa_12662947" },
  India                                   => { 1 => "Appa_12663025", 2 => "Appa_12663080" },
  LakeDistrict                            => { 1 => "Appa_12663146", 2 => "Appa_12663208" },
  ManOnTheMoon                            => { 1 => "Appa_12663275", 2 => "Appa_12663338" },
  MarineAquariumFish                      => { 1 => "Appa_12663383", 2 => "Appa_12663457" },
  MonthsOfTheYearInEnglish                => { 1 => "Appa_12663491" },
  Noses                                   => { 1 => "Appa_12663559", 2 => "Appa_12663613" },
  OodlesOfAnimals                         => { 1 => "Appa_12663697" },
  OrganicMolecules                        => { 1 => "Appa_12663774", 2 => "Appa_12663840", 3 => "Appa_12663895" },
  Parks                                   => { 1 => "Appa_12663999", 2 => "Appa_12664066" },
  PawsAndClaws                            => { 1 => "Appa_12664080", 2 => "Appa_12664170" },
  Penguins                                => { 1 => "Appa_12664233" },
  PuppyDogBreedsOne                       => { 1 => "Appa_12664286" },
  PuppyDogBreedsTwo                       => { 1 => "Appa_12664375" },
  RhymingKitchen                          => { 1 => "Appa_12664393", 2 => "Appa_12664490", 3 => "Appa_12664543" },
  Seasons                                 => { 1 => "Appa_12664551" },
  Sharks                                  => { 1 => "Appa_12664693", 2 => "Appa_12664720" },
  SignsoftheZodiac                        => { 1 => "Appa_12664717" },
  SoftToyAlphabet                         => { 1 => "Appa_12664841", 2 => "Appa_12664866" },
  SunMoonsPlanets                         => { 1 => "Appa_12664936", 2 => "Appa_12665009" },
  SuperBirds                              => { 1 => "Appa_12665061" },
  SuperFish                               => { 1 => "Appa_12665123" },
  SuperMammals                            => { 1 => "Appa_12665203" },
  TeddyBearsInAction                      => { 1 => "Appa_12665247" },
  TellTheTime                             => { 1 => "Appa_12665284" },
  TellTheTimeTwo                          => { 1 => "Appa_12665442" },
  TestCricketersAustralia                 => { 1 => "Appa_12665408", 2 => "Appa_12665475" },
  TestCricketersIndia                     => { 1 => "Appa_12665611", 2 => "Appa_12665626" },
  TheNumbersFrom1To100InEnglish           => { 1 => "Appa_12665632" },
  Top10FastMotorBikes                     => { 1 => "Appa_12665780" },
  Top10HighestMountains                   => { 1 => "Appa_12665810", 2 => "Appa_12665912" },
  Top10TallestAsiaPacificRollerCoasters   => { 1 => "Appa_12665940", 2 => "Appa_12665984" },
  Top10TallestEuropeanRollerCoasters      => { 1 => "Appa_12666117", 2 => "Appa_12666127" },
  Top10TallestFerrisWheels                => { 1 => "Appa_12666141", 2 => "Appa_12666267" },
  Top10TallestNorthAmericanRollerCoasters => { 1 => "Appa_12666322", 2 => "Appa_12666330" },
  Top10TallestRollerCoasters              => { 1 => "Appa_12666440", 2 => "Appa_12666484" },
  Top10TallestTowers                      => { 1 => "Appa_12666482" },
  Top20HorseBreeds                        => { 1 => "Appa_12666641", 2 => "Appa_12666662" },
  ToyTransportAlphabet                    => { 1 => "Appa_12666656" },
  TraceNumbers09                          => { 1 => "Appa_12666779" },
  TransportAlphabet                       => { 1 => "Appa_12666824", 2 => "Appa_12666837", 3 => "Appa_12666984" },
  Waterfalls                              => { 1 => "Appa_12666989", 2 => "Appa_12667002" },
  WeatherVanes                            => { 1 => "Appa_12667137" },
  WildAnimals                             => { 1 => "Appa_12667159", 2 => "Appa_12667182" },
  WildFlowers                             => { 1 => "Appa_12667283", 2 => "Appa_12667316" },
  WordEndings                             => { 1 => "Appa_12667374", 2 => "Appa_12667456", 3 => "Appa_12667498" },
  Yawning                                 => { 1 => "Appa_12667555", 2 => "Appa_12667617" },
  Yosemite                                => { 1 => "Appa_12667686" }
 }}

#-------------------------------------------------------------------------------
# Generate upload XML for Vodafone=Immobile
#-------------------------------------------------------------------------------

my $vodafoneDevices;

sub vodafoneXML($$)
 {my ($app, $subset) = @_;
  my $title = $app->title($subset);
  my $desc  = $app->description;
  my $lang  = join ',', values(%languages);
  my $devf  = $perlDir."z/extractDeviceNamesFromVodafoneSpreadSheet.pm";
  confess "Device file $devf does not exist" unless -e $devf;
  $vodafoneDevices = do($devf) unless $vodafoneDevices;
  my $prcd   = $app->vodafoneCode   ($subset);                                  # Code for app on vodafone
  my $update = $app->sentVodafone($subset) ? "<action>update</action>\n" : "\n";# Update or New

  my $x = <<END;
<?xml version="1.0" encoding="UTF-8"?>
<application>
  <name>$title</name>
  <type>Android</type>
  <provider>Appa Apps Ltd Inc</provider>
  <cat>Education</cat>
  <subcat></subcat>
  <searchkeywords>english,learning</searchkeywords>
  <operator>WW</operator>
  <shortdesc>$desc</shortdesc>
  <longdesc>$desc</longdesc>
  <cla>1076</cla>
  <expirydate></expirydate>
  <activatedate></activatedate>
  <providercode>$prcd</providercode>
  <metadata name="AppsSupportedLanguages" value="$lang"/>
  <metadata name="ContentRating" value="Top Downloaded"/>
  <metadata name="Release Date" value="2014-05-05"/>
  <metadata name="Standard Price" value="free"/>
  <metadata name="Platform" value="android"/>
  <metadata name="Developers website" value="www.appaapps.com"/>
  <metadata name="PGRating" value="General"/>
  <metadata name="version" value="1.0"/>
  <metadata name="Filesize" value="8MB"/>
  <metadata name="Standard Price" value="free"/>
  <wappreview>
    <file_50x50>screenShot_50x50.gif</file_50x50>
    <file_50x50>screenShot_50x50.png</file_50x50>
    <file_500x500>screenShot_500x500.gif</file_500x500>
    <file_500x500>screenShot_500x500.jpg</file_500x500>
  </wappreview>
  <webpreview>
    <file_96x96>screenShot_96x96.jpg</file_96x96>
    <file_96x96>screenShot_96x96.gif</file_96x96>
  </webpreview>
  <handset>
    <device size="7341056">
      <ua>$vodafoneDevices</ua>
      <file>app.apk</file>
      <screenshots>
        <file>screenShot_50x50.gif</file>
        <file>screenShot_50x50.png</file>
        <file>screenShot_500x500.gif</file>
        <file>screenShot_500x500.jpg</file>
        <file>screenShot_96x96.jpg</file>
        <file>screenShot_96x96.gif</file>
      </screenshots>
    </device>
  </handset>
  $update
</application>
END
 }

sub sendVodafone($$$;$)                                                         # Create a zip file containing an app for Vodafone
 {my ($apkSource, $app, $subset, $genAndroid) = @_;                             # $genAndroid is not used but is provided as a standard for all apk movers
  my $N = 15*2**20;                                                             # Maximum size of zip file
  my $g = $app->group;
  my $G = $app->Group;
  my $D = $app->groupDir;
  Log "      Send Vodafone $g $subset";
  my $gs = $g.$subset;                                                          # Directory name for app
  my $dd = $Temp.'apks/Vodafone/';                                              # Directory we will create zip files in
  my $Gg = $D.'/'.$gs;                                                          # Group/group - D is the dummy group mentioned by SreeVani 2014-10-07
  my $td = $dd.$Gg;                                                             # Directory to place assets in
  copyFile($apkSource, "$td/app.apk") if $apkSource;                            # Makes testing faster by excluding the apk gen for the test
  my $sf = $app->icon512($subset);                                              # Icon source
  my $cc = [[qw(50 gif)], [qw(50 png)], [qw(96 gif)], [qw(96 jpg)], [qw(500 gif)], [qw(500 jpg)]];
  for(@$cc)                                                                     # Create icons needed
   {my ($size, $type) = @$_;
    my $tf = "$td/screenShot_${size}x${size}.${type}";
    convertImage($app, $sf, $tf, $size);
   }
  writeFile("$td/app.xml", vodafoneXML($app, $subset));                         # Write XML

  if (1)                                                                        # Zip file - fully qualified
   {my $z = "$dd$D.zip";                                                        # Change to directory and zip r-recurse, v-verbose, p-paths relative, u-update, which alows another app to be added to the archive
    if (-e $z)                                                                  # Rename existing zip file
     {my $s = fileSize($apkSource);                                             # Size of apk
      my $S = fileSize($z);                                                     # Size of existing zip
      if ($s + $S > $N)                                                         # Rename if updated existing file would be too big for Vodafone
       {for(1..100)                                                             # Possible new names
         {my $Z = "$dd$D$_.zip";                                                # New name
          next if -e $Z;                                                        # Skip if new name already exists
          move($z, $Z);                                                         # Rename existing zip
          Advise "        Zip moved to $Z";                                     # Advise that zip file has been renamed
          last;                                                                 # Zip latest apk
         }
       }
     }
    my $c = "cd $dd && zip -rvpu $z $Gg";                                       # Zip command
    my $r = execCommand($c);                                                    # Zip execute
    Confess $r if $?;                                                           # Complain if zip does not work as expected
    Log "        Zipped $gs to $z";                                             # Log current zip
    return $z;
   }
 }

if ($sendVodafone == 1)                                                         # Testing only - we need the apkname from compile
 {my @c;
  bySubset("Send apps to Vodafone", vendorNumber('Vodafone'), sub
   {push @c, &sendVodafone(undef, @_);
   });
  normalFinish "Send Vodafone, now upload @c zip files";
 }


#-------------------------------------------------------------------------------
# Vodafone product ids for each app
#-------------------------------------------------------------------------------

if ($sendVodafone == 2)
 {my $f = 'C:/Phil/vocabulary/supportingDocumentation/Vendors/VodafoneAfrica/vodafone.csv';
  open my $F, "<$f" or die;
  my %l = map {@{[split /\t/]}[3,2]} <$F>;
  my %L;
  byAllApp("Get vodafone ids", sub
   {my ($app) = @_;
    my $g = $app->group;
    my $n = 0;
    for(1..$app->subsets)
     {my $t = $app->title($_);
      if (my $c = $l{$t})
       {$L{$g}{$_} = $c;
       }
      else
       {say STDERR "No code for app $g subset $_";
        $n++
       }
     }
    $n
   });

  say dump({%L});
 }

#-------------------------------------------------------------------------------
# Package apks for vodafone uploads
#-------------------------------------------------------------------------------

if ($sendVodafone == 3)
 {my $max = 1024**2*100;                                                        # 100MB limit per zip
  my @dir = ([]);                                                               # Directory to move each upload to
  my $path = 'E:/Vodafone/';                                                    # Path to data
  my $size = 0;                                                                 # Size of current upload
  byAllApp("Choose upload package for Vodafone", sub
   {my ($app) = @_;                                                             # App
    my $group = $app->group;                                                    # App group
    my $d = $app->groupDir;                                                     # App super directory
    my $m = 0;                                                                  # Missing subsets in this group
    my $u = 0;                                                                  # Upload within section
    for my $s(1..$app->subsets)                                                 # Subset
     {my $a  = "$path$d/$group$s/app.apk";                                      # Apk name
      if (!-e $a)                                                               # Check that the apk exists
       {say STDERR "No $a";
        $m++;                                                                   # Missing apk count
        next;
       }
      my $as = fileSize($a);                                                    # Apk size is the dominant feature
      if ($as + $size > $max)                                                   # Can we fit the lastest apk?
       {push @dir, [[$d, $group, $s, 1+scalar(@dir)]];                          # Append latest apk to current upload in this section
        $size = $as;
       }
      else                                                                      # Start new upload
       {push @{$dir[-1]}, [$d, $group, $s, scalar(@dir)];
        $size += $as;
       }
     }
    $m                                                                          # Show missing subset count for app group
   });

  for(@dir)
   {my @block = @$_;
    for(@block)
     {my ($d, $g, $s, $b) = @$_;                                                # Add this app to the upload
      my $source = "$path$d/$g$s";
      my $target = "$path$b/$g$s";
      makePath($target);                                                        # Create target directory
      say STDERR "copy $source to $target";
      for my $s(glob("$source/*"))                                              # Move each file
       {my $t = $s =~ s/\A$source/$target/r;                                    # Target file
        copyFile($s, $t) or die "Cannot copy $s to $t";
       }
     }
   }
 }

#-------------------------------------------------------------------------------
# AppDF packaging for AppLand/Opera/SlideMe
#-------------------------------------------------------------------------------

sub appDFScreenShots                                                            # Screenshots definition
 {my $s = '';
  for(1..@_)
   {my $source = $_[$_-1];
    my ($x, $y) = imageSize($source);
    $x /= 2;
    $y /= 2;
    $s .= "<screenshot width=\"$x\" height=\"$y\" index=\"$_\">s$_.jpg</screenshot>\n";
   }
  $s
 }

sub appDFApp($$$$ )                                                             # Description of one app in AppDF format
 {my ($apk, $app, $subset, $genAndroid) = @_;                                   # App, subset, Opera, directory to work in
  my $v = vendorCode($genAndroid);
  my $g = $app->group;
  my $G = $app->Group;
  my $d = $Temp."apks/$v/";                                                     # Directory name for vendor
  my $n = "$g$subset";                                                          # App name
  my $D = "$d$n";                                                               # Directory name for app in file system
  makePath($D);
  my @s = $app->screenShots;                                                    # Screenshots
  my $i = $app->icon512($subset);                                               # Icon
  my $s = appDFScreenShots(@s);
  my $T = '';                                                                   # Titles by language
  for my $l(sort keys %languages)
   {my $t = $app->title($subset, $l, 1);
    $T .= <<END;
  <description-localization language="$l">
    <texts>
      <title>$t</title>
    </texts>
  </description-localization>
END
   }

  if ($apk)                                                                     # Copy apk into position
   {my $s = $apk;
    my $t = "$D/apk.apk";
    copyFile($s, $t);
   }

  if (1)                                                                        # Copy icon into position
   {my $s = $i;
    my $t = "$D/icon.png";
    copyFile($s, $t);
   }

  for(1..@s)                                                                    # Copy screenshots into position
   {my $s = $s[$_-1];
    my $t = "$D/s$_.jpg";
    convertImageHalf($s, $t);
   }

  my $package         = $app->packageName($subset, $genAndroid);                # Package name
  my $title           = $app->title($subset);                                   # Title in English
  my $titles          = $T;                                                     # Titles in each language
  my $description     = $app->description;                                      # Description
  my $longDescription = $app->longDescription;                                  # Long description
  my $icon512         = $i;                                                     # Icon
  my $screenShots     = $s;                                                     # Screenshots

  my $text = <<END;
<?xml version="1.0" encoding="UTF-8"?>

<application-description-file version="1">
<application platform="android" package="$package">

  <categorization>
    <type>application</type>
    <category>education</category>
  </categorization>

  <description>
    <texts>
      <title>$title</title>
      <title>$title</title>
      <keywords>appaapps, english, learning</keywords>
      <short-description>$description</short-description>
      <full-description>$longDescription</full-description>
      <features>
        <feature>Zoom</feature>
        <feature>Pan</feature>
        <feature>Slide show</feature>
      </features>

      <recent-changes></recent-changes>
      <privacy-policy href="http://legal.yandex.com/privacy/">We won't share information about you, your account or your email addresses with anyone. Period.</privacy-policy>
    </texts>
    <images>
      <app-icon width="512" height="512">icon.png</app-icon>
      <screenshots>
        $screenShots
      </screenshots>
    </images>
  </description>

  $titles

  <content-description>
    <content-rating>3</content-rating>
    <content-descriptors>
      <cartoon-violence>no</cartoon-violence>
      <realistic-violence>no</realistic-violence>
      <bad-language>no</bad-language>
      <fear>no</fear>
      <sexual-content>no</sexual-content>
      <drugs>no</drugs>
      <gambling-reference>no</gambling-reference>
      <alcohol>no</alcohol>
      <smoking>no</smoking>
      <discrimination>no</discrimination>
    </content-descriptors>
    <included-activities>
      <in-app-billing>no</in-app-billing>
      <gambling>no</gambling>
      <advertising>yes</advertising>
      <user-generated-content>no</user-generated-content>
      <user-to-user-communications>no</user-to-user-communications>
      <account-creation>no</account-creation>
      <personal-information-collection>no</personal-information-collection>
    </included-activities>
  </content-description>

  <availability></availability>

  <price free="yes"></price>

  <apk-files>
    <apk-file>apk.apk</apk-file>
  </apk-files>

  <testing-instructions>
  </testing-instructions>

  <consent>
    <google-android-content-guidelines>yes</google-android-content-guidelines>
    <us-export-laws>yes</us-export-laws>
    <slideme-agreement>yes</slideme-agreement>
    <free-from-third-party-copytighted-content>yes</free-from-third-party-copytighted-content>
    <import-export>yes</import-export>
  </consent>

  <customer-support>
    <phone>123456789</phone>
    <email>support\@appaapps.com</email>
    <website>http://www.appaapps.com</website>
  </customer-support>

  <store-specific>
    <amazon>
      <form-factor>all</form-factor>
      <free-app-of-the-day-eligibility>yes</free-app-of-the-day-eligibility>
      <apply-amazon-drm>yes</apply-amazon-drm>
      <kindle-support>
        <kindle-fire-first-generation>yes</kindle-fire-first-generation>
        <kindle-fire>yes</kindle-fire>
        <kindle-fire-hd>yes</kindle-fire-hd>
        <kindle-fire-hd-8-9>yes</kindle-fire-hd-8-9>
      </kindle-support>
      <binary-alias>Version 1</binary-alias>
    </amazon>
    <slideme>
    </slideme>
  </store-specific>
</application>
</application-description-file>
END
  writeUnicode("$D/description.xml", $text);                                    # Write XML
  my $c = "cd $D && zip -8 -rvpu ../$n.zip *";                                  # Zip command
  my $r = execCommand($c);                                                      # Zip execute
  Carp $r if $?;                                                                # Complain if zip does not work as expected
  my $source = "$d$n.zip";                                                      # Created zip file
  my $target = "$d$n.appdf";                                                    # Renamed as AppDF
  move($source, $target);                                                       # Perform rename
  if ($amazonEC2)                                                               # Save in S3 if we are on AWS
   {my $s = "Apks/$v/$G/$n.appdf";                                              # File on S3
    sendFileS3("AppaApps", $s, $target);                                        # Send package to S3
    my $c = "rm -r $D";                                                         # Command to remove packaging directory to save space on EC2
    execCommand($c);                                                            # Execute remove command
    Log "    App $g $subset packaged as $target sent to $s";
   }
  else
   {Log "    App $g $subset packaged to $target";
   }
  1
 }

sub appDF($$$$)                                                                 # Description of one app in AppDF format
 {my ($apk, $app, $subset, $genAndroid) = @_;                                   # Apk, App, subset, Vendor
  appDFApp($apk, $app, $subset, $genAndroid);                                   # One app
 }

if ($sendAppDF == 2)                                                            # Package using AppDF
 {my $genAndroid = vendorNumber(qw(AppLand));
  my $n = 0;
  bySubset("Send AppDF", $genAndroid, sub
   {my ($app, $subset, $genAndroid, ) = @_;
    $n += appDFApp(undef, $app, $subset, $genAndroid);                          # One app
   });
  normalFinish "AppDF: $n apps packaged";
 }

=pod

 How To Use:
   Write facts and mark up facts file, check spelling
   Put the photos, videos, icons for the app into: supportingDocumentation/images/$group/
   Create app description in this file, including description of app, Amazon Ids and Amazon Keys, things in app
   Add one liner, description, keywords at the end of this file
   Print recording list and record to get audio
   Crop images, image focii/lines: printCoordinates=1, select focal points, run imageCoordinatesAnalysis.pl, install coords in Midlet.java
   Paste Java generated from facts file into Midlet.java and add app description
   Translate source strings, facts, titles
   Compile for screen shots then adb=1 to pull them off - screen shot by placing two fingers on the screen to zoom and pan the image into position, then tap with a third finger to get take the shot, tap at the left or right edge of the screen to advance or regress the images.
   Test and Upload

 KeyStore: Amazon App Store: Security Profiles: Appa Apps: Android/Kindle Settings.  Update keystore/keys

 Choosing Focal Points:
   The image has to be able to transition from one focal point to another
   smoothly so it will only go from a line end point to a line start point if
   they are close together. Points are combined in even/odd pairs to form
   lines. Consequently, lines should radiate from a smaller number of points
   like diameters in a pentagon so that there is a decent probability of
   transitioning onto a new set of lines from each end point.  Randomly
   chosen start and end points will trap the transition on the same line,
   forcing a jump to a new  unconnected focus.

 Translation
   Strings - put //S in text on line with strings needing translation and run with $translate=1,2
   Facts - run with $translateFacts=1,2 unfortunately has to be done app by app which made sense at the start but less so now
   Titles - run with $translateTitles=1,2 unfortunately necessary to get the subset titles translated for construction of the android manifest
   oneLiners - use translateStuff=3
   Html - run with $translateHtml=1 and then $sendAppApps > 0 to upload to www.appaapps.com

 Compile on Amazon EC2:
   Sync Vocabulary to S3 - keep running it until no more files go up
   Start m2.xlarge Ubuntu AMI with just the default 8GB volume because all the action happens in /run/shm/phil which is in the instance's memory
   Make sure that s3://AppaApps/Compile/vendor has been deleted by life cycle rules or manually as their prescence flags completed compiles
   ssh to the instance

   The commands to create the environment and do the compiles is in this local file:
   /home/phil/vocabulary/supportingDocumentation/perl/zCreateEnvironmentOnAWS.sh
   bash /home/phil/vocabulary/supportingDocumentation/perl/zCreateEnvironmentOnAWS.sh

   Use the top command to see cpu usage
   When the memory runs out on the m2, rm -r vocabulary* and then repeat the line above. Do this with care as it would destroy the local environment.

   Useful commands:
     Connect to EC2:                 ssh -i /home/phil/Amazon/Keys/AmazonKeyPair.pem ubuntu@ec2-50-19-139-176.compute-1.amazonaws.com
     Copy latest genApp.pm from S3:  aws s3 cp s3://AppaApps/Source/2015-05-21-genApp.pm /home/phil/vocabulary/supportingDocumentation/perl/genApp.pm
     Run genApp.pm:                  perl /home/phil/vocabulary/supportingDocumentation/perl/genApp.pm
     Remove progress so far:         remove recursive /home/phil/vocabulary* and then rebuild environment

 Desktop on Amazon EC2 - to upload to Google Play
   Ec2:   vncserver, startlxde
   Local: use remmina specifying VNC, the EC2 domain name for the instance:5901, userid: ubuntu, pw: 121212   where 5901 is the port for vncserver which can be checked with ps aux | grep vnc
   Web browsers available via command: x-www-browser
   Open a terminal in lxde and sudo apt-get install chromium-browser - takes a while - to get a browser installed
   Remmina (for some reason) can only handle one connection at a time

 Privacy Policy
   http://www.appaapps.com/privacyPolicy.html

 To do:
   Consolidate translation
   Re-record wild flowers we can do a lot better

 Installing LXDE on EC2:
   sudo apt-get update
   sudo apt-get install lxde
   sudo apt-get install zip
   sudo start lxdm
   sudo passwd ubuntu
   sudo apt-get install ubuntu-desktop
   sudo apt-get install vnc4server
   vncserver
   vncserver -kill :1
   pico .vnc/xstartup
   vncserver

  javac  -Xlint -cp /home/phil/vocabulary/supportingDocumentation/libs/Colours.jar:/home/phil/vocabulary/supportingDocumentation/libs/Translation.jar:/home/phil/vocabulary/supportingDocumentation/libs/DejaVu.jar:/home/phil/Android/sdk/platforms/android-21/android.jar:/home/phil/vocabulary/supportingDocumentation/libs/amazon-mobile-associates-1.0.64.0.jar:/home/phil/vocabulary/supportingDocumentation/libs/aws-android-sdk-core-2.2.1.jar:/home/phil/vocabulary/supportingDocumentation/libs/aws-android-sdk-mobilenalytics-2.2.1.jar:/home/phil/vocabulary/supportingDocumentation/libs/aws-android-sdk-s3-2.2.1.jar:/home/phil/vocabulary/supportingDocumentation/libs/json-simple-1.1.1.jar:/home/phil/Amazon/sdk/Android/GameCircle/GameCircleSDK/libs/AmazonInsights-android-sdk-2.1.26.jar:/home/phil/Amazon/sdk/Android/GameCircle/GameCircleSDK/libs/gamecirclesdk.jar:/home/phil/Amazon/sdk/Android/GameCircle/GameCircleSDK/libs/login-with-amazon-sdk.jar:/home/phil/vocabulary/src -d /home/phil/vocabulary/src/z %f

=cut
