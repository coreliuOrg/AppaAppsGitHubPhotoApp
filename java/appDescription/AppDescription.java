//------------------------------------------------------------------------------
// Create an app description
// Philip R Brenan at gmail dot com, Appa Apps Ltd, 2017
//------------------------------------------------------------------------------
package com.appaapps;
import  java.io.File;
import  java.util.Stack;
import  java.util.TreeMap;

public class AppDescription                                                     //C Description of an app
 {App app;                                                                      // App description
  public Stack<PhotoFact> photoFacts = new Stack<PhotoFact>();                  // Multiplied table of all valid combinations of photos and facts
  public Stack<Fact>      facts      = new Stack<Fact>     ();                  // Facts
  public Stack<Photo>     photos     = new Stack<Photo>    ();                  // Photos

  public class Cmd                                                              //C Generic command
   {public String name;                                                         // Name of command
    public PhotoBytes photoBytes;                                               // Image content for this cmd
    public TreeMap<String,String> soundBytes;                                   // Sound content for this cmd by speaker name + speaker variant or sounds/ if the author has supplied a sound file
   }

  public class PhotoFact                                                        //C Description of a photo fact
   {public final Photo photo;                                                   // Referenced photo
    public final Fact  fact;                                                    // Referenced fact
    PhotoFact(Photo photo, Fact fact)
     {this.photo = photo;
      this.fact  = fact;
      photoFacts.push(this);
     }
    public String toString()                                                    //M PhotoFact as string
     {return "PhotoFact("+photo.title+","+fact.title+")";
     }
   }

  public class App extends Cmd {                                             // Outline description of an app
    public String author;                                                       // <p>The name of the person who wrote this app which should be the name of the repository containing the app. Thus if the name of the repository is: <p><table border=0> philiprbrenan/GoneFishing </table> <p>then the author of the app will be: <p><table border=0> philiprbrenan </table> <p>The app generation process will inform you of the correct name if you get it wrong.
    public String description;                                                  // <p>A slightly longer description for the app often used for the short description on <a href="https://play.google.com/store"><bold>Google Play</bold></a>.
    public String email;                                                        // <p>The email address of this app so that students have somewhere to send suggestions, corrections or complaints
    public Integer emphasis;                                                    // <p>Generate slower, more emphatic speech for some items so that a student who did not understand the normal fast speech version can be given a slower, more comprehensible version on redirect. <p>Code a number for the value of this keyword: any phrase that has fewer characters than this number will cause both normal and emphasized versions of the speech to be generated. Phrases longer than this number will only cause a normal version of the speech to be generated. <p>If you omit this keyword or code a value of zero then only normal speech versions will be generated.
    public String enables;                                                      // <p>The names of apps that the user might enjoy playing after completing this app. If the student appears to have mastered all the material in this app the app will start playing one of these apps instead.
    public String fullNameOnGooglePlay;                                         // <p>The full name of the the app on <a href="https://play.google.com/store"><bold>Google Play</bold></a>. This is set by default for you to the standard value of: <b><reverseDomain>.photoapp</b>.&lt;github path to your sourceFile.txt&gt; <p>Use this keyword to change this name to something else in the unlikely event that you want to use a different name on Google Play for your app.
    public String help;                                                         // <p>Use this keyword to specify the URL of a web page where the student can find more information about the app, its purpose, how to use it, who wrote it, the sponsoring organizations, their contact details etc. <p>See also: the <a href="#cmdKeyDef_app_title"> app.title= </a> keyword and the <a href="#cmdKeyDef_app_logoText"> app.logoText= </a> keyword.
    public String icon;                                                         // <p>If the URL starts with <b>https?://</b> then this is the location of the icon image on the World Wide Web from whence it will be copied and scaled to the right size. If the URL starts with <b>github:</b> it comes from the specified repository on <a href="https://github.com">GitHub</a>. Otherwise it is the name of the file in the <a href="#atip">images</a> folder in the <a href="https://github.com">GitHub</a> repository for this app which contains the icon for this app.
    public String imageFormat;                                                  // <p>By default use the <b>jpx</b> (jpeg extended) image format to display photos at high resolution on the Android. Your <b>jpg</b> and <b>png</b> images will be automatically converted to use the <b>jpx</b> format by the app build process so no action is required of you to use this format. <p>If you do not want to use <b>jpx</b>, code this keyword with a value of <b>jpg</b> to instruct the build process to use the <b>jpg</b> format to represent images. If you supply photos in the <b>png</b> format the build process will automatically convert them to <b>jpg</b> for you for use on Android.
    public String language;                                                     // <p>The <a href="AWSPollySpeakers.html#speakersByCode">two character code</a> which describes the language this app is written in. All the voices that speak this language will be used to speak the app unless the <a href="http://www.coreliu.org/howToWriteAnApp.html#cmdKeyDef_app_speakers">app.speakers=</a> keyword is used to specify the speakers that you actually require. <p>The one exception to this rule is English, which is spoken by just Amy and Brian unless you specify otherwise.
    public Integer levels;                                                      // <p>This keyword currently has no effect. <p>The number of levels in the game. Each photo has a level and only comes into play when the student reaches that level of play. You can specify the level for each photo manually using the <a href="#cmdKeyDef_photo_level">photo.level=</a> keyword. Or you can use this keyword to specify the number of levels in the game and have the app generation system allocate photos to each level based on their position in <a href="#sft"><bold>sourceFile.txt</bold></a>. <p>If the number of levels is not specified it defaults to one: in this case all the photos are in play as soon as the app starts.
    public String logoText;                                                     // <p>When the app starts for the first time it downloads its content from the Internet which might take a moment or two. The app covers any delay by showing the name of the app and the name of the sponsoring organization on the splash screen. <p> Use this keyword to show a small amount of text identifying your organization. The app will scale this text to fit the screen, so if you want the name to be in large visible letters it must contain only a few characters. Conversely, long names will be shrunk down to fit the display and will probably be unreadable. <p>See also: the <a href="#cmdKeyDef_app_title"> app.title= </a> keyword and the <a href="#cmdKeyDef_app_help"> app.help= </a> keyword.
    public String maxImages;                                                    // <p>The maximum number of images to show in one selection at a time in the app: choose a value that reflects how many images a competent student might reasonably scan in 30 seconds
    public Integer maximumRaceSize;                                             // <p>The maximum possible number of questions that can occur in a race. Otherwise, the default is the total number of <a href="#cmdDef_photo">photo</a> commands in the app. However, the student will only be faced with the maximum possible number of questions once they have made considerable progress through the material in the app as races are restricted to information that the student has already encountered.
    public String menu;                                                         // <p>Specifies which menuing system will be used by this app to interact with the user: <dl> <dt>rose</dt> <dd>A long press shows a compass rose inviting the user to swipe in the indicated direction to request a specific action. The rose grows until the user is able to read the text labels and swipe allowing all weather use. If the user wishes to take no action they simply lift their finger close to the initial point of contact indicated by the center of the rose.</dd> <dt>page</dt> <dd>A long press shows a 3 x 3 table of white solid text against a black background. Each cell contains a word describing the action that will occur if the user taps in that cell. A long press on a cell high lights that cell so that the user knows which cell their finger is closest to. The cell in center is labelled <b>back</b>: the user should tap this cell if they do not wish to accept any of the other actions offered on the menu. </dl>
    public String musicPlay;                                                    // <p>Specifies if and when music is played to the user during their use of the app: <dl> <dt>never</dt> <dd>Music is never played to the user.</dd> <dt>always</dt> <dd>Music is played to the user during races at all levels of play.</dd> <dt>initially</dt> <dd>Music is played during races when the user is new to the app but is heard less often as the user makes progress with the app. <dt>finally</dt> <dd>The opposite of <b>initially</b>. Music is played more frequently during races as the user becomes more familiar with the app. </dd> </dl> <p>The actual music heard by the user is determined by the value of the <a href="#cmdKeyDef_app_musicUrl">musicUrl</a> keyword. <p>Please note that it will be difficult for the user to recognize when they are in race mode versus normal play mode if no music is being played in the background during the race.
    public Integer musicSpeechVolume;                                           // <p>A factor to scale the music and speech volumes. If present and between 0 and 99 the music volume is reduced by that amount relative to the speech volume. If between 101 and 200 this is the percentage to reduce the speech by relative to the music. Thus, if you find that the music you have produced is a little too quiet compared to the speech a value of 120 might be a good point choice to reduce the speech volume a little.
    public String musicUrl;                                                     // <p>A url identifying a zip file containing <b>mp3</b> sound files that might be played as background music to the user as specified by the <a href="#cmdKeyDef_app_musicPlay">music</a> keyword. For instance if the app were teaching the user to identify birds by their songs, the music might consist of background noises such as wind or traffic which might complicate recognition in real life. <p>If this keyword is omitted then the default music will be played to the user unless <a href="#cmdKeyDef_app_musicPlay">app.musicPlayUrl=never</a>
    public String name;                                                         // A short name for this app which matches the path in your repository to the relevant <a href="#sft"><bold>sourceFile.txt</bold></a> with all the forward slashes replaced by dots. Thus, if the full name of the source file in the repository is: <p><table border=0> philiprbrenan/GoneFishing/l/en/sourcefile.txt </table> <p>then the name of the app will be: <p><table border=0> GoneFishing.l.en </table> <p>The app generation process will inform you of the correct name if you get it wrong.
    public String ordered;                                                      // <p>Determines the order in which photos will be displayed during a <a href="#cmdKeyDef_app_rightInARow">race</a>. When not racing, that is, in free play, your app will tend to select the next photo to display to the student based on how badly the student has recognized the photo in the past. During a race the next photo to be presented to the student will be chosen depending on the value of this keyword: <p><dl> <dt>always</dt> <dd>The photos are <b>always</b> presented in the order they are written in the app source file. There might be gaps in the sequence, but the order will always match that of the app source file. </dd> <dt>initially</dt> <dd>As with <b>always</b>, the photos are initially presented in the order they are written in the app source file, but that order is disrupted ever more and more as the students level of play reaches level <b>7</b>. </dd> <dt>finally</dt> <dd>The opposite of <b>initially</b>. The photos are initially presented in random order but the app source file order is applied ever more strictly as the student's level of play reaches level <b>7</b>. </dd> <dt>never</dt> <dd>In early races the photos are shown on the basis of how well the student knows them. In later races the photos the student knows least are shown first, </dd> </dl>
    public String prerequisites;                                                // <p>The names of apps that perhaps the user ought to play first, listed in play order separated by spaces. If the student does not appear to be making much progress with the existing app, the app will start playing one of these apps instead.
    public Integer rightInARow;                                                 // <p>The number of questions the student must answer correctly in a row to trigger race mode. A value of zero means that race mode is never used. The default is <b>3</b> because it makes demonstrations and testing easier, but for real use a value of <b>5</b> or even <b>7</b> might be be more appropriate. <p>If a student (or author) is so good at playing an app that they are able to get into race mode three times in succession without making any mistakes, then the app moves play to level <b>4</b>. If the player repeats the feat then play is moved to level <b>7</b>. This has the effect of allowing demonstrators to quickly show how play progresses and makes life more interesting for students who already know most of the material. <p id=normalPlayMode>In normal free play the student receives new items of information every time they answer a question correctly the first time the question is posed; otherwise correct answers are provided for questions that the student is unable to answer correctly themselves. <p id=raceMode>During a race, no new items of information are presented: the race continues as long as the student does not make too many mistakes or until all the items that the student has previously identified correctly have been presented. Race mode questions are presented with less delay than normal questions. <p>The order in which photos are presented during a race is determined by the <a href="#cmdKeyDef_app_ordered">ordered</a> keyword. <p>The race start with quiet background music. As the race proceeds, the music gets louder and the questions become more difficult as measured by how often the student has correctly identified the items in the past. <p>The objective of a race is to set a personal best time for completing a race through all the items in the app without errors. <p>At the end of race, the student is congratulated if they did not make too many mistakes. Occasionally the student is given an opportunity to email all their friends with details of the app they are playing so perhaps spreading usage of your app through free "word of mouth advertising". <p>Play then reverts to normal free play mode.
    public String saveScreenShotsTo;                                            // <p>Code this keyword in the unlikely event that if you would like screen shots taken in the app to be saved to a different <a href="https://github.com">GitHub</a> repository. Code the <a href="https://github.com">GitHub</a> user name, followed by '/', the repository name, optionally followed by a path which will be prefixed to the screen shot name. <p>This feature only works for the first two hours after an app has been created: after that the app plays normally.
    public String screenShots;                                                  // <p>Screen shot mode is enabled if this keyword is present with any value or indeed no value. See: the <a href="#cmdKeyDef_photo_screenShot"> photo.screenShot= </a> keyword for full details. <p>See also the <a href="#cmdKeyDef_app_saveScreenShotsTo"> app.saveScreenShotsTo= </a> keyword for details of how to specify an alternate repository in which to save screen shots.
    public String speaker;                                                      // <p>If this keyword is present the app shows all the items in alphabetical order and says the value of the <a href="#cmdKeyDef_photo_title">photo.title=</a> keyword for the photo the user taps on using the voice of the first <a href="AWSPollySpeakers.html#speakersByName">speaker</a> named as the value of this keyword or using the voice of <b>Amy</b> if no other valid speaker name has been supplied. <p>This is useful for app testing and also if you have temporarily lost your voice. <p><a href="https://github.com/philiprbrenan/speaker">Here is an example of this kind of app.</a>
    public String speakers;                                                     // <p>The <a href="AWSPollySpeakers.html#speakersByName">Ids</a> of the voices to be used to speak the app or all the speakers in the language set by <a href="#cmdKeyDef_app_language">app.language=</a> keyword.
    public String test;                                                         // <p>Once you have created and published an app any further successful changes to this app will be transmitted directly to your active students. You might prefer to test the new version of your app first before making the changes publicly visible. To achieve this, code: <p>test = a description of the changes <p>Once you are satisfied with the changes you have made, you should comment out this keyword as in: <p># test = a description of the changes <p>so that a successful generation will update all active copies of the app. You might find it helpful to update the <a href="#cmdKeyDef_app_version">app.version=</a> to describe the new features in the app for posterity. <p>Please note that <b>test</b> apps will be deleted without notice from servers to free space if necessary.
    public String title;                                                        // <p>The title for this app. This title will be displayed on the splash screen when the app starts for the first time and also under the icon representing this app on the student's phone or tablet. The title should be short, like a newspaper headline, as in: <p><table border=0 cellspacing=10 cellpadding=10 class=codeBack> <tr><td align=center class=codeBack><image src="images/sampleIcon.png" width=64 height=64> <tr><td align=center class=codeBack>Robots Invade London </table> <p>See the <a href="#cmdKeyDef_app_logoText"> app.logoText= </a> keyword for details of how you can further modify the splash screen.
    public String translations;                                                 // <p>Offer the user a choice of languages in which the app can be played. The <a href="#sft"><bold>sourceFile.txt</bold></a> files for the translated apps should be held in folders <b>l/LC</b>below the main source file for the app where <b>LC</b> is the two letter language code as shown in: <a href="AWSPollySpeakers.html#speakersByCode">speakers by code</a>. <p>If <b>all</b> is chosen as the value of this keyword, then all the languages supported by <AWSPolly> will be offered.
    public String version;                                                      // <p>A sentence describing what is in this version of the app. See all also the <a href="#cmdKeyDef_app_test">app.test=</a> keyword.
    public Integer wrongRight;                                                  // <p>The number of wrong answers it takes to trigger the wrong right comparison display. A value of one means that the wrong right comparison display is triggered immediately after every wrong answer.
    public String toString()                                                    //M String representation of class
     {final StringBuilder s = new StringBuilder();
      s.append(", name="+name);                                                 // A short name for this app which matches the path in your repository to the relevant <a href="#sft"><bold>sourceFile.txt</bold></a> with all the forward slashes replaced by dots. Thus, if the full name of the source file in the repository is: <p><table border=0> philiprbrenan/GoneFishing/l/en/sourcefile.txt </table> <p>then the name of the app will be: <p><table border=0> GoneFishing.l.en </table> <p>The app generation process will inform you of the correct name if you get it wrong.
      s.append(", title="+title);                                               // <p>The title for this app. This title will be displayed on the splash screen when the app starts for the first time and also under the icon representing this app on the student's phone or tablet. The title should be short, like a newspaper headline, as in: <p><table border=0 cellspacing=10 cellpadding=10 class=codeBack> <tr><td align=center class=codeBack><image src="images/sampleIcon.png" width=64 height=64> <tr><td align=center class=codeBack>Robots Invade London </table> <p>See the <a href="#cmdKeyDef_app_logoText"> app.logoText= </a> keyword for details of how you can further modify the splash screen.
      s.append(", logoText="+logoText);                                         // <p>When the app starts for the first time it downloads its content from the Internet which might take a moment or two. The app covers any delay by showing the name of the app and the name of the sponsoring organization on the splash screen. <p> Use this keyword to show a small amount of text identifying your organization. The app will scale this text to fit the screen, so if you want the name to be in large visible letters it must contain only a few characters. Conversely, long names will be shrunk down to fit the display and will probably be unreadable. <p>See also: the <a href="#cmdKeyDef_app_title"> app.title= </a> keyword and the <a href="#cmdKeyDef_app_help"> app.help= </a> keyword.
      s.append(", help="+help);                                                 // <p>Use this keyword to specify the URL of a web page where the student can find more information about the app, its purpose, how to use it, who wrote it, the sponsoring organizations, their contact details etc. <p>See also: the <a href="#cmdKeyDef_app_title"> app.title= </a> keyword and the <a href="#cmdKeyDef_app_logoText"> app.logoText= </a> keyword.
      s.append(", ordered="+ordered);                                           // <p>Determines the order in which photos will be displayed during a <a href="#cmdKeyDef_app_rightInARow">race</a>. When not racing, that is, in free play, your app will tend to select the next photo to display to the student based on how badly the student has recognized the photo in the past. During a race the next photo to be presented to the student will be chosen depending on the value of this keyword: <p><dl> <dt>always</dt> <dd>The photos are <b>always</b> presented in the order they are written in the app source file. There might be gaps in the sequence, but the order will always match that of the app source file. </dd> <dt>initially</dt> <dd>As with <b>always</b>, the photos are initially presented in the order they are written in the app source file, but that order is disrupted ever more and more as the students level of play reaches level <b>7</b>. </dd> <dt>finally</dt> <dd>The opposite of <b>initially</b>. The photos are initially presented in random order but the app source file order is applied ever more strictly as the student's level of play reaches level <b>7</b>. </dd> <dt>never</dt> <dd>In early races the photos are shown on the basis of how well the student knows them. In later races the photos the student knows least are shown first, </dd> </dl>
      s.append(", levels="+levels);                                             // <p>This keyword currently has no effect. <p>The number of levels in the game. Each photo has a level and only comes into play when the student reaches that level of play. You can specify the level for each photo manually using the <a href="#cmdKeyDef_photo_level">photo.level=</a> keyword. Or you can use this keyword to specify the number of levels in the game and have the app generation system allocate photos to each level based on their position in <a href="#sft"><bold>sourceFile.txt</bold></a>. <p>If the number of levels is not specified it defaults to one: in this case all the photos are in play as soon as the app starts.
      s.append(", maxImages="+maxImages);                                       // <p>The maximum number of images to show in one selection at a time in the app: choose a value that reflects how many images a competent student might reasonably scan in 30 seconds
      s.append(", icon="+icon);                                                 // <p>If the URL starts with <b>https?://</b> then this is the location of the icon image on the World Wide Web from whence it will be copied and scaled to the right size. If the URL starts with <b>github:</b> it comes from the specified repository on <a href="https://github.com">GitHub</a>. Otherwise it is the name of the file in the <a href="#atip">images</a> folder in the <a href="https://github.com">GitHub</a> repository for this app which contains the icon for this app.
      s.append(", author="+author);                                             // <p>The name of the person who wrote this app which should be the name of the repository containing the app. Thus if the name of the repository is: <p><table border=0> philiprbrenan/GoneFishing </table> <p>then the author of the app will be: <p><table border=0> philiprbrenan </table> <p>The app generation process will inform you of the correct name if you get it wrong.
      s.append(", email="+email);                                               // <p>The email address of this app so that students have somewhere to send suggestions, corrections or complaints
      s.append(", speakers="+speakers);                                         // <p>The <a href="AWSPollySpeakers.html#speakersByName">Ids</a> of the voices to be used to speak the app or all the speakers in the language set by <a href="#cmdKeyDef_app_language">app.language=</a> keyword.
      s.append(", emphasis="+emphasis);                                         // <p>Generate slower, more emphatic speech for some items so that a student who did not understand the normal fast speech version can be given a slower, more comprehensible version on redirect. <p>Code a number for the value of this keyword: any phrase that has fewer characters than this number will cause both normal and emphasized versions of the speech to be generated. Phrases longer than this number will only cause a normal version of the speech to be generated. <p>If you omit this keyword or code a value of zero then only normal speech versions will be generated.
      s.append(", language="+language);                                         // <p>The <a href="AWSPollySpeakers.html#speakersByCode">two character code</a> which describes the language this app is written in. All the voices that speak this language will be used to speak the app unless the <a href="http://www.coreliu.org/howToWriteAnApp.html#cmdKeyDef_app_speakers">app.speakers=</a> keyword is used to specify the speakers that you actually require. <p>The one exception to this rule is English, which is spoken by just Amy and Brian unless you specify otherwise.
      s.append(", version="+version);                                           // <p>A sentence describing what is in this version of the app. See all also the <a href="#cmdKeyDef_app_test">app.test=</a> keyword.
      s.append(", test="+test);                                                 // <p>Once you have created and published an app any further successful changes to this app will be transmitted directly to your active students. You might prefer to test the new version of your app first before making the changes publicly visible. To achieve this, code: <p>test = a description of the changes <p>Once you are satisfied with the changes you have made, you should comment out this keyword as in: <p># test = a description of the changes <p>so that a successful generation will update all active copies of the app. You might find it helpful to update the <a href="#cmdKeyDef_app_version">app.version=</a> to describe the new features in the app for posterity. <p>Please note that <b>test</b> apps will be deleted without notice from servers to free space if necessary.
      s.append(", description="+description);                                   // <p>A slightly longer description for the app often used for the short description on <a href="https://play.google.com/store"><bold>Google Play</bold></a>.
      s.append(", wrongRight="+wrongRight);                                     // <p>The number of wrong answers it takes to trigger the wrong right comparison display. A value of one means that the wrong right comparison display is triggered immediately after every wrong answer.
      s.append(", rightInARow="+rightInARow);                                   // <p>The number of questions the student must answer correctly in a row to trigger race mode. A value of zero means that race mode is never used. The default is <b>3</b> because it makes demonstrations and testing easier, but for real use a value of <b>5</b> or even <b>7</b> might be be more appropriate. <p>If a student (or author) is so good at playing an app that they are able to get into race mode three times in succession without making any mistakes, then the app moves play to level <b>4</b>. If the player repeats the feat then play is moved to level <b>7</b>. This has the effect of allowing demonstrators to quickly show how play progresses and makes life more interesting for students who already know most of the material. <p id=normalPlayMode>In normal free play the student receives new items of information every time they answer a question correctly the first time the question is posed; otherwise correct answers are provided for questions that the student is unable to answer correctly themselves. <p id=raceMode>During a race, no new items of information are presented: the race continues as long as the student does not make too many mistakes or until all the items that the student has previously identified correctly have been presented. Race mode questions are presented with less delay than normal questions. <p>The order in which photos are presented during a race is determined by the <a href="#cmdKeyDef_app_ordered">ordered</a> keyword. <p>The race start with quiet background music. As the race proceeds, the music gets louder and the questions become more difficult as measured by how often the student has correctly identified the items in the past. <p>The objective of a race is to set a personal best time for completing a race through all the items in the app without errors. <p>At the end of race, the student is congratulated if they did not make too many mistakes. Occasionally the student is given an opportunity to email all their friends with details of the app they are playing so perhaps spreading usage of your app through free "word of mouth advertising". <p>Play then reverts to normal free play mode.
      s.append(", prerequisites="+prerequisites);                               // <p>The names of apps that perhaps the user ought to play first, listed in play order separated by spaces. If the student does not appear to be making much progress with the existing app, the app will start playing one of these apps instead.
      s.append(", enables="+enables);                                           // <p>The names of apps that the user might enjoy playing after completing this app. If the student appears to have mastered all the material in this app the app will start playing one of these apps instead.
      s.append(", fullNameOnGooglePlay="+fullNameOnGooglePlay);                 // <p>The full name of the the app on <a href="https://play.google.com/store"><bold>Google Play</bold></a>. This is set by default for you to the standard value of: <b><reverseDomain>.photoapp</b>.&lt;github path to your sourceFile.txt&gt; <p>Use this keyword to change this name to something else in the unlikely event that you want to use a different name on Google Play for your app.
      s.append(", screenShots="+screenShots);                                   // <p>Screen shot mode is enabled if this keyword is present with any value or indeed no value. See: the <a href="#cmdKeyDef_photo_screenShot"> photo.screenShot= </a> keyword for full details. <p>See also the <a href="#cmdKeyDef_app_saveScreenShotsTo"> app.saveScreenShotsTo= </a> keyword for details of how to specify an alternate repository in which to save screen shots.
      s.append(", saveScreenShotsTo="+saveScreenShotsTo);                       // <p>Code this keyword in the unlikely event that if you would like screen shots taken in the app to be saved to a different <a href="https://github.com">GitHub</a> repository. Code the <a href="https://github.com">GitHub</a> user name, followed by '/', the repository name, optionally followed by a path which will be prefixed to the screen shot name. <p>This feature only works for the first two hours after an app has been created: after that the app plays normally.
      s.append(", maximumRaceSize="+maximumRaceSize);                           // <p>The maximum possible number of questions that can occur in a race. Otherwise, the default is the total number of <a href="#cmdDef_photo">photo</a> commands in the app. However, the student will only be faced with the maximum possible number of questions once they have made considerable progress through the material in the app as races are restricted to information that the student has already encountered.
      s.append(", imageFormat="+imageFormat);                                   // <p>By default use the <b>jpx</b> (jpeg extended) image format to display photos at high resolution on the Android. Your <b>jpg</b> and <b>png</b> images will be automatically converted to use the <b>jpx</b> format by the app build process so no action is required of you to use this format. <p>If you do not want to use <b>jpx</b>, code this keyword with a value of <b>jpg</b> to instruct the build process to use the <b>jpg</b> format to represent images. If you supply photos in the <b>png</b> format the build process will automatically convert them to <b>jpg</b> for you for use on Android.
      s.append(", translations="+translations);                                 // <p>Offer the user a choice of languages in which the app can be played. The <a href="#sft"><bold>sourceFile.txt</bold></a> files for the translated apps should be held in folders <b>l/LC</b>below the main source file for the app where <b>LC</b> is the two letter language code as shown in: <a href="AWSPollySpeakers.html#speakersByCode">speakers by code</a>. <p>If <b>all</b> is chosen as the value of this keyword, then all the languages supported by <AWSPolly> will be offered.
      s.append(", speaker="+speaker);                                           // <p>If this keyword is present the app shows all the items in alphabetical order and says the value of the <a href="#cmdKeyDef_photo_title">photo.title=</a> keyword for the photo the user taps on using the voice of the first <a href="AWSPollySpeakers.html#speakersByName">speaker</a> named as the value of this keyword or using the voice of <b>Amy</b> if no other valid speaker name has been supplied. <p>This is useful for app testing and also if you have temporarily lost your voice. <p><a href="https://github.com/philiprbrenan/speaker">Here is an example of this kind of app.</a>
      s.append(", musicUrl="+musicUrl);                                         // <p>A url identifying a zip file containing <b>mp3</b> sound files that might be played as background music to the user as specified by the <a href="#cmdKeyDef_app_musicPlay">music</a> keyword. For instance if the app were teaching the user to identify birds by their songs, the music might consist of background noises such as wind or traffic which might complicate recognition in real life. <p>If this keyword is omitted then the default music will be played to the user unless <a href="#cmdKeyDef_app_musicPlay">app.musicPlayUrl=never</a>
      s.append(", musicPlay="+musicPlay);                                       // <p>Specifies if and when music is played to the user during their use of the app: <dl> <dt>never</dt> <dd>Music is never played to the user.</dd> <dt>always</dt> <dd>Music is played to the user during races at all levels of play.</dd> <dt>initially</dt> <dd>Music is played during races when the user is new to the app but is heard less often as the user makes progress with the app. <dt>finally</dt> <dd>The opposite of <b>initially</b>. Music is played more frequently during races as the user becomes more familiar with the app. </dd> </dl> <p>The actual music heard by the user is determined by the value of the <a href="#cmdKeyDef_app_musicUrl">musicUrl</a> keyword. <p>Please note that it will be difficult for the user to recognize when they are in race mode versus normal play mode if no music is being played in the background during the race.
      s.append(", musicSpeechVolume="+musicSpeechVolume);                       // <p>A factor to scale the music and speech volumes. If present and between 0 and 99 the music volume is reduced by that amount relative to the speech volume. If between 101 and 200 this is the percentage to reduce the speech by relative to the music. Thus, if you find that the music you have produced is a little too quiet compared to the speech a value of 120 might be a good point choice to reduce the speech volume a little.
      s.append(", menu="+menu);                                                 // <p>Specifies which menuing system will be used by this app to interact with the user: <dl> <dt>rose</dt> <dd>A long press shows a compass rose inviting the user to swipe in the indicated direction to request a specific action. The rose grows until the user is able to read the text labels and swipe allowing all weather use. If the user wishes to take no action they simply lift their finger close to the initial point of contact indicated by the center of the rose.</dd> <dt>page</dt> <dd>A long press shows a 3 x 3 table of white solid text against a black background. Each cell contains a word describing the action that will occur if the user taps in that cell. A long press on a cell high lights that cell so that the user knows which cell their finger is closest to. The cell in center is labelled <b>back</b>: the user should tap this cell if they do not wish to accept any of the other actions offered on the menu. </dl>
      s.append("\n");

      for(Fact  f: facts)          s.append(f.toString()+"\n");
      for(Photo p: photos)         s.append(p.toString()+"\n");
      for(PhotoFact q: photoFacts) s.append(q.toString()+"\n");

      return "App("+s.toString()+")";
     }

    App()                                                                       //C Construct an app description
     {app = this;
     }
   } // App

  public class Fact extends Cmd {                                               // A fact about one or more of the photos that the student can be tested on
    public String aspect;                                                       // <p>The aspect of the photo under consideration which allows facts from different photos to be matched during the wrong/right response display. <p>The aspect of each fact is also used in race mode to test the student once the student has correctly recognized several photos and facts with the same aspect. Thus if you were writing an app about horses, and an aspect of each horse was its country of origin, then: once the student demonstrates that they know the country of origin for several horses, one or more races will occur in which the student is tested on just the country of origin for each horse.
    public String name;                                                         // A short name for this fact which will be matched against photo names as described in <a href="#matchingNames">matching names</a>
    public String remark;                                                       // An explanation of why this fact cannot be used as a question if, in fact, this fact cannot be used as a question
    public String say;                                                          // <p>The actual words that should be said by AWS Polly if this is different from the <a href="#cmdKeyDef_fact_title">fact.title=</a> keyword.
    public String sounds;                                                       // <p>If you prefer to supply your own sound files then use this keyword to specify the location of the mp3 files to use instead of generated speech. See <a href="#cmdKeyDef_photo_sounds">photo.sounds=</a> keyword for full details.
    public String title;                                                        // The text of this fact
    public String titleFile;                                                    // The file name generated from the title to contain the audio for this fact
    public String wiki;                                                         // The URL of the Wikipedia article about this fact
    public String toString()                                                    //M String representation of class
     {final StringBuilder s = new StringBuilder();
      s.append(", name="+name);                                                 // A short name for this fact which will be matched against photo names as described in <a href="#matchingNames">matching names</a>
      s.append(", title="+title);                                               // The text of this fact
      s.append(", titleFile="+titleFile);                                       // The file name generated from the title to contain the audio for this fact
      s.append(", remark="+remark);                                             // An explanation of why this fact cannot be used as a question if, in fact, this fact cannot be used as a question
      s.append(", wiki="+wiki);                                                 // The URL of the Wikipedia article about this fact
      s.append(", aspect="+aspect);                                             // <p>The aspect of the photo under consideration which allows facts from different photos to be matched during the wrong/right response display. <p>The aspect of each fact is also used in race mode to test the student once the student has correctly recognized several photos and facts with the same aspect. Thus if you were writing an app about horses, and an aspect of each horse was its country of origin, then: once the student demonstrates that they know the country of origin for several horses, one or more races will occur in which the student is tested on just the country of origin for each horse.
      s.append(", say="+say);                                                   // <p>The actual words that should be said by AWS Polly if this is different from the <a href="#cmdKeyDef_fact_title">fact.title=</a> keyword.
      s.append(", sounds="+sounds);                                             // <p>If you prefer to supply your own sound files then use this keyword to specify the location of the mp3 files to use instead of generated speech. See <a href="#cmdKeyDef_photo_sounds">photo.sounds=</a> keyword for full details.
      return "Fact("+s.toString()+")";
     }
    Fact()                                                                     //C Construct a fact description
     {facts.push(this);
     }
   } // Fact

  public class Photo extends Cmd {                                              // Description of a photo that illustrates one or more facts
    public String aFewChars;                                                    // <p>One or two characters to display in the centre of the screen either in lieu of a photo or on top of a photo if both image and text have been specified for this photo command. <p>If this keyword is not specified and no <a href="#cmdKeyDef_photo_url">photo.url=</a> keyword is specified, then this keyword will be given a default value of the last element of the value of the name keyword from this command. Thus, if you code: <pre> photo speak.yes = That's right </pre> <p>Then this keyword will have a value of <b>yes</b> as that is the last element of the name of the photo. Names are described <a href="#compsyn">here</a>. Consequently, when you play the app, you will see the word "yes" on the screen.
    public Integer height;                                                      // Height of the image in pixels
    public Integer level;                                                       // <p>This keyword currently has no effect. <p>The level of play at which the student is introduced to this photo and its related facts. If no level is associated with a photo or it has a level of 1 then the photo is introduced at the first level of play. <p>See also: <a href="#cmdKeyDef_app_levels">app.levels=</a> for an automated way of setting the levels of all the photos in the app.
    public String maps;                                                         // Optional URL showing a map of where this photo was taken
    public String name;                                                         // <p>A short name for this photo which will be matched against fact names as described in <a href="#matchingNames">matching names</a>.
    public String pointsOfInterest;                                             // <p>Indicate points of interest in a photo by coding the fractional coordinates of each point of interest as percentages from left to right and top to bottom of the photo separated by white space. <p>For example, the centre of the upper right quadrant is: <pre> 75 25 </pre> <p>The points of interest should be coded in order of decreasing interest, for example: if the centre is the most interesting point in the photo followed by the centre of the upper right quadrant, then code: <pre> 50 50 75 25 </pre> <p>All characters that are not the digits 0..9 will be converted to white space, which means that the above could be coded as: <pre> (50x50), [75 25]; </pre> <p>Any missing coordinates will be assumed to have a value of 50 <p>Points of interest are used (amongst other things) to centre screen shots, as far as possible, on the most interesting point in the photo.
    public String say;                                                          // <p>The actual sequence that should be said by <AWSPolly> if this is different from the content of the <a href="#cmdKeyDef_photo_title">photo.title=</a> keyword. <p><AWSPolly> uses: <a href="https://www.w3.org/TR/2010/REC-speech-synthesis11-20100907/"> Speech Synthesis Markup Language </a> which can be supplied using this keyword <p>Please note that the <a href="#cmdKeyDef_photo_title"> title of the photo</a> is shown in text on some screens, so if this keyword is used the two might diverge.
    public String screenShot;                                                   // <p>Code this keyword if you would like this photo to be made into a screen shot. You will need screen shots to upload your app to distribution web sites. This keyword gives you a convenient way to mark the photos in your app that would make the best screen shots. <p>To actually take screen shots you will needs to code the <a href="#cmdKeyDef_app_screenShots">app.screenShots=</a> keyword to temporarily enable screen shot mode. During screen shot mode, the app shows just the indicated items either centered on their <a href="#cmdKeyDef_photo_pointsOfInterest"> first point of interest</a> or moving so slowly that you can manually swipe the screen to take the shot when the photo is best presented on the screen. <p>By default the screen shots will be placed in your <a href="https://github.com">GitHub</a> repository in: <pre> out/screenShots/photoname.jpg. </pre> <p>However, you can specify an alternate repository in to which screen shots are to be saved, see the <a href="#cmdKeyDef_app_saveScreenShotsTo">app.saveScreenShotsTo=</a> keyword for details. <p>This feature only works for the first two hours after an app has been created: after that the app plays normally.
    public String sounds;                                                       // <p>If you prefer to supply your own sound files instead of having speech generated for you: <ol> <li>Create a folder in your repository called <b>sounds/</b>. <li>Record and edit the sound files you wish to use in <b>mp3</b> format, perhaps using: <a href="https://play.google.com/store/apps/details?id=com.coffeebeanventures.easyvoicerecorder">Easy voice recorder</a> or: <a href="http://www.audacityteam.org/">Audacity</a>. <li>Upload the sound files to the <b>sounds/</b> folder in the your <a href="https://github.com">GitHub</a> repository. <li>Code the names of the sound files as the value of this keyword. The names should not contain spaces or commas. The names should be separated by spaces and/or commas. </ol> <p>Alternatively specify urls starting with <b>http(s):</b> locating an mp3 file to use as the sounds for this photo. <p>The recorded sound will then be played instead of any generated speech. <p>See also <a href="#cmdKeyDef_fact_sounds">fact.sounds=</a> keyword
    public String title;                                                        // <p>The title for this photo. Take care not to use a question! The title of the photo will be used as both a question and an answer by the app and so if you add words such "Is this" or punctuation such as "?" to make it a question then the usage as a question might work, but the usage as an answer will not. <p>The title should be as short as is feasible. If the title contains redundant text which is repeated from photo to photo, then the app becomes an app for teaching the student the redundant text rather than the original material as it is the redundant text that the student will hear the most and thus learn the first. <p>This gives rise to the most important rule of educational game development: <b>everything must change except the truth</b>. <p>Use the <a href="#cmdKeyDef_photo_say">photo.say=</a> keyword if you wish to say something other than the title when describing the photo.
    public String titleFile;                                                    // The file name generated from the title to contain the audio/image for this photo
    public String url;                                                          // <p>This keyword describes the location of a photo to be retrieved and used in this app. <p>If the URL starts with <b>https?://</b> then this is the location of the image on the World Wide Web from whence it will be copied. For example: <pre> https://upload.wikimedia.org/wikipedia/en/7/7d/Bliss.png </pre> <p>If the URL starts with <b>github://</b> then this is the location of the image in another GitHub repository: code the user name, '/', repository name, '/', followed by the path in the repository to the image file. For example: <pre> github://philiprbrenan/vocabulary-1/images/Ant.jpg </pre> <p>Otherwise it is the name of a file in the <a href="#atip">images</a> folder in the <a href="https://github.com">GitHub</a> repository for this app. For example: <pre> Ant.jpg </pre> <p>Photos should be high resolution: crop the photo to centre the object of interest and remove extraneous details. <p>The app will move long thin or tall narrow photos around on the screen so that the student can see all of their contents. This leads to a motion effect which is desirable for apps about skyscrapers, airplanes, bridges, boats, trees etc. as it adds realism. To reduce this effect: crop the photos into squares, to accentuate it: stick photos together in a long line. <p>The student will be able to pan and zoom the photos in the app to see fine details so it is worth using high resolution photos to facilitate this capability. Conversely, low resolution photos will pixellate if the student zooms them. <p>If you include identifiable people in your photos in an app you should get signed model releases from the persons involved. <p>If you do not specify this keyword, then the text of <a href="#cmdKeyDef_photo_url">photo.afewchars=</a> keyword will be displayed. If both keywords are used then the text will be displayed on top of the photo.
    public Integer width;                                                       // Width of the image in pixels
    public String wiki;                                                         // The URL of the Wikipedia article describing the concept this photo illustrates
    public String toString()                                                    //M String representation of class
     {final StringBuilder s = new StringBuilder();
      s.append(", name="+name);                                                 // <p>A short name for this photo which will be matched against fact names as described in <a href="#matchingNames">matching names</a>.
      s.append(", title="+title);                                               // <p>The title for this photo. Take care not to use a question! The title of the photo will be used as both a question and an answer by the app and so if you add words such "Is this" or punctuation such as "?" to make it a question then the usage as a question might work, but the usage as an answer will not. <p>The title should be as short as is feasible. If the title contains redundant text which is repeated from photo to photo, then the app becomes an app for teaching the student the redundant text rather than the original material as it is the redundant text that the student will hear the most and thus learn the first. <p>This gives rise to the most important rule of educational game development: <b>everything must change except the truth</b>. <p>Use the <a href="#cmdKeyDef_photo_say">photo.say=</a> keyword if you wish to say something other than the title when describing the photo.
      s.append(", titleFile="+titleFile);                                       // The file name generated from the title to contain the audio/image for this photo
      s.append(", maps="+maps);                                                 // Optional URL showing a map of where this photo was taken
      s.append(", width="+width);                                               // Width of the image in pixels
      s.append(", height="+height);                                             // Height of the image in pixels
      s.append(", wiki="+wiki);                                                 // The URL of the Wikipedia article describing the concept this photo illustrates
      s.append(", aFewChars="+aFewChars);                                       // <p>One or two characters to display in the centre of the screen either in lieu of a photo or on top of a photo if both image and text have been specified for this photo command. <p>If this keyword is not specified and no <a href="#cmdKeyDef_photo_url">photo.url=</a> keyword is specified, then this keyword will be given a default value of the last element of the value of the name keyword from this command. Thus, if you code: <pre> photo speak.yes = That's right </pre> <p>Then this keyword will have a value of <b>yes</b> as that is the last element of the name of the photo. Names are described <a href="#compsyn">here</a>. Consequently, when you play the app, you will see the word "yes" on the screen.
      s.append(", url="+url);                                                   // <p>This keyword describes the location of a photo to be retrieved and used in this app. <p>If the URL starts with <b>https?://</b> then this is the location of the image on the World Wide Web from whence it will be copied. For example: <pre> https://upload.wikimedia.org/wikipedia/en/7/7d/Bliss.png </pre> <p>If the URL starts with <b>github://</b> then this is the location of the image in another GitHub repository: code the user name, '/', repository name, '/', followed by the path in the repository to the image file. For example: <pre> github://philiprbrenan/vocabulary-1/images/Ant.jpg </pre> <p>Otherwise it is the name of a file in the <a href="#atip">images</a> folder in the <a href="https://github.com">GitHub</a> repository for this app. For example: <pre> Ant.jpg </pre> <p>Photos should be high resolution: crop the photo to centre the object of interest and remove extraneous details. <p>The app will move long thin or tall narrow photos around on the screen so that the student can see all of their contents. This leads to a motion effect which is desirable for apps about skyscrapers, airplanes, bridges, boats, trees etc. as it adds realism. To reduce this effect: crop the photos into squares, to accentuate it: stick photos together in a long line. <p>The student will be able to pan and zoom the photos in the app to see fine details so it is worth using high resolution photos to facilitate this capability. Conversely, low resolution photos will pixellate if the student zooms them. <p>If you include identifiable people in your photos in an app you should get signed model releases from the persons involved. <p>If you do not specify this keyword, then the text of <a href="#cmdKeyDef_photo_url">photo.afewchars=</a> keyword will be displayed. If both keywords are used then the text will be displayed on top of the photo.
      s.append(", say="+say);                                                   // <p>The actual sequence that should be said by <AWSPolly> if this is different from the content of the <a href="#cmdKeyDef_photo_title">photo.title=</a> keyword. <p><AWSPolly> uses: <a href="https://www.w3.org/TR/2010/REC-speech-synthesis11-20100907/"> Speech Synthesis Markup Language </a> which can be supplied using this keyword <p>Please note that the <a href="#cmdKeyDef_photo_title"> title of the photo</a> is shown in text on some screens, so if this keyword is used the two might diverge.
      s.append(", sounds="+sounds);                                             // <p>If you prefer to supply your own sound files instead of having speech generated for you: <ol> <li>Create a folder in your repository called <b>sounds/</b>. <li>Record and edit the sound files you wish to use in <b>mp3</b> format, perhaps using: <a href="https://play.google.com/store/apps/details?id=com.coffeebeanventures.easyvoicerecorder">Easy voice recorder</a> or: <a href="http://www.audacityteam.org/">Audacity</a>. <li>Upload the sound files to the <b>sounds/</b> folder in the your <a href="https://github.com">GitHub</a> repository. <li>Code the names of the sound files as the value of this keyword. The names should not contain spaces or commas. The names should be separated by spaces and/or commas. </ol> <p>Alternatively specify urls starting with <b>http(s):</b> locating an mp3 file to use as the sounds for this photo. <p>The recorded sound will then be played instead of any generated speech. <p>See also <a href="#cmdKeyDef_fact_sounds">fact.sounds=</a> keyword
      s.append(", level="+level);                                               // <p>This keyword currently has no effect. <p>The level of play at which the student is introduced to this photo and its related facts. If no level is associated with a photo or it has a level of 1 then the photo is introduced at the first level of play. <p>See also: <a href="#cmdKeyDef_app_levels">app.levels=</a> for an automated way of setting the levels of all the photos in the app.
      s.append(", screenShot="+screenShot);                                     // <p>Code this keyword if you would like this photo to be made into a screen shot. You will need screen shots to upload your app to distribution web sites. This keyword gives you a convenient way to mark the photos in your app that would make the best screen shots. <p>To actually take screen shots you will needs to code the <a href="#cmdKeyDef_app_screenShots">app.screenShots=</a> keyword to temporarily enable screen shot mode. During screen shot mode, the app shows just the indicated items either centered on their <a href="#cmdKeyDef_photo_pointsOfInterest"> first point of interest</a> or moving so slowly that you can manually swipe the screen to take the shot when the photo is best presented on the screen. <p>By default the screen shots will be placed in your <a href="https://github.com">GitHub</a> repository in: <pre> out/screenShots/photoname.jpg. </pre> <p>However, you can specify an alternate repository in to which screen shots are to be saved, see the <a href="#cmdKeyDef_app_saveScreenShotsTo">app.saveScreenShotsTo=</a> keyword for details. <p>This feature only works for the first two hours after an app has been created: after that the app plays normally.
      s.append(", pointsOfInterest="+pointsOfInterest);                         // <p>Indicate points of interest in a photo by coding the fractional coordinates of each point of interest as percentages from left to right and top to bottom of the photo separated by white space. <p>For example, the centre of the upper right quadrant is: <pre> 75 25 </pre> <p>The points of interest should be coded in order of decreasing interest, for example: if the centre is the most interesting point in the photo followed by the centre of the upper right quadrant, then code: <pre> 50 50 75 25 </pre> <p>All characters that are not the digits 0..9 will be converted to white space, which means that the above could be coded as: <pre> (50x50), [75 25]; </pre> <p>Any missing coordinates will be assumed to have a value of 50 <p>Points of interest are used (amongst other things) to centre screen shots, as far as possible, on the most interesting point in the photo.
      return "Photo("+s.toString()+")";
     }
    Photo()                                                                     //C Construct a photo description
     {photos.push(this);
     }
   } // Photo

  public String toString()                                                      //M String representation of class
   {return app.toString();
   }

// Testing

  public static void main(String[] args)                                        //m Test
   {AppDescription d = new AppDescription();                                    // Create app description

    AppDescription.App a = d.new App();
    a.name  = "test";
    a.title = "test app";

    AppDescription.Fact f1, f2, f3, f4;
    f1 = d.new Fact(); f1.title = "fact one";
    f2 = d.new Fact(); f2.title = "fact two";

    AppDescription.Photo p1, p2;
    p1 = d.new Photo(); p1.title = "photo one";
    p2 = d.new Photo(); p2.title = "photo two";

    AppDescription.PhotoFact q;
    q = d.new PhotoFact(p1, f1);
    q = d.new PhotoFact(p1, f2);
    q = d.new PhotoFact(p2, f1);
//  say("AAAA ", a.toString());

    assert d.toString().contains("name=test");
    say("Hello World\n");
   }

  static void say                                                               //M Say things
   (Object...O)                                                                 //P Things to say
   {final StringBuilder b = new StringBuilder();
    for(Object o: O) b.append(o.toString());
    System.err.println(b.toString());
   }
 } // Unpackappdescription
